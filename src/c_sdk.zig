pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub extern fn __assert([*c]const u8, c_int, [*c]const u8) noreturn;
pub extern fn __assert_func([*c]const u8, c_int, [*c]const u8, [*c]const u8) noreturn;
pub const int_least64_t = i64;
pub const uint_least64_t = u64;
pub const int_fast64_t = i64;
pub const uint_fast64_t = u64;
pub const int_least32_t = i32;
pub const uint_least32_t = u32;
pub const int_fast32_t = i32;
pub const uint_fast32_t = u32;
pub const int_least16_t = i16;
pub const uint_least16_t = u16;
pub const int_fast16_t = i16;
pub const uint_fast16_t = u16;
pub const int_least8_t = i8;
pub const uint_least8_t = u8;
pub const int_fast8_t = i8;
pub const uint_fast8_t = u8;
pub const intmax_t = c_longlong;
pub const uintmax_t = c_ulonglong;
pub const ptrdiff_t = c_int;
pub const wchar_t = c_uint;
pub const max_align_t = extern struct {
    __clang_max_align_nonce1: c_longlong align(8) = @import("std").mem.zeroes(c_longlong),
    __clang_max_align_nonce2: c_longdouble align(8) = @import("std").mem.zeroes(c_longdouble),
};
pub const uint = c_uint;
pub const absolute_time_t = u64;
pub fn to_us_since_boot(arg_t: absolute_time_t) callconv(.c) u64 {
    var t = arg_t;
    _ = &t;
    return t;
}
pub fn update_us_since_boot(arg_t: [*c]absolute_time_t, arg_us_since_boot: u64) callconv(.c) void {
    var t = arg_t;
    _ = &t;
    var us_since_boot = arg_us_since_boot;
    _ = &us_since_boot;
    t.* = us_since_boot;
}
pub fn from_us_since_boot(arg_us_since_boot: u64) callconv(.c) absolute_time_t {
    var us_since_boot = arg_us_since_boot;
    _ = &us_since_boot;
    var t: absolute_time_t = undefined;
    _ = &t;
    update_us_since_boot(&t, us_since_boot);
    return t;
}
pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_longlong;
pub const __uint64_t = c_ulonglong;
pub const __intmax_t = c_longlong;
pub const __uintmax_t = c_ulonglong;
pub const __intptr_t = c_int;
pub const __uintptr_t = c_uint;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:173:28: warning: unable to translate function, demoted to extern
pub extern fn __compiler_memory_barrier() void;
pub extern fn panic_unsupported() noreturn;
pub extern fn panic(fmt: [*c]const u8, ...) noreturn;
pub fn running_on_fpga() callconv(.c) bool {
    return @as(c_int, 0) != 0;
}
pub fn running_in_sim() callconv(.c) bool {
    return @as(c_int, 0) != 0;
}
pub inline fn tight_loop_contents() void {
    asm volatile ("nop");
}
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2350/pico_platform/include/pico/platform.h:87:20: warning: unable to translate function, demoted to extern
pub extern fn busy_wait_at_least_cycles(arg_minimum_cycles: u32) callconv(.c) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2350/pico_platform/include/pico/platform.h:109:28: warning: unable to translate function, demoted to extern
pub extern fn __breakpoint() void;
pub inline fn get_core_num() uint {
    return @as([*c]u32, @ptrFromInt(@as(c_uint, 3489660928) +% @as(c_uint, 0))).*;
}
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2350/pico_platform/include/pico/platform.h:139:28: warning: unable to translate function, demoted to extern
pub extern fn __get_current_exception() uint;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2350/pico_platform/include/pico/platform.h:169:28: warning: unable to translate function, demoted to extern
pub extern fn pico_processor_state_is_nonsecure() bool;
pub extern fn rp2350_chip_version() u8;
pub fn rp2040_chip_version() callconv(.c) u8 {
    return 2;
}
pub fn rp2040_rom_version() callconv(.c) u8 {
    return @as([*c]u8, @ptrFromInt(@as(c_int, 19))).*;
}
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:150:31: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2350/pico_platform/include/pico/platform.h:225:31: warning: unable to translate function, demoted to extern
pub extern fn __mul_instruction(arg_a: i32, arg_b: i32) i32;
pub const PICO_OK: c_int = 0;
pub const PICO_ERROR_NONE: c_int = 0;
pub const PICO_ERROR_GENERIC: c_int = -1;
pub const PICO_ERROR_TIMEOUT: c_int = -2;
pub const PICO_ERROR_NO_DATA: c_int = -3;
pub const PICO_ERROR_NOT_PERMITTED: c_int = -4;
pub const PICO_ERROR_INVALID_ARG: c_int = -5;
pub const PICO_ERROR_IO: c_int = -6;
pub const PICO_ERROR_BADAUTH: c_int = -7;
pub const PICO_ERROR_CONNECT_FAILED: c_int = -8;
pub const PICO_ERROR_INSUFFICIENT_RESOURCES: c_int = -9;
pub const PICO_ERROR_INVALID_ADDRESS: c_int = -10;
pub const PICO_ERROR_BAD_ALIGNMENT: c_int = -11;
pub const PICO_ERROR_INVALID_STATE: c_int = -12;
pub const PICO_ERROR_BUFFER_TOO_SMALL: c_int = -13;
pub const PICO_ERROR_PRECONDITION_NOT_MET: c_int = -14;
pub const PICO_ERROR_MODIFIED_DATA: c_int = -15;
pub const PICO_ERROR_INVALID_DATA: c_int = -16;
pub const PICO_ERROR_NOT_FOUND: c_int = -17;
pub const PICO_ERROR_UNSUPPORTED_MODIFICATION: c_int = -18;
pub const PICO_ERROR_LOCK_REQUIRED: c_int = -19;
pub const PICO_ERROR_VERSION_MISMATCH: c_int = -20;
pub const PICO_ERROR_RESOURCE_IN_USE: c_int = -21;
pub const enum_pico_error_codes = c_int;
pub const io_rw_64 = u64;
pub const io_ro_64 = u64;
pub const io_wo_64 = u64;
pub const io_rw_32 = u32;
pub const io_ro_32 = u32;
pub const io_wo_32 = u32;
pub const io_rw_16 = u16;
pub const io_ro_16 = u16;
pub const io_wo_16 = u16;
pub const io_rw_8 = u8;
pub const io_ro_8 = u8;
pub const io_wo_8 = u8;
pub const ioptr = [*c]volatile u8;
pub const const_ioptr = ioptr;
pub inline fn hw_set_bits(arg_addr: [*c]volatile io_rw_32, arg_mask: u32) void {
    var addr = arg_addr;
    _ = &addr;
    var mask = arg_mask;
    _ = &mask;
    @as([*c]volatile io_rw_32, @ptrCast(@alignCast(@as(?*anyopaque, @ptrFromInt((@as(c_uint, 2) << @intCast(12)) +% @as(usize, @intCast(@intFromPtr(@as(?*volatile anyopaque, @ptrCast(addr)))))))))).* = mask;
}
pub inline fn hw_clear_bits(arg_addr: [*c]volatile io_rw_32, arg_mask: u32) void {
    var addr = arg_addr;
    _ = &addr;
    var mask = arg_mask;
    _ = &mask;
    @as([*c]volatile io_rw_32, @ptrCast(@alignCast(@as(?*anyopaque, @ptrFromInt((@as(c_uint, 3) << @intCast(12)) +% @as(usize, @intCast(@intFromPtr(@as(?*volatile anyopaque, @ptrCast(addr)))))))))).* = mask;
}
pub inline fn hw_xor_bits(arg_addr: [*c]volatile io_rw_32, arg_mask: u32) void {
    var addr = arg_addr;
    _ = &addr;
    var mask = arg_mask;
    _ = &mask;
    @as([*c]volatile io_rw_32, @ptrCast(@alignCast(@as(?*anyopaque, @ptrFromInt((@as(c_uint, 1) << @intCast(12)) +% @as(usize, @intCast(@intFromPtr(@as(?*volatile anyopaque, @ptrCast(addr)))))))))).* = mask;
}
pub inline fn hw_write_masked(arg_addr: [*c]volatile io_rw_32, arg_values: u32, arg_write_mask: u32) void {
    var addr = arg_addr;
    _ = &addr;
    var values = arg_values;
    _ = &values;
    var write_mask = arg_write_mask;
    _ = &write_mask;
    hw_xor_bits(addr, (addr.* ^ values) & write_mask);
}
pub const accessctrl_hw_t = extern struct {
    lock: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    force_core_ns: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    cfgreset: io_wo_32 = @import("std").mem.zeroes(io_wo_32),
    gpio_nsmask: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    rom: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    xip_main: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    sram: [10]io_rw_32 = @import("std").mem.zeroes([10]io_rw_32),
    dma: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    usbctrl: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    pio: [3]io_rw_32 = @import("std").mem.zeroes([3]io_rw_32),
    coresight_trace: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    coresight_periph: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    sysinfo: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    resets: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    io_bank: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    pads_bank0: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    pads_qspi: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    busctrl: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    adc0: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    hstx: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    i2c: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    pwm: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    spi: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    timer: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    uart: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    otp: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    tbman: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    powman: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    trng: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    sha256: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    syscfg: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    clocks: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    xosc: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    rosc: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    pll_sys: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    pll_usb: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    ticks: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    watchdog: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    rsm: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    xip_ctrl: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    xip_qmi: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    xip_aux: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
};
// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub const adc_hw_t = extern struct {
    cs: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    result: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    fcs: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    fifo: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    div: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    intr: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    inte: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    intf: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    ints: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
};
// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub const interp_hw_t = extern struct {
    accum: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    base: [3]io_rw_32 = @import("std").mem.zeroes([3]io_rw_32),
    pop: [3]io_ro_32 = @import("std").mem.zeroes([3]io_ro_32),
    peek: [3]io_ro_32 = @import("std").mem.zeroes([3]io_ro_32),
    ctrl: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    add_raw: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    base01: io_wo_32 = @import("std").mem.zeroes(io_wo_32),
};
// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub const sio_hw_t = extern struct {
    cpuid: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    gpio_in: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    gpio_hi_in: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    _pad0: u32 = @import("std").mem.zeroes(u32),
    gpio_out: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    gpio_hi_out: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    gpio_set: io_wo_32 = @import("std").mem.zeroes(io_wo_32),
    gpio_hi_set: io_wo_32 = @import("std").mem.zeroes(io_wo_32),
    gpio_clr: io_wo_32 = @import("std").mem.zeroes(io_wo_32),
    gpio_hi_clr: io_wo_32 = @import("std").mem.zeroes(io_wo_32),
    gpio_togl: io_wo_32 = @import("std").mem.zeroes(io_wo_32),
    gpio_hi_togl: io_wo_32 = @import("std").mem.zeroes(io_wo_32),
    gpio_oe: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    gpio_hi_oe: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    gpio_oe_set: io_wo_32 = @import("std").mem.zeroes(io_wo_32),
    gpio_hi_oe_set: io_wo_32 = @import("std").mem.zeroes(io_wo_32),
    gpio_oe_clr: io_wo_32 = @import("std").mem.zeroes(io_wo_32),
    gpio_hi_oe_clr: io_wo_32 = @import("std").mem.zeroes(io_wo_32),
    gpio_oe_togl: io_wo_32 = @import("std").mem.zeroes(io_wo_32),
    gpio_hi_oe_togl: io_wo_32 = @import("std").mem.zeroes(io_wo_32),
    fifo_st: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    fifo_wr: io_wo_32 = @import("std").mem.zeroes(io_wo_32),
    fifo_rd: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    spinlock_st: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    _pad1: [8]u32 = @import("std").mem.zeroes([8]u32),
    interp: [2]interp_hw_t = @import("std").mem.zeroes([2]interp_hw_t),
    spinlock: [32]io_rw_32 = @import("std").mem.zeroes([32]io_rw_32),
    doorbell_out_set: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    doorbell_out_clr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    doorbell_in_set: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    doorbell_in_clr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    peri_nonsec: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad2: [3]u32 = @import("std").mem.zeroes([3]u32),
    riscv_softirq: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    mtime_ctrl: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad3: [2]u32 = @import("std").mem.zeroes([2]u32),
    mtime: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    mtimeh: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    mtimecmp: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    mtimecmph: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    tmds_ctrl: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    tmds_wdata: io_wo_32 = @import("std").mem.zeroes(io_wo_32),
    tmds_peek_single: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    tmds_pop_single: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    tmds_peek_double_l0: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    tmds_pop_double_l0: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    tmds_peek_double_l1: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    tmds_pop_double_l1: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    tmds_peek_double_l2: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    tmds_pop_double_l2: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
};
// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub const pads_bank0_hw_t = extern struct {
    voltage_select: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    io: [48]io_rw_32 = @import("std").mem.zeroes([48]io_rw_32),
};
// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub const GPIO_FUNC_HSTX: c_int = 0;
pub const GPIO_FUNC_SPI: c_int = 1;
pub const GPIO_FUNC_UART: c_int = 2;
pub const GPIO_FUNC_I2C: c_int = 3;
pub const GPIO_FUNC_PWM: c_int = 4;
pub const GPIO_FUNC_SIO: c_int = 5;
pub const GPIO_FUNC_PIO0: c_int = 6;
pub const GPIO_FUNC_PIO1: c_int = 7;
pub const GPIO_FUNC_PIO2: c_int = 8;
pub const GPIO_FUNC_GPCK: c_int = 9;
pub const GPIO_FUNC_XIP_CS1: c_int = 9;
pub const GPIO_FUNC_CORESIGHT_TRACE: c_int = 9;
pub const GPIO_FUNC_USB: c_int = 10;
pub const GPIO_FUNC_UART_AUX: c_int = 11;
pub const GPIO_FUNC_NULL: c_int = 31;
pub const enum_gpio_function_rp2350 = c_uint;
pub const gpio_function_t = enum_gpio_function_rp2350;
pub const io_bank0_status_ctrl_hw_t = extern struct {
    status: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    ctrl: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
};
pub const io_bank0_irq_ctrl_hw_t = extern struct {
    inte: [6]io_rw_32 = @import("std").mem.zeroes([6]io_rw_32),
    intf: [6]io_rw_32 = @import("std").mem.zeroes([6]io_rw_32),
    ints: [6]io_ro_32 = @import("std").mem.zeroes([6]io_ro_32),
};
const struct_unnamed_2 = extern struct {
    proc0_irq_ctrl: io_bank0_irq_ctrl_hw_t = @import("std").mem.zeroes(io_bank0_irq_ctrl_hw_t),
    proc1_irq_ctrl: io_bank0_irq_ctrl_hw_t = @import("std").mem.zeroes(io_bank0_irq_ctrl_hw_t),
    dormant_wake_irq_ctrl: io_bank0_irq_ctrl_hw_t = @import("std").mem.zeroes(io_bank0_irq_ctrl_hw_t),
};
const union_unnamed_1 = extern union {
    unnamed_0: struct_unnamed_2,
    irq_ctrl: [3]io_bank0_irq_ctrl_hw_t,
};
pub const io_bank0_hw_t = extern struct {
    io: [48]io_bank0_status_ctrl_hw_t = @import("std").mem.zeroes([48]io_bank0_status_ctrl_hw_t),
    _pad0: [32]u32 = @import("std").mem.zeroes([32]u32),
    irqsummary_proc0_secure: [2]io_ro_32 = @import("std").mem.zeroes([2]io_ro_32),
    irqsummary_proc0_nonsecure: [2]io_ro_32 = @import("std").mem.zeroes([2]io_ro_32),
    irqsummary_proc1_secure: [2]io_ro_32 = @import("std").mem.zeroes([2]io_ro_32),
    irqsummary_proc1_nonsecure: [2]io_ro_32 = @import("std").mem.zeroes([2]io_ro_32),
    irqsummary_dormant_wake_secure: [2]io_ro_32 = @import("std").mem.zeroes([2]io_ro_32),
    irqsummary_dormant_wake_nonsecure: [2]io_ro_32 = @import("std").mem.zeroes([2]io_ro_32),
    intr: [6]io_rw_32 = @import("std").mem.zeroes([6]io_rw_32),
    unnamed_0: union_unnamed_1 = @import("std").mem.zeroes(union_unnamed_1),
};
// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub const TIMER0_IRQ_0: c_int = 0;
pub const TIMER0_IRQ_1: c_int = 1;
pub const TIMER0_IRQ_2: c_int = 2;
pub const TIMER0_IRQ_3: c_int = 3;
pub const TIMER1_IRQ_0: c_int = 4;
pub const TIMER1_IRQ_1: c_int = 5;
pub const TIMER1_IRQ_2: c_int = 6;
pub const TIMER1_IRQ_3: c_int = 7;
pub const PWM_IRQ_WRAP_0: c_int = 8;
pub const PWM_IRQ_WRAP_1: c_int = 9;
pub const DMA_IRQ_0: c_int = 10;
pub const DMA_IRQ_1: c_int = 11;
pub const DMA_IRQ_2: c_int = 12;
pub const DMA_IRQ_3: c_int = 13;
pub const USBCTRL_IRQ: c_int = 14;
pub const PIO0_IRQ_0: c_int = 15;
pub const PIO0_IRQ_1: c_int = 16;
pub const PIO1_IRQ_0: c_int = 17;
pub const PIO1_IRQ_1: c_int = 18;
pub const PIO2_IRQ_0: c_int = 19;
pub const PIO2_IRQ_1: c_int = 20;
pub const IO_IRQ_BANK0: c_int = 21;
pub const IO_IRQ_BANK0_NS: c_int = 22;
pub const IO_IRQ_QSPI: c_int = 23;
pub const IO_IRQ_QSPI_NS: c_int = 24;
pub const SIO_IRQ_FIFO: c_int = 25;
pub const SIO_IRQ_BELL: c_int = 26;
pub const SIO_IRQ_FIFO_NS: c_int = 27;
pub const SIO_IRQ_BELL_NS: c_int = 28;
pub const SIO_IRQ_MTIMECMP: c_int = 29;
pub const CLOCKS_IRQ: c_int = 30;
pub const SPI0_IRQ: c_int = 31;
pub const SPI1_IRQ: c_int = 32;
pub const UART0_IRQ: c_int = 33;
pub const UART1_IRQ: c_int = 34;
pub const ADC_IRQ_FIFO: c_int = 35;
pub const I2C0_IRQ: c_int = 36;
pub const I2C1_IRQ: c_int = 37;
pub const OTP_IRQ: c_int = 38;
pub const TRNG_IRQ: c_int = 39;
pub const PROC0_IRQ_CTI: c_int = 40;
pub const PROC1_IRQ_CTI: c_int = 41;
pub const PLL_SYS_IRQ: c_int = 42;
pub const PLL_USB_IRQ: c_int = 43;
pub const POWMAN_IRQ_POW: c_int = 44;
pub const POWMAN_IRQ_TIMER: c_int = 45;
pub const SPARE_IRQ_0: c_int = 46;
pub const SPARE_IRQ_1: c_int = 47;
pub const SPARE_IRQ_2: c_int = 48;
pub const SPARE_IRQ_3: c_int = 49;
pub const SPARE_IRQ_4: c_int = 50;
pub const SPARE_IRQ_5: c_int = 51;
pub const IRQ_COUNT: c_int = 52;
pub const enum_irq_num_rp2350 = c_uint;
pub const irq_num_t = enum_irq_num_rp2350;
pub const m33_hw_t = extern struct {
    itm_stim: [32]io_rw_32 = @import("std").mem.zeroes([32]io_rw_32),
    _pad0: [864]u32 = @import("std").mem.zeroes([864]u32),
    itm_ter0: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad1: [15]u32 = @import("std").mem.zeroes([15]u32),
    itm_tpr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad2: [15]u32 = @import("std").mem.zeroes([15]u32),
    itm_tcr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad3: [27]u32 = @import("std").mem.zeroes([27]u32),
    int_atready: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    _pad4: u32 = @import("std").mem.zeroes(u32),
    int_atvalid: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad5: u32 = @import("std").mem.zeroes(u32),
    itm_itctrl: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad6: [46]u32 = @import("std").mem.zeroes([46]u32),
    itm_devarch: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    _pad7: [3]u32 = @import("std").mem.zeroes([3]u32),
    itm_devtype: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    itm_pidr4: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    itm_pidr5: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    itm_pidr6: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    itm_pidr7: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    itm_pidr0: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    itm_pidr1: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    itm_pidr2: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    itm_pidr3: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    itm_cidr: [4]io_ro_32 = @import("std").mem.zeroes([4]io_ro_32),
    dwt_ctrl: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    dwt_cyccnt: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad8: u32 = @import("std").mem.zeroes(u32),
    dwt_exccnt: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad9: u32 = @import("std").mem.zeroes(u32),
    dwt_lsucnt: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    dwt_foldcnt: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad10: u32 = @import("std").mem.zeroes(u32),
    dwt_comp0: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad11: u32 = @import("std").mem.zeroes(u32),
    dwt_function0: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad12: u32 = @import("std").mem.zeroes(u32),
    dwt_comp1: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad13: u32 = @import("std").mem.zeroes(u32),
    dwt_function1: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad14: u32 = @import("std").mem.zeroes(u32),
    dwt_comp2: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad15: u32 = @import("std").mem.zeroes(u32),
    dwt_function2: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad16: u32 = @import("std").mem.zeroes(u32),
    dwt_comp3: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad17: u32 = @import("std").mem.zeroes(u32),
    dwt_function3: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad18: [984]u32 = @import("std").mem.zeroes([984]u32),
    dwt_devarch: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    _pad19: [3]u32 = @import("std").mem.zeroes([3]u32),
    dwt_devtype: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    dwt_pidr4: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    dwt_pidr5: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    dwt_pidr6: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    dwt_pidr7: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    dwt_pidr0: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    dwt_pidr1: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    dwt_pidr2: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    dwt_pidr3: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    dwt_cidr: [4]io_ro_32 = @import("std").mem.zeroes([4]io_ro_32),
    fp_ctrl: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    fp_remap: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    fp_comp: [8]io_rw_32 = @import("std").mem.zeroes([8]io_rw_32),
    _pad20: [997]u32 = @import("std").mem.zeroes([997]u32),
    fp_devarch: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    _pad21: [3]u32 = @import("std").mem.zeroes([3]u32),
    fp_devtype: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    fp_pidr4: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    fp_pidr5: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    fp_pidr6: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    fp_pidr7: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    fp_pidr0: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    fp_pidr1: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    fp_pidr2: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    fp_pidr3: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    fp_cidr: [4]io_ro_32 = @import("std").mem.zeroes([4]io_ro_32),
    _pad22: [11265]u32 = @import("std").mem.zeroes([11265]u32),
    ictr: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    actlr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad23: u32 = @import("std").mem.zeroes(u32),
    syst_csr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    syst_rvr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    syst_cvr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    syst_calib: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    _pad24: [56]u32 = @import("std").mem.zeroes([56]u32),
    nvic_iser: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    _pad25: [30]u32 = @import("std").mem.zeroes([30]u32),
    nvic_icer: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    _pad26: [30]u32 = @import("std").mem.zeroes([30]u32),
    nvic_ispr: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    _pad27: [30]u32 = @import("std").mem.zeroes([30]u32),
    nvic_icpr: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    _pad28: [30]u32 = @import("std").mem.zeroes([30]u32),
    nvic_iabr: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    _pad29: [30]u32 = @import("std").mem.zeroes([30]u32),
    nvic_itns: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    _pad30: [30]u32 = @import("std").mem.zeroes([30]u32),
    nvic_ipr: [16]io_rw_32 = @import("std").mem.zeroes([16]io_rw_32),
    _pad31: [560]u32 = @import("std").mem.zeroes([560]u32),
    cpuid: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    icsr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    vtor: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    aircr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    scr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    ccr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    shpr: [3]io_rw_32 = @import("std").mem.zeroes([3]io_rw_32),
    shcsr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    cfsr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    hfsr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    dfsr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    mmfar: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    bfar: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad32: u32 = @import("std").mem.zeroes(u32),
    id_pfr: [2]io_ro_32 = @import("std").mem.zeroes([2]io_ro_32),
    id_dfr0: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    id_afr0: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    id_mmfr: [4]io_ro_32 = @import("std").mem.zeroes([4]io_ro_32),
    id_isar: [6]io_ro_32 = @import("std").mem.zeroes([6]io_ro_32),
    _pad33: u32 = @import("std").mem.zeroes(u32),
    ctr: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    _pad34: [2]u32 = @import("std").mem.zeroes([2]u32),
    cpacr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    nsacr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    mpu_type: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    mpu_ctrl: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    mpu_rnr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    mpu_rbar: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    mpu_rlar: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    mpu_rbar_a1: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    mpu_rlar_a1: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    mpu_rbar_a2: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    mpu_rlar_a2: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    mpu_rbar_a3: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    mpu_rlar_a3: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad35: u32 = @import("std").mem.zeroes(u32),
    mpu_mair: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    _pad36: [2]u32 = @import("std").mem.zeroes([2]u32),
    sau_ctrl: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    sau_type: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    sau_rnr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    sau_rbar: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    sau_rlar: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    sfsr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    sfar: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad37: u32 = @import("std").mem.zeroes(u32),
    dhcsr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    dcrsr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    dcrdr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    demcr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad38: [2]u32 = @import("std").mem.zeroes([2]u32),
    dscsr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad39: [61]u32 = @import("std").mem.zeroes([61]u32),
    stir: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad40: [12]u32 = @import("std").mem.zeroes([12]u32),
    fpccr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    fpcar: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    fpdscr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    mvfr: [3]io_ro_32 = @import("std").mem.zeroes([3]io_ro_32),
    _pad41: [28]u32 = @import("std").mem.zeroes([28]u32),
    ddevarch: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    _pad42: [3]u32 = @import("std").mem.zeroes([3]u32),
    ddevtype: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    dpidr4: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    dpidr5: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    dpidr6: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    dpidr7: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    dpidr0: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    dpidr1: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    dpidr2: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    dpidr3: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    dcidr: [4]io_ro_32 = @import("std").mem.zeroes([4]io_ro_32),
    _pad43: [51201]u32 = @import("std").mem.zeroes([51201]u32),
    trcprgctlr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad44: u32 = @import("std").mem.zeroes(u32),
    trcstatr: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    trcconfigr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad45: [3]u32 = @import("std").mem.zeroes([3]u32),
    trceventctl0r: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    trceventctl1r: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad46: u32 = @import("std").mem.zeroes(u32),
    trcstallctlr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    trctsctlr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    trcsyncpr: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    trcccctlr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad47: [17]u32 = @import("std").mem.zeroes([17]u32),
    trcvictlr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad48: [47]u32 = @import("std").mem.zeroes([47]u32),
    trccntrldvr0: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad49: [15]u32 = @import("std").mem.zeroes([15]u32),
    trcidr8: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    trcidr9: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    trcidr10: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    trcidr11: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    trcidr12: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    trcidr13: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    _pad50: [10]u32 = @import("std").mem.zeroes([10]u32),
    trcimspec: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    _pad51: [7]u32 = @import("std").mem.zeroes([7]u32),
    trcidr0: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    trcidr1: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    trcidr2: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    trcidr3: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    trcidr4: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    trcidr5: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    trcidr6: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    trcidr7: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad52: [2]u32 = @import("std").mem.zeroes([2]u32),
    trcrsctlr: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    _pad53: [36]u32 = @import("std").mem.zeroes([36]u32),
    trcsscsr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad54: [7]u32 = @import("std").mem.zeroes([7]u32),
    trcsspcicr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad55: [19]u32 = @import("std").mem.zeroes([19]u32),
    trcpdcr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    trcpdsr: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    _pad56: [755]u32 = @import("std").mem.zeroes([755]u32),
    trcitatbidr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad57: [3]u32 = @import("std").mem.zeroes([3]u32),
    trcitiatbinr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad58: u32 = @import("std").mem.zeroes(u32),
    trcitiatboutr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad59: [40]u32 = @import("std").mem.zeroes([40]u32),
    trcclaimset: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    trcclaimclr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad60: [4]u32 = @import("std").mem.zeroes([4]u32),
    trcauthstatus: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    trcdevarch: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    _pad61: [2]u32 = @import("std").mem.zeroes([2]u32),
    trcdevid: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    trcdevtype: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    trcpidr4: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    trcpidr5: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    trcpidr6: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    trcpidr7: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    trcpidr0: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    trcpidr1: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    trcpidr2: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    trcpidr3: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    trccidr: [4]io_ro_32 = @import("std").mem.zeroes([4]io_ro_32),
    cticontrol: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad62: [3]u32 = @import("std").mem.zeroes([3]u32),
    ctiintack: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    ctiappset: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    ctiappclear: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    ctiapppulse: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    ctiinen: [8]io_rw_32 = @import("std").mem.zeroes([8]io_rw_32),
    _pad63: [24]u32 = @import("std").mem.zeroes([24]u32),
    ctiouten: [8]io_rw_32 = @import("std").mem.zeroes([8]io_rw_32),
    _pad64: [28]u32 = @import("std").mem.zeroes([28]u32),
    ctitriginstatus: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    ctitrigoutstatus: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    ctichinstatus: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    _pad65: u32 = @import("std").mem.zeroes(u32),
    ctigate: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    asicctl: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad66: [871]u32 = @import("std").mem.zeroes([871]u32),
    itchout: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    ittrigout: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad67: [2]u32 = @import("std").mem.zeroes([2]u32),
    itchin: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    _pad68: [2]u32 = @import("std").mem.zeroes([2]u32),
    itctrl: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad69: [46]u32 = @import("std").mem.zeroes([46]u32),
    devarch: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    _pad70: [2]u32 = @import("std").mem.zeroes([2]u32),
    devid: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    devtype: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    pidr4: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    pidr5: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    pidr6: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    pidr7: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    pidr0: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    pidr1: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    pidr2: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    pidr3: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    cidr: [4]io_ro_32 = @import("std").mem.zeroes([4]io_ro_32),
};
// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub const nvic_hw_t = extern struct {
    iser: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    _pad0: [30]u32 = @import("std").mem.zeroes([30]u32),
    icer: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    _pad1: [30]u32 = @import("std").mem.zeroes([30]u32),
    ispr: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    _pad2: [30]u32 = @import("std").mem.zeroes([30]u32),
    icpr: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    _pad3: [30]u32 = @import("std").mem.zeroes([30]u32),
    iabr: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    _pad4: [30]u32 = @import("std").mem.zeroes([30]u32),
    itns: [2]io_rw_32 = @import("std").mem.zeroes([2]io_rw_32),
    _pad5: [30]u32 = @import("std").mem.zeroes([30]u32),
    ipr: [16]io_rw_32 = @import("std").mem.zeroes([16]io_rw_32),
};
// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub const armv8m_scb_hw_t = extern struct {
    cpuid: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    icsr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    vtor: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    aircr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    scr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    ccr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    shpr: [3]io_rw_32 = @import("std").mem.zeroes([3]io_rw_32),
    shcsr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    cfsr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    hfsr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    dfsr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    mmfar: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    bfar: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad0: u32 = @import("std").mem.zeroes(u32),
    id_pfr: [2]io_ro_32 = @import("std").mem.zeroes([2]io_ro_32),
    id_dfr0: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    id_afr0: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    id_mmfr: [4]io_ro_32 = @import("std").mem.zeroes([4]io_ro_32),
    id_isar: [6]io_ro_32 = @import("std").mem.zeroes([6]io_ro_32),
    _pad1: u32 = @import("std").mem.zeroes(u32),
    ctr: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    _pad2: [2]u32 = @import("std").mem.zeroes([2]u32),
    cpacr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    nsacr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
};
// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub const irq_handler_t = ?*const fn () callconv(.c) void;
pub fn check_irq_param(arg_num: uint) callconv(.c) void {
    var num = arg_num;
    _ = &num;
    {
        if ((false or false) and !false) {
            _ = if (!(num >= @as(c_uint, 52))) @as(c_int, 0) else __assert_func("/home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_irq/include/hardware/irq.h", @as(c_int, 198), "check_irq_param", "!(num >= 52u)");
        }
    }
}
pub extern fn irq_set_priority(num: uint, hardware_priority: u8) void;
pub extern fn irq_get_priority(num: uint) uint;
pub extern fn irq_set_enabled(num: uint, enabled: bool) void;
pub extern fn irq_is_enabled(num: uint) bool;
pub extern fn irq_set_mask_enabled(mask: u32, enabled: bool) void;
pub extern fn irq_set_mask_n_enabled(n: uint, mask: u32, enabled: bool) void;
pub extern fn irq_set_exclusive_handler(num: uint, handler: irq_handler_t) void;
pub extern fn irq_get_exclusive_handler(num: uint) irq_handler_t;
pub extern fn irq_add_shared_handler(num: uint, handler: irq_handler_t, order_priority: u8) void;
pub extern fn irq_remove_handler(num: uint, handler: irq_handler_t) void;
pub extern fn irq_has_handler(num: uint) bool;
pub extern fn irq_has_shared_handler(num: uint) bool;
pub extern fn irq_get_vtable_handler(num: uint) irq_handler_t;
pub fn irq_clear(arg_int_num: uint) callconv(.c) void {
    var int_num = arg_int_num;
    _ = &int_num;
    @as([*c]nvic_hw_t, @ptrFromInt(@as(c_uint, 3758096384) +% @as(c_uint, 57600))).*.icpr[int_num / @as(uint, @bitCast(@as(c_int, 32)))] = @as(u32, @bitCast(@as(c_int, 1) << @intCast(int_num % @as(uint, @bitCast(@as(c_int, 32))))));
}
pub extern fn irq_set_pending(num: uint) void;
pub extern fn runtime_init_per_core_irq_priorities() void;
pub inline fn irq_init_priorities() void {
    runtime_init_per_core_irq_priorities();
}
pub extern fn user_irq_claim(irq_num: uint) void;
pub extern fn user_irq_unclaim(irq_num: uint) void;
pub extern fn user_irq_claim_unused(required: bool) c_int;
pub extern fn user_irq_is_claimed(irq_num: uint) bool;
pub extern fn __unhandled_user_irq() void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:28:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_lo_out_put(arg_x: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:33:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_lo_out_xor(arg_x: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:38:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_lo_out_set(arg_x: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:43:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_lo_out_clr(arg_x: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:48:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hi_out_put(arg_x: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:53:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hi_out_xor(arg_x: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:58:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hi_out_set(arg_x: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:63:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hi_out_clr(arg_x: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:70:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hilo_out_put(arg_x: u64) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:77:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hilo_out_xor(arg_x: u64) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:84:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hilo_out_set(arg_x: u64) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:91:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hilo_out_clr(arg_x: u64) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:99:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_lo_oe_put(arg_x: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:104:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_lo_oe_xor(arg_x: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:109:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_lo_oe_set(arg_x: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:114:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_lo_oe_clr(arg_x: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:119:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hi_oe_put(arg_x: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:124:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hi_oe_xor(arg_x: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:129:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hi_oe_set(arg_x: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:134:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hi_oe_clr(arg_x: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:141:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hilo_oe_put(arg_x: u64) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:148:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hilo_oe_xor(arg_x: u64) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:155:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hilo_oe_set(arg_x: u64) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:162:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hilo_oe_clr(arg_x: u64) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:175:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_bit_out_put(arg_pin: uint, arg_val: bool) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:182:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_bit_out_xor(arg_pin: uint) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:189:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_bit_out_set(arg_pin: uint) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:196:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_bit_out_clr(arg_pin: uint) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:203:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_bit_out_xor2(arg_pin: uint, arg_val: bool) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:210:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_bit_out_set2(arg_pin: uint, arg_val: bool) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:217:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_bit_out_clr2(arg_pin: uint, arg_val: bool) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:227:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_bit_oe_put(arg_pin: uint, arg_val: bool) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:234:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_bit_oe_xor(arg_pin: uint) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:241:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_bit_oe_set(arg_pin: uint) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:248:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_bit_oe_clr(arg_pin: uint) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:255:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_bit_oe_xor2(arg_pin: uint, arg_val: bool) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:262:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_bit_oe_set2(arg_pin: uint, arg_val: bool) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:269:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_bit_oe_clr2(arg_pin: uint, arg_val: bool) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:286:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_index_out_put(arg_reg_index: uint, arg_val: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:299:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_index_out_xor(arg_reg_index: uint, arg_mask: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:312:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_index_out_set(arg_reg_index: uint, arg_mask: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:325:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_index_out_clr(arg_reg_index: uint, arg_mask: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:338:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_index_oe_put(arg_reg_index: uint, arg_val: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:351:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_index_oe_xor(arg_reg_index: uint, arg_mask: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:364:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_index_oe_set(arg_reg_index: uint, arg_mask: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:377:28: warning: unable to translate function, demoted to extern
pub extern fn gpioc_index_oe_clr(arg_reg_index: uint, arg_mask: u32) void;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:387:32: warning: unable to translate function, demoted to extern
pub extern fn gpioc_lo_out_get() u32;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:396:32: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hi_out_get() u32;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:405:32: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hilo_out_get() u64;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:414:32: warning: unable to translate function, demoted to extern
pub extern fn gpioc_lo_oe_get() u32;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:423:32: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hi_oe_get() u32;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:432:32: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hilo_oe_get() u64;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:441:32: warning: unable to translate function, demoted to extern
pub extern fn gpioc_lo_in_get() u32;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:450:32: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hi_in_get() u32;
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:40: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio_coproc.h:459:32: warning: unable to translate function, demoted to extern
pub extern fn gpioc_hilo_in_get() u64;
pub const GPIO_OUT: c_int = 1;
pub const GPIO_IN: c_int = 0;
pub const enum_gpio_dir = c_uint;
pub const GPIO_IRQ_LEVEL_LOW: c_int = 1;
pub const GPIO_IRQ_LEVEL_HIGH: c_int = 2;
pub const GPIO_IRQ_EDGE_FALL: c_int = 4;
pub const GPIO_IRQ_EDGE_RISE: c_int = 8;
pub const enum_gpio_irq_level = c_uint;
pub const gpio_irq_callback_t = ?*const fn (uint, u32) callconv(.c) void;
pub const GPIO_OVERRIDE_NORMAL: c_int = 0;
pub const GPIO_OVERRIDE_INVERT: c_int = 1;
pub const GPIO_OVERRIDE_LOW: c_int = 2;
pub const GPIO_OVERRIDE_HIGH: c_int = 3;
pub const enum_gpio_override = c_uint;
pub const GPIO_SLEW_RATE_SLOW: c_int = 0;
pub const GPIO_SLEW_RATE_FAST: c_int = 1;
pub const enum_gpio_slew_rate = c_uint;
pub const GPIO_DRIVE_STRENGTH_2MA: c_int = 0;
pub const GPIO_DRIVE_STRENGTH_4MA: c_int = 1;
pub const GPIO_DRIVE_STRENGTH_8MA: c_int = 2;
pub const GPIO_DRIVE_STRENGTH_12MA: c_int = 3;
pub const enum_gpio_drive_strength = c_uint;
pub fn check_gpio_param(arg_gpio: uint) callconv(.c) void {
    var gpio = arg_gpio;
    _ = &gpio;
    {
        if ((false or false) and !false) {
            _ = if (!(gpio >= @as(c_uint, 30))) @as(c_int, 0) else __assert_func("/home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio.h", @as(c_int, 245), "check_gpio_param", "!(gpio >= 30u)");
        }
    }
}
pub extern fn gpio_set_function(gpio: uint, @"fn": gpio_function_t) void;
pub extern fn gpio_set_function_masked(gpio_mask: u32, @"fn": gpio_function_t) void;
pub extern fn gpio_set_function_masked64(gpio_mask: u64, @"fn": gpio_function_t) void;
pub extern fn gpio_get_function(gpio: uint) gpio_function_t;
pub extern fn gpio_set_pulls(gpio: uint, up: bool, down: bool) void;
pub fn gpio_pull_up(arg_gpio: uint) callconv(.c) void {
    var gpio = arg_gpio;
    _ = &gpio;
    gpio_set_pulls(gpio, @as(c_int, 1) != 0, @as(c_int, 0) != 0);
}
pub fn gpio_is_pulled_up(arg_gpio: uint) callconv(.c) bool {
    var gpio = arg_gpio;
    _ = &gpio;
    return (@as([*c]pads_bank0_hw_t, @ptrFromInt(@as(c_uint, 1073971200))).*.io[gpio] & @as(c_uint, 8)) != @as(c_uint, @bitCast(@as(c_int, 0)));
}
pub fn gpio_pull_down(arg_gpio: uint) callconv(.c) void {
    var gpio = arg_gpio;
    _ = &gpio;
    gpio_set_pulls(gpio, @as(c_int, 0) != 0, @as(c_int, 1) != 0);
}
pub fn gpio_is_pulled_down(arg_gpio: uint) callconv(.c) bool {
    var gpio = arg_gpio;
    _ = &gpio;
    return (@as([*c]pads_bank0_hw_t, @ptrFromInt(@as(c_uint, 1073971200))).*.io[gpio] & @as(c_uint, 4)) != @as(c_uint, @bitCast(@as(c_int, 0)));
}
pub fn gpio_disable_pulls(arg_gpio: uint) callconv(.c) void {
    var gpio = arg_gpio;
    _ = &gpio;
    gpio_set_pulls(gpio, @as(c_int, 0) != 0, @as(c_int, 0) != 0);
}
pub extern fn gpio_set_irqover(gpio: uint, value: uint) void;
pub extern fn gpio_set_outover(gpio: uint, value: uint) void;
pub extern fn gpio_set_inover(gpio: uint, value: uint) void;
pub extern fn gpio_set_oeover(gpio: uint, value: uint) void;
pub extern fn gpio_set_input_enabled(gpio: uint, enabled: bool) void;
pub extern fn gpio_set_input_hysteresis_enabled(gpio: uint, enabled: bool) void;
pub extern fn gpio_is_input_hysteresis_enabled(gpio: uint) bool;
pub extern fn gpio_set_slew_rate(gpio: uint, slew: enum_gpio_slew_rate) void;
pub extern fn gpio_get_slew_rate(gpio: uint) enum_gpio_slew_rate;
pub extern fn gpio_set_drive_strength(gpio: uint, drive: enum_gpio_drive_strength) void;
pub extern fn gpio_get_drive_strength(gpio: uint) enum_gpio_drive_strength;
pub extern fn gpio_set_irq_enabled(gpio: uint, event_mask: u32, enabled: bool) void;
pub extern fn gpio_set_irq_callback(callback: gpio_irq_callback_t) void;
pub extern fn gpio_set_irq_enabled_with_callback(gpio: uint, event_mask: u32, enabled: bool, callback: gpio_irq_callback_t) void;
pub extern fn gpio_set_dormant_irq_enabled(gpio: uint, event_mask: u32, enabled: bool) void;
pub fn gpio_get_irq_event_mask(arg_gpio: uint) callconv(.c) u32 {
    var gpio = arg_gpio;
    _ = &gpio;
    check_gpio_param(gpio);
    var irq_ctrl_base: [*c]io_bank0_irq_ctrl_hw_t = if (get_core_num() != 0) &@as([*c]io_bank0_hw_t, @ptrFromInt(@as(c_uint, 1073905664))).*.unnamed_0.unnamed_0.proc1_irq_ctrl else &@as([*c]io_bank0_hw_t, @ptrFromInt(@as(c_uint, 1073905664))).*.unnamed_0.unnamed_0.proc0_irq_ctrl;
    _ = &irq_ctrl_base;
    var status_reg: [*c]const volatile io_ro_32 = &irq_ctrl_base.*.ints[gpio >> @intCast(3)];
    _ = &status_reg;
    return (status_reg.* >> @intCast(@as(c_uint, @bitCast(@as(c_int, 4))) *% (gpio & @as(c_uint, 7)))) & @as(c_uint, 15);
}
pub fn gpio_acknowledge_irq(arg_gpio: uint, arg_event_mask: u32) callconv(.c) void {
    var gpio = arg_gpio;
    _ = &gpio;
    var event_mask = arg_event_mask;
    _ = &event_mask;
    check_gpio_param(gpio);
    @as([*c]io_bank0_hw_t, @ptrFromInt(@as(c_uint, 1073905664))).*.intr[gpio / @as(uint, @bitCast(@as(c_int, 8)))] = event_mask << @intCast(@as(uint, @bitCast(@as(c_int, 4))) *% (gpio % @as(uint, @bitCast(@as(c_int, 8)))));
}
pub extern fn gpio_add_raw_irq_handler_with_order_priority_masked(gpio_mask: u32, handler: irq_handler_t, order_priority: u8) void;
pub extern fn gpio_add_raw_irq_handler_with_order_priority_masked64(gpio_mask: u64, handler: irq_handler_t, order_priority: u8) void;
pub fn gpio_add_raw_irq_handler_with_order_priority(arg_gpio: uint, arg_handler: irq_handler_t, arg_order_priority: u8) callconv(.c) void {
    var gpio = arg_gpio;
    _ = &gpio;
    var handler = arg_handler;
    _ = &handler;
    var order_priority = arg_order_priority;
    _ = &order_priority;
    check_gpio_param(gpio);
    gpio_add_raw_irq_handler_with_order_priority_masked(@as(c_uint, 1) << @intCast(gpio), handler, order_priority);
}
pub extern fn gpio_add_raw_irq_handler_masked(gpio_mask: u32, handler: irq_handler_t) void;
pub extern fn gpio_add_raw_irq_handler_masked64(gpio_mask: u64, handler: irq_handler_t) void;
pub fn gpio_add_raw_irq_handler(arg_gpio: uint, arg_handler: irq_handler_t) callconv(.c) void {
    var gpio = arg_gpio;
    _ = &gpio;
    var handler = arg_handler;
    _ = &handler;
    check_gpio_param(gpio);
    gpio_add_raw_irq_handler_masked(@as(c_uint, 1) << @intCast(gpio), handler);
}
pub extern fn gpio_remove_raw_irq_handler_masked(gpio_mask: u32, handler: irq_handler_t) void;
pub extern fn gpio_remove_raw_irq_handler_masked64(gpio_mask: u64, handler: irq_handler_t) void;
pub fn gpio_remove_raw_irq_handler(arg_gpio: uint, arg_handler: irq_handler_t) callconv(.c) void {
    var gpio = arg_gpio;
    _ = &gpio;
    var handler = arg_handler;
    _ = &handler;
    check_gpio_param(gpio);
    gpio_remove_raw_irq_handler_masked(@as(c_uint, 1) << @intCast(gpio), handler);
}
pub extern fn gpio_init(gpio: uint) void;
pub extern fn gpio_deinit(gpio: uint) void;
pub extern fn gpio_init_mask(gpio_mask: uint) void;
pub fn gpio_get(arg_gpio: uint) callconv(.c) bool {
    var gpio = arg_gpio;
    _ = &gpio;
    return (@as([*c]sio_hw_t, @ptrFromInt(@as(c_uint, 3489660928))).*.gpio_in & (@as(c_uint, 1) << @intCast(gpio))) != 0;
}
pub fn gpio_get_all() callconv(.c) u32 {
    return gpioc_lo_in_get();
}
pub fn gpio_get_all64() callconv(.c) u64 {
    return gpioc_hilo_in_get();
}
pub fn gpio_set_mask(arg_mask: u32) callconv(.c) void {
    var mask = arg_mask;
    _ = &mask;
    gpioc_lo_out_set(mask);
}
pub fn gpio_set_mask64(arg_mask: u64) callconv(.c) void {
    var mask = arg_mask;
    _ = &mask;
    gpioc_hilo_out_set(mask);
}
pub fn gpio_set_mask_n(arg_n: uint, arg_mask: u32) callconv(.c) void {
    var n = arg_n;
    _ = &n;
    var mask = arg_mask;
    _ = &mask;
    if (!(n != 0)) {
        gpio_set_mask(mask);
    } else if (n == @as(uint, @bitCast(@as(c_int, 1)))) {
        gpioc_hi_out_set(mask);
    }
}
pub fn gpio_clr_mask(arg_mask: u32) callconv(.c) void {
    var mask = arg_mask;
    _ = &mask;
    gpioc_lo_out_clr(mask);
}
pub fn gpio_clr_mask64(arg_mask: u64) callconv(.c) void {
    var mask = arg_mask;
    _ = &mask;
    gpioc_hilo_out_clr(mask);
}
pub fn gpio_clr_mask_n(arg_n: uint, arg_mask: u32) callconv(.c) void {
    var n = arg_n;
    _ = &n;
    var mask = arg_mask;
    _ = &mask;
    if (!(n != 0)) {
        gpio_clr_mask(mask);
    } else if (n == @as(uint, @bitCast(@as(c_int, 1)))) {
        gpioc_hi_out_clr(mask);
    }
}
pub fn gpio_xor_mask(arg_mask: u32) callconv(.c) void {
    var mask = arg_mask;
    _ = &mask;
    gpioc_lo_out_xor(mask);
}
pub fn gpio_xor_mask64(arg_mask: u64) callconv(.c) void {
    var mask = arg_mask;
    _ = &mask;
    gpioc_hilo_out_xor(mask);
}
pub fn gpio_xor_mask_n(arg_n: uint, arg_mask: u32) callconv(.c) void {
    var n = arg_n;
    _ = &n;
    var mask = arg_mask;
    _ = &mask;
    if (!(n != 0)) {
        gpio_xor_mask(mask);
    } else if (n == @as(uint, @bitCast(@as(c_int, 1)))) {
        gpioc_hi_out_xor(mask);
    }
}
pub fn gpio_put_masked(arg_mask: u32, arg_value: u32) callconv(.c) void {
    var mask = arg_mask;
    _ = &mask;
    var value = arg_value;
    _ = &value;
    gpioc_lo_out_xor((gpioc_lo_out_get() ^ value) & mask);
}
pub fn gpio_put_masked64(arg_mask: u64, arg_value: u64) callconv(.c) void {
    var mask = arg_mask;
    _ = &mask;
    var value = arg_value;
    _ = &value;
    gpioc_hilo_out_xor((gpioc_hilo_out_get() ^ value) & mask);
}
pub fn gpio_put_masked_n(arg_n: uint, arg_mask: u32, arg_value: u32) callconv(.c) void {
    var n = arg_n;
    _ = &n;
    var mask = arg_mask;
    _ = &mask;
    var value = arg_value;
    _ = &value;
    if (!(n != 0)) {
        gpio_put_masked(mask, value);
    } else if (n == @as(uint, @bitCast(@as(c_int, 1)))) {
        gpioc_hi_out_xor((gpioc_hi_out_get() ^ value) & mask);
    }
}
pub fn gpio_put_all(arg_value: u32) callconv(.c) void {
    var value = arg_value;
    _ = &value;
    gpioc_lo_out_put(value);
}
pub fn gpio_put_all64(arg_value: u64) callconv(.c) void {
    var value = arg_value;
    _ = &value;
    gpioc_hilo_out_put(value);
}
pub fn gpio_put(arg_gpio: uint, arg_value: bool) callconv(.c) void {
    var gpio = arg_gpio;
    _ = &gpio;
    var value = arg_value;
    _ = &value;
    gpioc_bit_out_put(gpio, value);
}
pub fn gpio_get_out_level(arg_gpio: uint) callconv(.c) bool {
    var gpio = arg_gpio;
    _ = &gpio;
    return (@as([*c]sio_hw_t, @ptrFromInt(@as(c_uint, 3489660928))).*.gpio_out & (@as(c_uint, 1) << @intCast(gpio))) != 0;
}
pub fn gpio_set_dir_out_masked(arg_mask: u32) callconv(.c) void {
    var mask = arg_mask;
    _ = &mask;
    gpioc_lo_oe_set(mask);
}
pub fn gpio_set_dir_out_masked64(arg_mask: u64) callconv(.c) void {
    var mask = arg_mask;
    _ = &mask;
    gpioc_hilo_oe_set(mask);
}
pub fn gpio_set_dir_in_masked(arg_mask: u32) callconv(.c) void {
    var mask = arg_mask;
    _ = &mask;
    gpioc_lo_oe_clr(mask);
}
pub fn gpio_set_dir_in_masked64(arg_mask: u64) callconv(.c) void {
    var mask = arg_mask;
    _ = &mask;
    gpioc_hilo_oe_clr(mask);
}
pub fn gpio_set_dir_masked(arg_mask: u32, arg_value: u32) callconv(.c) void {
    var mask = arg_mask;
    _ = &mask;
    var value = arg_value;
    _ = &value;
    gpioc_lo_oe_xor((gpioc_lo_oe_get() ^ value) & mask);
}
pub fn gpio_set_dir_masked64(arg_mask: u64, arg_value: u64) callconv(.c) void {
    var mask = arg_mask;
    _ = &mask;
    var value = arg_value;
    _ = &value;
    gpioc_hilo_oe_xor((gpioc_hilo_oe_get() ^ value) & mask);
}
pub fn gpio_set_dir_all_bits(arg_values: u32) callconv(.c) void {
    var values = arg_values;
    _ = &values;
    gpioc_lo_oe_put(values);
}
pub fn gpio_set_dir_all_bits64(arg_values: u64) callconv(.c) void {
    var values = arg_values;
    _ = &values;
    gpioc_hilo_oe_put(values);
}
pub fn gpio_set_dir(arg_gpio: uint, arg_out: bool) callconv(.c) void {
    var gpio = arg_gpio;
    _ = &gpio;
    var out = arg_out;
    _ = &out;
    gpioc_bit_oe_put(gpio, out);
}
pub fn gpio_is_dir_out(arg_gpio: uint) callconv(.c) bool {
    var gpio = arg_gpio;
    _ = &gpio;
    return (@as([*c]sio_hw_t, @ptrFromInt(@as(c_uint, 3489660928))).*.gpio_oe & (@as(c_uint, 1) << @intCast(gpio))) != 0;
}
pub fn gpio_get_dir(arg_gpio: uint) callconv(.c) uint {
    var gpio = arg_gpio;
    _ = &gpio;
    return @as(uint, @intFromBool(gpio_is_dir_out(gpio)));
}
pub extern fn gpio_debug_pins_init() void;
pub extern fn adc_init() void;
pub fn adc_gpio_init(arg_gpio: uint) callconv(.c) void {
    var gpio = arg_gpio;
    _ = &gpio;
    {
        if ((false or false) and !false) {
            _ = if (!((gpio < @as(c_uint, 26)) or (gpio >= ((@as(c_uint, 26) +% @as(c_uint, 5)) -% @as(c_uint, @bitCast(@as(c_int, 1))))))) @as(c_int, 0) else __assert_func("/home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_adc/include/hardware/adc.h", @as(c_int, 96), "adc_gpio_init", "!(gpio < 26u || gpio >= 26u + 5u - 1)");
        }
    }
    gpio_set_function(gpio, @as(c_uint, @bitCast(GPIO_FUNC_NULL)));
    gpio_disable_pulls(gpio);
    gpio_set_input_enabled(gpio, @as(c_int, 0) != 0);
}
pub fn adc_select_input(arg_input: uint) callconv(.c) void {
    var input = arg_input;
    _ = &input;
    {
        if ((false or false) and !false) {
            _ = if (input < @as(c_uint, 5)) @as(c_int, 0) else __assert_func("/home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_adc/include/hardware/adc.h", @as(c_int, 119), "adc_select_input", "input < 5u");
        }
    }
    hw_write_masked(&@as([*c]adc_hw_t, @ptrFromInt(@as(c_uint, 1074397184))).*.cs, input << @intCast(12), @as(c_uint, 61440));
}
pub fn adc_get_selected_input() callconv(.c) uint {
    return (@as([*c]adc_hw_t, @ptrFromInt(@as(c_uint, 1074397184))).*.cs & @as(c_uint, 61440)) >> @intCast(12);
}
pub fn adc_set_round_robin(arg_input_mask: uint) callconv(.c) void {
    var input_mask = arg_input_mask;
    _ = &input_mask;
    {
        if ((false or false) and !false) {
            _ = if (input_mask < @as(uint, @bitCast(@as(c_int, 1) << @intCast(5)))) @as(c_int, 0) else __assert_func("/home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_adc/include/hardware/adc.h", @as(c_int, 151), "adc_set_round_robin", "input_mask < (1 << 5u)");
        }
    }
    hw_write_masked(&@as([*c]adc_hw_t, @ptrFromInt(@as(c_uint, 1074397184))).*.cs, input_mask << @intCast(16), @as(c_uint, 33488896));
}
pub fn adc_set_temp_sensor_enabled(arg_enable: bool) callconv(.c) void {
    var enable = arg_enable;
    _ = &enable;
    if (enable) {
        hw_set_bits(&@as([*c]adc_hw_t, @ptrFromInt(@as(c_uint, 1074397184))).*.cs, @as(c_uint, 2));
    } else {
        hw_clear_bits(&@as([*c]adc_hw_t, @ptrFromInt(@as(c_uint, 1074397184))).*.cs, @as(c_uint, 2));
    }
}
pub fn adc_read() callconv(.c) u16 {
    hw_set_bits(&@as([*c]adc_hw_t, @ptrFromInt(@as(c_uint, 1074397184))).*.cs, @as(c_uint, 4));
    while (!((@as([*c]adc_hw_t, @ptrFromInt(@as(c_uint, 1074397184))).*.cs & @as(c_uint, 256)) != 0)) {
        tight_loop_contents();
    }
    return @as(u16, @bitCast(@as(c_ushort, @truncate(@as([*c]adc_hw_t, @ptrFromInt(@as(c_uint, 1074397184))).*.result))));
}
pub fn adc_run(arg_run: bool) callconv(.c) void {
    var run = arg_run;
    _ = &run;
    if (run) {
        hw_set_bits(&@as([*c]adc_hw_t, @ptrFromInt(@as(c_uint, 1074397184))).*.cs, @as(c_uint, 8));
    } else {
        hw_clear_bits(&@as([*c]adc_hw_t, @ptrFromInt(@as(c_uint, 1074397184))).*.cs, @as(c_uint, 8));
    }
}
pub fn adc_set_clkdiv(arg_clkdiv: f32) callconv(.c) void {
    var clkdiv = arg_clkdiv;
    _ = &clkdiv;
    {
        if ((false or false) and !false) {
            _ = if (!(clkdiv >= @as(f32, @floatFromInt(@as(c_int, 1) << @intCast((@as(c_uint, 23) +% @as(c_uint, @bitCast(@as(c_int, 1)))) -% @as(c_uint, 8)))))) @as(c_int, 0) else __assert_func("/home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_adc/include/hardware/adc.h", @as(c_int, 205), "adc_set_clkdiv", "!(clkdiv >= 1 << (23u + 1 - 8u))");
        }
    }
    const frac_bit_count: c_int = @as(c_int, @bitCast((@as(c_uint, 7) +% @as(c_uint, @bitCast(@as(c_int, 1)))) -% @as(c_uint, 0)));
    _ = &frac_bit_count;
    clkdiv += 0.5 / @as(f32, @floatFromInt(@as(c_int, 1) << @intCast(frac_bit_count)));
    @as([*c]adc_hw_t, @ptrFromInt(@as(c_uint, 1074397184))).*.div = @as(u32, @intFromFloat(clkdiv * @as(f32, @floatFromInt(@as(c_int, 1) << @intCast(frac_bit_count)))));
}
pub fn adc_fifo_setup(arg_en: bool, arg_dreq_en: bool, arg_dreq_thresh: u16, arg_err_in_fifo: bool, arg_byte_shift: bool) callconv(.c) void {
    var en = arg_en;
    _ = &en;
    var dreq_en = arg_dreq_en;
    _ = &dreq_en;
    var dreq_thresh = arg_dreq_thresh;
    _ = &dreq_thresh;
    var err_in_fifo = arg_err_in_fifo;
    _ = &err_in_fifo;
    var byte_shift = arg_byte_shift;
    _ = &byte_shift;
    hw_write_masked(&@as([*c]adc_hw_t, @ptrFromInt(@as(c_uint, 1074397184))).*.fcs, ((((@as(uint, @intFromBool(!!en)) << @intCast(0)) | (@as(uint, @intFromBool(!!dreq_en)) << @intCast(3))) | (@as(uint, @bitCast(@as(c_uint, dreq_thresh))) << @intCast(24))) | (@as(uint, @intFromBool(!!err_in_fifo)) << @intCast(2))) | (@as(uint, @intFromBool(!!byte_shift)) << @intCast(1)), (((@as(c_uint, 1) | @as(c_uint, 8)) | @as(c_uint, 251658240)) | @as(c_uint, 4)) | @as(c_uint, 2));
}
pub fn adc_fifo_is_empty() callconv(.c) bool {
    return (@as([*c]adc_hw_t, @ptrFromInt(@as(c_uint, 1074397184))).*.fcs & @as(c_uint, 256)) != 0;
}
pub fn adc_fifo_get_level() callconv(.c) u8 {
    return @as(u8, @bitCast(@as(u8, @truncate((@as([*c]adc_hw_t, @ptrFromInt(@as(c_uint, 1074397184))).*.fcs & @as(c_uint, 983040)) >> @intCast(16)))));
}
pub fn adc_fifo_get() callconv(.c) u16 {
    return @as(u16, @bitCast(@as(c_ushort, @truncate(@as([*c]adc_hw_t, @ptrFromInt(@as(c_uint, 1074397184))).*.fifo))));
}
pub fn adc_fifo_get_blocking() callconv(.c) u16 {
    while (adc_fifo_is_empty()) {
        tight_loop_contents();
    }
    return @as(u16, @bitCast(@as(c_ushort, @truncate(@as([*c]adc_hw_t, @ptrFromInt(@as(c_uint, 1074397184))).*.fifo))));
}
pub fn adc_fifo_drain() callconv(.c) void {
    while (!((@as([*c]adc_hw_t, @ptrFromInt(@as(c_uint, 1074397184))).*.cs & @as(c_uint, 256)) != 0)) {
        tight_loop_contents();
    }
    while (!adc_fifo_is_empty()) {
        _ = adc_fifo_get();
    }
}
pub fn adc_irq_set_enabled(arg_enabled: bool) callconv(.c) void {
    var enabled = arg_enabled;
    _ = &enabled;
    @as([*c]adc_hw_t, @ptrFromInt(@as(c_uint, 1074397184))).*.inte = @as(u32, @intFromBool(!!enabled));
}
pub const timer_hw_t = extern struct {
    timehw: io_wo_32 = @import("std").mem.zeroes(io_wo_32),
    timelw: io_wo_32 = @import("std").mem.zeroes(io_wo_32),
    timehr: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    timelr: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    alarm: [4]io_rw_32 = @import("std").mem.zeroes([4]io_rw_32),
    armed: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    timerawh: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    timerawl: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    dbgpause: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    pause: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    locked: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    source: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    intr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    inte: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    intf: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    ints: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
};
// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration

// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration

// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration

// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub fn check_hardware_alarm_num_param(arg_alarm_num: uint) callconv(.c) void {
    var alarm_num = arg_alarm_num;
    _ = &alarm_num;
    {
        if ((false or false) and !false) {
            _ = if (!(alarm_num >= @as(c_uint, 4))) @as(c_int, 0) else __assert_func("/home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_timer/include/hardware/timer.h", @as(c_int, 189), "check_hardware_alarm_num_param", "!(alarm_num >= 4u)");
        }
    }
}
pub fn timer_time_us_32(arg_timer: [*c]timer_hw_t) callconv(.c) u32 {
    var timer = arg_timer;
    _ = &timer;
    return timer.*.timerawl;
}
pub fn time_us_32() callconv(.c) u32 {
    return timer_time_us_32(@as([*c]timer_hw_t, @ptrFromInt(@as(c_uint, 1074462720))));
}
pub extern fn timer_time_us_64(timer: [*c]timer_hw_t) u64;
pub extern fn time_us_64() u64;
pub extern fn timer_busy_wait_us_32(timer: [*c]timer_hw_t, delay_us: u32) void;
pub extern fn busy_wait_us_32(delay_us: u32) void;
pub extern fn timer_busy_wait_us(timer: [*c]timer_hw_t, delay_us: u64) void;
pub extern fn busy_wait_us(delay_us: u64) void;
pub extern fn timer_busy_wait_ms(timer: [*c]timer_hw_t, delay_ms: u32) void;
pub extern fn busy_wait_ms(delay_ms: u32) void;
pub extern fn timer_busy_wait_until(timer: [*c]timer_hw_t, t: absolute_time_t) void;
pub extern fn busy_wait_until(t: absolute_time_t) void;
pub fn timer_time_reached(arg_timer: [*c]timer_hw_t, arg_t: absolute_time_t) callconv(.c) bool {
    var timer = arg_timer;
    _ = &timer;
    var t = arg_t;
    _ = &t;
    var target: u64 = to_us_since_boot(t);
    _ = &target;
    var hi_target: u32 = @as(u32, @bitCast(@as(c_uint, @truncate(target >> @intCast(32)))));
    _ = &hi_target;
    var hi: u32 = timer.*.timerawh;
    _ = &hi;
    return (hi >= hi_target) and ((timer.*.timerawl >= @as(u32, @bitCast(@as(c_uint, @truncate(target))))) or (hi != hi_target));
}
pub fn time_reached(arg_t: absolute_time_t) callconv(.c) bool {
    var t = arg_t;
    _ = &t;
    return timer_time_reached(@as([*c]timer_hw_t, @ptrFromInt(@as(c_uint, 1074462720))), t);
}
pub const hardware_alarm_callback_t = ?*const fn (uint) callconv(.c) void;
pub extern fn timer_hardware_alarm_claim(timer: [*c]timer_hw_t, alarm_num: uint) void;
pub extern fn hardware_alarm_claim(alarm_num: uint) void;
pub extern fn timer_hardware_alarm_claim_unused(timer: [*c]timer_hw_t, required: bool) c_int;
pub extern fn hardware_alarm_claim_unused(required: bool) c_int;
pub extern fn timer_hardware_alarm_unclaim(timer: [*c]timer_hw_t, alarm_num: uint) void;
pub extern fn hardware_alarm_unclaim(alarm_num: uint) void;
pub extern fn timer_hardware_alarm_is_claimed(timer: [*c]timer_hw_t, alarm_num: uint) bool;
pub extern fn hardware_alarm_is_claimed(alarm_num: uint) bool;
pub extern fn timer_hardware_alarm_set_callback(timer: [*c]timer_hw_t, alarm_num: uint, callback: hardware_alarm_callback_t) void;
pub extern fn hardware_alarm_set_callback(alarm_num: uint, callback: hardware_alarm_callback_t) void;
pub extern fn timer_hardware_alarm_set_target(timer: [*c]timer_hw_t, alarm_num: uint, t: absolute_time_t) bool;
pub extern fn hardware_alarm_set_target(alarm_num: uint, t: absolute_time_t) bool;
pub extern fn timer_hardware_alarm_cancel(timer: [*c]timer_hw_t, alarm_num: uint) void;
pub extern fn hardware_alarm_cancel(alarm_num: uint) void;
pub extern fn timer_hardware_alarm_force_irq(timer: [*c]timer_hw_t, alarm_num: uint) void;
pub extern fn hardware_alarm_force_irq(alarm_num: uint) void;
pub fn timer_hardware_alarm_get_irq_num(arg_timer: [*c]timer_hw_t, arg_alarm_num: uint) callconv(.c) uint {
    var timer = arg_timer;
    _ = &timer;
    var alarm_num = arg_alarm_num;
    _ = &alarm_num;
    check_hardware_alarm_num_param(alarm_num);
    return (@as(c_uint, @bitCast(TIMER0_IRQ_0)) +% (@as(c_uint, @intFromBool(timer == @as([*c]timer_hw_t, @ptrFromInt(@as(c_uint, 1074495488))))) *% @as(c_uint, 4))) +% alarm_num;
}
pub fn hardware_alarm_get_irq_num(arg_alarm_num: uint) callconv(.c) uint {
    var alarm_num = arg_alarm_num;
    _ = &alarm_num;
    return timer_hardware_alarm_get_irq_num(@as([*c]timer_hw_t, @ptrFromInt(@as(c_uint, 1074462720))), alarm_num);
}
pub fn timer_get_index(arg_timer: [*c]timer_hw_t) callconv(.c) uint {
    var timer = arg_timer;
    _ = &timer;
    return @as(uint, @intFromBool(timer == @as([*c]timer_hw_t, @ptrFromInt(@as(c_uint, 1074495488)))));
}
pub fn timer_get_instance(arg_timer_num: uint) callconv(.c) [*c]timer_hw_t {
    var timer_num = arg_timer_num;
    _ = &timer_num;
    {
        if ((false or false) and !false) {
            _ = if (!(timer_num >= @as(c_uint, 2))) @as(c_int, 0) else __assert_func("/home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_timer/include/hardware/timer.h", @as(c_int, 591), "timer_get_instance", "!(timer_num >= 2u)");
        }
    }
    return if (timer_num != 0) @as([*c]timer_hw_t, @ptrFromInt(@as(c_uint, 1074495488))) else @as([*c]timer_hw_t, @ptrFromInt(@as(c_uint, 1074462720)));
}
pub fn get_absolute_time() callconv(.c) absolute_time_t {
    var t: absolute_time_t = undefined;
    _ = &t;
    update_us_since_boot(&t, time_us_64());
    return t;
}
pub fn us_to_ms(arg_us: u64) callconv(.c) u32 {
    var us = arg_us;
    _ = &us;
    if ((us >> @intCast(32)) != 0) {
        return @as(u32, @bitCast(@as(c_uint, @truncate(us / @as(u64, @bitCast(@as(c_ulonglong, @as(c_uint, 1000))))))));
    } else {
        return @as(u32, @bitCast(@as(c_uint, @truncate(us)))) / @as(c_uint, 1000);
    }
    return @import("std").mem.zeroes(u32);
}
pub fn to_ms_since_boot(arg_t: absolute_time_t) callconv(.c) u32 {
    var t = arg_t;
    _ = &t;
    var us: u64 = to_us_since_boot(t);
    _ = &us;
    return us_to_ms(us);
}
pub fn delayed_by_us(t: absolute_time_t, arg_us: u64) callconv(.c) absolute_time_t {
    _ = &t;
    var us = arg_us;
    _ = &us;
    var t2: absolute_time_t = undefined;
    _ = &t2;
    var base: u64 = to_us_since_boot(t);
    _ = &base;
    var delayed: u64 = base +% us;
    _ = &delayed;
    if (@as(i64, @bitCast(delayed)) < @as(i64, @bitCast(@as(c_longlong, @as(c_int, 0))))) {
        delayed = @as(u64, @bitCast(@as(c_longlong, 9223372036854775807)));
    }
    update_us_since_boot(&t2, delayed);
    return t2;
}
pub fn delayed_by_ms(t: absolute_time_t, arg_ms: u32) callconv(.c) absolute_time_t {
    _ = &t;
    var ms = arg_ms;
    _ = &ms;
    var t2: absolute_time_t = undefined;
    _ = &t2;
    var base: u64 = to_us_since_boot(t);
    _ = &base;
    var delayed: u64 = base +% (@as(c_ulonglong, @bitCast(@as(c_ulonglong, ms))) *% @as(c_ulonglong, 1000));
    _ = &delayed;
    if (@as(i64, @bitCast(delayed)) < @as(i64, @bitCast(@as(c_longlong, @as(c_int, 0))))) {
        delayed = @as(u64, @bitCast(@as(c_longlong, 9223372036854775807)));
    }
    update_us_since_boot(&t2, delayed);
    return t2;
}
pub fn make_timeout_time_us(arg_us: u64) callconv(.c) absolute_time_t {
    var us = arg_us;
    _ = &us;
    return delayed_by_us(get_absolute_time(), us);
}
pub fn make_timeout_time_ms(arg_ms: u32) callconv(.c) absolute_time_t {
    var ms = arg_ms;
    _ = &ms;
    return delayed_by_ms(get_absolute_time(), ms);
}
pub fn absolute_time_diff_us(arg_from: absolute_time_t, arg_to: absolute_time_t) callconv(.c) i64 {
    var from = arg_from;
    _ = &from;
    var to = arg_to;
    _ = &to;
    return @as(i64, @bitCast(to_us_since_boot(to) -% to_us_since_boot(from)));
}
pub fn absolute_time_min(arg_a: absolute_time_t, arg_b: absolute_time_t) callconv(.c) absolute_time_t {
    var a = arg_a;
    _ = &a;
    var b = arg_b;
    _ = &b;
    return if (to_us_since_boot(a) < to_us_since_boot(b)) a else b;
}
pub extern const at_the_end_of_time: absolute_time_t;
pub fn is_at_the_end_of_time(arg_t: absolute_time_t) callconv(.c) bool {
    var t = arg_t;
    _ = &t;
    return to_us_since_boot(t) == to_us_since_boot(at_the_end_of_time);
}
pub extern const nil_time: absolute_time_t;
pub fn is_nil_time(arg_t: absolute_time_t) callconv(.c) bool {
    var t = arg_t;
    _ = &t;
    return !(to_us_since_boot(t) != 0);
}
pub extern fn sleep_until(target: absolute_time_t) void;
pub extern fn sleep_us(us: u64) void;
pub extern fn sleep_ms(ms: u32) void;
pub extern fn best_effort_wfe_or_timeout(timeout_timestamp: absolute_time_t) bool;
pub const alarm_id_t = i32;
pub const alarm_callback_t = ?*const fn (alarm_id_t, ?*anyopaque) callconv(.c) i64;
pub const struct_alarm_pool = opaque {};
pub const alarm_pool_t = struct_alarm_pool;
pub const alarm_pool_timer_t = anyopaque;
pub extern fn alarm_pool_init_default() void;
pub extern fn runtime_init_default_alarm_pool() void;
pub extern fn alarm_pool_get_default() ?*alarm_pool_t;
pub extern fn alarm_pool_create_on_timer(timer: ?*alarm_pool_timer_t, timer_alarm_num: uint, max_timers: uint) ?*alarm_pool_t;
pub extern fn alarm_pool_timer_for_timer_num(timer_num: uint) ?*alarm_pool_timer_t;
pub extern fn alarm_pool_get_default_timer() ?*alarm_pool_timer_t;
pub fn alarm_pool_create(arg_timer_alarm_num: uint, arg_max_timers: uint) callconv(.c) ?*alarm_pool_t {
    var timer_alarm_num = arg_timer_alarm_num;
    _ = &timer_alarm_num;
    var max_timers = arg_max_timers;
    _ = &max_timers;
    return alarm_pool_create_on_timer(alarm_pool_get_default_timer(), timer_alarm_num, max_timers);
}
pub extern fn alarm_pool_create_on_timer_with_unused_hardware_alarm(timer: ?*alarm_pool_timer_t, max_timers: uint) ?*alarm_pool_t;
pub fn alarm_pool_create_with_unused_hardware_alarm(arg_max_timers: uint) callconv(.c) ?*alarm_pool_t {
    var max_timers = arg_max_timers;
    _ = &max_timers;
    return alarm_pool_create_on_timer_with_unused_hardware_alarm(alarm_pool_get_default_timer(), max_timers);
}
pub extern fn alarm_pool_timer_alarm_num(pool: ?*alarm_pool_t) uint;
pub fn alarm_pool_hardware_alarm_num(arg_pool: ?*alarm_pool_t) callconv(.c) uint {
    var pool = arg_pool;
    _ = &pool;
    return alarm_pool_timer_alarm_num(pool);
}
pub extern fn alarm_pool_core_num(pool: ?*alarm_pool_t) uint;
pub extern fn alarm_pool_destroy(pool: ?*alarm_pool_t) void;
pub extern fn alarm_pool_add_alarm_at(pool: ?*alarm_pool_t, time: absolute_time_t, callback: alarm_callback_t, user_data: ?*anyopaque, fire_if_past: bool) alarm_id_t;
pub extern fn alarm_pool_add_alarm_at_force_in_context(pool: ?*alarm_pool_t, time: absolute_time_t, callback: alarm_callback_t, user_data: ?*anyopaque) alarm_id_t;
pub fn alarm_pool_add_alarm_in_us(arg_pool: ?*alarm_pool_t, arg_us: u64, arg_callback: alarm_callback_t, arg_user_data: ?*anyopaque, arg_fire_if_past: bool) callconv(.c) alarm_id_t {
    var pool = arg_pool;
    _ = &pool;
    var us = arg_us;
    _ = &us;
    var callback = arg_callback;
    _ = &callback;
    var user_data = arg_user_data;
    _ = &user_data;
    var fire_if_past = arg_fire_if_past;
    _ = &fire_if_past;
    return alarm_pool_add_alarm_at(pool, delayed_by_us(get_absolute_time(), us), callback, user_data, fire_if_past);
}
pub fn alarm_pool_add_alarm_in_ms(arg_pool: ?*alarm_pool_t, arg_ms: u32, arg_callback: alarm_callback_t, arg_user_data: ?*anyopaque, arg_fire_if_past: bool) callconv(.c) alarm_id_t {
    var pool = arg_pool;
    _ = &pool;
    var ms = arg_ms;
    _ = &ms;
    var callback = arg_callback;
    _ = &callback;
    var user_data = arg_user_data;
    _ = &user_data;
    var fire_if_past = arg_fire_if_past;
    _ = &fire_if_past;
    return alarm_pool_add_alarm_at(pool, delayed_by_ms(get_absolute_time(), ms), callback, user_data, fire_if_past);
}
pub extern fn alarm_pool_remaining_alarm_time_us(pool: ?*alarm_pool_t, alarm_id: alarm_id_t) i64;
pub extern fn alarm_pool_remaining_alarm_time_ms(pool: ?*alarm_pool_t, alarm_id: alarm_id_t) i32;
pub extern fn alarm_pool_cancel_alarm(pool: ?*alarm_pool_t, alarm_id: alarm_id_t) bool;
pub fn add_alarm_at(arg_time_1: absolute_time_t, arg_callback: alarm_callback_t, arg_user_data: ?*anyopaque, arg_fire_if_past: bool) callconv(.c) alarm_id_t {
    var time_1 = arg_time_1;
    _ = &time_1;
    var callback = arg_callback;
    _ = &callback;
    var user_data = arg_user_data;
    _ = &user_data;
    var fire_if_past = arg_fire_if_past;
    _ = &fire_if_past;
    return alarm_pool_add_alarm_at(alarm_pool_get_default(), time_1, callback, user_data, fire_if_past);
}
pub fn add_alarm_in_us(arg_us: u64, arg_callback: alarm_callback_t, arg_user_data: ?*anyopaque, arg_fire_if_past: bool) callconv(.c) alarm_id_t {
    var us = arg_us;
    _ = &us;
    var callback = arg_callback;
    _ = &callback;
    var user_data = arg_user_data;
    _ = &user_data;
    var fire_if_past = arg_fire_if_past;
    _ = &fire_if_past;
    return alarm_pool_add_alarm_in_us(alarm_pool_get_default(), us, callback, user_data, fire_if_past);
}
pub fn add_alarm_in_ms(arg_ms: u32, arg_callback: alarm_callback_t, arg_user_data: ?*anyopaque, arg_fire_if_past: bool) callconv(.c) alarm_id_t {
    var ms = arg_ms;
    _ = &ms;
    var callback = arg_callback;
    _ = &callback;
    var user_data = arg_user_data;
    _ = &user_data;
    var fire_if_past = arg_fire_if_past;
    _ = &fire_if_past;
    return alarm_pool_add_alarm_in_ms(alarm_pool_get_default(), ms, callback, user_data, fire_if_past);
}
pub fn cancel_alarm(arg_alarm_id: alarm_id_t) callconv(.c) bool {
    var alarm_id = arg_alarm_id;
    _ = &alarm_id;
    return alarm_pool_cancel_alarm(alarm_pool_get_default(), alarm_id);
}
pub extern fn remaining_alarm_time_us(alarm_id: alarm_id_t) i64;
pub extern fn remaining_alarm_time_ms(alarm_id: alarm_id_t) i32;
pub const repeating_timer_t = struct_repeating_timer;
pub const repeating_timer_callback_t = ?*const fn ([*c]repeating_timer_t) callconv(.c) bool;
pub const struct_repeating_timer = extern struct {
    delay_us: i64 = @import("std").mem.zeroes(i64),
    pool: ?*alarm_pool_t = @import("std").mem.zeroes(?*alarm_pool_t),
    alarm_id: alarm_id_t = @import("std").mem.zeroes(alarm_id_t),
    callback: repeating_timer_callback_t = @import("std").mem.zeroes(repeating_timer_callback_t),
    user_data: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub extern fn alarm_pool_add_repeating_timer_us(pool: ?*alarm_pool_t, delay_us: i64, callback: repeating_timer_callback_t, user_data: ?*anyopaque, out: [*c]repeating_timer_t) bool;
pub fn alarm_pool_add_repeating_timer_ms(arg_pool: ?*alarm_pool_t, arg_delay_ms: i32, arg_callback: repeating_timer_callback_t, arg_user_data: ?*anyopaque, arg_out: [*c]repeating_timer_t) callconv(.c) bool {
    var pool = arg_pool;
    _ = &pool;
    var delay_ms = arg_delay_ms;
    _ = &delay_ms;
    var callback = arg_callback;
    _ = &callback;
    var user_data = arg_user_data;
    _ = &user_data;
    var out = arg_out;
    _ = &out;
    return alarm_pool_add_repeating_timer_us(pool, @as(i64, @bitCast(@as(c_longlong, delay_ms))) * @as(i64, @bitCast(@as(c_longlong, @as(c_int, 1000)))), callback, user_data, out);
}
pub fn add_repeating_timer_us(arg_delay_us: i64, arg_callback: repeating_timer_callback_t, arg_user_data: ?*anyopaque, arg_out: [*c]repeating_timer_t) callconv(.c) bool {
    var delay_us = arg_delay_us;
    _ = &delay_us;
    var callback = arg_callback;
    _ = &callback;
    var user_data = arg_user_data;
    _ = &user_data;
    var out = arg_out;
    _ = &out;
    return alarm_pool_add_repeating_timer_us(alarm_pool_get_default(), delay_us, callback, user_data, out);
}
pub fn add_repeating_timer_ms(arg_delay_ms: i32, arg_callback: repeating_timer_callback_t, arg_user_data: ?*anyopaque, arg_out: [*c]repeating_timer_t) callconv(.c) bool {
    var delay_ms = arg_delay_ms;
    _ = &delay_ms;
    var callback = arg_callback;
    _ = &callback;
    var user_data = arg_user_data;
    _ = &user_data;
    var out = arg_out;
    _ = &out;
    return alarm_pool_add_repeating_timer_us(alarm_pool_get_default(), @as(i64, @bitCast(@as(c_longlong, delay_ms))) * @as(i64, @bitCast(@as(c_longlong, @as(c_int, 1000)))), callback, user_data, out);
}
pub extern fn cancel_repeating_timer(timer: [*c]repeating_timer_t) bool;
pub fn cyw43_hal_ticks_us() callconv(.c) u32 {
    return time_us_32();
}
pub fn cyw43_hal_ticks_ms() callconv(.c) u32 {
    return to_ms_since_boot(get_absolute_time());
}
pub fn cyw43_hal_pin_read(arg_pin: uint) callconv(.c) c_int {
    var pin = arg_pin;
    _ = &pin;
    return @as(c_int, @intFromBool(gpio_get(pin)));
}
pub fn cyw43_hal_pin_low(arg_pin: uint) callconv(.c) void {
    var pin = arg_pin;
    _ = &pin;
    gpio_put(pin, @as(c_int, 0) != 0);
}
pub fn cyw43_hal_pin_high(arg_pin: uint) callconv(.c) void {
    var pin = arg_pin;
    _ = &pin;
    gpio_put(pin, @as(c_int, 1) != 0);
}
pub fn cyw43_hal_pin_config(arg_pin: uint, arg_mode: u32, arg_pull: u32, arg_alt: u32) callconv(.c) void {
    var pin = arg_pin;
    _ = &pin;
    var mode = arg_mode;
    _ = &mode;
    var pull = arg_pull;
    _ = &pull;
    var alt = arg_alt;
    _ = &alt;
    _ = if (((mode == @as(u32, @bitCast(GPIO_IN))) or (mode == @as(u32, @bitCast(GPIO_OUT)))) and (alt == @as(u32, @bitCast(@as(c_int, 0))))) @as(c_int, 0) else __assert_func("/home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_cyw43_driver/include/cyw43_configport.h", @as(c_int, 155), "cyw43_hal_pin_config", "(mode == CYW43_HAL_PIN_MODE_INPUT || mode == CYW43_HAL_PIN_MODE_OUTPUT) && alt == 0");
    gpio_set_dir(pin, mode != 0);
    gpio_set_pulls(pin, pull == @as(u32, @bitCast(@as(c_int, 1))), pull == @as(u32, @bitCast(@as(c_int, 2))));
}
pub extern fn cyw43_hal_get_mac(idx: c_int, buf: [*c]u8) void;
pub extern fn cyw43_hal_generate_laa_mac(idx: c_int, buf: [*c]u8) void;
pub extern fn cyw43_thread_enter() void;
pub extern fn cyw43_thread_exit() void;
pub extern fn cyw43_thread_lock_check() void;
pub extern fn cyw43_await_background_or_timeout_us(timeout_us: u32) void;
pub extern fn cyw43_delay_ms(ms: u32) void;
pub extern fn cyw43_delay_us(us: u32) void;
pub extern fn cyw43_schedule_internal_poll_dispatch(func: ?*const fn () callconv(.c) void) void;
pub extern fn cyw43_post_poll_hook() void;
pub const struct___va_list_3 = extern struct {
    __ap: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const __builtin_va_list = struct___va_list_3;
pub const __gnuc_va_list = __builtin_va_list;
pub const va_list = __gnuc_va_list;
pub const wint_t = c_int;
pub const __blkcnt_t = c_long;
pub const __blksize_t = c_long;
pub const __fsblkcnt_t = __uint64_t;
pub const __fsfilcnt_t = __uint32_t;
pub const _off_t = c_long;
pub const __pid_t = c_int;
pub const __dev_t = c_short;
pub const __uid_t = c_ushort;
pub const __gid_t = c_ushort;
pub const __id_t = __uint32_t;
pub const __ino_t = c_ushort;
pub const __mode_t = __uint32_t;
pub const _off64_t = c_longlong;
pub const __off_t = _off_t;
pub const __loff_t = _off64_t;
pub const __key_t = c_long;
pub const _fpos_t = c_long;
pub const __size_t = c_uint;
pub const _ssize_t = c_int;
pub const __ssize_t = _ssize_t;
const union_unnamed_4 = extern union {
    __wch: wint_t,
    __wchb: [4]u8,
};
pub const _mbstate_t = extern struct {
    __count: c_int = @import("std").mem.zeroes(c_int),
    __value: union_unnamed_4 = @import("std").mem.zeroes(union_unnamed_4),
};
pub const _iconv_t = ?*anyopaque;
pub const __clock_t = c_ulong;
pub const __time_t = i64;
pub const __clockid_t = c_ulong;
pub const __daddr_t = c_long;
pub const __timer_t = c_ulong;
pub const __sa_family_t = __uint8_t;
pub const __socklen_t = __uint32_t;
pub const __nl_item = c_int;
pub const __nlink_t = c_ushort;
pub const __suseconds_t = c_long;
pub const __useconds_t = c_ulong;
pub const __va_list = __builtin_va_list;
pub const __ULong = c_ulong;
pub const struct___lock = opaque {};
pub const _LOCK_T = ?*struct___lock;
pub extern fn __retarget_lock_init(lock: [*c]_LOCK_T) void;
pub extern fn __retarget_lock_init_recursive(lock: [*c]_LOCK_T) void;
pub extern fn __retarget_lock_close(lock: _LOCK_T) void;
pub extern fn __retarget_lock_close_recursive(lock: _LOCK_T) void;
pub extern fn __retarget_lock_acquire(lock: _LOCK_T) void;
pub extern fn __retarget_lock_acquire_recursive(lock: _LOCK_T) void;
pub extern fn __retarget_lock_try_acquire(lock: _LOCK_T) c_int;
pub extern fn __retarget_lock_try_acquire_recursive(lock: _LOCK_T) c_int;
pub extern fn __retarget_lock_release(lock: _LOCK_T) void;
pub extern fn __retarget_lock_release_recursive(lock: _LOCK_T) void;
pub const _flock_t = _LOCK_T;
pub const struct___sbuf = extern struct {
    _base: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _size: c_int = @import("std").mem.zeroes(c_int),
};
pub const struct___sFILE = extern struct {
    _p: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _r: c_int = @import("std").mem.zeroes(c_int),
    _w: c_int = @import("std").mem.zeroes(c_int),
    _flags: c_short = @import("std").mem.zeroes(c_short),
    _file: c_short = @import("std").mem.zeroes(c_short),
    _bf: struct___sbuf = @import("std").mem.zeroes(struct___sbuf),
    _lbfsize: c_int = @import("std").mem.zeroes(c_int),
    _cookie: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    _read: ?*const fn ([*c]struct__reent, ?*anyopaque, [*c]u8, c_int) callconv(.c) c_int = @import("std").mem.zeroes(?*const fn ([*c]struct__reent, ?*anyopaque, [*c]u8, c_int) callconv(.c) c_int),
    _write: ?*const fn ([*c]struct__reent, ?*anyopaque, [*c]const u8, c_int) callconv(.c) c_int = @import("std").mem.zeroes(?*const fn ([*c]struct__reent, ?*anyopaque, [*c]const u8, c_int) callconv(.c) c_int),
    _seek: ?*const fn ([*c]struct__reent, ?*anyopaque, _fpos_t, c_int) callconv(.c) _fpos_t = @import("std").mem.zeroes(?*const fn ([*c]struct__reent, ?*anyopaque, _fpos_t, c_int) callconv(.c) _fpos_t),
    _close: ?*const fn ([*c]struct__reent, ?*anyopaque) callconv(.c) c_int = @import("std").mem.zeroes(?*const fn ([*c]struct__reent, ?*anyopaque) callconv(.c) c_int),
    _ub: struct___sbuf = @import("std").mem.zeroes(struct___sbuf),
    _up: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _ur: c_int = @import("std").mem.zeroes(c_int),
    _ubuf: [3]u8 = @import("std").mem.zeroes([3]u8),
    _nbuf: [1]u8 = @import("std").mem.zeroes([1]u8),
    _lb: struct___sbuf = @import("std").mem.zeroes(struct___sbuf),
    _blksize: c_int = @import("std").mem.zeroes(c_int),
    _offset: _off_t = @import("std").mem.zeroes(_off_t),
    _data: [*c]struct__reent = @import("std").mem.zeroes([*c]struct__reent),
    _lock: _flock_t = @import("std").mem.zeroes(_flock_t),
    _mbstate: _mbstate_t = @import("std").mem.zeroes(_mbstate_t),
    _flags2: c_int = @import("std").mem.zeroes(c_int),
};
pub const __FILE = struct___sFILE;
pub const struct___locale_t = opaque {};
pub const struct__Bigint = extern struct {
    _next: [*c]struct__Bigint = @import("std").mem.zeroes([*c]struct__Bigint),
    _k: c_int = @import("std").mem.zeroes(c_int),
    _maxwds: c_int = @import("std").mem.zeroes(c_int),
    _sign: c_int = @import("std").mem.zeroes(c_int),
    _wds: c_int = @import("std").mem.zeroes(c_int),
    _x: [1]__ULong = @import("std").mem.zeroes([1]__ULong),
};
pub const struct___tm = extern struct {
    __tm_sec: c_int = @import("std").mem.zeroes(c_int),
    __tm_min: c_int = @import("std").mem.zeroes(c_int),
    __tm_hour: c_int = @import("std").mem.zeroes(c_int),
    __tm_mday: c_int = @import("std").mem.zeroes(c_int),
    __tm_mon: c_int = @import("std").mem.zeroes(c_int),
    __tm_year: c_int = @import("std").mem.zeroes(c_int),
    __tm_wday: c_int = @import("std").mem.zeroes(c_int),
    __tm_yday: c_int = @import("std").mem.zeroes(c_int),
    __tm_isdst: c_int = @import("std").mem.zeroes(c_int),
};
pub const struct__rand48 = extern struct {
    _seed: [3]c_ushort = @import("std").mem.zeroes([3]c_ushort),
    _mult: [3]c_ushort = @import("std").mem.zeroes([3]c_ushort),
    _add: c_ushort = @import("std").mem.zeroes(c_ushort),
};
const struct_unnamed_6 = extern struct {
    _strtok_last: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _asctime_buf: [26]u8 = @import("std").mem.zeroes([26]u8),
    _localtime_buf: struct___tm = @import("std").mem.zeroes(struct___tm),
    _gamma_signgam: c_int = @import("std").mem.zeroes(c_int),
    _rand_next: c_ulonglong = @import("std").mem.zeroes(c_ulonglong),
    _r48: struct__rand48 = @import("std").mem.zeroes(struct__rand48),
    _mblen_state: _mbstate_t = @import("std").mem.zeroes(_mbstate_t),
    _mbtowc_state: _mbstate_t = @import("std").mem.zeroes(_mbstate_t),
    _wctomb_state: _mbstate_t = @import("std").mem.zeroes(_mbstate_t),
    _l64a_buf: [8]u8 = @import("std").mem.zeroes([8]u8),
    _signal_buf: [24]u8 = @import("std").mem.zeroes([24]u8),
    _getdate_err: c_int = @import("std").mem.zeroes(c_int),
    _mbrlen_state: _mbstate_t = @import("std").mem.zeroes(_mbstate_t),
    _mbrtowc_state: _mbstate_t = @import("std").mem.zeroes(_mbstate_t),
    _mbsrtowcs_state: _mbstate_t = @import("std").mem.zeroes(_mbstate_t),
    _wcrtomb_state: _mbstate_t = @import("std").mem.zeroes(_mbstate_t),
    _wcsrtombs_state: _mbstate_t = @import("std").mem.zeroes(_mbstate_t),
    _h_errno: c_int = @import("std").mem.zeroes(c_int),
    _getlocalename_l_buf: [32]u8 = @import("std").mem.zeroes([32]u8),
};
const union_unnamed_5 = extern union {
    _reent: struct_unnamed_6,
};
pub const struct__reent = extern struct {
    _errno: c_int = @import("std").mem.zeroes(c_int),
    _stdin: [*c]__FILE = @import("std").mem.zeroes([*c]__FILE),
    _stdout: [*c]__FILE = @import("std").mem.zeroes([*c]__FILE),
    _stderr: [*c]__FILE = @import("std").mem.zeroes([*c]__FILE),
    _inc: c_int = @import("std").mem.zeroes(c_int),
    _emergency: [25]u8 = @import("std").mem.zeroes([25]u8),
    _locale: ?*struct___locale_t = @import("std").mem.zeroes(?*struct___locale_t),
    __cleanup: ?*const fn ([*c]struct__reent) callconv(.c) void = @import("std").mem.zeroes(?*const fn ([*c]struct__reent) callconv(.c) void),
    _result: [*c]struct__Bigint = @import("std").mem.zeroes([*c]struct__Bigint),
    _result_k: c_int = @import("std").mem.zeroes(c_int),
    _p5s: [*c]struct__Bigint = @import("std").mem.zeroes([*c]struct__Bigint),
    _freelist: [*c][*c]struct__Bigint = @import("std").mem.zeroes([*c][*c]struct__Bigint),
    _cvtlen: c_int = @import("std").mem.zeroes(c_int),
    _cvtbuf: [*c]u8 = @import("std").mem.zeroes([*c]u8),
    _new: union_unnamed_5 = @import("std").mem.zeroes(union_unnamed_5),
    _sig_func: [*c]?*const fn (c_int) callconv(.c) void = @import("std").mem.zeroes([*c]?*const fn (c_int) callconv(.c) void),
};
pub const struct__on_exit_args = extern struct {
    _fnargs: [32]?*anyopaque = @import("std").mem.zeroes([32]?*anyopaque),
    _dso_handle: [32]?*anyopaque = @import("std").mem.zeroes([32]?*anyopaque),
    _fntypes: __ULong = @import("std").mem.zeroes(__ULong),
    _is_cxa: __ULong = @import("std").mem.zeroes(__ULong),
};
pub const struct__atexit = extern struct {
    _next: [*c]struct__atexit = @import("std").mem.zeroes([*c]struct__atexit),
    _ind: c_int = @import("std").mem.zeroes(c_int),
    _fns: [32]?*const fn () callconv(.c) void = @import("std").mem.zeroes([32]?*const fn () callconv(.c) void),
    _on_exit_args: struct__on_exit_args = @import("std").mem.zeroes(struct__on_exit_args),
};
pub extern var __sf: [3]__FILE;
pub const struct__glue = extern struct {
    _next: [*c]struct__glue = @import("std").mem.zeroes([*c]struct__glue),
    _niobs: c_int = @import("std").mem.zeroes(c_int),
    _iobs: [*c]__FILE = @import("std").mem.zeroes([*c]__FILE),
};
pub extern var __sglue: struct__glue;
pub extern var _impure_ptr: [*c]struct__reent;
pub extern var _impure_data: struct__reent;
pub extern var __atexit: [*c]struct__atexit;
pub extern var __atexit0: struct__atexit;
pub extern var __stdio_exit_handler: ?*const fn () callconv(.c) void;
pub extern fn _reclaim_reent([*c]struct__reent) void;
pub extern fn _fwalk_sglue([*c]struct__reent, ?*const fn ([*c]struct__reent, [*c]__FILE) callconv(.c) c_int, [*c]struct__glue) c_int;
pub const FILE = __FILE;
pub const fpos_t = _fpos_t;
pub const off_t = __off_t;
pub extern fn ctermid([*c]u8) [*c]u8;
pub extern fn tmpfile() [*c]FILE;
pub extern fn tmpnam([*c]u8) [*c]u8;
pub extern fn tempnam([*c]const u8, [*c]const u8) [*c]u8;
pub extern fn fclose([*c]FILE) c_int;
pub extern fn fflush([*c]FILE) c_int;
pub extern fn freopen(noalias [*c]const u8, noalias [*c]const u8, noalias [*c]FILE) [*c]FILE;
pub extern fn setbuf(noalias [*c]FILE, noalias [*c]u8) void;
pub extern fn setvbuf(noalias [*c]FILE, noalias [*c]u8, c_int, usize) c_int;
pub extern fn fprintf(noalias [*c]FILE, noalias [*c]const u8, ...) c_int;
pub extern fn fscanf(noalias [*c]FILE, noalias [*c]const u8, ...) c_int;
pub extern fn printf(noalias [*c]const u8, ...) c_int;
pub extern fn scanf(noalias [*c]const u8, ...) c_int;
pub extern fn sscanf(noalias [*c]const u8, noalias [*c]const u8, ...) c_int;
pub extern fn vfprintf(noalias [*c]FILE, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vprintf([*c]const u8, __gnuc_va_list) c_int;
pub extern fn vsprintf(noalias [*c]u8, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn fgetc([*c]FILE) c_int;
pub inline fn fgets(noalias arg___buf: [*c]u8, arg___len: c_int, noalias arg___fp: [*c]FILE) [*c]u8 {
    var __buf = arg___buf;
    _ = &__buf;
    var __len = arg___len;
    _ = &__len;
    var __fp = arg___fp;
    _ = &__fp;
    if (__len > @as(c_int, 0)) if ((__builtin_object_size(@as(?*const anyopaque, @ptrCast(__buf)), @as(c_int, 0)) != @as(usize, @bitCast(-@as(c_int, 1)))) and (@as(usize, @bitCast(__len)) > __builtin_object_size(@as(?*const anyopaque, @ptrCast(__buf)), @intFromBool(@as(c_int, 2) > @as(c_int, 1))))) {
        __chk_fail();
    };
    return __ssp_real_fgets(__buf, __len, __fp);
}
pub extern fn fputc(c_int, [*c]FILE) c_int;
pub extern fn fputs(noalias [*c]const u8, noalias [*c]FILE) c_int;
pub extern fn getc([*c]FILE) c_int;
pub extern fn getchar() c_int;
pub extern fn gets([*c]u8) [*c]u8;
pub extern fn putc(c_int, [*c]FILE) c_int;
pub extern fn putchar(c_int) c_int;
pub extern fn puts([*c]const u8) c_int;
pub extern fn ungetc(c_int, [*c]FILE) c_int;
pub inline fn fread(noalias arg___ptr: ?*anyopaque, arg___size: usize, arg___n: usize, noalias arg___fp: [*c]FILE) usize {
    var __ptr = arg___ptr;
    _ = &__ptr;
    var __size = arg___size;
    _ = &__size;
    var __n = arg___n;
    _ = &__n;
    var __fp = arg___fp;
    _ = &__fp;
    if ((__builtin_object_size(__ptr, @as(c_int, 0)) != @as(usize, @bitCast(-@as(c_int, 1)))) and ((__size *% __n) > __builtin_object_size(__ptr, @as(c_int, 0)))) {
        __chk_fail();
    }
    return __ssp_real_fread(__ptr, __size, __n, __fp);
}
pub extern fn fwrite(noalias ?*const anyopaque, _size: usize, _n: usize, [*c]FILE) usize;
pub extern fn fgetpos(noalias [*c]FILE, noalias [*c]fpos_t) c_int;
pub extern fn fseek([*c]FILE, c_long, c_int) c_int;
pub extern fn fsetpos([*c]FILE, [*c]const fpos_t) c_int;
pub extern fn ftell([*c]FILE) c_long;
pub extern fn rewind([*c]FILE) void;
pub extern fn clearerr([*c]FILE) void;
pub extern fn feof([*c]FILE) c_int;
pub extern fn ferror([*c]FILE) c_int;
pub extern fn perror([*c]const u8) void;
pub extern fn fopen(noalias _name: [*c]const u8, noalias _type: [*c]const u8) [*c]FILE;
pub extern fn sprintf(noalias [*c]u8, noalias [*c]const u8, ...) c_int;
pub extern fn remove([*c]const u8) c_int;
pub extern fn rename([*c]const u8, [*c]const u8) c_int;
pub extern fn fseeko([*c]FILE, off_t, c_int) c_int;
pub extern fn ftello([*c]FILE) off_t;
pub extern fn snprintf(noalias [*c]u8, usize, noalias [*c]const u8, ...) c_int;
pub extern fn vsnprintf(noalias [*c]u8, usize, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vfscanf(noalias [*c]FILE, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vscanf([*c]const u8, __gnuc_va_list) c_int;
pub extern fn vsscanf(noalias [*c]const u8, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn asiprintf([*c][*c]u8, [*c]const u8, ...) c_int;
pub extern fn asniprintf([*c]u8, [*c]usize, [*c]const u8, ...) [*c]u8;
pub extern fn asnprintf(noalias [*c]u8, noalias [*c]usize, noalias [*c]const u8, ...) [*c]u8;
pub extern fn diprintf(c_int, [*c]const u8, ...) c_int;
pub extern fn fiprintf([*c]FILE, [*c]const u8, ...) c_int;
pub extern fn fiscanf([*c]FILE, [*c]const u8, ...) c_int;
pub extern fn iprintf([*c]const u8, ...) c_int;
pub extern fn iscanf([*c]const u8, ...) c_int;
pub extern fn siprintf([*c]u8, [*c]const u8, ...) c_int;
pub extern fn siscanf([*c]const u8, [*c]const u8, ...) c_int;
pub extern fn sniprintf([*c]u8, usize, [*c]const u8, ...) c_int;
pub extern fn vasiprintf([*c][*c]u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vasniprintf([*c]u8, [*c]usize, [*c]const u8, __gnuc_va_list) [*c]u8;
pub extern fn vasnprintf([*c]u8, [*c]usize, [*c]const u8, __gnuc_va_list) [*c]u8;
pub extern fn vdiprintf(c_int, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vfiprintf([*c]FILE, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vfiscanf([*c]FILE, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn viprintf([*c]const u8, __gnuc_va_list) c_int;
pub extern fn viscanf([*c]const u8, __gnuc_va_list) c_int;
pub extern fn vsiprintf([*c]u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vsiscanf([*c]const u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vsniprintf([*c]u8, usize, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn fdopen(c_int, [*c]const u8) [*c]FILE;
pub extern fn fileno([*c]FILE) c_int;
pub extern fn pclose([*c]FILE) c_int;
pub extern fn popen([*c]const u8, [*c]const u8) [*c]FILE;
pub extern fn setbuffer([*c]FILE, [*c]u8, c_int) void;
pub extern fn setlinebuf([*c]FILE) c_int;
pub extern fn getw([*c]FILE) c_int;
pub extern fn putw(c_int, [*c]FILE) c_int;
pub extern fn getc_unlocked([*c]FILE) c_int;
pub extern fn getchar_unlocked() c_int;
pub extern fn flockfile([*c]FILE) void;
pub extern fn ftrylockfile([*c]FILE) c_int;
pub extern fn funlockfile([*c]FILE) void;
pub extern fn putc_unlocked(c_int, [*c]FILE) c_int;
pub extern fn putchar_unlocked(c_int) c_int;
pub extern fn dprintf(c_int, noalias [*c]const u8, ...) c_int;
pub extern fn fmemopen(noalias ?*anyopaque, usize, noalias [*c]const u8) [*c]FILE;
pub extern fn open_memstream([*c][*c]u8, [*c]usize) [*c]FILE;
pub extern fn vdprintf(c_int, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn renameat(c_int, [*c]const u8, c_int, [*c]const u8) c_int;
pub extern fn _asiprintf_r([*c]struct__reent, [*c][*c]u8, [*c]const u8, ...) c_int;
pub extern fn _asniprintf_r([*c]struct__reent, [*c]u8, [*c]usize, [*c]const u8, ...) [*c]u8;
pub extern fn _asnprintf_r([*c]struct__reent, noalias [*c]u8, noalias [*c]usize, noalias [*c]const u8, ...) [*c]u8;
pub extern fn _asprintf_r([*c]struct__reent, noalias [*c][*c]u8, noalias [*c]const u8, ...) c_int;
pub extern fn _diprintf_r([*c]struct__reent, c_int, [*c]const u8, ...) c_int;
pub extern fn _dprintf_r([*c]struct__reent, c_int, noalias [*c]const u8, ...) c_int;
pub extern fn _fclose_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _fcloseall_r([*c]struct__reent) c_int;
pub extern fn _fdopen_r([*c]struct__reent, c_int, [*c]const u8) [*c]FILE;
pub extern fn _fflush_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _fgetc_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _fgetc_unlocked_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _fgets_r([*c]struct__reent, noalias [*c]u8, c_int, noalias [*c]FILE) [*c]u8;
pub extern fn _fgets_unlocked_r([*c]struct__reent, noalias [*c]u8, c_int, noalias [*c]FILE) [*c]u8;
pub extern fn _fgetpos_r([*c]struct__reent, [*c]FILE, [*c]fpos_t) c_int;
pub extern fn _fsetpos_r([*c]struct__reent, [*c]FILE, [*c]const fpos_t) c_int;
pub extern fn _fiprintf_r([*c]struct__reent, [*c]FILE, [*c]const u8, ...) c_int;
pub extern fn _fiscanf_r([*c]struct__reent, [*c]FILE, [*c]const u8, ...) c_int;
pub extern fn _fmemopen_r([*c]struct__reent, noalias ?*anyopaque, usize, noalias [*c]const u8) [*c]FILE;
pub extern fn _fopen_r([*c]struct__reent, noalias [*c]const u8, noalias [*c]const u8) [*c]FILE;
pub extern fn _freopen_r([*c]struct__reent, noalias [*c]const u8, noalias [*c]const u8, noalias [*c]FILE) [*c]FILE;
pub extern fn _fprintf_r([*c]struct__reent, noalias [*c]FILE, noalias [*c]const u8, ...) c_int;
pub extern fn _fpurge_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _fputc_r([*c]struct__reent, c_int, [*c]FILE) c_int;
pub extern fn _fputc_unlocked_r([*c]struct__reent, c_int, [*c]FILE) c_int;
pub extern fn _fputs_r([*c]struct__reent, noalias [*c]const u8, noalias [*c]FILE) c_int;
pub extern fn _fputs_unlocked_r([*c]struct__reent, noalias [*c]const u8, noalias [*c]FILE) c_int;
pub extern fn _fread_r([*c]struct__reent, noalias ?*anyopaque, _size: usize, _n: usize, noalias [*c]FILE) usize;
pub extern fn _fread_unlocked_r([*c]struct__reent, noalias ?*anyopaque, _size: usize, _n: usize, noalias [*c]FILE) usize;
pub extern fn _fscanf_r([*c]struct__reent, noalias [*c]FILE, noalias [*c]const u8, ...) c_int;
pub extern fn _fseek_r([*c]struct__reent, [*c]FILE, c_long, c_int) c_int;
pub extern fn _fseeko_r([*c]struct__reent, [*c]FILE, _off_t, c_int) c_int;
pub extern fn _ftell_r([*c]struct__reent, [*c]FILE) c_long;
pub extern fn _ftello_r([*c]struct__reent, [*c]FILE) _off_t;
pub extern fn _rewind_r([*c]struct__reent, [*c]FILE) void;
pub extern fn _fwrite_r([*c]struct__reent, noalias ?*const anyopaque, _size: usize, _n: usize, noalias [*c]FILE) usize;
pub extern fn _fwrite_unlocked_r([*c]struct__reent, noalias ?*const anyopaque, _size: usize, _n: usize, noalias [*c]FILE) usize;
pub extern fn _getc_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _getc_unlocked_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _getchar_r([*c]struct__reent) c_int;
pub extern fn _getchar_unlocked_r([*c]struct__reent) c_int;
pub extern fn _gets_r([*c]struct__reent, [*c]u8) [*c]u8;
pub extern fn _iprintf_r([*c]struct__reent, [*c]const u8, ...) c_int;
pub extern fn _iscanf_r([*c]struct__reent, [*c]const u8, ...) c_int;
pub extern fn _open_memstream_r([*c]struct__reent, [*c][*c]u8, [*c]usize) [*c]FILE;
pub extern fn _perror_r([*c]struct__reent, [*c]const u8) void;
pub extern fn _printf_r([*c]struct__reent, noalias [*c]const u8, ...) c_int;
pub extern fn _putc_r([*c]struct__reent, c_int, [*c]FILE) c_int;
pub extern fn _putc_unlocked_r([*c]struct__reent, c_int, [*c]FILE) c_int;
pub extern fn _putchar_unlocked_r([*c]struct__reent, c_int) c_int;
pub extern fn _putchar_r([*c]struct__reent, c_int) c_int;
pub extern fn _puts_r([*c]struct__reent, [*c]const u8) c_int;
pub extern fn _remove_r([*c]struct__reent, [*c]const u8) c_int;
pub extern fn _rename_r([*c]struct__reent, _old: [*c]const u8, _new: [*c]const u8) c_int;
pub extern fn _scanf_r([*c]struct__reent, noalias [*c]const u8, ...) c_int;
pub extern fn _siprintf_r([*c]struct__reent, [*c]u8, [*c]const u8, ...) c_int;
pub extern fn _siscanf_r([*c]struct__reent, [*c]const u8, [*c]const u8, ...) c_int;
pub extern fn _sniprintf_r([*c]struct__reent, [*c]u8, usize, [*c]const u8, ...) c_int;
pub extern fn _snprintf_r([*c]struct__reent, noalias [*c]u8, usize, noalias [*c]const u8, ...) c_int;
pub extern fn _sprintf_r([*c]struct__reent, noalias [*c]u8, noalias [*c]const u8, ...) c_int;
pub extern fn _sscanf_r([*c]struct__reent, noalias [*c]const u8, noalias [*c]const u8, ...) c_int;
pub extern fn _tempnam_r([*c]struct__reent, [*c]const u8, [*c]const u8) [*c]u8;
pub extern fn _tmpfile_r([*c]struct__reent) [*c]FILE;
pub extern fn _tmpnam_r([*c]struct__reent, [*c]u8) [*c]u8;
pub extern fn _ungetc_r([*c]struct__reent, c_int, [*c]FILE) c_int;
pub extern fn _vasiprintf_r([*c]struct__reent, [*c][*c]u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vasniprintf_r([*c]struct__reent, [*c]u8, [*c]usize, [*c]const u8, __gnuc_va_list) [*c]u8;
pub extern fn _vasnprintf_r([*c]struct__reent, [*c]u8, [*c]usize, [*c]const u8, __gnuc_va_list) [*c]u8;
pub extern fn _vasprintf_r([*c]struct__reent, [*c][*c]u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vdiprintf_r([*c]struct__reent, c_int, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vdprintf_r([*c]struct__reent, c_int, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vfiprintf_r([*c]struct__reent, [*c]FILE, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vfiscanf_r([*c]struct__reent, [*c]FILE, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vfprintf_r([*c]struct__reent, noalias [*c]FILE, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vfscanf_r([*c]struct__reent, noalias [*c]FILE, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _viprintf_r([*c]struct__reent, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _viscanf_r([*c]struct__reent, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vprintf_r([*c]struct__reent, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vscanf_r([*c]struct__reent, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vsiprintf_r([*c]struct__reent, [*c]u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vsiscanf_r([*c]struct__reent, [*c]const u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vsniprintf_r([*c]struct__reent, [*c]u8, usize, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vsnprintf_r([*c]struct__reent, noalias [*c]u8, usize, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vsprintf_r([*c]struct__reent, noalias [*c]u8, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vsscanf_r([*c]struct__reent, noalias [*c]const u8, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn fpurge([*c]FILE) c_int;
pub extern fn __getdelim([*c][*c]u8, [*c]usize, c_int, [*c]FILE) isize;
pub extern fn __getline([*c][*c]u8, [*c]usize, [*c]FILE) isize;
pub extern fn clearerr_unlocked([*c]FILE) void;
pub extern fn feof_unlocked([*c]FILE) c_int;
pub extern fn ferror_unlocked([*c]FILE) c_int;
pub extern fn fileno_unlocked([*c]FILE) c_int;
pub extern fn fflush_unlocked([*c]FILE) c_int;
pub extern fn fgetc_unlocked([*c]FILE) c_int;
pub extern fn fputc_unlocked(c_int, [*c]FILE) c_int;
pub inline fn fread_unlocked(noalias arg___ptr: ?*anyopaque, arg___size: usize, arg___n: usize, noalias arg___fp: [*c]FILE) usize {
    var __ptr = arg___ptr;
    _ = &__ptr;
    var __size = arg___size;
    _ = &__size;
    var __n = arg___n;
    _ = &__n;
    var __fp = arg___fp;
    _ = &__fp;
    if ((__builtin_object_size(__ptr, @as(c_int, 0)) != @as(usize, @bitCast(-@as(c_int, 1)))) and ((__size *% __n) > __builtin_object_size(__ptr, @as(c_int, 0)))) {
        __chk_fail();
    }
    return __ssp_real_fread_unlocked(__ptr, __size, __n, __fp);
}
pub extern fn fwrite_unlocked(noalias ?*const anyopaque, _size: usize, _n: usize, [*c]FILE) usize;
pub extern fn __srget_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn __swbuf_r([*c]struct__reent, c_int, [*c]FILE) c_int;
pub extern fn funopen(__cookie: ?*const anyopaque, __readfn: ?*const fn (?*anyopaque, [*c]u8, c_int) callconv(.c) c_int, __writefn: ?*const fn (?*anyopaque, [*c]const u8, c_int) callconv(.c) c_int, __seekfn: ?*const fn (?*anyopaque, fpos_t, c_int) callconv(.c) fpos_t, __closefn: ?*const fn (?*anyopaque) callconv(.c) c_int) [*c]FILE;
pub extern fn _funopen_r([*c]struct__reent, __cookie: ?*const anyopaque, __readfn: ?*const fn (?*anyopaque, [*c]u8, c_int) callconv(.c) c_int, __writefn: ?*const fn (?*anyopaque, [*c]const u8, c_int) callconv(.c) c_int, __seekfn: ?*const fn (?*anyopaque, fpos_t, c_int) callconv(.c) fpos_t, __closefn: ?*const fn (?*anyopaque) callconv(.c) c_int) [*c]FILE;
pub fn __sputc_r(arg__ptr: [*c]struct__reent, arg__c: c_int, arg__p: [*c]FILE) callconv(.c) c_int {
    var _ptr = arg__ptr;
    _ = &_ptr;
    var _c = arg__c;
    _ = &_c;
    var _p = arg__p;
    _ = &_p;
    if (((blk: {
        const ref = &_p.*._w;
        ref.* -= 1;
        break :blk ref.*;
    }) >= @as(c_int, 0)) or ((_p.*._w >= _p.*._lbfsize) and (@as(c_int, @bitCast(@as(c_uint, @as(u8, @bitCast(@as(i8, @truncate(_c))))))) != @as(c_int, '\n')))) return @as(c_int, @bitCast(@as(c_uint, blk: {
        const tmp = @as(u8, @bitCast(@as(i8, @truncate(_c))));
        (blk_1: {
            const ref = &_p.*._p;
            const tmp_2 = ref.*;
            ref.* += 1;
            break :blk_1 tmp_2;
        }).* = tmp;
        break :blk tmp;
    }))) else return __swbuf_r(_ptr, _c, _p);
    return 0;
}
pub fn _getchar_unlocked() callconv(.c) c_int {
    var _ptr: [*c]struct__reent = undefined;
    _ = &_ptr;
    _ptr = _impure_ptr;
    return if ((blk: {
        const ref = &_ptr.*._stdin.*._r;
        ref.* -= 1;
        break :blk ref.*;
    }) < @as(c_int, 0)) __srget_r(_ptr, _ptr.*._stdin) else @as(c_int, @bitCast(@as(c_uint, (blk: {
        const ref = &_ptr.*._stdin.*._p;
        const tmp = ref.*;
        ref.* += 1;
        break :blk tmp;
    }).*)));
}
pub fn _putchar_unlocked(arg__c: c_int) callconv(.c) c_int {
    var _c = arg__c;
    _ = &_c;
    var _ptr: [*c]struct__reent = undefined;
    _ = &_ptr;
    _ptr = _impure_ptr;
    return __sputc_r(_ptr, _c, _ptr.*._stdout);
}
pub extern fn __stack_chk_fail() noreturn;
pub extern fn __chk_fail() noreturn;
pub extern fn __sprintf_chk(noalias [*c]u8, c_int, usize, noalias [*c]const u8, ...) c_int;
pub extern fn __vsprintf_chk(noalias [*c]u8, c_int, usize, noalias [*c]const u8, __va_list) c_int;
pub extern fn __snprintf_chk(noalias [*c]u8, usize, c_int, usize, noalias [*c]const u8, ...) c_int;
pub extern fn __vsnprintf_chk(noalias [*c]u8, usize, c_int, usize, noalias [*c]const u8, __va_list) c_int;
pub extern fn __gets_chk([*c]u8, usize) [*c]u8;
pub extern fn __ssp_real_fgets(noalias __buf: [*c]u8, __len: c_int, __fp: [*c]FILE) [*c]u8;
pub extern fn __ssp_real_fread(noalias __ptr: ?*anyopaque, __size: usize, __n: usize, noalias __fp: [*c]FILE) usize;
pub extern fn __ssp_real_fread_unlocked(noalias __ptr: ?*anyopaque, __size: usize, __n: usize, noalias __fp: [*c]FILE) usize;
pub const suseconds_t = __suseconds_t;
pub const time_t = i64;
pub const struct_timeval = extern struct {
    tv_sec: time_t = @import("std").mem.zeroes(time_t),
    tv_usec: suseconds_t = @import("std").mem.zeroes(suseconds_t),
};
pub const u_int8_t = __uint8_t;
pub const u_int16_t = __uint16_t;
pub const u_int32_t = __uint32_t;
pub const u_int64_t = __uint64_t;
pub const register_t = __intptr_t;
pub const __sigset_t = c_ulong;
pub const struct_timespec = extern struct {
    tv_sec: time_t = @import("std").mem.zeroes(time_t),
    tv_nsec: c_long = @import("std").mem.zeroes(c_long),
};
pub const struct_itimerspec = extern struct {
    it_interval: struct_timespec = @import("std").mem.zeroes(struct_timespec),
    it_value: struct_timespec = @import("std").mem.zeroes(struct_timespec),
};
pub const sigset_t = __sigset_t;
pub const __fd_mask = c_ulong;
pub const fd_mask = __fd_mask;
pub const struct_fd_set = extern struct {
    __fds_bits: [2]__fd_mask = @import("std").mem.zeroes([2]__fd_mask),
};
pub const fd_set = struct_fd_set;
pub extern fn select(__n: c_int, __readfds: [*c]fd_set, __writefds: [*c]fd_set, __exceptfds: [*c]fd_set, __timeout: [*c]struct_timeval) c_int;
pub extern fn pselect(__n: c_int, __readfds: [*c]fd_set, __writefds: [*c]fd_set, __exceptfds: [*c]fd_set, __timeout: [*c]const struct_timespec, __set: [*c]const sigset_t) c_int;
pub const in_addr_t = __uint32_t;
pub const in_port_t = __uint16_t;
pub const u_register_t = __uintptr_t;
pub const u_char = u8;
pub const u_short = c_ushort;
pub const u_int = c_uint;
pub const u_long = c_ulong;
pub const ushort = c_ushort;
pub const ulong = c_ulong;
pub const blkcnt_t = __blkcnt_t;
pub const blksize_t = __blksize_t;
pub const clock_t = c_ulong;
pub const daddr_t = __daddr_t;
pub const caddr_t = [*c]u8;
pub const fsblkcnt_t = __fsblkcnt_t;
pub const fsfilcnt_t = __fsfilcnt_t;
pub const id_t = __id_t;
pub const ino_t = __ino_t;
pub const dev_t = __dev_t;
pub const uid_t = __uid_t;
pub const gid_t = __gid_t;
pub const pid_t = __pid_t;
pub const key_t = __key_t;
pub const mode_t = __mode_t;
pub const nlink_t = __nlink_t;
pub const clockid_t = __clockid_t;
pub const timer_t = __timer_t;
pub const useconds_t = __useconds_t;
pub const sbintime_t = __int64_t;
pub const struct_sched_param = extern struct {
    sched_priority: c_int = @import("std").mem.zeroes(c_int),
};
pub const pthread_t = __uint32_t;
pub const pthread_attr_t = extern struct {
    is_initialized: c_int = @import("std").mem.zeroes(c_int),
    stackaddr: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stacksize: c_int = @import("std").mem.zeroes(c_int),
    contentionscope: c_int = @import("std").mem.zeroes(c_int),
    inheritsched: c_int = @import("std").mem.zeroes(c_int),
    schedpolicy: c_int = @import("std").mem.zeroes(c_int),
    schedparam: struct_sched_param = @import("std").mem.zeroes(struct_sched_param),
    detachstate: c_int = @import("std").mem.zeroes(c_int),
};
pub const pthread_mutex_t = __uint32_t;
pub const pthread_mutexattr_t = extern struct {
    is_initialized: c_int = @import("std").mem.zeroes(c_int),
    recursive: c_int = @import("std").mem.zeroes(c_int),
};
pub const pthread_cond_t = __uint32_t;
pub const pthread_condattr_t = extern struct {
    is_initialized: c_int = @import("std").mem.zeroes(c_int),
    clock: clock_t = @import("std").mem.zeroes(clock_t),
};
pub const pthread_key_t = __uint32_t;
pub const pthread_once_t = extern struct {
    is_initialized: c_int = @import("std").mem.zeroes(c_int),
    init_executed: c_int = @import("std").mem.zeroes(c_int),
};
pub const struct_timezone = extern struct {
    tz_minuteswest: c_int = @import("std").mem.zeroes(c_int),
    tz_dsttime: c_int = @import("std").mem.zeroes(c_int),
};
pub const struct_bintime = extern struct {
    sec: time_t = @import("std").mem.zeroes(time_t),
    frac: u64 = @import("std").mem.zeroes(u64),
};
pub fn bintime_addx(arg__bt: [*c]struct_bintime, arg__x: u64) callconv(.c) void {
    var _bt = arg__bt;
    _ = &_bt;
    var _x = arg__x;
    _ = &_x;
    var _u_1: u64 = undefined;
    _ = &_u_1;
    _u_1 = _bt.*.frac;
    _bt.*.frac +%= _x;
    if (_u_1 > _bt.*.frac) {
        _bt.*.sec += 1;
    }
}
pub fn bintime_add(arg__bt: [*c]struct_bintime, arg__bt2: [*c]const struct_bintime) callconv(.c) void {
    var _bt = arg__bt;
    _ = &_bt;
    var _bt2 = arg__bt2;
    _ = &_bt2;
    var _u_1: u64 = undefined;
    _ = &_u_1;
    _u_1 = _bt.*.frac;
    _bt.*.frac +%= _bt2.*.frac;
    if (_u_1 > _bt.*.frac) {
        _bt.*.sec += 1;
    }
    _bt.*.sec += _bt2.*.sec;
}
pub fn bintime_sub(arg__bt: [*c]struct_bintime, arg__bt2: [*c]const struct_bintime) callconv(.c) void {
    var _bt = arg__bt;
    _ = &_bt;
    var _bt2 = arg__bt2;
    _ = &_bt2;
    var _u_1: u64 = undefined;
    _ = &_u_1;
    _u_1 = _bt.*.frac;
    _bt.*.frac -%= _bt2.*.frac;
    if (_u_1 < _bt.*.frac) {
        _bt.*.sec -= 1;
    }
    _bt.*.sec -= _bt2.*.sec;
}
pub fn bintime_mul(arg__bt: [*c]struct_bintime, arg__x: u_int) callconv(.c) void {
    var _bt = arg__bt;
    _ = &_bt;
    var _x = arg__x;
    _ = &_x;
    var _p1: u64 = undefined;
    _ = &_p1;
    var _p2: u64 = undefined;
    _ = &_p2;
    _p1 = (_bt.*.frac & @as(c_ulonglong, 4294967295)) *% @as(c_ulonglong, @bitCast(@as(c_ulonglong, _x)));
    _p2 = ((_bt.*.frac >> @intCast(32)) *% @as(u64, @bitCast(@as(c_ulonglong, _x)))) +% (_p1 >> @intCast(32));
    _bt.*.sec *= @as(time_t, @bitCast(@as(c_ulonglong, _x)));
    _bt.*.sec += @as(time_t, @bitCast(_p2 >> @intCast(32)));
    _bt.*.frac = (_p2 << @intCast(32)) | (_p1 & @as(c_ulonglong, 4294967295));
}
pub fn bintime_shift(arg__bt: [*c]struct_bintime, arg__exp: c_int) callconv(.c) void {
    var _bt = arg__bt;
    _ = &_bt;
    var _exp = arg__exp;
    _ = &_exp;
    if (_exp > @as(c_int, 0)) {
        _bt.*.sec <<= @intCast(_exp);
        _bt.*.sec |= @as(time_t, @bitCast(_bt.*.frac >> @intCast(@as(c_int, 64) - _exp)));
        _bt.*.frac <<= @intCast(_exp);
    } else if (_exp < @as(c_int, 0)) {
        _bt.*.frac >>= @intCast(-_exp);
        _bt.*.frac |= @as(u64, @bitCast(_bt.*.sec)) << @intCast(@as(c_int, 64) + _exp);
        _bt.*.sec >>= @intCast(-_exp);
    }
}
pub fn sbintime_getsec(arg__sbt: sbintime_t) callconv(.c) c_int {
    var _sbt = arg__sbt;
    _ = &_sbt;
    return @as(c_int, @bitCast(@as(c_int, @truncate(_sbt >> @intCast(32)))));
}
pub fn bttosbt(_bt: struct_bintime) callconv(.c) sbintime_t {
    _ = &_bt;
    return @as(sbintime_t, @bitCast(@as(u64, @bitCast(@as(sbintime_t, @bitCast(_bt.sec)) << @intCast(32))) +% (_bt.frac >> @intCast(32))));
}
pub fn sbttobt(arg__sbt: sbintime_t) callconv(.c) struct_bintime {
    var _sbt = arg__sbt;
    _ = &_sbt;
    var _bt: struct_bintime = undefined;
    _ = &_bt;
    _bt.sec = _sbt >> @intCast(32);
    _bt.frac = @as(u64, @bitCast(_sbt << @intCast(32)));
    return _bt;
}
pub fn sbttons(arg__sbt: sbintime_t) callconv(.c) i64 {
    var _sbt = arg__sbt;
    _ = &_sbt;
    var ns: u64 = undefined;
    _ = &ns;
    ns = @as(u64, @bitCast(_sbt));
    if (ns >= @as(u64, @bitCast(@as(sbintime_t, @bitCast(@as(c_longlong, @as(c_int, 1)))) << @intCast(32)))) {
        ns = (ns >> @intCast(32)) *% @as(u64, @bitCast(@as(c_longlong, @as(c_int, 1000000000))));
    } else {
        ns = 0;
    }
    return @as(i64, @bitCast(ns +% @as(u64, @bitCast((@as(sbintime_t, @bitCast(@as(c_longlong, @as(c_int, 1000000000)))) * (_sbt & @as(sbintime_t, @bitCast(@as(c_ulonglong, @as(c_uint, 4294967295)))))) >> @intCast(32)))));
}
pub fn nstosbt(arg__ns: i64) callconv(.c) sbintime_t {
    var _ns = arg__ns;
    _ = &_ns;
    var sb: sbintime_t = 0;
    _ = &sb;
    if (_ns >= (@as(sbintime_t, @bitCast(@as(c_longlong, @as(c_int, 1)))) << @intCast(32))) {
        sb = @divTrunc(_ns, @as(i64, @bitCast(@as(c_longlong, @as(c_int, 1000000000))))) * (@as(sbintime_t, @bitCast(@as(c_longlong, @as(c_int, 1)))) << @intCast(32));
        _ns = @import("std").zig.c_translation.signedRemainder(_ns, @as(i64, @bitCast(@as(c_longlong, @as(c_int, 1000000000)))));
    }
    sb += @as(sbintime_t, @bitCast(((@as(c_ulonglong, @bitCast(_ns)) *% @as(c_ulonglong, 9223372037)) +% @as(c_ulonglong, @bitCast(@as(c_longlong, @as(c_int, 2147483647))))) >> @intCast(31)));
    return sb;
}
pub fn sbttous(arg__sbt: sbintime_t) callconv(.c) i64 {
    var _sbt = arg__sbt;
    _ = &_sbt;
    return (@as(sbintime_t, @bitCast(@as(c_longlong, @as(c_int, 1000000)))) * _sbt) >> @intCast(32);
}
pub fn ustosbt(arg__us: i64) callconv(.c) sbintime_t {
    var _us = arg__us;
    _ = &_us;
    var sb: sbintime_t = 0;
    _ = &sb;
    if (_us >= (@as(sbintime_t, @bitCast(@as(c_longlong, @as(c_int, 1)))) << @intCast(32))) {
        sb = @divTrunc(_us, @as(i64, @bitCast(@as(c_longlong, @as(c_int, 1000000))))) * (@as(sbintime_t, @bitCast(@as(c_longlong, @as(c_int, 1)))) << @intCast(32));
        _us = @import("std").zig.c_translation.signedRemainder(_us, @as(i64, @bitCast(@as(c_longlong, @as(c_int, 1000000)))));
    }
    sb += @as(sbintime_t, @bitCast(((@as(c_ulonglong, @bitCast(_us)) *% @as(c_ulonglong, 9223372036855)) +% @as(c_ulonglong, @bitCast(@as(c_longlong, @as(c_int, 2147483647))))) >> @intCast(31)));
    return sb;
}
pub fn sbttoms(arg__sbt: sbintime_t) callconv(.c) i64 {
    var _sbt = arg__sbt;
    _ = &_sbt;
    return (@as(sbintime_t, @bitCast(@as(c_longlong, @as(c_int, 1000)))) * _sbt) >> @intCast(32);
}
pub fn mstosbt(arg__ms: i64) callconv(.c) sbintime_t {
    var _ms = arg__ms;
    _ = &_ms;
    var sb: sbintime_t = 0;
    _ = &sb;
    if (_ms >= (@as(sbintime_t, @bitCast(@as(c_longlong, @as(c_int, 1)))) << @intCast(32))) {
        sb = @divTrunc(_ms, @as(i64, @bitCast(@as(c_longlong, @as(c_int, 1000))))) * (@as(sbintime_t, @bitCast(@as(c_longlong, @as(c_int, 1)))) << @intCast(32));
        _ms = @import("std").zig.c_translation.signedRemainder(_ms, @as(i64, @bitCast(@as(c_longlong, @as(c_int, 1000)))));
    }
    sb += @as(sbintime_t, @bitCast(((@as(c_ulonglong, @bitCast(_ms)) *% @as(c_ulonglong, 9223372036854776)) +% @as(c_ulonglong, @bitCast(@as(c_longlong, @as(c_int, 2147483647))))) >> @intCast(31)));
    return sb;
}
pub fn bintime2timespec(arg__bt: [*c]const struct_bintime, arg__ts: [*c]struct_timespec) callconv(.c) void {
    var _bt = arg__bt;
    _ = &_bt;
    var _ts = arg__ts;
    _ = &_ts;
    _ts.*.tv_sec = _bt.*.sec;
    _ts.*.tv_nsec = @as(c_long, @bitCast(@as(c_ulong, @truncate((@as(u64, @bitCast(@as(c_longlong, @as(c_int, 1000000000)))) *% @as(u64, @bitCast(@as(c_ulonglong, @as(u32, @bitCast(@as(c_uint, @truncate(_bt.*.frac >> @intCast(32))))))))) >> @intCast(32)))));
}
pub fn timespec2bintime(arg__ts: [*c]const struct_timespec, arg__bt: [*c]struct_bintime) callconv(.c) void {
    var _ts = arg__ts;
    _ = &_ts;
    var _bt = arg__bt;
    _ = &_bt;
    _bt.*.sec = _ts.*.tv_sec;
    _bt.*.frac = @as(u64, @bitCast(@as(c_longlong, _ts.*.tv_nsec))) *% @as(u64, @bitCast(@as(c_longlong, 18446744073)));
}
pub fn bintime2timeval(arg__bt: [*c]const struct_bintime, arg__tv: [*c]struct_timeval) callconv(.c) void {
    var _bt = arg__bt;
    _ = &_bt;
    var _tv = arg__tv;
    _ = &_tv;
    _tv.*.tv_sec = _bt.*.sec;
    _tv.*.tv_usec = @as(suseconds_t, @bitCast(@as(c_ulong, @truncate((@as(u64, @bitCast(@as(c_longlong, @as(c_int, 1000000)))) *% @as(u64, @bitCast(@as(c_ulonglong, @as(u32, @bitCast(@as(c_uint, @truncate(_bt.*.frac >> @intCast(32))))))))) >> @intCast(32)))));
}
pub fn timeval2bintime(arg__tv: [*c]const struct_timeval, arg__bt: [*c]struct_bintime) callconv(.c) void {
    var _tv = arg__tv;
    _ = &_tv;
    var _bt = arg__bt;
    _ = &_bt;
    _bt.*.sec = _tv.*.tv_sec;
    _bt.*.frac = @as(u64, @bitCast(@as(c_longlong, _tv.*.tv_usec))) *% @as(u64, @bitCast(@as(c_longlong, 18446744073709)));
}
pub fn sbttots(arg__sbt: sbintime_t) callconv(.c) struct_timespec {
    var _sbt = arg__sbt;
    _ = &_sbt;
    var _ts: struct_timespec = undefined;
    _ = &_ts;
    _ts.tv_sec = _sbt >> @intCast(32);
    _ts.tv_nsec = @as(c_long, @bitCast(@as(c_long, @truncate(sbttons(@as(sbintime_t, @bitCast(@as(c_ulonglong, @as(u32, @bitCast(@as(c_int, @truncate(_sbt))))))))))));
    return _ts;
}
pub fn tstosbt(arg__ts: struct_timespec) callconv(.c) sbintime_t {
    var _ts = arg__ts;
    _ = &_ts;
    return (@as(sbintime_t, @bitCast(_ts.tv_sec)) << @intCast(32)) + nstosbt(@as(i64, @bitCast(@as(c_longlong, _ts.tv_nsec))));
}
pub fn sbttotv(arg__sbt: sbintime_t) callconv(.c) struct_timeval {
    var _sbt = arg__sbt;
    _ = &_sbt;
    var _tv: struct_timeval = undefined;
    _ = &_tv;
    _tv.tv_sec = _sbt >> @intCast(32);
    _tv.tv_usec = @as(suseconds_t, @bitCast(@as(c_long, @truncate(sbttous(@as(sbintime_t, @bitCast(@as(c_ulonglong, @as(u32, @bitCast(@as(c_int, @truncate(_sbt))))))))))));
    return _tv;
}
pub fn tvtosbt(arg__tv: struct_timeval) callconv(.c) sbintime_t {
    var _tv = arg__tv;
    _ = &_tv;
    return (@as(sbintime_t, @bitCast(_tv.tv_sec)) << @intCast(32)) + ustosbt(@as(i64, @bitCast(@as(c_longlong, _tv.tv_usec))));
}
pub const struct_itimerval = extern struct {
    it_interval: struct_timeval = @import("std").mem.zeroes(struct_timeval),
    it_value: struct_timeval = @import("std").mem.zeroes(struct_timeval),
};
pub const locale_t = ?*struct___locale_t;
pub const struct_tm = extern struct {
    tm_sec: c_int = @import("std").mem.zeroes(c_int),
    tm_min: c_int = @import("std").mem.zeroes(c_int),
    tm_hour: c_int = @import("std").mem.zeroes(c_int),
    tm_mday: c_int = @import("std").mem.zeroes(c_int),
    tm_mon: c_int = @import("std").mem.zeroes(c_int),
    tm_year: c_int = @import("std").mem.zeroes(c_int),
    tm_wday: c_int = @import("std").mem.zeroes(c_int),
    tm_yday: c_int = @import("std").mem.zeroes(c_int),
    tm_isdst: c_int = @import("std").mem.zeroes(c_int),
};
pub extern fn clock() clock_t;
pub extern fn difftime(_time2: time_t, _time1: time_t) f64;
pub extern fn mktime(_timeptr: [*c]struct_tm) time_t;
pub extern fn time(_timer: [*c]time_t) time_t;
pub extern fn asctime(_tblock: [*c]const struct_tm) [*c]u8;
pub extern fn ctime(_time: [*c]const time_t) [*c]u8;
pub extern fn gmtime(_timer: [*c]const time_t) [*c]struct_tm;
pub extern fn localtime(_timer: [*c]const time_t) [*c]struct_tm;
pub extern fn strftime(noalias _s: [*c]u8, _maxsize: usize, noalias _fmt: [*c]const u8, noalias _t: [*c]const struct_tm) usize;
pub extern fn strftime_l(noalias _s: [*c]u8, _maxsize: usize, noalias _fmt: [*c]const u8, noalias _t: [*c]const struct_tm, _l: locale_t) usize;
pub extern fn asctime_r(noalias [*c]const struct_tm, noalias [*c]u8) [*c]u8;
pub extern fn ctime_r([*c]const time_t, [*c]u8) [*c]u8;
pub extern fn gmtime_r(noalias [*c]const time_t, noalias [*c]struct_tm) [*c]struct_tm;
pub extern fn localtime_r(noalias [*c]const time_t, noalias [*c]struct_tm) [*c]struct_tm;
pub extern fn tzset() void;
pub extern fn _tzset_r([*c]struct__reent) void;
pub extern var _timezone: c_long;
pub extern var _daylight: c_int;
pub extern var _tzname: [2][*c]u8;
pub extern fn utimes([*c]const u8, [*c]const struct_timeval) c_int;
pub extern fn adjtime([*c]const struct_timeval, [*c]struct_timeval) c_int;
pub extern fn futimes(c_int, [*c]const struct_timeval) c_int;
pub extern fn lutimes([*c]const u8, [*c]const struct_timeval) c_int;
pub extern fn settimeofday([*c]const struct_timeval, [*c]const struct_timezone) c_int;
pub extern fn getitimer(__which: c_int, __value: [*c]struct_itimerval) c_int;
pub extern fn setitimer(__which: c_int, noalias __value: [*c]const struct_itimerval, noalias __ovalue: [*c]struct_itimerval) c_int;
pub extern fn gettimeofday(noalias __p: [*c]struct_timeval, noalias __tz: ?*anyopaque) c_int;
pub const sys_prot_t = c_int;
pub const struct_rng_128 = extern struct {
    r: [2]u64 = @import("std").mem.zeroes([2]u64),
};
pub const rng_128_t = struct_rng_128;
pub extern fn get_rand_128(rand128: [*c]rng_128_t) void;
pub extern fn get_rand_64() u64;
pub extern fn get_rand_32() u32;
pub const div_t = extern struct {
    quot: c_int = @import("std").mem.zeroes(c_int),
    rem: c_int = @import("std").mem.zeroes(c_int),
};
pub const ldiv_t = extern struct {
    quot: c_long = @import("std").mem.zeroes(c_long),
    rem: c_long = @import("std").mem.zeroes(c_long),
};
pub const lldiv_t = extern struct {
    quot: c_longlong = @import("std").mem.zeroes(c_longlong),
    rem: c_longlong = @import("std").mem.zeroes(c_longlong),
};
pub const __compar_fn_t = ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.c) c_int;
pub extern fn __locale_mb_cur_max() c_int;
pub extern fn abort() noreturn;
pub extern fn abs(c_int) c_int;
pub extern fn arc4random() __uint32_t;
pub extern fn arc4random_uniform(__uint32_t) __uint32_t;
pub extern fn arc4random_buf(?*anyopaque, usize) void;
pub extern fn atexit(__func: ?*const fn () callconv(.c) void) c_int;
pub extern fn atof(__nptr: [*c]const u8) f64;
pub extern fn atoff(__nptr: [*c]const u8) f32;
pub extern fn atoi(__nptr: [*c]const u8) c_int;
pub extern fn _atoi_r([*c]struct__reent, __nptr: [*c]const u8) c_int;
pub extern fn atol(__nptr: [*c]const u8) c_long;
pub extern fn _atol_r([*c]struct__reent, __nptr: [*c]const u8) c_long;
pub extern fn bsearch(__key: ?*const anyopaque, __base: ?*const anyopaque, __nmemb: usize, __size: usize, _compar: __compar_fn_t) ?*anyopaque;
pub extern fn calloc(usize, usize) ?*anyopaque;
pub extern fn div(__numer: c_int, __denom: c_int) div_t;
pub extern fn exit(__status: c_int) noreturn;
pub extern fn free(?*anyopaque) void;
pub extern fn getenv(__string: [*c]const u8) [*c]u8;
pub extern fn _getenv_r([*c]struct__reent, __string: [*c]const u8) [*c]u8;
pub extern fn _findenv([*c]const u8, [*c]c_int) [*c]u8;
pub extern fn _findenv_r([*c]struct__reent, [*c]const u8, [*c]c_int) [*c]u8;
pub extern var suboptarg: [*c]u8;
pub extern fn getsubopt([*c][*c]u8, [*c]const [*c]u8, [*c][*c]u8) c_int;
pub extern fn labs(c_long) c_long;
pub extern fn ldiv(__numer: c_long, __denom: c_long) ldiv_t;
pub extern fn malloc(usize) ?*anyopaque;
pub extern fn mblen([*c]const u8, usize) c_int;
pub extern fn _mblen_r([*c]struct__reent, [*c]const u8, usize, [*c]_mbstate_t) c_int;
pub extern fn mbtowc(noalias [*c]wchar_t, noalias [*c]const u8, usize) c_int;
pub extern fn _mbtowc_r([*c]struct__reent, noalias [*c]wchar_t, noalias [*c]const u8, usize, [*c]_mbstate_t) c_int;
pub inline fn wctomb(arg___buf: [*c]u8, arg___wc: wchar_t) c_int {
    var __buf = arg___buf;
    _ = &__buf;
    var __wc = arg___wc;
    _ = &__wc;
    if (__buf != @as([*c]u8, @ptrCast(@alignCast(@as(?*anyopaque, @ptrFromInt(@as(c_int, 0))))))) if ((__builtin_object_size(@as(?*const anyopaque, @ptrCast(__buf)), @as(c_int, 0)) != @as(usize, @bitCast(-@as(c_int, 1)))) and (@as(c_uint, @bitCast(__locale_mb_cur_max())) > __builtin_object_size(@as(?*const anyopaque, @ptrCast(__buf)), @intFromBool(@as(c_int, 2) > @as(c_int, 1))))) {
        __chk_fail();
    };
    return __ssp_real_wctomb(__buf, __wc);
}
pub extern fn _wctomb_r([*c]struct__reent, [*c]u8, wchar_t, [*c]_mbstate_t) c_int;
pub inline fn mbstowcs(noalias arg___buf: [*c]wchar_t, noalias arg___src: [*c]const u8, arg___n: usize) usize {
    var __buf = arg___buf;
    _ = &__buf;
    var __src = arg___src;
    _ = &__src;
    var __n = arg___n;
    _ = &__n;
    if (__buf != @as([*c]wchar_t, @ptrCast(@alignCast(@as(?*anyopaque, @ptrFromInt(@as(c_int, 0))))))) if ((__builtin_object_size(@as(?*const anyopaque, @ptrCast(__buf)), @as(c_int, 0)) != @as(usize, @bitCast(-@as(c_int, 1)))) and ((__n *% @sizeOf(wchar_t)) > __builtin_object_size(@as(?*const anyopaque, @ptrCast(__buf)), @intFromBool(@as(c_int, 2) > @as(c_int, 1))))) {
        __chk_fail();
    };
    return __ssp_real_mbstowcs(__buf, __src, __n);
}
pub extern fn _mbstowcs_r([*c]struct__reent, noalias [*c]wchar_t, noalias [*c]const u8, usize, [*c]_mbstate_t) usize;
pub inline fn wcstombs(noalias arg___buf: [*c]u8, noalias arg___src: [*c]const wchar_t, arg___len: usize) usize {
    var __buf = arg___buf;
    _ = &__buf;
    var __src = arg___src;
    _ = &__src;
    var __len = arg___len;
    _ = &__len;
    if (__buf != @as([*c]u8, @ptrCast(@alignCast(@as(?*anyopaque, @ptrFromInt(@as(c_int, 0))))))) if ((__builtin_object_size(@as(?*const anyopaque, @ptrCast(__buf)), @as(c_int, 0)) != @as(usize, @bitCast(-@as(c_int, 1)))) and (__len > __builtin_object_size(@as(?*const anyopaque, @ptrCast(__buf)), @intFromBool(@as(c_int, 2) > @as(c_int, 1))))) {
        __chk_fail();
    };
    return __ssp_real_wcstombs(__buf, __src, __len);
}
pub extern fn _wcstombs_r([*c]struct__reent, noalias [*c]u8, noalias [*c]const wchar_t, usize, [*c]_mbstate_t) usize;
pub extern fn mkdtemp([*c]u8) [*c]u8;
pub extern fn mkstemp([*c]u8) c_int;
pub extern fn mkstemps([*c]u8, c_int) c_int;
pub extern fn mktemp([*c]u8) [*c]u8;
pub extern fn _mkdtemp_r([*c]struct__reent, [*c]u8) [*c]u8;
pub extern fn _mkostemp_r([*c]struct__reent, [*c]u8, c_int) c_int;
pub extern fn _mkostemps_r([*c]struct__reent, [*c]u8, c_int, c_int) c_int;
pub extern fn _mkstemp_r([*c]struct__reent, [*c]u8) c_int;
pub extern fn _mkstemps_r([*c]struct__reent, [*c]u8, c_int) c_int;
pub extern fn _mktemp_r([*c]struct__reent, [*c]u8) [*c]u8;
pub extern fn qsort(__base: ?*anyopaque, __nmemb: usize, __size: usize, _compar: __compar_fn_t) void;
pub extern fn rand() c_int;
pub extern fn realloc(?*anyopaque, usize) ?*anyopaque;
pub extern fn reallocarray(?*anyopaque, usize, usize) ?*anyopaque;
pub extern fn reallocf(?*anyopaque, usize) ?*anyopaque;
pub extern fn realpath(noalias path: [*c]const u8, noalias resolved_path: [*c]u8) [*c]u8;
pub extern fn rpmatch(response: [*c]const u8) c_int;
pub extern fn srand(__seed: c_uint) void;
pub extern fn strtod(noalias __n: [*c]const u8, noalias __end_PTR: [*c][*c]u8) f64;
pub extern fn _strtod_r([*c]struct__reent, noalias __n: [*c]const u8, noalias __end_PTR: [*c][*c]u8) f64;
pub extern fn strtof(noalias __n: [*c]const u8, noalias __end_PTR: [*c][*c]u8) f32;
pub extern fn strtol(noalias __n: [*c]const u8, noalias __end_PTR: [*c][*c]u8, __base: c_int) c_long;
pub extern fn _strtol_r([*c]struct__reent, noalias __n: [*c]const u8, noalias __end_PTR: [*c][*c]u8, __base: c_int) c_long;
pub extern fn strtoul(noalias __n: [*c]const u8, noalias __end_PTR: [*c][*c]u8, __base: c_int) c_ulong;
pub extern fn _strtoul_r([*c]struct__reent, noalias __n: [*c]const u8, noalias __end_PTR: [*c][*c]u8, __base: c_int) c_ulong;
pub extern fn system(__string: [*c]const u8) c_int;
pub extern fn a64l(__input: [*c]const u8) c_long;
pub extern fn l64a(__input: c_long) [*c]u8;
pub extern fn _l64a_r([*c]struct__reent, __input: c_long) [*c]u8;
pub extern fn on_exit(__func: ?*const fn (c_int, ?*anyopaque) callconv(.c) void, __arg: ?*anyopaque) c_int;
pub extern fn _Exit(__status: c_int) noreturn;
pub extern fn putenv(__string: [*c]u8) c_int;
pub extern fn _putenv_r([*c]struct__reent, __string: [*c]u8) c_int;
pub extern fn _reallocf_r([*c]struct__reent, ?*anyopaque, usize) ?*anyopaque;
pub extern fn setenv(__string: [*c]const u8, __value: [*c]const u8, __overwrite: c_int) c_int;
pub extern fn _setenv_r([*c]struct__reent, __string: [*c]const u8, __value: [*c]const u8, __overwrite: c_int) c_int;
pub extern fn __itoa(c_int, [*c]u8, c_int) [*c]u8;
pub extern fn __utoa(c_uint, [*c]u8, c_int) [*c]u8;
pub extern fn itoa(c_int, [*c]u8, c_int) [*c]u8;
pub extern fn utoa(c_uint, [*c]u8, c_int) [*c]u8;
pub extern fn rand_r(__seed: [*c]c_uint) c_int;
pub extern fn drand48() f64;
pub extern fn _drand48_r([*c]struct__reent) f64;
pub extern fn erand48([*c]c_ushort) f64;
pub extern fn _erand48_r([*c]struct__reent, [*c]c_ushort) f64;
pub extern fn jrand48([*c]c_ushort) c_long;
pub extern fn _jrand48_r([*c]struct__reent, [*c]c_ushort) c_long;
pub extern fn lcong48([*c]c_ushort) void;
pub extern fn _lcong48_r([*c]struct__reent, [*c]c_ushort) void;
pub extern fn lrand48() c_long;
pub extern fn _lrand48_r([*c]struct__reent) c_long;
pub extern fn mrand48() c_long;
pub extern fn _mrand48_r([*c]struct__reent) c_long;
pub extern fn nrand48([*c]c_ushort) c_long;
pub extern fn _nrand48_r([*c]struct__reent, [*c]c_ushort) c_long;
pub extern fn seed48([*c]c_ushort) [*c]c_ushort;
pub extern fn _seed48_r([*c]struct__reent, [*c]c_ushort) [*c]c_ushort;
pub extern fn srand48(c_long) void;
pub extern fn _srand48_r([*c]struct__reent, c_long) void;
pub extern fn initstate(c_uint, [*c]u8, usize) [*c]u8;
pub extern fn random() c_long;
pub extern fn setstate([*c]u8) [*c]u8;
pub extern fn srandom(c_uint) void;
pub extern fn atoll(__nptr: [*c]const u8) c_longlong;
pub extern fn _atoll_r([*c]struct__reent, __nptr: [*c]const u8) c_longlong;
pub extern fn llabs(c_longlong) c_longlong;
pub extern fn lldiv(__numer: c_longlong, __denom: c_longlong) lldiv_t;
pub extern fn strtoll(noalias __n: [*c]const u8, noalias __end_PTR: [*c][*c]u8, __base: c_int) c_longlong;
pub extern fn _strtoll_r([*c]struct__reent, noalias __n: [*c]const u8, noalias __end_PTR: [*c][*c]u8, __base: c_int) c_longlong;
pub extern fn strtoull(noalias __n: [*c]const u8, noalias __end_PTR: [*c][*c]u8, __base: c_int) c_ulonglong;
pub extern fn _strtoull_r([*c]struct__reent, noalias __n: [*c]const u8, noalias __end_PTR: [*c][*c]u8, __base: c_int) c_ulonglong;
pub extern fn cfree(?*anyopaque) void;
pub extern fn unsetenv(__string: [*c]const u8) c_int;
pub extern fn _unsetenv_r([*c]struct__reent, __string: [*c]const u8) c_int;
pub extern fn posix_memalign([*c]?*anyopaque, usize, usize) c_int;
pub extern fn _dtoa_r([*c]struct__reent, f64, c_int, c_int, [*c]c_int, [*c]c_int, [*c][*c]u8) [*c]u8;
pub extern fn _malloc_r([*c]struct__reent, usize) ?*anyopaque;
pub extern fn _calloc_r([*c]struct__reent, usize, usize) ?*anyopaque;
pub extern fn _free_r([*c]struct__reent, ?*anyopaque) void;
pub extern fn _realloc_r([*c]struct__reent, ?*anyopaque, usize) ?*anyopaque;
pub extern fn _mstats_r([*c]struct__reent, [*c]u8) void;
pub extern fn _system_r([*c]struct__reent, [*c]const u8) c_int;
pub extern fn __eprintf([*c]const u8, [*c]const u8, c_uint, [*c]const u8) void;
pub extern fn qsort_r(__base: ?*anyopaque, __nmemb: usize, __size: usize, __thunk: ?*anyopaque, _compar: ?*const fn (?*anyopaque, ?*const anyopaque, ?*const anyopaque) callconv(.c) c_int) void;
pub extern fn _strtold_r([*c]struct__reent, noalias [*c]const u8, noalias [*c][*c]u8) c_longdouble;
pub extern fn strtold(noalias [*c]const u8, noalias [*c][*c]u8) c_longdouble;
pub extern fn aligned_alloc(usize, usize) ?*anyopaque;
pub extern fn at_quick_exit(?*const fn () callconv(.c) void) c_int;
pub extern fn quick_exit(c_int) void;
pub extern fn __ssp_real_mbstowcs(__buf: [*c]wchar_t, __src: [*c]const u8, __n: usize) usize;
pub extern fn __ssp_real_wcstombs(__buf: [*c]u8, __src: [*c]const wchar_t, __len: usize) usize;
pub extern fn __ssp_real_wctomb(__buf: [*c]u8, __wc: wchar_t) c_int;
pub const u8_t = u8;
pub const s8_t = i8;
pub const u16_t = u16;
pub const s16_t = i16;
pub const u32_t = u32;
pub const s32_t = i32;
pub const u64_t = u64;
pub const s64_t = i64;
pub const mem_ptr_t = usize;
pub const imaxdiv_t = extern struct {
    quot: intmax_t = @import("std").mem.zeroes(intmax_t),
    rem: intmax_t = @import("std").mem.zeroes(intmax_t),
};
pub extern fn imaxabs(intmax_t) intmax_t;
pub extern fn imaxdiv(__numer: intmax_t, __denomer: intmax_t) imaxdiv_t;
pub extern fn strtoimax(noalias [*c]const u8, noalias [*c][*c]u8, c_int) intmax_t;
pub extern fn _strtoimax_r([*c]struct__reent, noalias [*c]const u8, noalias [*c][*c]u8, c_int) intmax_t;
pub extern fn strtoumax(noalias [*c]const u8, noalias [*c][*c]u8, c_int) uintmax_t;
pub extern fn _strtoumax_r([*c]struct__reent, noalias [*c]const u8, noalias [*c][*c]u8, c_int) uintmax_t;
pub extern fn wcstoimax(noalias [*c]const wchar_t, noalias [*c][*c]wchar_t, c_int) intmax_t;
pub extern fn _wcstoimax_r([*c]struct__reent, noalias [*c]const wchar_t, noalias [*c][*c]wchar_t, c_int) intmax_t;
pub extern fn wcstoumax(noalias [*c]const wchar_t, noalias [*c][*c]wchar_t, c_int) uintmax_t;
pub extern fn _wcstoumax_r([*c]struct__reent, noalias [*c]const wchar_t, noalias [*c][*c]wchar_t, c_int) uintmax_t;
pub extern fn strtoimax_l(noalias [*c]const u8, _restrict: [*c][*c]u8, c_int, locale_t) intmax_t;
pub extern fn strtoumax_l(noalias [*c]const u8, _restrict: [*c][*c]u8, c_int, locale_t) uintmax_t;
pub extern fn wcstoimax_l(noalias [*c]const wchar_t, _restrict: [*c][*c]wchar_t, c_int, locale_t) intmax_t;
pub extern fn wcstoumax_l(noalias [*c]const wchar_t, _restrict: [*c][*c]wchar_t, c_int, locale_t) uintmax_t;
pub extern fn isalnum(__c: c_int) c_int;
pub extern fn isalpha(__c: c_int) c_int;
pub extern fn iscntrl(__c: c_int) c_int;
pub extern fn isdigit(__c: c_int) c_int;
pub extern fn isgraph(__c: c_int) c_int;
pub extern fn islower(__c: c_int) c_int;
pub extern fn isprint(__c: c_int) c_int;
pub extern fn ispunct(__c: c_int) c_int;
pub extern fn isspace(__c: c_int) c_int;
pub extern fn isupper(__c: c_int) c_int;
pub extern fn isxdigit(__c: c_int) c_int;
pub extern fn tolower(__c: c_int) c_int;
pub extern fn toupper(__c: c_int) c_int;
pub extern fn isblank(__c: c_int) c_int;
pub extern fn isascii(__c: c_int) c_int;
pub extern fn toascii(__c: c_int) c_int;
pub extern fn isalnum_l(__c: c_int, __l: locale_t) c_int;
pub extern fn isalpha_l(__c: c_int, __l: locale_t) c_int;
pub extern fn isblank_l(__c: c_int, __l: locale_t) c_int;
pub extern fn iscntrl_l(__c: c_int, __l: locale_t) c_int;
pub extern fn isdigit_l(__c: c_int, __l: locale_t) c_int;
pub extern fn isgraph_l(__c: c_int, __l: locale_t) c_int;
pub extern fn islower_l(__c: c_int, __l: locale_t) c_int;
pub extern fn isprint_l(__c: c_int, __l: locale_t) c_int;
pub extern fn ispunct_l(__c: c_int, __l: locale_t) c_int;
pub extern fn isspace_l(__c: c_int, __l: locale_t) c_int;
pub extern fn isupper_l(__c: c_int, __l: locale_t) c_int;
pub extern fn isxdigit_l(__c: c_int, __l: locale_t) c_int;
pub extern fn tolower_l(__c: c_int, __l: locale_t) c_int;
pub extern fn toupper_l(__c: c_int, __l: locale_t) c_int;
pub extern fn isascii_l(__c: c_int, __l: locale_t) c_int;
pub extern fn toascii_l(__c: c_int, __l: locale_t) c_int;
pub const _ctype_: [*c]const u8 = @extern([*c]const u8, .{
    .name = "_ctype_",
});
pub fn __locale_ctype_ptr_l(arg__l: locale_t) callconv(.c) [*c]const u8 {
    var _l = arg__l;
    _ = &_l;
    _ = &_l;
    return @as([*c]const u8, @ptrCast(@alignCast(&_ctype_[@as(usize, @intCast(0))])));
}
pub const ERR_OK: c_int = 0;
pub const ERR_MEM: c_int = -1;
pub const ERR_BUF: c_int = -2;
pub const ERR_TIMEOUT: c_int = -3;
pub const ERR_RTE: c_int = -4;
pub const ERR_INPROGRESS: c_int = -5;
pub const ERR_VAL: c_int = -6;
pub const ERR_WOULDBLOCK: c_int = -7;
pub const ERR_USE: c_int = -8;
pub const ERR_ALREADY: c_int = -9;
pub const ERR_ISCONN: c_int = -10;
pub const ERR_CONN: c_int = -11;
pub const ERR_IF: c_int = -12;
pub const ERR_ABRT: c_int = -13;
pub const ERR_RST: c_int = -14;
pub const ERR_CLSD: c_int = -15;
pub const ERR_ARG: c_int = -16;
pub const err_enum_t = c_int;
pub const err_t = s8_t;
pub extern fn lwip_strerr(err: err_t) [*c]const u8;
pub extern fn lwip_htons(x: u16_t) u16_t;
pub extern fn lwip_htonl(x: u32_t) u32_t;
pub extern fn lwip_itoa(result: [*c]u8, bufsize: usize, number: c_int) void;
pub extern fn lwip_strnicmp(str1: [*c]const u8, str2: [*c]const u8, len: usize) c_int;
pub extern fn lwip_stricmp(str1: [*c]const u8, str2: [*c]const u8) c_int;
pub extern fn lwip_strnstr(buffer: [*c]const u8, token: [*c]const u8, n: usize) [*c]u8;
pub extern fn lwip_strnistr(buffer: [*c]const u8, token: [*c]const u8, n: usize) [*c]u8;
pub extern fn lwip_memcmp_consttime(s1: ?*const anyopaque, s2: ?*const anyopaque, len: usize) c_int;
pub const struct_ip4_addr = extern struct {
    addr: u32_t = @import("std").mem.zeroes(u32_t),
};
pub const ip4_addr_t = struct_ip4_addr;
pub const ip_addr_t = ip4_addr_t;
pub const struct_pbuf = extern struct {
    next: [*c]struct_pbuf = @import("std").mem.zeroes([*c]struct_pbuf),
    payload: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    tot_len: u16_t = @import("std").mem.zeroes(u16_t),
    len: u16_t = @import("std").mem.zeroes(u16_t),
    type_internal: u8_t = @import("std").mem.zeroes(u8_t),
    flags: u8_t = @import("std").mem.zeroes(u8_t),
    ref: u8_t = @import("std").mem.zeroes(u8_t),
    if_idx: u8_t = @import("std").mem.zeroes(u8_t),
};
pub const netif_input_fn = ?*const fn ([*c]struct_pbuf, [*c]struct_netif) callconv(.c) err_t;
pub const netif_output_fn = ?*const fn ([*c]struct_netif, [*c]struct_pbuf, [*c]const ip4_addr_t) callconv(.c) err_t;
pub const netif_linkoutput_fn = ?*const fn ([*c]struct_netif, [*c]struct_pbuf) callconv(.c) err_t;
pub const netif_status_callback_fn = ?*const fn ([*c]struct_netif) callconv(.c) void;
pub const struct_netif = extern struct {
    next: [*c]struct_netif = @import("std").mem.zeroes([*c]struct_netif),
    ip_addr: ip_addr_t = @import("std").mem.zeroes(ip_addr_t),
    netmask: ip_addr_t = @import("std").mem.zeroes(ip_addr_t),
    gw: ip_addr_t = @import("std").mem.zeroes(ip_addr_t),
    input: netif_input_fn = @import("std").mem.zeroes(netif_input_fn),
    output: netif_output_fn = @import("std").mem.zeroes(netif_output_fn),
    linkoutput: netif_linkoutput_fn = @import("std").mem.zeroes(netif_linkoutput_fn),
    status_callback: netif_status_callback_fn = @import("std").mem.zeroes(netif_status_callback_fn),
    link_callback: netif_status_callback_fn = @import("std").mem.zeroes(netif_status_callback_fn),
    state: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    client_data: [1]?*anyopaque = @import("std").mem.zeroes([1]?*anyopaque),
    hostname: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    mtu: u16_t = @import("std").mem.zeroes(u16_t),
    hwaddr: [6]u8_t = @import("std").mem.zeroes([6]u8_t),
    hwaddr_len: u8_t = @import("std").mem.zeroes(u8_t),
    flags: u8_t = @import("std").mem.zeroes(u8_t),
    name: [2]u8 = @import("std").mem.zeroes([2]u8),
    num: u8_t = @import("std").mem.zeroes(u8_t),
};
pub extern fn ip4_addr_isbroadcast_u32(addr: u32_t, netif: [*c]const struct_netif) u8_t;
pub extern fn ip4_addr_netmask_valid(netmask: u32_t) u8_t;
pub extern fn ipaddr_addr(cp: [*c]const u8) u32_t;
pub extern fn ip4addr_aton(cp: [*c]const u8, addr: [*c]ip4_addr_t) c_int;
pub extern fn ip4addr_ntoa(addr: [*c]const ip4_addr_t) [*c]u8;
pub extern fn ip4addr_ntoa_r(addr: [*c]const ip4_addr_t, buf: [*c]u8, buflen: c_int) [*c]u8;
pub const IPADDR_TYPE_V4: c_int = 0;
pub const IPADDR_TYPE_V6: c_int = 6;
pub const IPADDR_TYPE_ANY: c_int = 46;
pub const enum_lwip_ip_addr_type = c_uint;
pub extern const ip_addr_any: ip_addr_t;
pub extern const ip_addr_broadcast: ip_addr_t;
pub const PBUF_TRANSPORT: c_int = 54;
pub const PBUF_IP: c_int = 34;
pub const PBUF_LINK: c_int = 14;
pub const PBUF_RAW_TX: c_int = 0;
pub const PBUF_RAW: c_int = 0;
pub const pbuf_layer = c_uint;
pub const PBUF_RAM: c_int = 640;
pub const PBUF_ROM: c_int = 1;
pub const PBUF_REF: c_int = 65;
pub const PBUF_POOL: c_int = 386;
pub const pbuf_type = c_uint;
pub const struct_pbuf_rom = extern struct {
    next: [*c]struct_pbuf = @import("std").mem.zeroes([*c]struct_pbuf),
    payload: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub extern var pbuf_free_ooseq_pending: u8_t;
pub extern fn pbuf_free_ooseq() void;
pub extern fn pbuf_alloc(l: pbuf_layer, length: u16_t, @"type": pbuf_type) [*c]struct_pbuf;
pub extern fn pbuf_alloc_reference(payload: ?*anyopaque, length: u16_t, @"type": pbuf_type) [*c]struct_pbuf;
pub extern fn pbuf_realloc(p: [*c]struct_pbuf, size: u16_t) void;
pub extern fn pbuf_header(p: [*c]struct_pbuf, header_size: s16_t) u8_t;
pub extern fn pbuf_header_force(p: [*c]struct_pbuf, header_size: s16_t) u8_t;
pub extern fn pbuf_add_header(p: [*c]struct_pbuf, header_size_increment: usize) u8_t;
pub extern fn pbuf_add_header_force(p: [*c]struct_pbuf, header_size_increment: usize) u8_t;
pub extern fn pbuf_remove_header(p: [*c]struct_pbuf, header_size: usize) u8_t;
pub extern fn pbuf_free_header(q: [*c]struct_pbuf, size: u16_t) [*c]struct_pbuf;
pub extern fn pbuf_ref(p: [*c]struct_pbuf) void;
pub extern fn pbuf_free(p: [*c]struct_pbuf) u8_t;
pub extern fn pbuf_clen(p: [*c]const struct_pbuf) u16_t;
pub extern fn pbuf_cat(head: [*c]struct_pbuf, tail: [*c]struct_pbuf) void;
pub extern fn pbuf_chain(head: [*c]struct_pbuf, tail: [*c]struct_pbuf) void;
pub extern fn pbuf_dechain(p: [*c]struct_pbuf) [*c]struct_pbuf;
pub extern fn pbuf_copy(p_to: [*c]struct_pbuf, p_from: [*c]const struct_pbuf) err_t;
pub extern fn pbuf_copy_partial_pbuf(p_to: [*c]struct_pbuf, p_from: [*c]const struct_pbuf, copy_len: u16_t, offset: u16_t) err_t;
pub extern fn pbuf_copy_partial(p: [*c]const struct_pbuf, dataptr: ?*anyopaque, len: u16_t, offset: u16_t) u16_t;
pub extern fn pbuf_get_contiguous(p: [*c]const struct_pbuf, buffer: ?*anyopaque, bufsize: usize, len: u16_t, offset: u16_t) ?*anyopaque;
pub extern fn pbuf_take(buf: [*c]struct_pbuf, dataptr: ?*const anyopaque, len: u16_t) err_t;
pub extern fn pbuf_take_at(buf: [*c]struct_pbuf, dataptr: ?*const anyopaque, len: u16_t, offset: u16_t) err_t;
pub extern fn pbuf_skip(in: [*c]struct_pbuf, in_offset: u16_t, out_offset: [*c]u16_t) [*c]struct_pbuf;
pub extern fn pbuf_coalesce(p: [*c]struct_pbuf, layer: pbuf_layer) [*c]struct_pbuf;
pub extern fn pbuf_clone(l: pbuf_layer, @"type": pbuf_type, p: [*c]struct_pbuf) [*c]struct_pbuf;
pub extern fn pbuf_get_at(p: [*c]const struct_pbuf, offset: u16_t) u8_t;
pub extern fn pbuf_try_get_at(p: [*c]const struct_pbuf, offset: u16_t) c_int;
pub extern fn pbuf_put_at(p: [*c]struct_pbuf, offset: u16_t, data: u8_t) void;
pub extern fn pbuf_memcmp(p: [*c]const struct_pbuf, offset: u16_t, s2: ?*const anyopaque, n: u16_t) u16_t;
pub extern fn pbuf_memfind(p: [*c]const struct_pbuf, mem: ?*const anyopaque, mem_len: u16_t, start_offset: u16_t) u16_t;
pub extern fn pbuf_strstr(p: [*c]const struct_pbuf, substr: [*c]const u8) u16_t;
pub const mem_size_t = u16_t;
pub extern fn mem_init() void;
pub extern fn mem_trim(mem: ?*anyopaque, size: mem_size_t) ?*anyopaque;
pub extern fn mem_malloc(size: mem_size_t) ?*anyopaque;
pub extern fn mem_calloc(count: mem_size_t, size: mem_size_t) ?*anyopaque;
pub extern fn mem_free(mem: ?*anyopaque) void;
pub const MEMP_RAW_PCB: c_int = 0;
pub const MEMP_UDP_PCB: c_int = 1;
pub const MEMP_TCP_PCB: c_int = 2;
pub const MEMP_TCP_PCB_LISTEN: c_int = 3;
pub const MEMP_TCP_SEG: c_int = 4;
pub const MEMP_REASSDATA: c_int = 5;
pub const MEMP_SYS_TIMEOUT: c_int = 6;
pub const MEMP_PBUF: c_int = 7;
pub const MEMP_PBUF_POOL: c_int = 8;
pub const MEMP_MAX: c_int = 9;
pub const memp_t = c_uint;
pub const struct_memp = extern struct {
    next: [*c]struct_memp = @import("std").mem.zeroes([*c]struct_memp),
};
pub const struct_memp_desc = extern struct {
    desc: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    size: u16_t = @import("std").mem.zeroes(u16_t),
    num: u16_t = @import("std").mem.zeroes(u16_t),
    base: [*c]u8_t = @import("std").mem.zeroes([*c]u8_t),
    tab: [*c][*c]struct_memp = @import("std").mem.zeroes([*c][*c]struct_memp),
};
pub extern fn memp_init_pool(desc: [*c]const struct_memp_desc) void;
pub extern fn memp_malloc_pool(desc: [*c]const struct_memp_desc) ?*anyopaque;
pub extern fn memp_free_pool(desc: [*c]const struct_memp_desc, mem: ?*anyopaque) void;
pub extern const memp_pools: [9][*c]const struct_memp_desc;
pub extern fn memp_init() void;
pub extern fn memp_malloc(@"type": memp_t) ?*anyopaque;
pub extern fn memp_free(@"type": memp_t, mem: ?*anyopaque) void;
pub const struct_stats_proto = extern struct {
    xmit: u16_t = @import("std").mem.zeroes(u16_t),
    recv: u16_t = @import("std").mem.zeroes(u16_t),
    fw: u16_t = @import("std").mem.zeroes(u16_t),
    drop: u16_t = @import("std").mem.zeroes(u16_t),
    chkerr: u16_t = @import("std").mem.zeroes(u16_t),
    lenerr: u16_t = @import("std").mem.zeroes(u16_t),
    memerr: u16_t = @import("std").mem.zeroes(u16_t),
    rterr: u16_t = @import("std").mem.zeroes(u16_t),
    proterr: u16_t = @import("std").mem.zeroes(u16_t),
    opterr: u16_t = @import("std").mem.zeroes(u16_t),
    err: u16_t = @import("std").mem.zeroes(u16_t),
    cachehit: u16_t = @import("std").mem.zeroes(u16_t),
};
pub const struct_stats_igmp = extern struct {
    xmit: u16_t = @import("std").mem.zeroes(u16_t),
    recv: u16_t = @import("std").mem.zeroes(u16_t),
    drop: u16_t = @import("std").mem.zeroes(u16_t),
    chkerr: u16_t = @import("std").mem.zeroes(u16_t),
    lenerr: u16_t = @import("std").mem.zeroes(u16_t),
    memerr: u16_t = @import("std").mem.zeroes(u16_t),
    proterr: u16_t = @import("std").mem.zeroes(u16_t),
    rx_v1: u16_t = @import("std").mem.zeroes(u16_t),
    rx_group: u16_t = @import("std").mem.zeroes(u16_t),
    rx_general: u16_t = @import("std").mem.zeroes(u16_t),
    rx_report: u16_t = @import("std").mem.zeroes(u16_t),
    tx_join: u16_t = @import("std").mem.zeroes(u16_t),
    tx_leave: u16_t = @import("std").mem.zeroes(u16_t),
    tx_report: u16_t = @import("std").mem.zeroes(u16_t),
};
pub const struct_stats_mem = extern struct {
    name: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    err: u16_t = @import("std").mem.zeroes(u16_t),
    avail: mem_size_t = @import("std").mem.zeroes(mem_size_t),
    used: mem_size_t = @import("std").mem.zeroes(mem_size_t),
    max: mem_size_t = @import("std").mem.zeroes(mem_size_t),
    illegal: u16_t = @import("std").mem.zeroes(u16_t),
};
pub const struct_stats_syselem = extern struct {
    used: u16_t = @import("std").mem.zeroes(u16_t),
    max: u16_t = @import("std").mem.zeroes(u16_t),
    err: u16_t = @import("std").mem.zeroes(u16_t),
};
pub const struct_stats_sys = extern struct {
    sem: struct_stats_syselem = @import("std").mem.zeroes(struct_stats_syselem),
    mutex: struct_stats_syselem = @import("std").mem.zeroes(struct_stats_syselem),
    mbox: struct_stats_syselem = @import("std").mem.zeroes(struct_stats_syselem),
};
pub const struct_stats_mib2 = extern struct {
    ipinhdrerrors: u32_t = @import("std").mem.zeroes(u32_t),
    ipinaddrerrors: u32_t = @import("std").mem.zeroes(u32_t),
    ipinunknownprotos: u32_t = @import("std").mem.zeroes(u32_t),
    ipindiscards: u32_t = @import("std").mem.zeroes(u32_t),
    ipindelivers: u32_t = @import("std").mem.zeroes(u32_t),
    ipoutrequests: u32_t = @import("std").mem.zeroes(u32_t),
    ipoutdiscards: u32_t = @import("std").mem.zeroes(u32_t),
    ipoutnoroutes: u32_t = @import("std").mem.zeroes(u32_t),
    ipreasmoks: u32_t = @import("std").mem.zeroes(u32_t),
    ipreasmfails: u32_t = @import("std").mem.zeroes(u32_t),
    ipfragoks: u32_t = @import("std").mem.zeroes(u32_t),
    ipfragfails: u32_t = @import("std").mem.zeroes(u32_t),
    ipfragcreates: u32_t = @import("std").mem.zeroes(u32_t),
    ipreasmreqds: u32_t = @import("std").mem.zeroes(u32_t),
    ipforwdatagrams: u32_t = @import("std").mem.zeroes(u32_t),
    ipinreceives: u32_t = @import("std").mem.zeroes(u32_t),
    ip6reasmoks: u32_t = @import("std").mem.zeroes(u32_t),
    tcpactiveopens: u32_t = @import("std").mem.zeroes(u32_t),
    tcppassiveopens: u32_t = @import("std").mem.zeroes(u32_t),
    tcpattemptfails: u32_t = @import("std").mem.zeroes(u32_t),
    tcpestabresets: u32_t = @import("std").mem.zeroes(u32_t),
    tcpoutsegs: u32_t = @import("std").mem.zeroes(u32_t),
    tcpretranssegs: u32_t = @import("std").mem.zeroes(u32_t),
    tcpinsegs: u32_t = @import("std").mem.zeroes(u32_t),
    tcpinerrs: u32_t = @import("std").mem.zeroes(u32_t),
    tcpoutrsts: u32_t = @import("std").mem.zeroes(u32_t),
    udpindatagrams: u32_t = @import("std").mem.zeroes(u32_t),
    udpnoports: u32_t = @import("std").mem.zeroes(u32_t),
    udpinerrors: u32_t = @import("std").mem.zeroes(u32_t),
    udpoutdatagrams: u32_t = @import("std").mem.zeroes(u32_t),
    icmpinmsgs: u32_t = @import("std").mem.zeroes(u32_t),
    icmpinerrors: u32_t = @import("std").mem.zeroes(u32_t),
    icmpindestunreachs: u32_t = @import("std").mem.zeroes(u32_t),
    icmpintimeexcds: u32_t = @import("std").mem.zeroes(u32_t),
    icmpinparmprobs: u32_t = @import("std").mem.zeroes(u32_t),
    icmpinsrcquenchs: u32_t = @import("std").mem.zeroes(u32_t),
    icmpinredirects: u32_t = @import("std").mem.zeroes(u32_t),
    icmpinechos: u32_t = @import("std").mem.zeroes(u32_t),
    icmpinechoreps: u32_t = @import("std").mem.zeroes(u32_t),
    icmpintimestamps: u32_t = @import("std").mem.zeroes(u32_t),
    icmpintimestampreps: u32_t = @import("std").mem.zeroes(u32_t),
    icmpinaddrmasks: u32_t = @import("std").mem.zeroes(u32_t),
    icmpinaddrmaskreps: u32_t = @import("std").mem.zeroes(u32_t),
    icmpoutmsgs: u32_t = @import("std").mem.zeroes(u32_t),
    icmpouterrors: u32_t = @import("std").mem.zeroes(u32_t),
    icmpoutdestunreachs: u32_t = @import("std").mem.zeroes(u32_t),
    icmpouttimeexcds: u32_t = @import("std").mem.zeroes(u32_t),
    icmpoutechos: u32_t = @import("std").mem.zeroes(u32_t),
    icmpoutechoreps: u32_t = @import("std").mem.zeroes(u32_t),
};
pub const struct_stats_mib2_netif_ctrs = extern struct {
    ifinoctets: u32_t = @import("std").mem.zeroes(u32_t),
    ifinucastpkts: u32_t = @import("std").mem.zeroes(u32_t),
    ifinnucastpkts: u32_t = @import("std").mem.zeroes(u32_t),
    ifindiscards: u32_t = @import("std").mem.zeroes(u32_t),
    ifinerrors: u32_t = @import("std").mem.zeroes(u32_t),
    ifinunknownprotos: u32_t = @import("std").mem.zeroes(u32_t),
    ifoutoctets: u32_t = @import("std").mem.zeroes(u32_t),
    ifoutucastpkts: u32_t = @import("std").mem.zeroes(u32_t),
    ifoutnucastpkts: u32_t = @import("std").mem.zeroes(u32_t),
    ifoutdiscards: u32_t = @import("std").mem.zeroes(u32_t),
    ifouterrors: u32_t = @import("std").mem.zeroes(u32_t),
};
pub const struct_stats_ = extern struct {
    etharp: struct_stats_proto = @import("std").mem.zeroes(struct_stats_proto),
    ip_frag: struct_stats_proto = @import("std").mem.zeroes(struct_stats_proto),
    ip: struct_stats_proto = @import("std").mem.zeroes(struct_stats_proto),
    icmp: struct_stats_proto = @import("std").mem.zeroes(struct_stats_proto),
    udp: struct_stats_proto = @import("std").mem.zeroes(struct_stats_proto),
    tcp: struct_stats_proto = @import("std").mem.zeroes(struct_stats_proto),
};
pub extern var lwip_stats: struct_stats_;
pub extern fn stats_init() void;
pub extern fn stats_display() void;
pub extern fn stats_display_proto(proto: [*c]struct_stats_proto, name: [*c]const u8) void;
pub extern fn stats_display_igmp(igmp: [*c]struct_stats_igmp, name: [*c]const u8) void;
pub extern fn stats_display_mem(mem: [*c]struct_stats_mem, name: [*c]const u8) void;
pub extern fn stats_display_memp(mem: [*c]struct_stats_mem, index: c_int) void;
pub extern fn stats_display_sys(sys: [*c]struct_stats_sys) void;
pub const LWIP_NETIF_CLIENT_DATA_INDEX_DHCP: c_int = 0;
pub const LWIP_NETIF_CLIENT_DATA_INDEX_MAX: c_int = 1;
pub const enum_lwip_internal_netif_client_data_index = c_uint;
pub const NETIF_DEL_MAC_FILTER: c_int = 0;
pub const NETIF_ADD_MAC_FILTER: c_int = 1;
pub const enum_netif_mac_filter_action = c_uint;
pub const netif_init_fn = ?*const fn ([*c]struct_netif) callconv(.c) err_t;
pub const netif_addr_idx_t = u8_t;
pub extern var netif_list: [*c]struct_netif;
pub extern var netif_default: [*c]struct_netif;
pub extern fn netif_init() void;
pub extern fn netif_add_noaddr(netif: [*c]struct_netif, state: ?*anyopaque, init: netif_init_fn, input: netif_input_fn) [*c]struct_netif;
pub extern fn netif_add(netif: [*c]struct_netif, ipaddr: [*c]const ip4_addr_t, netmask: [*c]const ip4_addr_t, gw: [*c]const ip4_addr_t, state: ?*anyopaque, init: netif_init_fn, input: netif_input_fn) [*c]struct_netif;
pub extern fn netif_set_addr(netif: [*c]struct_netif, ipaddr: [*c]const ip4_addr_t, netmask: [*c]const ip4_addr_t, gw: [*c]const ip4_addr_t) void;
pub extern fn netif_remove(netif: [*c]struct_netif) void;
pub extern fn netif_find(name: [*c]const u8) [*c]struct_netif;
pub extern fn netif_set_default(netif: [*c]struct_netif) void;
pub extern fn netif_set_ipaddr(netif: [*c]struct_netif, ipaddr: [*c]const ip4_addr_t) void;
pub extern fn netif_set_netmask(netif: [*c]struct_netif, netmask: [*c]const ip4_addr_t) void;
pub extern fn netif_set_gw(netif: [*c]struct_netif, gw: [*c]const ip4_addr_t) void;
pub extern fn netif_set_up(netif: [*c]struct_netif) void;
pub extern fn netif_set_down(netif: [*c]struct_netif) void;
pub extern fn netif_set_status_callback(netif: [*c]struct_netif, status_callback: netif_status_callback_fn) void;
pub extern fn netif_set_link_up(netif: [*c]struct_netif) void;
pub extern fn netif_set_link_down(netif: [*c]struct_netif) void;
pub extern fn netif_set_link_callback(netif: [*c]struct_netif, link_callback: netif_status_callback_fn) void;
pub extern fn netif_input(p: [*c]struct_pbuf, inp: [*c]struct_netif) err_t;
pub extern fn netif_name_to_index(name: [*c]const u8) u8_t;
pub extern fn netif_index_to_name(idx: u8_t, name: [*c]u8) [*c]u8;
pub extern fn netif_get_by_index(idx: u8_t) [*c]struct_netif;
pub const netif_nsc_reason_t = u16_t;
pub const struct_link_changed_s_7 = extern struct {
    state: u8_t = @import("std").mem.zeroes(u8_t),
};
pub const struct_status_changed_s_8 = extern struct {
    state: u8_t = @import("std").mem.zeroes(u8_t),
};
pub const struct_ipv4_changed_s_9 = extern struct {
    old_address: [*c]const ip_addr_t = @import("std").mem.zeroes([*c]const ip_addr_t),
    old_netmask: [*c]const ip_addr_t = @import("std").mem.zeroes([*c]const ip_addr_t),
    old_gw: [*c]const ip_addr_t = @import("std").mem.zeroes([*c]const ip_addr_t),
};
pub const struct_ipv6_set_s_10 = extern struct {
    addr_index: s8_t = @import("std").mem.zeroes(s8_t),
    old_address: [*c]const ip_addr_t = @import("std").mem.zeroes([*c]const ip_addr_t),
};
pub const struct_ipv6_addr_state_changed_s_11 = extern struct {
    addr_index: s8_t = @import("std").mem.zeroes(s8_t),
    old_state: u8_t = @import("std").mem.zeroes(u8_t),
    address: [*c]const ip_addr_t = @import("std").mem.zeroes([*c]const ip_addr_t),
};
pub const netif_ext_callback_args_t = extern union {
    link_changed: struct_link_changed_s_7,
    status_changed: struct_status_changed_s_8,
    ipv4_changed: struct_ipv4_changed_s_9,
    ipv6_set: struct_ipv6_set_s_10,
    ipv6_addr_state_changed: struct_ipv6_addr_state_changed_s_11,
};
pub const netif_ext_callback_fn = ?*const fn ([*c]struct_netif, netif_nsc_reason_t, [*c]const netif_ext_callback_args_t) callconv(.c) void;
pub const struct_ip4_addr_packed = extern struct {
    addr: u32_t align(1) = @import("std").mem.zeroes(u32_t),
};
pub const ip4_addr_p_t = struct_ip4_addr_packed;
pub const struct_ip_hdr = extern struct {
    _v_hl: u8_t align(1) = @import("std").mem.zeroes(u8_t),
    _tos: u8_t align(1) = @import("std").mem.zeroes(u8_t),
    _len: u16_t align(1) = @import("std").mem.zeroes(u16_t),
    _id: u16_t align(1) = @import("std").mem.zeroes(u16_t),
    _offset: u16_t align(1) = @import("std").mem.zeroes(u16_t),
    _ttl: u8_t align(1) = @import("std").mem.zeroes(u8_t),
    _proto: u8_t align(1) = @import("std").mem.zeroes(u8_t),
    _chksum: u16_t align(1) = @import("std").mem.zeroes(u16_t),
    src: ip4_addr_p_t align(1) = @import("std").mem.zeroes(ip4_addr_p_t),
    dest: ip4_addr_p_t align(1) = @import("std").mem.zeroes(ip4_addr_p_t),
};
pub extern fn ip4_route(dest: [*c]const ip4_addr_t) [*c]struct_netif;
pub extern fn ip4_input(p: [*c]struct_pbuf, inp: [*c]struct_netif) err_t;
pub extern fn ip4_output(p: [*c]struct_pbuf, src: [*c]const ip4_addr_t, dest: [*c]const ip4_addr_t, ttl: u8_t, tos: u8_t, proto: u8_t) err_t;
pub extern fn ip4_output_if(p: [*c]struct_pbuf, src: [*c]const ip4_addr_t, dest: [*c]const ip4_addr_t, ttl: u8_t, tos: u8_t, proto: u8_t, netif: [*c]struct_netif) err_t;
pub extern fn ip4_output_if_src(p: [*c]struct_pbuf, src: [*c]const ip4_addr_t, dest: [*c]const ip4_addr_t, ttl: u8_t, tos: u8_t, proto: u8_t, netif: [*c]struct_netif) err_t;
pub const struct_ip_pcb = extern struct {
    local_ip: ip_addr_t = @import("std").mem.zeroes(ip_addr_t),
    remote_ip: ip_addr_t = @import("std").mem.zeroes(ip_addr_t),
    netif_idx: u8_t = @import("std").mem.zeroes(u8_t),
    so_options: u8_t = @import("std").mem.zeroes(u8_t),
    tos: u8_t = @import("std").mem.zeroes(u8_t),
    ttl: u8_t = @import("std").mem.zeroes(u8_t),
};
pub const struct_ip_globals = extern struct {
    current_netif: [*c]struct_netif = @import("std").mem.zeroes([*c]struct_netif),
    current_input_netif: [*c]struct_netif = @import("std").mem.zeroes([*c]struct_netif),
    current_ip4_header: [*c]const struct_ip_hdr = @import("std").mem.zeroes([*c]const struct_ip_hdr),
    current_ip_header_tot_len: u16_t = @import("std").mem.zeroes(u16_t),
    current_iphdr_src: ip_addr_t = @import("std").mem.zeroes(ip_addr_t),
    current_iphdr_dest: ip_addr_t = @import("std").mem.zeroes(ip_addr_t),
};
pub extern var ip_data: struct_ip_globals;
pub const struct_udp_hdr = extern struct {
    src: u16_t align(1) = @import("std").mem.zeroes(u16_t),
    dest: u16_t align(1) = @import("std").mem.zeroes(u16_t),
    len: u16_t align(1) = @import("std").mem.zeroes(u16_t),
    chksum: u16_t align(1) = @import("std").mem.zeroes(u16_t),
};
pub const udp_recv_fn = ?*const fn (?*anyopaque, [*c]struct_udp_pcb, [*c]struct_pbuf, [*c]const ip_addr_t, u16_t) callconv(.c) void;
pub const struct_udp_pcb = extern struct {
    local_ip: ip_addr_t = @import("std").mem.zeroes(ip_addr_t),
    remote_ip: ip_addr_t = @import("std").mem.zeroes(ip_addr_t),
    netif_idx: u8_t = @import("std").mem.zeroes(u8_t),
    so_options: u8_t = @import("std").mem.zeroes(u8_t),
    tos: u8_t = @import("std").mem.zeroes(u8_t),
    ttl: u8_t = @import("std").mem.zeroes(u8_t),
    next: [*c]struct_udp_pcb = @import("std").mem.zeroes([*c]struct_udp_pcb),
    flags: u8_t = @import("std").mem.zeroes(u8_t),
    local_port: u16_t = @import("std").mem.zeroes(u16_t),
    remote_port: u16_t = @import("std").mem.zeroes(u16_t),
    recv: udp_recv_fn = @import("std").mem.zeroes(udp_recv_fn),
    recv_arg: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub extern var udp_pcbs: [*c]struct_udp_pcb;
pub extern fn udp_new() [*c]struct_udp_pcb;
pub extern fn udp_new_ip_type(@"type": u8_t) [*c]struct_udp_pcb;
pub extern fn udp_remove(pcb: [*c]struct_udp_pcb) void;
pub extern fn udp_bind(pcb: [*c]struct_udp_pcb, ipaddr: [*c]const ip_addr_t, port: u16_t) err_t;
pub extern fn udp_bind_netif(pcb: [*c]struct_udp_pcb, netif: [*c]const struct_netif) void;
pub extern fn udp_connect(pcb: [*c]struct_udp_pcb, ipaddr: [*c]const ip_addr_t, port: u16_t) err_t;
pub extern fn udp_disconnect(pcb: [*c]struct_udp_pcb) void;
pub extern fn udp_recv(pcb: [*c]struct_udp_pcb, recv: udp_recv_fn, recv_arg: ?*anyopaque) void;
pub extern fn udp_sendto_if(pcb: [*c]struct_udp_pcb, p: [*c]struct_pbuf, dst_ip: [*c]const ip_addr_t, dst_port: u16_t, netif: [*c]struct_netif) err_t;
pub extern fn udp_sendto_if_src(pcb: [*c]struct_udp_pcb, p: [*c]struct_pbuf, dst_ip: [*c]const ip_addr_t, dst_port: u16_t, netif: [*c]struct_netif, src_ip: [*c]const ip_addr_t) err_t;
pub extern fn udp_sendto(pcb: [*c]struct_udp_pcb, p: [*c]struct_pbuf, dst_ip: [*c]const ip_addr_t, dst_port: u16_t) err_t;
pub extern fn udp_send(pcb: [*c]struct_udp_pcb, p: [*c]struct_pbuf) err_t;
pub extern fn udp_input(p: [*c]struct_pbuf, inp: [*c]struct_netif) void;
pub extern fn udp_init() void;
pub extern fn udp_netif_ip_addr_changed(old_addr: [*c]const ip_addr_t, new_addr: [*c]const ip_addr_t) void;
pub const dhcp_timeout_t = u16_t;
pub const DHCP_AUTOIP_COOP_STATE_OFF: c_int = 0;
pub const DHCP_AUTOIP_COOP_STATE_ON: c_int = 1;
pub const dhcp_autoip_coop_state_enum_t = c_uint;
pub const struct_dhcp = extern struct {
    xid: u32_t = @import("std").mem.zeroes(u32_t),
    pcb_allocated: u8_t = @import("std").mem.zeroes(u8_t),
    state: u8_t = @import("std").mem.zeroes(u8_t),
    tries: u8_t = @import("std").mem.zeroes(u8_t),
    flags: u8_t = @import("std").mem.zeroes(u8_t),
    request_timeout: dhcp_timeout_t = @import("std").mem.zeroes(dhcp_timeout_t),
    t1_timeout: dhcp_timeout_t = @import("std").mem.zeroes(dhcp_timeout_t),
    t2_timeout: dhcp_timeout_t = @import("std").mem.zeroes(dhcp_timeout_t),
    t1_renew_time: dhcp_timeout_t = @import("std").mem.zeroes(dhcp_timeout_t),
    t2_rebind_time: dhcp_timeout_t = @import("std").mem.zeroes(dhcp_timeout_t),
    lease_used: dhcp_timeout_t = @import("std").mem.zeroes(dhcp_timeout_t),
    t0_timeout: dhcp_timeout_t = @import("std").mem.zeroes(dhcp_timeout_t),
    server_ip_addr: ip_addr_t = @import("std").mem.zeroes(ip_addr_t),
    offered_ip_addr: ip4_addr_t = @import("std").mem.zeroes(ip4_addr_t),
    offered_sn_mask: ip4_addr_t = @import("std").mem.zeroes(ip4_addr_t),
    offered_gw_addr: ip4_addr_t = @import("std").mem.zeroes(ip4_addr_t),
    offered_t0_lease: u32_t = @import("std").mem.zeroes(u32_t),
    offered_t1_renew: u32_t = @import("std").mem.zeroes(u32_t),
    offered_t2_rebind: u32_t = @import("std").mem.zeroes(u32_t),
};
pub extern fn dhcp_set_struct(netif: [*c]struct_netif, dhcp: [*c]struct_dhcp) void;
pub extern fn dhcp_cleanup(netif: [*c]struct_netif) void;
pub extern fn dhcp_start(netif: [*c]struct_netif) err_t;
pub extern fn dhcp_renew(netif: [*c]struct_netif) err_t;
pub extern fn dhcp_release(netif: [*c]struct_netif) err_t;
pub extern fn dhcp_stop(netif: [*c]struct_netif) void;
pub extern fn dhcp_release_and_stop(netif: [*c]struct_netif) void;
pub extern fn dhcp_inform(netif: [*c]struct_netif) void;
pub extern fn dhcp_network_changed_link_up(netif: [*c]struct_netif) void;
pub extern fn dhcp_supplied_address(netif: [*c]const struct_netif) u8_t;
pub extern fn dhcp_coarse_tmr() void;
pub extern fn dhcp_fine_tmr() void;
pub const CYW43_ITF_STA: c_int = 0;
pub const CYW43_ITF_AP: c_int = 1;
const enum_unnamed_12 = c_uint;
pub const struct__cyw43_ev_scan_result_t = extern struct {
    _0: [5]u32 = @import("std").mem.zeroes([5]u32),
    bssid: [6]u8 = @import("std").mem.zeroes([6]u8),
    _1: [2]u16 = @import("std").mem.zeroes([2]u16),
    ssid_len: u8 = @import("std").mem.zeroes(u8),
    ssid: [32]u8 = @import("std").mem.zeroes([32]u8),
    _2: [5]u32 = @import("std").mem.zeroes([5]u32),
    channel: u16 = @import("std").mem.zeroes(u16),
    _3: u16 = @import("std").mem.zeroes(u16),
    auth_mode: u8 = @import("std").mem.zeroes(u8),
    rssi: i16 = @import("std").mem.zeroes(i16),
};
pub const cyw43_ev_scan_result_t = struct__cyw43_ev_scan_result_t;
const union_unnamed_13 = extern union {
    scan_result: cyw43_ev_scan_result_t,
};
pub const struct__cyw43_async_event_t = extern struct {
    _0: u16 = @import("std").mem.zeroes(u16),
    flags: u16 = @import("std").mem.zeroes(u16),
    event_type: u32 = @import("std").mem.zeroes(u32),
    status: u32 = @import("std").mem.zeroes(u32),
    reason: u32 = @import("std").mem.zeroes(u32),
    _1: [30]u8 = @import("std").mem.zeroes([30]u8),
    interface: u8 = @import("std").mem.zeroes(u8),
    _2: u8 = @import("std").mem.zeroes(u8),
    u: union_unnamed_13 = @import("std").mem.zeroes(union_unnamed_13),
};
pub const cyw43_async_event_t = struct__cyw43_async_event_t;
pub const struct__cyw43_wifi_scan_options_t = extern struct {
    version: u32 = @import("std").mem.zeroes(u32),
    action: u16 = @import("std").mem.zeroes(u16),
    _: u16 = @import("std").mem.zeroes(u16),
    ssid_len: u32 = @import("std").mem.zeroes(u32),
    ssid: [32]u8 = @import("std").mem.zeroes([32]u8),
    bssid: [6]u8 = @import("std").mem.zeroes([6]u8),
    bss_type: i8 = @import("std").mem.zeroes(i8),
    scan_type: i8 = @import("std").mem.zeroes(i8),
    nprobes: i32 = @import("std").mem.zeroes(i32),
    active_time: i32 = @import("std").mem.zeroes(i32),
    passive_time: i32 = @import("std").mem.zeroes(i32),
    home_time: i32 = @import("std").mem.zeroes(i32),
    channel_num: i32 = @import("std").mem.zeroes(i32),
    channel_list: [1]u16 = @import("std").mem.zeroes([1]u16),
};
pub const cyw43_wifi_scan_options_t = struct__cyw43_wifi_scan_options_t;
pub const struct__cyw43_ll_t = extern struct {
    @"opaque": [532]u32 = @import("std").mem.zeroes([532]u32),
};
pub const cyw43_ll_t = struct__cyw43_ll_t;
pub extern fn cyw43_ll_init(self: [*c]cyw43_ll_t, cb_data: ?*anyopaque) void;
pub extern fn cyw43_ll_deinit(self: [*c]cyw43_ll_t) void;
pub extern fn cyw43_ll_bus_init(self: [*c]cyw43_ll_t, mac: [*c]const u8) c_int;
pub extern fn cyw43_ll_bus_sleep(self: [*c]cyw43_ll_t, can_sleep: bool) void;
pub extern fn cyw43_ll_process_packets(self: [*c]cyw43_ll_t) void;
pub extern fn cyw43_ll_ioctl(self: [*c]cyw43_ll_t, cmd: u32, len: usize, buf: [*c]u8, iface: u32) c_int;
pub extern fn cyw43_ll_send_ethernet(self: [*c]cyw43_ll_t, itf: c_int, len: usize, buf: ?*const anyopaque, is_pbuf: bool) c_int;
pub extern fn cyw43_ll_wifi_on(self: [*c]cyw43_ll_t, country: u32) c_int;
pub extern fn cyw43_ll_wifi_pm(self: [*c]cyw43_ll_t, pm: u32, pm_sleep_ret: u32, li_bcn: u32, li_dtim: u32, li_assoc: u32) c_int;
pub extern fn cyw43_ll_wifi_get_pm(self: [*c]cyw43_ll_t, pm: [*c]u32, pm_sleep_ret: [*c]u32, li_bcn: [*c]u32, li_dtim: [*c]u32, li_assoc: [*c]u32) c_int;
pub extern fn cyw43_ll_wifi_scan(self: [*c]cyw43_ll_t, opts: [*c]cyw43_wifi_scan_options_t) c_int;
pub extern fn cyw43_ll_wifi_join(self: [*c]cyw43_ll_t, ssid_len: usize, ssid: [*c]const u8, key_len: usize, key: [*c]const u8, auth_type: u32, bssid: [*c]const u8, channel: u32) c_int;
pub extern fn cyw43_ll_wifi_set_wpa_auth(self: [*c]cyw43_ll_t) void;
pub extern fn cyw43_ll_wifi_rejoin(self: [*c]cyw43_ll_t) void;
pub extern fn cyw43_ll_wifi_get_bssid(self_in: [*c]cyw43_ll_t, bssid: [*c]u8) c_int;
pub extern fn cyw43_ll_wifi_ap_init(self: [*c]cyw43_ll_t, ssid_len: usize, ssid: [*c]const u8, auth: u32, key_len: usize, key: [*c]const u8, channel: u32) c_int;
pub extern fn cyw43_ll_wifi_ap_set_up(self: [*c]cyw43_ll_t, up: bool) c_int;
pub extern fn cyw43_ll_wifi_ap_get_stas(self: [*c]cyw43_ll_t, num_stas: [*c]c_int, macs: [*c]u8) c_int;
pub extern fn cyw43_ll_gpio_set(self: [*c]cyw43_ll_t, gpio_n: c_int, gpio_en: bool) c_int;
pub extern fn cyw43_ll_gpio_get(self_in: [*c]cyw43_ll_t, gpio_n: c_int, gpio_en: [*c]bool) c_int;
pub extern fn cyw43_ll_wifi_get_mac(self_in: [*c]cyw43_ll_t, addr: [*c]u8) c_int;
pub extern fn cyw43_ll_wifi_update_multicast_filter(self_in: [*c]cyw43_ll_t, addr: [*c]u8, add: bool) c_int;
pub extern fn cyw43_ll_has_work(self: [*c]cyw43_ll_t) bool;
pub extern fn cyw43_ll_bt_has_work(self: [*c]cyw43_ll_t) bool;
pub extern fn cyw43_cb_read_host_interrupt_pin(cb_data: ?*anyopaque) c_int;
pub extern fn cyw43_cb_ensure_awake(cb_data: ?*anyopaque) void;
pub extern fn cyw43_cb_process_async_event(cb_data: ?*anyopaque, ev: [*c]const cyw43_async_event_t) void;
pub extern fn cyw43_cb_process_ethernet(cb_data: ?*anyopaque, itf: c_int, len: usize, buf: [*c]const u8) void;
pub extern fn cyw43_ll_write_backplane_reg(self_in: [*c]cyw43_ll_t, addr: u32, val: u32) void;
pub extern fn cyw43_ll_read_backplane_reg(self_in: [*c]cyw43_ll_t, addr: u32) u32;
pub extern fn cyw43_ll_write_backplane_mem(self_in: [*c]cyw43_ll_t, addr: u32, len: u32, buf: [*c]const u8) c_int;
pub extern fn cyw43_ll_read_backplane_mem(self_in: [*c]cyw43_ll_t, addr: u32, len: u32, buf: [*c]u8) c_int;
pub extern fn bcmp(?*const anyopaque, ?*const anyopaque, usize) c_int;
pub extern fn bcopy(?*const anyopaque, ?*anyopaque, usize) void;
pub extern fn bzero(?*anyopaque, usize) void;
pub inline fn explicit_bzero(arg___buf: ?*anyopaque, arg___len: usize) void {
    var __buf = arg___buf;
    _ = &__buf;
    var __len = arg___len;
    _ = &__len;
    if (true) if ((__builtin_object_size(__buf, @as(c_int, 0)) != @as(usize, @bitCast(-@as(c_int, 1)))) and (__len > __builtin_object_size(__buf, @as(c_int, 0)))) {
        __chk_fail();
    };
    return __ssp_real_explicit_bzero(__buf, __len);
}
pub extern fn ffs(c_int) c_int;
pub extern fn ffsl(c_long) c_int;
pub extern fn ffsll(c_longlong) c_int;
pub extern fn fls(c_int) c_int;
pub extern fn flsl(c_long) c_int;
pub extern fn flsll(c_longlong) c_int;
pub extern fn index([*c]const u8, c_int) [*c]u8;
pub extern fn rindex([*c]const u8, c_int) [*c]u8;
pub extern fn strcasecmp([*c]const u8, [*c]const u8) c_int;
pub extern fn strncasecmp([*c]const u8, [*c]const u8, usize) c_int;
pub extern fn strcasecmp_l([*c]const u8, [*c]const u8, locale_t) c_int;
pub extern fn strncasecmp_l([*c]const u8, [*c]const u8, usize, locale_t) c_int;
pub extern fn __ssp_real_explicit_bzero(__buf: ?*anyopaque, __len: usize) void;
pub extern fn memchr(?*const anyopaque, c_int, usize) ?*anyopaque;
pub extern fn memcmp(?*const anyopaque, ?*const anyopaque, usize) c_int;
pub extern fn memcpy(noalias ?*anyopaque, noalias ?*const anyopaque, usize) ?*anyopaque;
pub extern fn memmove(?*anyopaque, ?*const anyopaque, usize) ?*anyopaque;
pub extern fn memset(?*anyopaque, c_int, usize) ?*anyopaque;
pub extern fn strcat(noalias [*c]u8, noalias [*c]const u8) [*c]u8;
pub extern fn strchr([*c]const u8, c_int) [*c]u8;
pub extern fn strcmp([*c]const u8, [*c]const u8) c_int;
pub extern fn strcoll([*c]const u8, [*c]const u8) c_int;
pub extern fn strcpy(noalias [*c]u8, noalias [*c]const u8) [*c]u8;
pub extern fn strcspn([*c]const u8, [*c]const u8) usize;
pub extern fn strerror(c_int) [*c]u8;
pub extern fn strlen([*c]const u8) usize;
pub extern fn strncat(noalias [*c]u8, noalias [*c]const u8, usize) [*c]u8;
pub extern fn strncmp([*c]const u8, [*c]const u8, usize) c_int;
pub extern fn strncpy(noalias [*c]u8, noalias [*c]const u8, usize) [*c]u8;
pub extern fn strpbrk([*c]const u8, [*c]const u8) [*c]u8;
pub extern fn strrchr([*c]const u8, c_int) [*c]u8;
pub extern fn strspn([*c]const u8, [*c]const u8) usize;
pub extern fn strstr([*c]const u8, [*c]const u8) [*c]u8;
pub extern fn strtok(noalias [*c]u8, noalias [*c]const u8) [*c]u8;
pub extern fn strxfrm(noalias [*c]u8, noalias [*c]const u8, usize) usize;
pub extern fn strcoll_l([*c]const u8, [*c]const u8, locale_t) c_int;
pub extern fn strerror_l(c_int, locale_t) [*c]u8;
pub extern fn strxfrm_l(noalias [*c]u8, noalias [*c]const u8, usize, locale_t) usize;
pub extern fn strtok_r(noalias [*c]u8, noalias [*c]const u8, noalias [*c][*c]u8) [*c]u8;
pub extern fn timingsafe_bcmp(?*const anyopaque, ?*const anyopaque, usize) c_int;
pub extern fn timingsafe_memcmp(?*const anyopaque, ?*const anyopaque, usize) c_int;
pub extern fn memccpy(noalias ?*anyopaque, noalias ?*const anyopaque, c_int, usize) ?*anyopaque;
pub extern fn stpcpy(noalias [*c]u8, noalias [*c]const u8) [*c]u8;
pub extern fn stpncpy(noalias [*c]u8, noalias [*c]const u8, usize) [*c]u8;
pub extern fn strdup([*c]const u8) [*c]u8;
pub extern fn _strdup_r([*c]struct__reent, [*c]const u8) [*c]u8;
pub extern fn strndup([*c]const u8, usize) [*c]u8;
pub extern fn _strndup_r([*c]struct__reent, [*c]const u8, usize) [*c]u8;
pub extern fn strerror_r(c_int, [*c]u8, usize) c_int;
pub extern fn _strerror_r([*c]struct__reent, c_int, c_int, [*c]c_int) [*c]u8;
pub extern fn strlcat([*c]u8, [*c]const u8, usize) usize;
pub extern fn strlcpy([*c]u8, [*c]const u8, usize) usize;
pub extern fn strnlen([*c]const u8, usize) usize;
pub extern fn strsep([*c][*c]u8, [*c]const u8) [*c]u8;
pub extern fn strnstr([*c]const u8, [*c]const u8, usize) [*c]u8;
pub extern fn strlwr([*c]u8) [*c]u8;
pub extern fn strupr([*c]u8) [*c]u8;
pub extern fn strsignal(__signo: c_int) [*c]u8;
pub extern fn __memcpy_chk(?*anyopaque, ?*const anyopaque, usize, usize) ?*anyopaque;
pub extern fn __memmove_chk(?*anyopaque, ?*anyopaque, usize, usize) ?*anyopaque;
pub extern fn __mempcpy_chk(?*anyopaque, ?*const anyopaque, usize, usize) ?*anyopaque;
pub extern fn __memset_chk(?*anyopaque, c_int, usize, usize) ?*anyopaque;
pub extern fn __stpcpy_chk([*c]u8, [*c]const u8, usize) [*c]u8;
pub extern fn __strcat_chk([*c]u8, [*c]const u8, usize) [*c]u8;
pub extern fn __strcpy_chk([*c]u8, [*c]const u8, usize) [*c]u8;
pub extern fn __strncat_chk([*c]u8, [*c]const u8, usize, usize) [*c]u8;
pub extern fn __strncpy_chk([*c]u8, [*c]const u8, usize, usize) [*c]u8;
pub inline fn __memcpy_ichk(noalias arg_dst: ?*anyopaque, noalias arg_src: ?*const anyopaque, arg_len: usize) ?*anyopaque {
    var dst = arg_dst;
    _ = &dst;
    var src = arg_src;
    _ = &src;
    var len = arg_len;
    _ = &len;
    return __builtin___memcpy_chk(dst, src, len, __builtin_object_size(dst, @as(c_int, 0)));
}
// (no file):307:1: warning: TODO implement function '__builtin___memmove_chk' in std.zig.c_builtins

// (no file):305:1: warning: unable to translate function, demoted to extern
pub extern fn __memmove_ichk(arg_dst: ?*anyopaque, arg_src: ?*const anyopaque, arg_len: usize) ?*anyopaque;
// (no file):313:1: warning: TODO implement function '__builtin___mempcpy_chk' in std.zig.c_builtins

// (no file):311:1: warning: unable to translate function, demoted to extern
pub extern fn __mempcpy_ichk(noalias arg_dst: ?*anyopaque, noalias arg_src: ?*const anyopaque, arg_len: usize) ?*anyopaque;
pub inline fn __memset_ichk(arg_dst: ?*anyopaque, arg_src: c_int, arg_len: usize) ?*anyopaque {
    var dst = arg_dst;
    _ = &dst;
    var src = arg_src;
    _ = &src;
    var len = arg_len;
    _ = &len;
    return __builtin___memset_chk(dst, src, len, __builtin_object_size(dst, @as(c_int, 0)));
}
// (no file):325:1: warning: TODO implement function '__builtin___stpcpy_chk' in std.zig.c_builtins

// (no file):323:1: warning: unable to translate function, demoted to extern
pub extern fn __stpcpy_ichk(arg_dst: [*c]u8, arg_src: [*c]const u8) [*c]u8;
// (no file):5:1: warning: TODO implement function '__builtin___stpncpy_chk' in std.zig.c_builtins

// (no file):3:1: warning: unable to translate function, demoted to extern
pub extern fn __stpncpy_ichk(noalias arg_dst: [*c]u8, noalias arg_src: [*c]const u8, arg_len: usize) [*c]u8;
// (no file):11:1: warning: TODO implement function '__builtin___strcpy_chk' in std.zig.c_builtins

// (no file):9:1: warning: unable to translate function, demoted to extern
pub extern fn __strcpy_ichk(arg_dst: [*c]u8, arg_src: [*c]const u8) [*c]u8;
// (no file):17:1: warning: TODO implement function '__builtin___strcat_chk' in std.zig.c_builtins

// (no file):15:1: warning: unable to translate function, demoted to extern
pub extern fn __strcat_ichk(arg_dst: [*c]u8, arg_src: [*c]const u8) [*c]u8;
// (no file):23:1: warning: TODO implement function '__builtin___strncpy_chk' in std.zig.c_builtins

// (no file):21:1: warning: unable to translate function, demoted to extern
pub extern fn __strncpy_ichk(noalias arg_dst: [*c]u8, noalias arg_src: [*c]const u8, arg_len: usize) [*c]u8;
// (no file):29:1: warning: TODO implement function '__builtin___strncat_chk' in std.zig.c_builtins

// (no file):27:1: warning: unable to translate function, demoted to extern
pub extern fn __strncat_ichk(noalias arg_dst: [*c]u8, noalias arg_src: [*c]const u8, arg_len: usize) [*c]u8;
pub const struct__cyw43_t = extern struct {
    cyw43_ll: cyw43_ll_t = @import("std").mem.zeroes(cyw43_ll_t),
    itf_state: u8 = @import("std").mem.zeroes(u8),
    trace_flags: u32 = @import("std").mem.zeroes(u32),
    wifi_scan_state: u32 = @import("std").mem.zeroes(u32),
    wifi_join_state: u32 = @import("std").mem.zeroes(u32),
    wifi_scan_env: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    wifi_scan_cb: ?*const fn (?*anyopaque, [*c]const cyw43_ev_scan_result_t) callconv(.c) c_int = @import("std").mem.zeroes(?*const fn (?*anyopaque, [*c]const cyw43_ev_scan_result_t) callconv(.c) c_int),
    initted: bool = @import("std").mem.zeroes(bool),
    pend_disassoc: bool = @import("std").mem.zeroes(bool),
    pend_rejoin: bool = @import("std").mem.zeroes(bool),
    pend_rejoin_wpa: bool = @import("std").mem.zeroes(bool),
    ap_auth: u32 = @import("std").mem.zeroes(u32),
    ap_channel: u8 = @import("std").mem.zeroes(u8),
    ap_ssid_len: u8 = @import("std").mem.zeroes(u8),
    ap_key_len: u8 = @import("std").mem.zeroes(u8),
    ap_ssid: [32]u8 = @import("std").mem.zeroes([32]u8),
    ap_key: [64]u8 = @import("std").mem.zeroes([64]u8),
    netif: [2]struct_netif = @import("std").mem.zeroes([2]struct_netif),
    dhcp_client: struct_dhcp = @import("std").mem.zeroes(struct_dhcp),
    mac: [6]u8 = @import("std").mem.zeroes([6]u8),
};
pub const cyw43_t = struct__cyw43_t;
pub extern var cyw43_state: cyw43_t;
pub extern var cyw43_poll: ?*const fn () callconv(.c) void;
pub extern var cyw43_sleep: u32;
pub extern fn cyw43_init(self: [*c]cyw43_t) void;
pub extern fn cyw43_deinit(self: [*c]cyw43_t) void;
pub extern fn cyw43_ioctl(self: [*c]cyw43_t, cmd: u32, len: usize, buf: [*c]u8, iface: u32) c_int;
pub extern fn cyw43_send_ethernet(self: [*c]cyw43_t, itf: c_int, len: usize, buf: ?*const anyopaque, is_pbuf: bool) c_int;
pub extern fn cyw43_wifi_pm(self: [*c]cyw43_t, pm: u32) c_int;
pub extern fn cyw43_wifi_get_pm(self: [*c]cyw43_t, pm: [*c]u32) c_int;
pub extern fn cyw43_wifi_link_status(self: [*c]cyw43_t, itf: c_int) c_int;
pub extern fn cyw43_wifi_set_up(self: [*c]cyw43_t, itf: c_int, up: bool, country: u32) void;
pub extern fn cyw43_wifi_get_mac(self: [*c]cyw43_t, itf: c_int, mac: [*c]u8) c_int;
pub extern fn cyw43_wifi_update_multicast_filter(self: [*c]cyw43_t, addr: [*c]u8, add: bool) c_int;
pub extern fn cyw43_wifi_scan(self: [*c]cyw43_t, opts: [*c]cyw43_wifi_scan_options_t, env: ?*anyopaque, result_cb: ?*const fn (?*anyopaque, [*c]const cyw43_ev_scan_result_t) callconv(.c) c_int) c_int;
pub fn cyw43_wifi_scan_active(arg_self: [*c]cyw43_t) callconv(.c) bool {
    var self = arg_self;
    _ = &self;
    return self.*.wifi_scan_state == @as(u32, @bitCast(@as(c_int, 1)));
}
pub extern fn cyw43_wifi_join(self: [*c]cyw43_t, ssid_len: usize, ssid: [*c]const u8, key_len: usize, key: [*c]const u8, auth_type: u32, bssid: [*c]const u8, channel: u32) c_int;
pub extern fn cyw43_wifi_leave(self: [*c]cyw43_t, itf: c_int) c_int;
pub extern fn cyw43_wifi_get_rssi(self: [*c]cyw43_t, rssi: [*c]i32) c_int;
pub extern fn cyw43_wifi_get_bssid(self: [*c]cyw43_t, bssid: [*c]u8) c_int;
pub fn cyw43_wifi_ap_get_ssid(arg_self: [*c]cyw43_t, arg_len: [*c]usize, arg_buf: [*c][*c]const u8) callconv(.c) void {
    var self = arg_self;
    _ = &self;
    var len = arg_len;
    _ = &len;
    var buf = arg_buf;
    _ = &buf;
    len.* = @as(usize, @bitCast(@as(c_uint, self.*.ap_ssid_len)));
    buf.* = @as([*c]u8, @ptrCast(@alignCast(&self.*.ap_ssid[@as(usize, @intCast(0))])));
}
pub fn cyw43_wifi_ap_get_auth(arg_self: [*c]cyw43_t) callconv(.c) u32 {
    var self = arg_self;
    _ = &self;
    return self.*.ap_auth;
}
pub fn cyw43_wifi_ap_set_channel(arg_self: [*c]cyw43_t, arg_channel: u32) callconv(.c) void {
    var self = arg_self;
    _ = &self;
    var channel = arg_channel;
    _ = &channel;
    self.*.ap_channel = @as(u8, @bitCast(@as(u8, @truncate(channel))));
}
pub fn cyw43_wifi_ap_set_ssid(arg_self: [*c]cyw43_t, arg_len: usize, arg_buf: [*c]const u8) callconv(.c) void {
    var self = arg_self;
    _ = &self;
    var len = arg_len;
    _ = &len;
    var buf = arg_buf;
    _ = &buf;
    self.*.ap_ssid_len = @as(u8, @bitCast(@as(u8, @truncate(if (@sizeOf([32]u8) > len) len else @sizeOf([32]u8)))));
    _ = if (__builtin_object_size(@as(?*const anyopaque, @ptrCast(@as([*c]u8, @ptrCast(@alignCast(&self.*.ap_ssid[@as(usize, @intCast(0))]))))), @as(c_int, 0)) != @as(usize, @bitCast(-@as(c_int, 1)))) __builtin___memcpy_chk(@as(?*anyopaque, @ptrCast(@as([*c]u8, @ptrCast(@alignCast(&self.*.ap_ssid[@as(usize, @intCast(0))]))))), @as(?*const anyopaque, @ptrCast(buf)), @as(c_uint, @bitCast(@as(c_uint, self.*.ap_ssid_len))), __builtin_object_size(@as(?*const anyopaque, @ptrCast(@as([*c]u8, @ptrCast(@alignCast(&self.*.ap_ssid[@as(usize, @intCast(0))]))))), @as(c_int, 0))) else __memcpy_ichk(@as(?*anyopaque, @ptrCast(@as([*c]u8, @ptrCast(@alignCast(&self.*.ap_ssid[@as(usize, @intCast(0))]))))), @as(?*const anyopaque, @ptrCast(buf)), @as(usize, @bitCast(@as(c_uint, self.*.ap_ssid_len))));
}
pub fn cyw43_wifi_ap_set_password(arg_self: [*c]cyw43_t, arg_len: usize, arg_buf: [*c]const u8) callconv(.c) void {
    var self = arg_self;
    _ = &self;
    var len = arg_len;
    _ = &len;
    var buf = arg_buf;
    _ = &buf;
    self.*.ap_key_len = @as(u8, @bitCast(@as(u8, @truncate(if (@sizeOf([64]u8) > len) len else @sizeOf([64]u8)))));
    _ = if (__builtin_object_size(@as(?*const anyopaque, @ptrCast(@as([*c]u8, @ptrCast(@alignCast(&self.*.ap_key[@as(usize, @intCast(0))]))))), @as(c_int, 0)) != @as(usize, @bitCast(-@as(c_int, 1)))) __builtin___memcpy_chk(@as(?*anyopaque, @ptrCast(@as([*c]u8, @ptrCast(@alignCast(&self.*.ap_key[@as(usize, @intCast(0))]))))), @as(?*const anyopaque, @ptrCast(buf)), @as(c_uint, @bitCast(@as(c_uint, self.*.ap_key_len))), __builtin_object_size(@as(?*const anyopaque, @ptrCast(@as([*c]u8, @ptrCast(@alignCast(&self.*.ap_key[@as(usize, @intCast(0))]))))), @as(c_int, 0))) else __memcpy_ichk(@as(?*anyopaque, @ptrCast(@as([*c]u8, @ptrCast(@alignCast(&self.*.ap_key[@as(usize, @intCast(0))]))))), @as(?*const anyopaque, @ptrCast(buf)), @as(usize, @bitCast(@as(c_uint, self.*.ap_key_len))));
}
pub fn cyw43_wifi_ap_set_auth(arg_self: [*c]cyw43_t, arg_auth: u32) callconv(.c) void {
    var self = arg_self;
    _ = &self;
    var auth = arg_auth;
    _ = &auth;
    self.*.ap_auth = auth;
}
pub extern fn cyw43_wifi_ap_get_max_stas(self: [*c]cyw43_t, max_stas: [*c]c_int) void;
pub extern fn cyw43_wifi_ap_get_stas(self: [*c]cyw43_t, num_stas: [*c]c_int, macs: [*c]u8) void;
pub fn cyw43_is_initialized(arg_self: [*c]cyw43_t) callconv(.c) bool {
    var self = arg_self;
    _ = &self;
    return self.*.initted;
}
pub extern fn cyw43_cb_tcpip_init(self: [*c]cyw43_t, itf: c_int) void;
pub extern fn cyw43_cb_tcpip_deinit(self: [*c]cyw43_t, itf: c_int) void;
pub extern fn cyw43_cb_tcpip_set_link_up(self: [*c]cyw43_t, itf: c_int) void;
pub extern fn cyw43_cb_tcpip_set_link_down(self: [*c]cyw43_t, itf: c_int) void;
pub extern fn cyw43_tcpip_link_status(self: [*c]cyw43_t, itf: c_int) c_int;
pub extern fn cyw43_gpio_set(self: [*c]cyw43_t, gpio: c_int, val: bool) c_int;
pub extern fn cyw43_gpio_get(self: [*c]cyw43_t, gpio: c_int, val: [*c]bool) c_int;
pub fn cyw43_pm_value(arg_pm_mode: u8, arg_pm2_sleep_ret_ms: u16, arg_li_beacon_period: u8, arg_li_dtim_period: u8, arg_li_assoc: u8) callconv(.c) u32 {
    var pm_mode = arg_pm_mode;
    _ = &pm_mode;
    var pm2_sleep_ret_ms = arg_pm2_sleep_ret_ms;
    _ = &pm2_sleep_ret_ms;
    var li_beacon_period = arg_li_beacon_period;
    _ = &li_beacon_period;
    var li_dtim_period = arg_li_dtim_period;
    _ = &li_dtim_period;
    var li_assoc = arg_li_assoc;
    _ = &li_assoc;
    return @as(u32, @bitCast(((((@as(c_int, @bitCast(@as(c_uint, li_assoc))) << @intCast(20)) | (@as(c_int, @bitCast(@as(c_uint, li_dtim_period))) << @intCast(16))) | (@as(c_int, @bitCast(@as(c_uint, li_beacon_period))) << @intCast(12))) | (@divTrunc(@as(c_int, @bitCast(@as(c_uint, pm2_sleep_ret_ms))), @as(c_int, 10)) << @intCast(4))) | @as(c_int, @bitCast(@as(c_uint, pm_mode)))));
}
pub const ASYNC_CONTEXT_POLL: c_int = 1;
pub const ASYNC_CONTEXT_THREADSAFE_BACKGROUND: c_int = 2;
pub const ASYNC_CONTEXT_FREERTOS: c_int = 3;
const enum_unnamed_14 = c_uint;
pub const async_context_t = struct_async_context;
pub const struct_async_work_on_timeout = extern struct {
    next: [*c]struct_async_work_on_timeout = @import("std").mem.zeroes([*c]struct_async_work_on_timeout),
    do_work: ?*const fn ([*c]async_context_t, [*c]struct_async_work_on_timeout) callconv(.c) void = @import("std").mem.zeroes(?*const fn ([*c]async_context_t, [*c]struct_async_work_on_timeout) callconv(.c) void),
    next_time: absolute_time_t = @import("std").mem.zeroes(absolute_time_t),
    user_data: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const async_at_time_worker_t = struct_async_work_on_timeout;
pub const struct_async_when_pending_worker = extern struct {
    next: [*c]struct_async_when_pending_worker = @import("std").mem.zeroes([*c]struct_async_when_pending_worker),
    do_work: ?*const fn ([*c]async_context_t, [*c]struct_async_when_pending_worker) callconv(.c) void = @import("std").mem.zeroes(?*const fn ([*c]async_context_t, [*c]struct_async_when_pending_worker) callconv(.c) void),
    work_pending: bool = @import("std").mem.zeroes(bool),
    user_data: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const async_when_pending_worker_t = struct_async_when_pending_worker;
pub const struct_async_context_type = extern struct {
    type: u16 = @import("std").mem.zeroes(u16),
    acquire_lock_blocking: ?*const fn ([*c]async_context_t) callconv(.c) void = @import("std").mem.zeroes(?*const fn ([*c]async_context_t) callconv(.c) void),
    release_lock: ?*const fn ([*c]async_context_t) callconv(.c) void = @import("std").mem.zeroes(?*const fn ([*c]async_context_t) callconv(.c) void),
    lock_check: ?*const fn ([*c]async_context_t) callconv(.c) void = @import("std").mem.zeroes(?*const fn ([*c]async_context_t) callconv(.c) void),
    execute_sync: ?*const fn ([*c]async_context_t, ?*const fn (?*anyopaque) callconv(.c) u32, ?*anyopaque) callconv(.c) u32 = @import("std").mem.zeroes(?*const fn ([*c]async_context_t, ?*const fn (?*anyopaque) callconv(.c) u32, ?*anyopaque) callconv(.c) u32),
    add_at_time_worker: ?*const fn ([*c]async_context_t, [*c]async_at_time_worker_t) callconv(.c) bool = @import("std").mem.zeroes(?*const fn ([*c]async_context_t, [*c]async_at_time_worker_t) callconv(.c) bool),
    remove_at_time_worker: ?*const fn ([*c]async_context_t, [*c]async_at_time_worker_t) callconv(.c) bool = @import("std").mem.zeroes(?*const fn ([*c]async_context_t, [*c]async_at_time_worker_t) callconv(.c) bool),
    add_when_pending_worker: ?*const fn ([*c]async_context_t, [*c]async_when_pending_worker_t) callconv(.c) bool = @import("std").mem.zeroes(?*const fn ([*c]async_context_t, [*c]async_when_pending_worker_t) callconv(.c) bool),
    remove_when_pending_worker: ?*const fn ([*c]async_context_t, [*c]async_when_pending_worker_t) callconv(.c) bool = @import("std").mem.zeroes(?*const fn ([*c]async_context_t, [*c]async_when_pending_worker_t) callconv(.c) bool),
    set_work_pending: ?*const fn ([*c]async_context_t, [*c]async_when_pending_worker_t) callconv(.c) void = @import("std").mem.zeroes(?*const fn ([*c]async_context_t, [*c]async_when_pending_worker_t) callconv(.c) void),
    poll: ?*const fn ([*c]async_context_t) callconv(.c) void = @import("std").mem.zeroes(?*const fn ([*c]async_context_t) callconv(.c) void),
    wait_until: ?*const fn ([*c]async_context_t, absolute_time_t) callconv(.c) void = @import("std").mem.zeroes(?*const fn ([*c]async_context_t, absolute_time_t) callconv(.c) void),
    wait_for_work_until: ?*const fn ([*c]async_context_t, absolute_time_t) callconv(.c) void = @import("std").mem.zeroes(?*const fn ([*c]async_context_t, absolute_time_t) callconv(.c) void),
    deinit: ?*const fn ([*c]async_context_t) callconv(.c) void = @import("std").mem.zeroes(?*const fn ([*c]async_context_t) callconv(.c) void),
};
pub const async_context_type_t = struct_async_context_type;
pub const struct_async_context = extern struct {
    type: [*c]const async_context_type_t = @import("std").mem.zeroes([*c]const async_context_type_t),
    when_pending_list: [*c]async_when_pending_worker_t = @import("std").mem.zeroes([*c]async_when_pending_worker_t),
    at_time_list: [*c]async_at_time_worker_t = @import("std").mem.zeroes([*c]async_at_time_worker_t),
    next_time: absolute_time_t = @import("std").mem.zeroes(absolute_time_t),
    flags: u16 = @import("std").mem.zeroes(u16),
    core_num: u8 = @import("std").mem.zeroes(u8),
};
pub fn async_context_acquire_lock_blocking(arg_context: [*c]async_context_t) callconv(.c) void {
    var context = arg_context;
    _ = &context;
    context.*.type.*.acquire_lock_blocking.?(context);
}
pub fn async_context_release_lock(arg_context: [*c]async_context_t) callconv(.c) void {
    var context = arg_context;
    _ = &context;
    context.*.type.*.release_lock.?(context);
}
pub fn async_context_lock_check(arg_context: [*c]async_context_t) callconv(.c) void {
    var context = arg_context;
    _ = &context;
    context.*.type.*.lock_check.?(context);
}
pub fn async_context_execute_sync(arg_context: [*c]async_context_t, arg_func: ?*const fn (?*anyopaque) callconv(.c) u32, arg_param: ?*anyopaque) callconv(.c) u32 {
    var context = arg_context;
    _ = &context;
    var func = arg_func;
    _ = &func;
    var param = arg_param;
    _ = &param;
    return context.*.type.*.execute_sync.?(context, func, param);
}
pub fn async_context_add_at_time_worker(arg_context: [*c]async_context_t, arg_worker: [*c]async_at_time_worker_t) callconv(.c) bool {
    var context = arg_context;
    _ = &context;
    var worker = arg_worker;
    _ = &worker;
    return context.*.type.*.add_at_time_worker.?(context, worker);
}
pub fn async_context_add_at_time_worker_at(arg_context: [*c]async_context_t, arg_worker: [*c]async_at_time_worker_t, arg_at: absolute_time_t) callconv(.c) bool {
    var context = arg_context;
    _ = &context;
    var worker = arg_worker;
    _ = &worker;
    var at = arg_at;
    _ = &at;
    worker.*.next_time = at;
    return context.*.type.*.add_at_time_worker.?(context, worker);
}
pub fn async_context_add_at_time_worker_in_ms(arg_context: [*c]async_context_t, arg_worker: [*c]async_at_time_worker_t, arg_ms: u32) callconv(.c) bool {
    var context = arg_context;
    _ = &context;
    var worker = arg_worker;
    _ = &worker;
    var ms = arg_ms;
    _ = &ms;
    worker.*.next_time = make_timeout_time_ms(ms);
    return context.*.type.*.add_at_time_worker.?(context, worker);
}
pub fn async_context_remove_at_time_worker(arg_context: [*c]async_context_t, arg_worker: [*c]async_at_time_worker_t) callconv(.c) bool {
    var context = arg_context;
    _ = &context;
    var worker = arg_worker;
    _ = &worker;
    return context.*.type.*.remove_at_time_worker.?(context, worker);
}
pub fn async_context_add_when_pending_worker(arg_context: [*c]async_context_t, arg_worker: [*c]async_when_pending_worker_t) callconv(.c) bool {
    var context = arg_context;
    _ = &context;
    var worker = arg_worker;
    _ = &worker;
    return context.*.type.*.add_when_pending_worker.?(context, worker);
}
pub fn async_context_remove_when_pending_worker(arg_context: [*c]async_context_t, arg_worker: [*c]async_when_pending_worker_t) callconv(.c) bool {
    var context = arg_context;
    _ = &context;
    var worker = arg_worker;
    _ = &worker;
    return context.*.type.*.remove_when_pending_worker.?(context, worker);
}
pub fn async_context_set_work_pending(arg_context: [*c]async_context_t, arg_worker: [*c]async_when_pending_worker_t) callconv(.c) void {
    var context = arg_context;
    _ = &context;
    var worker = arg_worker;
    _ = &worker;
    context.*.type.*.set_work_pending.?(context, worker);
}
pub fn async_context_poll(arg_context: [*c]async_context_t) callconv(.c) void {
    var context = arg_context;
    _ = &context;
    if (context.*.type.*.poll != null) {
        context.*.type.*.poll.?(context);
    }
}
pub fn async_context_wait_until(arg_context: [*c]async_context_t, arg_until: absolute_time_t) callconv(.c) void {
    var context = arg_context;
    _ = &context;
    var until = arg_until;
    _ = &until;
    context.*.type.*.wait_until.?(context, until);
}
pub fn async_context_wait_for_work_until(arg_context: [*c]async_context_t, arg_until: absolute_time_t) callconv(.c) void {
    var context = arg_context;
    _ = &context;
    var until = arg_until;
    _ = &until;
    context.*.type.*.wait_for_work_until.?(context, until);
}
pub fn async_context_wait_for_work_ms(arg_context: [*c]async_context_t, arg_ms: u32) callconv(.c) void {
    var context = arg_context;
    _ = &context;
    var ms = arg_ms;
    _ = &ms;
    async_context_wait_for_work_until(context, make_timeout_time_ms(ms));
}
pub fn async_context_core_num(arg_context: [*c]const async_context_t) callconv(.c) uint {
    var context = arg_context;
    _ = &context;
    return @as(uint, @bitCast(@as(c_uint, context.*.core_num)));
}
pub fn async_context_deinit(arg_context: [*c]async_context_t) callconv(.c) void {
    var context = arg_context;
    _ = &context;
    context.*.type.*.deinit.?(context);
}
pub extern fn cyw43_arch_init() c_int;
pub extern fn cyw43_arch_init_with_country(country: u32) c_int;
pub extern fn cyw43_arch_deinit() void;
pub extern fn cyw43_arch_async_context() [*c]async_context_t;
pub extern fn cyw43_arch_set_async_context(context: [*c]async_context_t) void;
pub extern fn cyw43_arch_init_default_async_context() [*c]async_context_t;
pub extern fn cyw43_arch_poll() void;
pub extern fn cyw43_arch_wait_for_work_until(until: absolute_time_t) void;
pub fn cyw43_arch_lwip_begin() callconv(.c) void {
    cyw43_thread_enter();
}
pub fn cyw43_arch_lwip_end() callconv(.c) void {
    cyw43_thread_exit();
}
pub fn cyw43_arch_lwip_protect(arg_func: ?*const fn (?*anyopaque) callconv(.c) c_int, arg_param: ?*anyopaque) callconv(.c) c_int {
    var func = arg_func;
    _ = &func;
    var param = arg_param;
    _ = &param;
    cyw43_arch_lwip_begin();
    var rc: c_int = func.?(param);
    _ = &rc;
    cyw43_arch_lwip_end();
    return rc;
}
pub extern fn cyw43_arch_get_country_code() u32;
pub extern fn cyw43_arch_enable_sta_mode() void;
pub extern fn cyw43_arch_disable_sta_mode() void;
pub extern fn cyw43_arch_enable_ap_mode(ssid: [*c]const u8, password: [*c]const u8, auth: u32) void;
pub extern fn cyw43_arch_disable_ap_mode() void;
pub extern fn cyw43_arch_wifi_connect_blocking(ssid: [*c]const u8, pw: [*c]const u8, auth: u32) c_int;
pub extern fn cyw43_arch_wifi_connect_bssid_blocking(ssid: [*c]const u8, bssid: [*c]const u8, pw: [*c]const u8, auth: u32) c_int;
pub extern fn cyw43_arch_wifi_connect_timeout_ms(ssid: [*c]const u8, pw: [*c]const u8, auth: u32, timeout: u32) c_int;
pub extern fn cyw43_arch_wifi_connect_bssid_timeout_ms(ssid: [*c]const u8, bssid: [*c]const u8, pw: [*c]const u8, auth: u32, timeout: u32) c_int;
pub extern fn cyw43_arch_wifi_connect_async(ssid: [*c]const u8, pw: [*c]const u8, auth: u32) c_int;
pub extern fn cyw43_arch_wifi_connect_bssid_async(ssid: [*c]const u8, bssid: [*c]const u8, pw: [*c]const u8, auth: u32) c_int;
pub extern fn cyw43_arch_gpio_put(wl_gpio: uint, value: bool) void;
pub extern fn cyw43_arch_gpio_get(wl_gpio: uint) bool;
pub const struct_stdio_driver = opaque {};
pub const stdio_driver_t = struct_stdio_driver;
pub extern fn stdio_init_all() bool;
pub extern fn stdio_deinit_all() bool;
pub extern fn stdio_flush() void;
pub extern fn stdio_getchar_timeout_us(timeout_us: u32) c_int;
pub fn getchar_timeout_us(arg_timeout_us: u32) callconv(.c) c_int {
    var timeout_us = arg_timeout_us;
    _ = &timeout_us;
    return stdio_getchar_timeout_us(timeout_us);
}
pub extern fn stdio_set_driver_enabled(driver: ?*stdio_driver_t, enabled: bool) void;
pub extern fn stdio_filter_driver(driver: ?*stdio_driver_t) void;
pub extern fn stdio_set_translate_crlf(driver: ?*stdio_driver_t, translate: bool) void;
pub extern fn stdio_putchar_raw(c: c_int) c_int;
pub fn putchar_raw(arg_c: c_int) callconv(.c) c_int {
    var c = arg_c;
    _ = &c;
    return stdio_putchar_raw(c);
}
pub extern fn stdio_puts_raw(s: [*c]const u8) c_int;
pub fn puts_raw(arg_s: [*c]const u8) callconv(.c) c_int {
    var s = arg_s;
    _ = &s;
    return stdio_puts_raw(s);
}
pub extern fn stdio_set_chars_available_callback(@"fn": ?*const fn (?*anyopaque) callconv(.c) void, param: ?*anyopaque) void;
pub extern fn stdio_get_until(buf: [*c]u8, len: c_int, until: absolute_time_t) c_int;
pub extern fn stdio_put_string(s: [*c]const u8, len: c_int, newline: bool, cr_translation: bool) c_int;
pub extern fn stdio_getchar() c_int;
pub extern fn stdio_putchar(c_int) c_int;
pub extern fn stdio_puts(s: [*c]const u8) c_int;
pub extern fn stdio_vprintf(format: [*c]const u8, va: va_list) c_int;
pub extern fn stdio_printf(format: [*c]const u8, ...) c_int;
pub const uart_hw_t = extern struct {
    dr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    rsr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    _pad0: [4]u32 = @import("std").mem.zeroes([4]u32),
    fr: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    _pad1: u32 = @import("std").mem.zeroes(u32),
    ilpr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    ibrd: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    fbrd: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    lcr_h: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    cr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    ifls: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    imsc: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    ris: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    mis: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
    icr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    dmacr: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
};
// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub const struct_uart_inst = opaque {};
pub const uart_inst_t = struct_uart_inst;
// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration

// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub const DREQ_PIO0_TX0: c_int = 0;
pub const DREQ_PIO0_TX1: c_int = 1;
pub const DREQ_PIO0_TX2: c_int = 2;
pub const DREQ_PIO0_TX3: c_int = 3;
pub const DREQ_PIO0_RX0: c_int = 4;
pub const DREQ_PIO0_RX1: c_int = 5;
pub const DREQ_PIO0_RX2: c_int = 6;
pub const DREQ_PIO0_RX3: c_int = 7;
pub const DREQ_PIO1_TX0: c_int = 8;
pub const DREQ_PIO1_TX1: c_int = 9;
pub const DREQ_PIO1_TX2: c_int = 10;
pub const DREQ_PIO1_TX3: c_int = 11;
pub const DREQ_PIO1_RX0: c_int = 12;
pub const DREQ_PIO1_RX1: c_int = 13;
pub const DREQ_PIO1_RX2: c_int = 14;
pub const DREQ_PIO1_RX3: c_int = 15;
pub const DREQ_PIO2_TX0: c_int = 16;
pub const DREQ_PIO2_TX1: c_int = 17;
pub const DREQ_PIO2_TX2: c_int = 18;
pub const DREQ_PIO2_TX3: c_int = 19;
pub const DREQ_PIO2_RX0: c_int = 20;
pub const DREQ_PIO2_RX1: c_int = 21;
pub const DREQ_PIO2_RX2: c_int = 22;
pub const DREQ_PIO2_RX3: c_int = 23;
pub const DREQ_SPI0_TX: c_int = 24;
pub const DREQ_SPI0_RX: c_int = 25;
pub const DREQ_SPI1_TX: c_int = 26;
pub const DREQ_SPI1_RX: c_int = 27;
pub const DREQ_UART0_TX: c_int = 28;
pub const DREQ_UART0_RX: c_int = 29;
pub const DREQ_UART1_TX: c_int = 30;
pub const DREQ_UART1_RX: c_int = 31;
pub const DREQ_PWM_WRAP0: c_int = 32;
pub const DREQ_PWM_WRAP1: c_int = 33;
pub const DREQ_PWM_WRAP2: c_int = 34;
pub const DREQ_PWM_WRAP3: c_int = 35;
pub const DREQ_PWM_WRAP4: c_int = 36;
pub const DREQ_PWM_WRAP5: c_int = 37;
pub const DREQ_PWM_WRAP6: c_int = 38;
pub const DREQ_PWM_WRAP7: c_int = 39;
pub const DREQ_PWM_WRAP8: c_int = 40;
pub const DREQ_PWM_WRAP9: c_int = 41;
pub const DREQ_PWM_WRAP10: c_int = 42;
pub const DREQ_PWM_WRAP11: c_int = 43;
pub const DREQ_I2C0_TX: c_int = 44;
pub const DREQ_I2C0_RX: c_int = 45;
pub const DREQ_I2C1_TX: c_int = 46;
pub const DREQ_I2C1_RX: c_int = 47;
pub const DREQ_ADC: c_int = 48;
pub const DREQ_XIP_STREAM: c_int = 49;
pub const DREQ_XIP_QMITX: c_int = 50;
pub const DREQ_XIP_QMIRX: c_int = 51;
pub const DREQ_HSTX: c_int = 52;
pub const DREQ_CORESIGHT: c_int = 53;
pub const DREQ_SHA256: c_int = 54;
pub const DREQ_DMA_TIMER0: c_int = 59;
pub const DREQ_DMA_TIMER1: c_int = 60;
pub const DREQ_DMA_TIMER2: c_int = 61;
pub const DREQ_DMA_TIMER3: c_int = 62;
pub const DREQ_FORCE: c_int = 63;
pub const DREQ_COUNT: c_int = 64;
pub const enum_dreq_num_rp2350 = c_uint;
pub const dreq_num_t = enum_dreq_num_rp2350;
// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration

// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration

// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration

// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub const RESET_ADC: c_int = 0;
pub const RESET_BUSCTRL: c_int = 1;
pub const RESET_DMA: c_int = 2;
pub const RESET_HSTX: c_int = 3;
pub const RESET_I2C0: c_int = 4;
pub const RESET_I2C1: c_int = 5;
pub const RESET_IO_BANK0: c_int = 6;
pub const RESET_IO_QSPI: c_int = 7;
pub const RESET_JTAG: c_int = 8;
pub const RESET_PADS_BANK0: c_int = 9;
pub const RESET_PADS_QSPI: c_int = 10;
pub const RESET_PIO0: c_int = 11;
pub const RESET_PIO1: c_int = 12;
pub const RESET_PIO2: c_int = 13;
pub const RESET_PLL_SYS: c_int = 14;
pub const RESET_PLL_USB: c_int = 15;
pub const RESET_PWM: c_int = 16;
pub const RESET_SHA256: c_int = 17;
pub const RESET_SPI0: c_int = 18;
pub const RESET_SPI1: c_int = 19;
pub const RESET_SYSCFG: c_int = 20;
pub const RESET_SYSINFO: c_int = 21;
pub const RESET_TBMAN: c_int = 22;
pub const RESET_TIMER0: c_int = 23;
pub const RESET_TIMER1: c_int = 24;
pub const RESET_TRNG: c_int = 25;
pub const RESET_UART0: c_int = 26;
pub const RESET_UART1: c_int = 27;
pub const RESET_USBCTRL: c_int = 28;
pub const RESET_COUNT: c_int = 29;
pub const enum_reset_num_rp2350 = c_uint;
pub const reset_num_t = enum_reset_num_rp2350;
pub const resets_hw_t = extern struct {
    reset: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    wdsel: io_rw_32 = @import("std").mem.zeroes(io_rw_32),
    reset_done: io_ro_32 = @import("std").mem.zeroes(io_ro_32),
};
// /usr/arm-none-eabi/include/assert.h:45:24: warning: ignoring StaticAssert declaration
pub inline fn reset_block_reg_mask(arg_reset: [*c]volatile io_rw_32, arg_mask: u32) void {
    var reset = arg_reset;
    _ = &reset;
    var mask = arg_mask;
    _ = &mask;
    hw_set_bits(reset, mask);
}
pub inline fn unreset_block_reg_mask(arg_reset: [*c]volatile io_rw_32, arg_mask: u32) void {
    var reset = arg_reset;
    _ = &reset;
    var mask = arg_mask;
    _ = &mask;
    hw_clear_bits(reset, mask);
}
pub inline fn unreset_block_reg_mask_wait_blocking(arg_reset: [*c]volatile io_rw_32, arg_reset_done: [*c]const volatile io_ro_32, arg_mask: u32) void {
    var reset = arg_reset;
    _ = &reset;
    var reset_done = arg_reset_done;
    _ = &reset_done;
    var mask = arg_mask;
    _ = &mask;
    hw_clear_bits(reset, mask);
    while ((~reset_done.* & mask) != 0) {
        tight_loop_contents();
    }
}
pub inline fn reset_block_mask(arg_bits: u32) void {
    var bits = arg_bits;
    _ = &bits;
    reset_block_reg_mask(&@as([*c]resets_hw_t, @ptrFromInt(@as(c_uint, 1073872896))).*.reset, bits);
}
pub inline fn unreset_block_mask(arg_bits: u32) void {
    var bits = arg_bits;
    _ = &bits;
    unreset_block_reg_mask(&@as([*c]resets_hw_t, @ptrFromInt(@as(c_uint, 1073872896))).*.reset, bits);
}
pub inline fn unreset_block_mask_wait_blocking(arg_bits: u32) void {
    var bits = arg_bits;
    _ = &bits;
    unreset_block_reg_mask_wait_blocking(&@as([*c]resets_hw_t, @ptrFromInt(@as(c_uint, 1073872896))).*.reset, &@as([*c]resets_hw_t, @ptrFromInt(@as(c_uint, 1073872896))).*.reset_done, bits);
}
pub inline fn reset_block(arg_bits: u32) void {
    var bits = arg_bits;
    _ = &bits;
    reset_block_mask(bits);
}
pub inline fn unreset_block(arg_bits: u32) void {
    var bits = arg_bits;
    _ = &bits;
    unreset_block_mask(bits);
}
pub inline fn unreset_block_wait(arg_bits: u32) void {
    var bits = arg_bits;
    _ = &bits;
    return unreset_block_mask_wait_blocking(bits);
}
pub fn reset_block_num(arg_block_num: u32) callconv(.c) void {
    var block_num = arg_block_num;
    _ = &block_num;
    reset_block_reg_mask(&@as([*c]resets_hw_t, @ptrFromInt(@as(c_uint, 1073872896))).*.reset, @as(c_uint, 1) << @intCast(block_num));
}
pub fn unreset_block_num(arg_block_num: uint) callconv(.c) void {
    var block_num = arg_block_num;
    _ = &block_num;
    {
        if ((false or false) and !false) {
            _ = if (!(block_num > @as(c_uint, 28))) @as(c_int, 0) else __assert_func("/home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_resets/include/hardware/resets.h", @as(c_int, 187), "unreset_block_num", "!(block_num > 28u)");
        }
    }
    unreset_block_reg_mask(&@as([*c]resets_hw_t, @ptrFromInt(@as(c_uint, 1073872896))).*.reset, @as(c_uint, 1) << @intCast(block_num));
}
pub fn unreset_block_num_wait_blocking(arg_block_num: uint) callconv(.c) void {
    var block_num = arg_block_num;
    _ = &block_num;
    {
        if ((false or false) and !false) {
            _ = if (!(block_num > @as(c_uint, 28))) @as(c_int, 0) else __assert_func("/home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_resets/include/hardware/resets.h", @as(c_int, 197), "unreset_block_num_wait_blocking", "!(block_num > 28u)");
        }
    }
    unreset_block_reg_mask_wait_blocking(&@as([*c]resets_hw_t, @ptrFromInt(@as(c_uint, 1073872896))).*.reset, &@as([*c]resets_hw_t, @ptrFromInt(@as(c_uint, 1073872896))).*.reset_done, @as(c_uint, 1) << @intCast(block_num));
}
pub fn reset_unreset_block_num_wait_blocking(arg_block_num: uint) callconv(.c) void {
    var block_num = arg_block_num;
    _ = &block_num;
    {
        if ((false or false) and !false) {
            _ = if (!(block_num > @as(c_uint, 28))) @as(c_int, 0) else __assert_func("/home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_resets/include/hardware/resets.h", @as(c_int, 207), "reset_unreset_block_num_wait_blocking", "!(block_num > 28u)");
        }
    }
    reset_block_reg_mask(&@as([*c]resets_hw_t, @ptrFromInt(@as(c_uint, 1073872896))).*.reset, @as(c_uint, 1) << @intCast(block_num));
    unreset_block_reg_mask_wait_blocking(&@as([*c]resets_hw_t, @ptrFromInt(@as(c_uint, 1073872896))).*.reset, &@as([*c]resets_hw_t, @ptrFromInt(@as(c_uint, 1073872896))).*.reset_done, @as(c_uint, 1) << @intCast(block_num));
}
pub fn uart_get_index(arg_uart: ?*uart_inst_t) callconv(.c) uint {
    var uart = arg_uart;
    _ = &uart;
    {
        if ((false or false) and !false) {
            _ = if (!((uart != @as(?*uart_inst_t, @ptrCast(@as([*c]uart_hw_t, @ptrFromInt(@as(c_uint, 1074200576)))))) and (uart != @as(?*uart_inst_t, @ptrCast(@as([*c]uart_hw_t, @ptrFromInt(@as(c_uint, 1074233344)))))))) @as(c_int, 0) else __assert_func("/home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_uart/include/hardware/uart.h", @as(c_int, 219), "uart_get_index", "!(uart != ((uart_inst_t *)((uart_hw_t *)0x40070000u)) && uart != ((uart_inst_t *)((uart_hw_t *)0x40078000u)))");
        }
    }
    return @as(uint, @intFromBool(uart == @as(?*uart_inst_t, @ptrCast(@as([*c]uart_hw_t, @ptrFromInt(@as(c_uint, 1074233344)))))));
}
pub fn uart_get_instance(arg_num: uint) callconv(.c) ?*uart_inst_t {
    var num = arg_num;
    _ = &num;
    {
        if ((false or false) and !false) {
            _ = if (!(num >= @as(c_uint, 2))) @as(c_int, 0) else __assert_func("/home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_uart/include/hardware/uart.h", @as(c_int, 230), "uart_get_instance", "!(num >= 2u)");
        }
    }
    return if (num != 0) @as(?*uart_inst_t, @ptrCast(@as([*c]uart_hw_t, @ptrFromInt(@as(c_uint, 1074233344))))) else @as(?*uart_inst_t, @ptrCast(@as([*c]uart_hw_t, @ptrFromInt(@as(c_uint, 1074200576)))));
}
pub fn uart_get_hw(arg_uart: ?*uart_inst_t) callconv(.c) [*c]uart_hw_t {
    var uart = arg_uart;
    _ = &uart;
    _ = uart_get_index(uart);
    return @as([*c]uart_hw_t, @ptrCast(@alignCast(uart)));
}
pub const UART_PARITY_NONE: c_int = 0;
pub const UART_PARITY_EVEN: c_int = 1;
pub const UART_PARITY_ODD: c_int = 2;
pub const uart_parity_t = c_uint;
pub extern fn uart_init(uart: ?*uart_inst_t, baudrate: uint) uint;
pub extern fn uart_deinit(uart: ?*uart_inst_t) void;
pub extern fn uart_set_baudrate(uart: ?*uart_inst_t, baudrate: uint) uint;
pub fn uart_set_hw_flow(arg_uart: ?*uart_inst_t, arg_cts: bool, arg_rts: bool) callconv(.c) void {
    var uart = arg_uart;
    _ = &uart;
    var cts = arg_cts;
    _ = &cts;
    var rts = arg_rts;
    _ = &rts;
    hw_write_masked(&uart_get_hw(uart).*.cr, (@as(uint, @intFromBool(!!cts)) << @intCast(15)) | (@as(uint, @intFromBool(!!rts)) << @intCast(14)), @as(c_uint, 16384) | @as(c_uint, 32768));
}
pub extern fn uart_set_format(uart: ?*uart_inst_t, data_bits: uint, stop_bits: uint, parity: uart_parity_t) void;
pub fn uart_set_irqs_enabled(arg_uart: ?*uart_inst_t, arg_rx_has_data: bool, arg_tx_needs_data: bool) callconv(.c) void {
    var uart = arg_uart;
    _ = &uart;
    var rx_has_data = arg_rx_has_data;
    _ = &rx_has_data;
    var tx_needs_data = arg_tx_needs_data;
    _ = &tx_needs_data;
    uart_get_hw(uart).*.imsc = ((@as(uint, @intFromBool(!!tx_needs_data)) << @intCast(5)) | (@as(uint, @intFromBool(!!rx_has_data)) << @intCast(4))) | (@as(uint, @intFromBool(!!rx_has_data)) << @intCast(6));
    if (rx_has_data) {
        hw_write_masked(&uart_get_hw(uart).*.ifls, @as(u32, @bitCast(@as(c_int, 0) << @intCast(3))), @as(c_uint, 56));
    }
    if (tx_needs_data) {
        hw_write_masked(&uart_get_hw(uart).*.ifls, @as(u32, @bitCast(@as(c_int, 0) << @intCast(0))), @as(c_uint, 7));
    }
}
pub fn uart_set_irq_enables(arg_uart: ?*uart_inst_t, arg_rx_has_data: bool, arg_tx_needs_data: bool) callconv(.c) void {
    var uart = arg_uart;
    _ = &uart;
    var rx_has_data = arg_rx_has_data;
    _ = &rx_has_data;
    var tx_needs_data = arg_tx_needs_data;
    _ = &tx_needs_data;
    uart_set_irqs_enabled(uart, rx_has_data, tx_needs_data);
}
pub fn uart_is_enabled(arg_uart: ?*uart_inst_t) callconv(.c) bool {
    var uart = arg_uart;
    _ = &uart;
    return (uart_get_hw(uart).*.cr & @as(c_uint, 1)) != 0;
}
pub extern fn uart_set_fifo_enabled(uart: ?*uart_inst_t, enabled: bool) void;
pub fn uart_is_writable(arg_uart: ?*uart_inst_t) callconv(.c) bool {
    var uart = arg_uart;
    _ = &uart;
    return !((uart_get_hw(uart).*.fr & @as(c_uint, 32)) != 0);
}
pub fn uart_tx_wait_blocking(arg_uart: ?*uart_inst_t) callconv(.c) void {
    var uart = arg_uart;
    _ = &uart;
    while ((uart_get_hw(uart).*.fr & @as(c_uint, 8)) != 0) {
        tight_loop_contents();
    }
}
pub fn uart_is_readable(arg_uart: ?*uart_inst_t) callconv(.c) bool {
    var uart = arg_uart;
    _ = &uart;
    return !((uart_get_hw(uart).*.fr & @as(c_uint, 16)) != 0);
}
pub fn uart_write_blocking(arg_uart: ?*uart_inst_t, arg_src: [*c]const u8, arg_len: usize) callconv(.c) void {
    var uart = arg_uart;
    _ = &uart;
    var src = arg_src;
    _ = &src;
    var len = arg_len;
    _ = &len;
    {
        var i: usize = 0;
        _ = &i;
        while (i < len) : (i +%= 1) {
            while (!uart_is_writable(uart)) {
                tight_loop_contents();
            }
            uart_get_hw(uart).*.dr = @as(u32, @bitCast(@as(c_uint, (blk: {
                const ref = &src;
                const tmp = ref.*;
                ref.* += 1;
                break :blk tmp;
            }).*)));
        }
    }
}
pub fn uart_read_blocking(arg_uart: ?*uart_inst_t, arg_dst: [*c]u8, arg_len: usize) callconv(.c) void {
    var uart = arg_uart;
    _ = &uart;
    var dst = arg_dst;
    _ = &dst;
    var len = arg_len;
    _ = &len;
    {
        var i: usize = 0;
        _ = &i;
        while (i < len) : (i +%= 1) {
            while (!uart_is_readable(uart)) {
                tight_loop_contents();
            }
            (blk: {
                const ref = &dst;
                const tmp = ref.*;
                ref.* += 1;
                break :blk tmp;
            }).* = @as(u8, @bitCast(@as(u8, @truncate(uart_get_hw(uart).*.dr))));
        }
    }
}
pub fn uart_putc_raw(arg_uart: ?*uart_inst_t, arg_c: u8) callconv(.c) void {
    var uart = arg_uart;
    _ = &uart;
    var c = arg_c;
    _ = &c;
    uart_write_blocking(uart, @as([*c]const u8, @ptrCast(@alignCast(&c))), @as(usize, @bitCast(@as(c_int, 1))));
}
pub fn uart_putc(arg_uart: ?*uart_inst_t, arg_c: u8) callconv(.c) void {
    var uart = arg_uart;
    _ = &uart;
    var c = arg_c;
    _ = &c;
    const ExternLocal_uart_char_to_line_feed = struct {
        extern var uart_char_to_line_feed: [2]c_short;
    };
    _ = &ExternLocal_uart_char_to_line_feed;
    if (@as(c_int, @bitCast(@as(c_int, ExternLocal_uart_char_to_line_feed.uart_char_to_line_feed[uart_get_index(uart)]))) == @as(c_int, @bitCast(@as(c_uint, c)))) {
        uart_putc_raw(uart, @as(u8, @bitCast(@as(i8, @truncate(@as(c_int, '\r'))))));
    }
    uart_putc_raw(uart, c);
}
pub fn uart_puts(arg_uart: ?*uart_inst_t, arg_s: [*c]const u8) callconv(.c) void {
    var uart = arg_uart;
    _ = &uart;
    var s = arg_s;
    _ = &s;
    var last_was_cr: bool = @as(c_int, 0) != 0;
    _ = &last_was_cr;
    while (s.* != 0) {
        if (last_was_cr) {
            uart_putc_raw(uart, s.*);
        } else {
            uart_putc(uart, s.*);
        }
        last_was_cr = @as(c_int, @bitCast(@as(c_uint, (blk: {
            const ref = &s;
            const tmp = ref.*;
            ref.* += 1;
            break :blk tmp;
        }).*))) == @as(c_int, '\r');
    }
}
pub fn uart_getc(arg_uart: ?*uart_inst_t) callconv(.c) u8 {
    var uart = arg_uart;
    _ = &uart;
    var c: u8 = undefined;
    _ = &c;
    uart_read_blocking(uart, @as([*c]u8, @ptrCast(@alignCast(&c))), @as(usize, @bitCast(@as(c_int, 1))));
    return c;
}
pub extern fn uart_set_break(uart: ?*uart_inst_t, en: bool) void;
pub extern fn uart_set_translate_crlf(uart: ?*uart_inst_t, translate: bool) void;
pub fn uart_default_tx_wait_blocking() callconv(.c) void {
    uart_tx_wait_blocking(@as(?*uart_inst_t, @ptrCast(@as([*c]uart_hw_t, @ptrFromInt(@as(c_uint, 1074200576))))));
}
pub extern fn uart_is_readable_within_us(uart: ?*uart_inst_t, us: u32) bool;
pub fn uart_get_dreq_num(arg_uart: ?*uart_inst_t, arg_is_tx: bool) callconv(.c) uint {
    var uart = arg_uart;
    _ = &uart;
    var is_tx = arg_is_tx;
    _ = &is_tx;
    return @as(uint, @bitCast(blk: {
        break :blk (DREQ_UART0_TX + (@intFromBool(uart == @as(?*uart_inst_t, @ptrCast(@as([*c]uart_hw_t, @ptrFromInt(@as(c_uint, 1074233344)))))) * @as(c_int, 2))) + @intFromBool(!is_tx);
    }));
}
pub fn uart_get_reset_num(arg_uart: ?*uart_inst_t) callconv(.c) uint {
    var uart = arg_uart;
    _ = &uart;
    return @as(uint, @bitCast(if (uart_get_index(uart) != 0) RESET_UART1 else RESET_UART0));
}
pub fn uart_get_dreq(arg_uart: ?*uart_inst_t, arg_is_tx: bool) callconv(.c) uint {
    var uart = arg_uart;
    _ = &uart;
    var is_tx = arg_is_tx;
    _ = &is_tx;
    return uart_get_dreq_num(uart, is_tx);
}
pub extern var stdio_usb: stdio_driver_t;
pub extern fn stdio_usb_init() bool;
pub extern fn stdio_usb_deinit() bool;
pub extern fn stdio_usb_connected() bool;
pub extern fn stdio_usb_call_chars_available_callback() void;
pub extern fn setup_default_uart() void;
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 20);
pub const __clang_minor__ = @as(c_int, 1);
pub const __clang_patchlevel__ = @as(c_int, 2);
pub const __clang_version__ = "20.1.2 (https://github.com/ziglang/zig-bootstrap c6bc9398c72c7a63fe9420a9055dcfd1845bc266)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __MEMORY_SCOPE_SYSTEM = @as(c_int, 0);
pub const __MEMORY_SCOPE_DEVICE = @as(c_int, 1);
pub const __MEMORY_SCOPE_WRKGRP = @as(c_int, 2);
pub const __MEMORY_SCOPE_WVFRNT = @as(c_int, 3);
pub const __MEMORY_SCOPE_SINGLE = @as(c_int, 4);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __FPCLASS_SNAN = @as(c_int, 0x0001);
pub const __FPCLASS_QNAN = @as(c_int, 0x0002);
pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);
pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);
pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);
pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);
pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);
pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);
pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);
pub const __FPCLASS_POSINF = @as(c_int, 0x0200);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 20.1.2 (https://github.com/ziglang/zig-bootstrap c6bc9398c72c7a63fe9420a9055dcfd1845bc266)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __OPTIMIZE__ = @as(c_int, 1);
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _ILP32 = @as(c_int, 1);
pub const __ILP32__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 1);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 32);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @as(c_int, 128);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @as(c_long, 2147483647);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 32);
pub const __UINTMAX_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 32);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 32);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 32);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 4);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 4);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 4);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 4);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __INTMAX_TYPE__ = c_longlong;
pub const __INTMAX_FMTd__ = "lld";
pub const __INTMAX_FMTi__ = "lli";
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`");
// (no file):95:9
pub const __INTMAX_C = @import("std").zig.c_translation.Macros.LL_SUFFIX;
pub const __UINTMAX_TYPE__ = c_ulonglong;
pub const __UINTMAX_FMTo__ = "llo";
pub const __UINTMAX_FMTu__ = "llu";
pub const __UINTMAX_FMTx__ = "llx";
pub const __UINTMAX_FMTX__ = "llX";
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`");
// (no file):102:9
pub const __UINTMAX_C = @import("std").zig.c_translation.Macros.ULL_SUFFIX;
pub const __PTRDIFF_TYPE__ = c_int;
pub const __PTRDIFF_FMTd__ = "d";
pub const __PTRDIFF_FMTi__ = "i";
pub const __INTPTR_TYPE__ = c_int;
pub const __INTPTR_FMTd__ = "d";
pub const __INTPTR_FMTi__ = "i";
pub const __SIZE_TYPE__ = c_uint;
pub const __SIZE_FMTo__ = "o";
pub const __SIZE_FMTu__ = "u";
pub const __SIZE_FMTx__ = "x";
pub const __SIZE_FMTX__ = "X";
pub const __WCHAR_TYPE__ = c_uint;
pub const __WINT_TYPE__ = c_int;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_uint;
pub const __UINTPTR_FMTo__ = "o";
pub const __UINTPTR_FMTu__ = "u";
pub const __UINTPTR_FMTx__ = "x";
pub const __UINTPTR_FMTX__ = "X";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_NORM_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_NORM_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_NORM_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 4.9406564584124654e-324);
pub const __LDBL_NORM_MAX__ = @as(c_longdouble, 1.7976931348623157e+308);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 15);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 2.2204460492503131e-16);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 53);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __LDBL_MAX_EXP__ = @as(c_int, 1024);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.7976931348623157e+308);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __LDBL_MIN__ = @as(c_longdouble, 2.2250738585072014e-308);
pub const __POINTER_WIDTH__ = @as(c_int, 32);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 8);
pub const __CHAR_UNSIGNED__ = @as(c_int, 1);
pub const __WCHAR_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub inline fn __INT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub inline fn __INT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub inline fn __INT32_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const __INT64_TYPE__ = c_longlong;
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`");
// (no file):208:9
pub const __INT64_C = @import("std").zig.c_translation.Macros.LL_SUFFIX;
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub inline fn __UINT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub inline fn __UINT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`");
// (no file):233:9
pub const __UINT32_C = @import("std").zig.c_translation.Macros.U_SUFFIX;
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulonglong;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`");
// (no file):242:9
pub const __UINT64_C = @import("std").zig.c_translation.Macros.ULL_SUFFIX;
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_longlong;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_TYPE__ = c_ulonglong;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_longlong;
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_TYPE__ = c_ulonglong;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __GCC_DESTRUCTIVE_SIZE = @as(c_int, 64);
pub const __GCC_CONSTRUCTIVE_SIZE = @as(c_int, 64);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __SSP_STRONG__ = @as(c_int, 2);
pub const __ELF__ = @as(c_int, 1);
pub const __ARMEL__ = @as(c_int, 1);
pub const __arm = @as(c_int, 1);
pub const __arm__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __ARM_ARCH_7A__ = @as(c_int, 1);
pub const __ARM_ARCH = @as(c_int, 7);
pub const __ARM_ARCH_ISA_ARM = @as(c_int, 1);
pub const __ARM_ARCH_ISA_THUMB = @as(c_int, 2);
pub const __ARM_32BIT_STATE = @as(c_int, 1);
pub const __ARM_ARCH_PROFILE = 'A';
pub const __ARM_FEATURE_UNALIGNED = @as(c_int, 1);
pub const __ARM_FEATURE_LDREX = @as(c_int, 0xf);
pub const __ARM_FEATURE_CLZ = @as(c_int, 1);
pub const __ARM_FP = @as(c_int, 0xc);
pub const __ARM_ACLE = @as(c_int, 200);
pub const __ARM_FP16_FORMAT_IEEE = @as(c_int, 1);
pub const __ARM_FP16_ARGS = @as(c_int, 1);
pub const __THUMB_INTERWORK__ = @as(c_int, 1);
pub const __ARM_EABI__ = @as(c_int, 1);
pub const __ARM_PCS = @as(c_int, 1);
pub const __SOFTFP__ = @as(c_int, 1);
pub const __ARM_FEATURE_COPROC = @as(c_int, 0xf);
pub const __THUMBEL__ = @as(c_int, 1);
pub const __thumb__ = @as(c_int, 1);
pub const __thumb2__ = @as(c_int, 1);
pub const __ARM_FEATURE_SIMD32 = @as(c_int, 1);
pub const __APCS_32__ = @as(c_int, 1);
pub const __VFP_FP__ = @as(c_int, 1);
pub const __ARM_VFPV2__ = @as(c_int, 1);
pub const __ARM_VFPV3__ = @as(c_int, 1);
pub const __ARM_SIZEOF_WCHAR_T = @as(c_int, 4);
pub const __ARM_SIZEOF_MINIMAL_ENUM = @as(c_int, 4);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __ARM_FEATURE_DSP = @as(c_int, 1);
pub const __ARM_FEATURE_SAT = @as(c_int, 1);
pub const __ARM_FEATURE_QBIT = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 0);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const __STDC_EMBED_NOT_FOUND__ = @as(c_int, 0);
pub const __STDC_EMBED_FOUND__ = @as(c_int, 1);
pub const __STDC_EMBED_EMPTY__ = @as(c_int, 2);
pub const _FORTIFY_SOURCE = @as(c_int, 2);
pub const PICO_RP2350 = @as(c_int, 1);
pub const PICO_32BIT = @as(c_int, 1);
pub const PICO_ARM = @as(c_int, 1);
pub const PICO_PIO_VERSION = @as(c_int, 1);
pub const NUM_DOORBELLS = @as(c_int, 1);
pub const PICO_CMSIS_DEVICE = @compileError("unable to translate macro: undefined identifier `RP2350`");
// (no file):420:9
pub const PICO_DEFAULT_FLASH_SIZE_BYTES = "4 * 1024 * 1024";
pub const LIB_PICO_STDIO_USB = @as(c_int, 1);
pub const PICO_CYW43_ARCH_THREADSAFE_BACKGROUND = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const _HARDWARE_ADC_H = "";
pub const _PICO_H = "";
pub const __PICO_STRING = @compileError("unable to translate C expr: unexpected token '#'");
// /home/ianic/Code/pico/pico-sdk/src/common/pico_base_headers/include/pico.h:22:9
pub inline fn __PICO_XSTRING(x: anytype) @TypeOf(__PICO_STRING(x)) {
    _ = &x;
    return __PICO_STRING(x);
}
pub const __PICO_CONCAT1 = @compileError("unable to translate C expr: unexpected token '##'");
// /home/ianic/Code/pico/pico-sdk/src/common/pico_base_headers/include/pico.h:24:9
pub const _PICO_TYPES_H = "";
pub const _PICO_ASSERT_H = "";
pub const __STDBOOL_H = "";
pub const __bool_true_false_are_defined = @as(c_int, 1);
pub const @"bool" = bool;
pub const @"true" = @as(c_int, 1);
pub const @"false" = @as(c_int, 0);
pub const _ANSIDECL_H_ = "";
pub const __NEWLIB_H__ = @as(c_int, 1);
pub const _NEWLIB_VERSION_H__ = @as(c_int, 1);
pub const _NEWLIB_VERSION = "4.5.0";
pub const __NEWLIB__ = @as(c_int, 4);
pub const __NEWLIB_MINOR__ = @as(c_int, 5);
pub const __NEWLIB_PATCHLEVEL__ = @as(c_int, 0);
pub const _ATEXIT_DYNAMIC_ALLOC = @as(c_int, 1);
pub const _FSEEK_OPTIMIZATION = @as(c_int, 1);
pub const _FVWRITE_IN_STREAMIO = @as(c_int, 1);
pub const _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL = @as(c_int, 1);
pub const _HAVE_INITFINI_ARRAY = @as(c_int, 1);
pub const _HAVE_LONG_DOUBLE = @as(c_int, 1);
pub const _LDBL_EQ_DBL = @as(c_int, 1);
pub const _MB_LEN_MAX = @as(c_int, 1);
pub const _REENT_CHECK_VERIFY = @as(c_int, 1);
pub const _RETARGETABLE_LOCKING = @as(c_int, 1);
pub const _UNBUF_STREAM_OPT = @as(c_int, 1);
pub const _WANT_IO_C99_FORMATS = @as(c_int, 1);
pub const _WANT_IO_LONG_LONG = @as(c_int, 1);
pub const _WANT_REGISTER_FINI = @as(c_int, 1);
pub const _WANT_USE_GDTOA = @as(c_int, 1);
pub const _WIDE_ORIENT = @as(c_int, 1);
pub const __SYS_CONFIG_H__ = "";
pub const __IEEE_LITTLE_ENDIAN = "";
pub const __OBSOLETE_MATH_DEFAULT = @as(c_int, 0);
pub const __DOUBLE_TYPE = f64;
pub const __FLOAT_TYPE = f32;
pub const __OBSOLETE_MATH = __OBSOLETE_MATH_DEFAULT;
pub const _SYS_FEATURES_H = "";
pub inline fn __GNUC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub inline fn __GNUC_PREREQ__(ma: anytype, mi: anytype) @TypeOf(__GNUC_PREREQ(ma, mi)) {
    _ = &ma;
    _ = &mi;
    return __GNUC_PREREQ(ma, mi);
}
pub const _DEFAULT_SOURCE = @as(c_int, 1);
pub const _POSIX_SOURCE = @as(c_int, 1);
pub const _POSIX_C_SOURCE = @as(c_long, 202405);
pub const _ATFILE_SOURCE = @as(c_int, 1);
pub const __ATFILE_VISIBLE = @as(c_int, 1);
pub const __BSD_VISIBLE = @as(c_int, 1);
pub const __GNU_VISIBLE = @as(c_int, 0);
pub const __ISO_C_VISIBLE = @as(c_int, 2011);
pub const __LARGEFILE_VISIBLE = @as(c_int, 0);
pub const __MISC_VISIBLE = @as(c_int, 1);
pub const __POSIX_VISIBLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 202405, .decimal);
pub const __SVID_VISIBLE = @as(c_int, 1);
pub const __XSI_VISIBLE = @as(c_int, 0);
pub const __SSP_FORTIFY_LEVEL = @as(c_int, 2);
pub const _POINTER_INT = c_long;
pub const __RAND_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffff, .hex);
pub const __EXPORT = "";
pub const __IMPORT = "";
pub const _READ_WRITE_RETURN_TYPE = c_int;
pub const _READ_WRITE_BUFSIZE_TYPE = c_int;
pub const _USE_GDTOA = "";
pub const _BEGIN_STD_C = "";
pub const _END_STD_C = "";
pub const _NOTHROW = "";
pub const _LONG_DOUBLE = @compileError("unable to translate: TODO long double");
// /usr/arm-none-eabi/include/_ansi.h:37:9
pub const _ATTRIBUTE = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// /usr/arm-none-eabi/include/_ansi.h:43:9
pub const _ELIDABLE_INLINE = @compileError("unable to translate C expr: unexpected token 'static'");
// /usr/arm-none-eabi/include/_ansi.h:69:9
pub const _NOINLINE = @compileError("unable to translate macro: undefined identifier `__noinline__`");
// /usr/arm-none-eabi/include/_ansi.h:73:9
pub const _NOINLINE_STATIC = @compileError("unable to translate C expr: unexpected token 'static'");
// /usr/arm-none-eabi/include/_ansi.h:74:9
pub const assert = @compileError("unable to translate macro: undefined identifier `__FILE__`");
// /usr/arm-none-eabi/include/assert.h:16:10
pub const __ASSERT_FUNC = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// /usr/arm-none-eabi/include/assert.h:26:12
pub const static_assert = @compileError("unable to translate C expr: unexpected token '_Static_assert'");
// /usr/arm-none-eabi/include/assert.h:45:10
pub const PARAM_ASSERTIONS_ENABLE_ALL = @as(c_int, 0);
pub const PARAM_ASSERTIONS_DISABLE_ALL = @as(c_int, 0);
pub const PARAM_ASSERTIONS_ENABLED = @compileError("unable to translate macro: undefined identifier `PARAM_ASSERTIONS_ENABLED_`");
// /home/ianic/Code/pico/pico-sdk/src/common/pico_base_headers/include/pico/assert.h:32:9
pub const invalid_params_if = @compileError("unable to translate C expr: unexpected token '{'");
// /home/ianic/Code/pico/pico-sdk/src/common/pico_base_headers/include/pico/assert.h:34:9
pub const valid_params_if = @compileError("unable to translate C expr: unexpected token '{'");
// /home/ianic/Code/pico/pico-sdk/src/common/pico_base_headers/include/pico/assert.h:35:9
pub const hard_assert_if = @compileError("unable to translate C expr: unexpected token '{'");
// /home/ianic/Code/pico/pico-sdk/src/common/pico_base_headers/include/pico/assert.h:36:9
pub const invalid_params_if_and_return = @compileError("unable to translate C expr: unexpected token '{'");
// /home/ianic/Code/pico/pico-sdk/src/common/pico_base_headers/include/pico/assert.h:37:9
pub const hard_assert = assert;
pub const __CLANG_STDINT_H = "";
pub const __int_least64_t = i64;
pub const __uint_least64_t = u64;
pub const __int_least32_t = i64;
pub const __uint_least32_t = u64;
pub const __int_least16_t = i64;
pub const __uint_least16_t = u64;
pub const __int_least8_t = i64;
pub const __uint_least8_t = u64;
pub const __uint32_t_defined = "";
pub const __int8_t_defined = "";
pub const __stdint_join3 = @compileError("unable to translate C expr: unexpected token '##'");
// /home/ianic/.build/zig/zig-x86_64-linux-0.15.1/lib/include/stdint.h:291:9
pub const __intptr_t_defined = "";
pub const _INTPTR_T = "";
pub const _UINTPTR_T = "";
pub const __int_c_join = @compileError("unable to translate C expr: unexpected token '##'");
// /home/ianic/.build/zig/zig-x86_64-linux-0.15.1/lib/include/stdint.h:328:9
pub inline fn __int_c(v: anytype, suffix: anytype) @TypeOf(__int_c_join(v, suffix)) {
    _ = &v;
    _ = &suffix;
    return __int_c_join(v, suffix);
}
pub const __uint_c = @compileError("unable to translate macro: undefined identifier `U`");
// /home/ianic/.build/zig/zig-x86_64-linux-0.15.1/lib/include/stdint.h:330:9
pub const __int64_c_suffix = __INT64_C_SUFFIX__;
pub const __int32_c_suffix = __INT64_C_SUFFIX__;
pub const __int16_c_suffix = __INT64_C_SUFFIX__;
pub const __int8_c_suffix = __INT64_C_SUFFIX__;
pub inline fn INT64_C(v: anytype) @TypeOf(__int_c(v, __int64_c_suffix)) {
    _ = &v;
    return __int_c(v, __int64_c_suffix);
}
pub inline fn UINT64_C(v: anytype) @TypeOf(__uint_c(v, __int64_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int64_c_suffix);
}
pub inline fn INT32_C(v: anytype) @TypeOf(__int_c(v, __int32_c_suffix)) {
    _ = &v;
    return __int_c(v, __int32_c_suffix);
}
pub inline fn UINT32_C(v: anytype) @TypeOf(__uint_c(v, __int32_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int32_c_suffix);
}
pub inline fn INT16_C(v: anytype) @TypeOf(__int_c(v, __int16_c_suffix)) {
    _ = &v;
    return __int_c(v, __int16_c_suffix);
}
pub inline fn UINT16_C(v: anytype) @TypeOf(__uint_c(v, __int16_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int16_c_suffix);
}
pub inline fn INT8_C(v: anytype) @TypeOf(__int_c(v, __int8_c_suffix)) {
    _ = &v;
    return __int_c(v, __int8_c_suffix);
}
pub inline fn UINT8_C(v: anytype) @TypeOf(__uint_c(v, __int8_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int8_c_suffix);
}
pub const INT64_MAX = INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const INT64_MIN = -INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const UINT64_MAX = UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const __INT_LEAST64_MIN = INT64_MIN;
pub const __INT_LEAST64_MAX = INT64_MAX;
pub const __UINT_LEAST64_MAX = UINT64_MAX;
pub const __INT_LEAST32_MIN = INT64_MIN;
pub const __INT_LEAST32_MAX = INT64_MAX;
pub const __UINT_LEAST32_MAX = UINT64_MAX;
pub const __INT_LEAST16_MIN = INT64_MIN;
pub const __INT_LEAST16_MAX = INT64_MAX;
pub const __UINT_LEAST16_MAX = UINT64_MAX;
pub const __INT_LEAST8_MIN = INT64_MIN;
pub const __INT_LEAST8_MAX = INT64_MAX;
pub const __UINT_LEAST8_MAX = UINT64_MAX;
pub const INT_LEAST64_MIN = __INT_LEAST64_MIN;
pub const INT_LEAST64_MAX = __INT_LEAST64_MAX;
pub const UINT_LEAST64_MAX = __UINT_LEAST64_MAX;
pub const INT_FAST64_MIN = __INT_LEAST64_MIN;
pub const INT_FAST64_MAX = __INT_LEAST64_MAX;
pub const UINT_FAST64_MAX = __UINT_LEAST64_MAX;
pub const INT32_MAX = INT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal));
pub const INT32_MIN = -INT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal)) - @as(c_int, 1);
pub const UINT32_MAX = UINT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 4294967295, .decimal));
pub const INT_LEAST32_MIN = __INT_LEAST32_MIN;
pub const INT_LEAST32_MAX = __INT_LEAST32_MAX;
pub const UINT_LEAST32_MAX = __UINT_LEAST32_MAX;
pub const INT_FAST32_MIN = __INT_LEAST32_MIN;
pub const INT_FAST32_MAX = __INT_LEAST32_MAX;
pub const UINT_FAST32_MAX = __UINT_LEAST32_MAX;
pub const INT16_MAX = INT16_C(@as(c_int, 32767));
pub const INT16_MIN = -INT16_C(@as(c_int, 32767)) - @as(c_int, 1);
pub const UINT16_MAX = UINT16_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal));
pub const INT_LEAST16_MIN = __INT_LEAST16_MIN;
pub const INT_LEAST16_MAX = __INT_LEAST16_MAX;
pub const UINT_LEAST16_MAX = __UINT_LEAST16_MAX;
pub const INT_FAST16_MIN = __INT_LEAST16_MIN;
pub const INT_FAST16_MAX = __INT_LEAST16_MAX;
pub const UINT_FAST16_MAX = __UINT_LEAST16_MAX;
pub const INT8_MAX = INT8_C(@as(c_int, 127));
pub const INT8_MIN = -INT8_C(@as(c_int, 127)) - @as(c_int, 1);
pub const UINT8_MAX = UINT8_C(@as(c_int, 255));
pub const INT_LEAST8_MIN = __INT_LEAST8_MIN;
pub const INT_LEAST8_MAX = __INT_LEAST8_MAX;
pub const UINT_LEAST8_MAX = __UINT_LEAST8_MAX;
pub const INT_FAST8_MIN = __INT_LEAST8_MIN;
pub const INT_FAST8_MAX = __INT_LEAST8_MAX;
pub const UINT_FAST8_MAX = __UINT_LEAST8_MAX;
pub const __INTN_MIN = @compileError("unable to translate macro: undefined identifier `INT`");
// /home/ianic/.build/zig/zig-x86_64-linux-0.15.1/lib/include/stdint.h:875:10
pub const __INTN_MAX = @compileError("unable to translate macro: undefined identifier `INT`");
// /home/ianic/.build/zig/zig-x86_64-linux-0.15.1/lib/include/stdint.h:876:10
pub const __UINTN_MAX = @compileError("unable to translate macro: undefined identifier `UINT`");
// /home/ianic/.build/zig/zig-x86_64-linux-0.15.1/lib/include/stdint.h:877:9
pub const __INTN_C = @compileError("unable to translate macro: undefined identifier `INT`");
// /home/ianic/.build/zig/zig-x86_64-linux-0.15.1/lib/include/stdint.h:878:10
pub const __UINTN_C = @compileError("unable to translate macro: undefined identifier `UINT`");
// /home/ianic/.build/zig/zig-x86_64-linux-0.15.1/lib/include/stdint.h:879:9
pub const INTPTR_MIN = -__INTPTR_MAX__ - @as(c_int, 1);
pub const INTPTR_MAX = __INTPTR_MAX__;
pub const UINTPTR_MAX = __UINTPTR_MAX__;
pub const PTRDIFF_MIN = -__PTRDIFF_MAX__ - @as(c_int, 1);
pub const PTRDIFF_MAX = __PTRDIFF_MAX__;
pub const SIZE_MAX = __SIZE_MAX__;
pub const INTMAX_MIN = -__INTMAX_MAX__ - @as(c_int, 1);
pub const INTMAX_MAX = __INTMAX_MAX__;
pub const UINTMAX_MAX = __UINTMAX_MAX__;
pub const SIG_ATOMIC_MIN = __INTN_MIN(__SIG_ATOMIC_WIDTH__);
pub const SIG_ATOMIC_MAX = __INTN_MAX(__SIG_ATOMIC_WIDTH__);
pub const WINT_MIN = __INTN_MIN(__WINT_WIDTH__);
pub const WINT_MAX = __INTN_MAX(__WINT_WIDTH__);
pub const WCHAR_MAX = __WCHAR_MAX__;
pub const WCHAR_MIN = __UINTN_C(__WCHAR_WIDTH__, @as(c_int, 0));
pub inline fn INTMAX_C(v: anytype) @TypeOf(__int_c(v, __INTMAX_C_SUFFIX__)) {
    _ = &v;
    return __int_c(v, __INTMAX_C_SUFFIX__);
}
pub inline fn UINTMAX_C(v: anytype) @TypeOf(__int_c(v, __UINTMAX_C_SUFFIX__)) {
    _ = &v;
    return __int_c(v, __UINTMAX_C_SUFFIX__);
}
pub const __need_ptrdiff_t = "";
pub const __need_size_t = "";
pub const __need_wchar_t = "";
pub const __need_NULL = "";
pub const __need_max_align_t = "";
pub const __need_offsetof = "";
pub const __STDDEF_H = "";
pub const _PTRDIFF_T = "";
pub const _SIZE_T = "";
pub const _WCHAR_T = "";
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
pub const offsetof = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// /home/ianic/.build/zig/zig-x86_64-linux-0.15.1/lib/include/__stddef_offsetof.h:16:9
pub const PICO_OPAQUE_ABSOLUTE_TIME_T = @as(c_int, 0);
pub const ABSOLUTE_TIME_INITIALIZED_VAR = @compileError("unable to translate C expr: unexpected token '='");
// /home/ianic/Code/pico/pico-sdk/src/common/pico_base_headers/include/pico/types.h:91:9
pub const PICO_INCLUDE_RTC_DATETIME = @compileError("unable to translate macro: undefined identifier `PICO_RP2040`");
// /home/ianic/Code/pico/pico-sdk/src/common/pico_base_headers/include/pico/types.h:96:9
pub inline fn bool_to_bit(x: anytype) uint {
    _ = &x;
    return @import("std").zig.c_translation.cast(uint, !!(x != 0));
}
pub const pico_board_cmake_set = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/src/common/pico_base_headers/include/pico.h:41:9
pub const pico_board_cmake_set_default = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/src/common/pico_base_headers/include/pico.h:56:9
pub const _PICO_CONFIG_H = "";
pub const _BOARDS_PICO2_W_H = "";
pub const RASPBERRYPI_PICO2_W = "";
pub const PICO_RP2350A = @as(c_int, 1);
pub const PICO_DEFAULT_UART = @as(c_int, 0);
pub const PICO_DEFAULT_UART_TX_PIN = @as(c_int, 0);
pub const PICO_DEFAULT_UART_RX_PIN = @as(c_int, 1);
pub const PICO_DEFAULT_I2C = @as(c_int, 0);
pub const PICO_DEFAULT_I2C_SDA_PIN = @as(c_int, 4);
pub const PICO_DEFAULT_I2C_SCL_PIN = @as(c_int, 5);
pub const PICO_DEFAULT_SPI = @as(c_int, 0);
pub const PICO_DEFAULT_SPI_SCK_PIN = @as(c_int, 18);
pub const PICO_DEFAULT_SPI_TX_PIN = @as(c_int, 19);
pub const PICO_DEFAULT_SPI_RX_PIN = @as(c_int, 16);
pub const PICO_DEFAULT_SPI_CSN_PIN = @as(c_int, 17);
pub const PICO_BOOT_STAGE2_CHOOSE_W25Q080 = @as(c_int, 1);
pub const PICO_FLASH_SPI_CLKDIV = @as(c_int, 2);
pub const PICO_FLASH_SIZE_BYTES = (@as(c_int, 4) * @as(c_int, 1024)) * @as(c_int, 1024);
pub const CYW43_WL_GPIO_COUNT = @as(c_int, 3);
pub const CYW43_WL_GPIO_LED_PIN = @as(c_int, 0);
pub const CYW43_WL_GPIO_SMPS_PIN = @as(c_int, 1);
pub const CYW43_WL_GPIO_VBUS_PIN = @as(c_int, 2);
pub const CYW43_USES_VSYS_PIN = @as(c_int, 1);
pub const PICO_VSYS_PIN = @as(c_int, 29);
pub const PICO_RP2350_A2_SUPPORTED = @as(c_int, 1);
pub const CYW43_PIN_WL_DYNAMIC = @as(c_int, 0);
pub const CYW43_DEFAULT_PIN_WL_REG_ON = @as(c_uint, 23);
pub const CYW43_DEFAULT_PIN_WL_DATA_OUT = @as(c_uint, 24);
pub const CYW43_DEFAULT_PIN_WL_DATA_IN = @as(c_uint, 24);
pub const CYW43_DEFAULT_PIN_WL_HOST_WAKE = @as(c_uint, 24);
pub const CYW43_DEFAULT_PIN_WL_CLOCK = @as(c_uint, 29);
pub const CYW43_DEFAULT_PIN_WL_CS = @as(c_uint, 25);
pub const _PICO_PLATFORM_H = "";
pub const _PICO_PLATFORM_COMPILER_H = "";
pub const _HARDWARE_PLATFORM_DEFS_H = "";
pub const _u = @import("std").zig.c_translation.Macros.U_SUFFIX;
pub const NUM_CORES = _u(@as(c_int, 2));
pub const NUM_DMA_CHANNELS = _u(@as(c_int, 16));
pub const NUM_DMA_TIMERS = _u(@as(c_int, 4));
pub const NUM_DMA_MPU_REGIONS = _u(@as(c_int, 8));
pub const NUM_DMA_IRQS = _u(@as(c_int, 4));
pub const NUM_IRQS = _u(@as(c_int, 52));
pub const NUM_USER_IRQS = _u(@as(c_int, 6));
pub const NUM_PIOS = _u(@as(c_int, 3));
pub const NUM_PIO_STATE_MACHINES = _u(@as(c_int, 4));
pub const NUM_PIO_IRQS = _u(@as(c_int, 2));
pub const NUM_PWM_SLICES = _u(@as(c_int, 12));
pub const NUM_PWM_IRQS = _u(@as(c_int, 2));
pub const NUM_SPIN_LOCKS = _u(@as(c_int, 32));
pub const NUM_UARTS = _u(@as(c_int, 2));
pub const NUM_I2CS = _u(@as(c_int, 2));
pub const NUM_SPIS = _u(@as(c_int, 2));
pub const NUM_GENERIC_TIMERS = _u(@as(c_int, 2));
pub const NUM_ALARMS = _u(@as(c_int, 4));
pub const NUM_ADC_CHANNELS = _u(@as(c_int, 5));
pub const ADC_BASE_PIN = _u(@as(c_int, 26));
pub const NUM_RESETS = _u(@as(c_int, 28));
pub const NUM_BANK0_GPIOS = _u(@as(c_int, 30));
pub const NUM_QSPI_GPIOS = _u(@as(c_int, 6));
pub const NUM_OTP_PAGES = _u(@as(c_int, 64));
pub const NUM_OTP_PAGE_ROWS = _u(@as(c_int, 64));
pub const NUM_OTP_ROWS = NUM_OTP_PAGES * NUM_OTP_PAGE_ROWS;
pub const PIO_INSTRUCTION_COUNT = _u(@as(c_int, 32));
pub const NUM_MPU_REGIONS = _u(@as(c_int, 8));
pub const NUM_SAU_REGIONS = _u(@as(c_int, 8));
pub const NUM_BOOT_LOCKS = _u(@as(c_int, 8));
pub const BOOTRAM_SIZE = _u(@as(c_int, 0x400));
pub const USBCTRL_DPRAM_SIZE = _u(@as(c_int, 4096));
pub const HAS_GPIO_COPROCESSOR = @as(c_int, 1);
pub const HAS_DOUBLE_COPROCESSOR = @as(c_int, 1);
pub const HAS_REDUNDANCY_COPROCESSOR = @as(c_int, 1);
pub const HAS_POWMAN_TIMER = @as(c_int, 1);
pub const HAS_RP2350_TRNG = @as(c_int, 1);
pub const HAS_HSTX = @as(c_int, 1);
pub const HAS_PADS_BANK0_ISOLATION = @as(c_int, 1);
pub const __RISCV_PMP_CHECKED = @as(c_int, 1);
pub const FPGA_CLK_SYS_HZ = @compileError("unable to translate macro: undefined identifier `MHZ`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/platform_defs.h:80:9
pub const FPGA_CLK_REF_HZ = @compileError("unable to translate macro: undefined identifier `MHZ`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/platform_defs.h:84:9
pub const XOSC_HZ = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 12000000, .decimal));
pub const PICO_USE_FASTEST_SUPPORTED_CLOCK = @as(c_int, 0);
pub const SYS_CLK_HZ = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 150000000, .decimal));
pub const USB_CLK_HZ = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 48000000, .decimal));
pub const XOSC_KHZ = @import("std").zig.c_translation.MacroArithmetic.div(XOSC_HZ, @as(c_int, 1000));
pub const XOSC_MHZ = @import("std").zig.c_translation.MacroArithmetic.div(XOSC_KHZ, @as(c_int, 1000));
pub const SYS_CLK_KHZ = @import("std").zig.c_translation.MacroArithmetic.div(SYS_CLK_HZ, @as(c_int, 1000));
pub const SYS_CLK_MHZ = @import("std").zig.c_translation.MacroArithmetic.div(SYS_CLK_KHZ, @as(c_int, 1000));
pub const USB_CLK_KHZ = @import("std").zig.c_translation.MacroArithmetic.div(USB_CLK_HZ, @as(c_int, 1000));
pub const USB_CLK_MHZ = @import("std").zig.c_translation.MacroArithmetic.div(USB_CLK_KHZ, @as(c_int, 1000));
pub const ACCESSCTRL_PASSWORD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xacce0000, .hex));
pub const POWMAN_PASSWORD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x5afe0000, .hex));
pub const VTABLE_FIRST_IRQ = @as(c_int, 16);
pub const FIRST_USER_IRQ = NUM_IRQS - NUM_USER_IRQS;
pub const REG_FIELD_WIDTH = @compileError("unable to translate macro: undefined identifier `_MSB`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/platform_defs.h:178:9
pub const _SYS_CDEFS_H_ = "";
pub const _MACHINE__DEFAULT_TYPES_H = "";
pub const __EXP = @compileError("unable to translate macro: undefined identifier `__`");
// /usr/arm-none-eabi/include/machine/_default_types.h:15:9
pub const __have_longlong64 = @as(c_int, 1);
pub const __have_long32 = @as(c_int, 1);
pub const ___int8_t_defined = @as(c_int, 1);
pub const ___int16_t_defined = @as(c_int, 1);
pub const ___int32_t_defined = @as(c_int, 1);
pub const ___int64_t_defined = @as(c_int, 1);
pub const ___int_least8_t_defined = @as(c_int, 1);
pub const ___int_least16_t_defined = @as(c_int, 1);
pub const ___int_least32_t_defined = @as(c_int, 1);
pub const ___int_least64_t_defined = @as(c_int, 1);
pub inline fn __PMT(args: anytype) @TypeOf(args) {
    _ = &args;
    return args;
}
pub const __DOTS = @compileError("unable to translate C expr: unexpected token ','");
// /usr/arm-none-eabi/include/sys/cdefs.h:50:9
pub const __THROW = "";
pub const __ASMNAME = @compileError("unable to translate C expr: unexpected token ')'");
// /usr/arm-none-eabi/include/sys/cdefs.h:54:10
pub const __ptr_t = ?*anyopaque;
pub const __long_double_t = @compileError("unable to translate: TODO long double");
// /usr/arm-none-eabi/include/sys/cdefs.h:58:9
pub const __attribute_malloc__ = "";
pub const __attribute_pure__ = "";
pub const __attribute_format_strfmon__ = @compileError("unable to translate C expr: unexpected token ''");
// /usr/arm-none-eabi/include/sys/cdefs.h:62:9
pub const __flexarr = @compileError("unable to translate C expr: unexpected token '['");
// /usr/arm-none-eabi/include/sys/cdefs.h:63:9
pub const __bounded = "";
pub const __unbounded = "";
pub const __ptrvalue = "";
pub const __BEGIN_DECLS = "";
pub const __END_DECLS = "";
pub const __GNUCLIKE_ASM = @as(c_int, 3);
pub const __GNUCLIKE_MATH_BUILTIN_CONSTANTS = "";
pub const __GNUCLIKE___TYPEOF = @as(c_int, 1);
pub const __GNUCLIKE___SECTION = @as(c_int, 1);
pub const __GNUCLIKE_CTOR_SECTION_HANDLING = @as(c_int, 1);
pub const __GNUCLIKE_BUILTIN_CONSTANT_P = @as(c_int, 1);
pub const __GNUCLIKE_BUILTIN_VARARGS = @as(c_int, 1);
pub const __GNUCLIKE_BUILTIN_STDARG = @as(c_int, 1);
pub const __GNUCLIKE_BUILTIN_VAALIST = @as(c_int, 1);
pub const __GNUC_VA_LIST_COMPATIBILITY = @as(c_int, 1);
pub const __compiler_membar = @compileError("unable to translate C expr: unexpected token '__asm'");
// /usr/arm-none-eabi/include/sys/cdefs.h:130:9
pub const __GNUCLIKE_BUILTIN_NEXT_ARG = @as(c_int, 1);
pub const __GNUCLIKE_MATH_BUILTIN_RELOPS = "";
pub const __GNUCLIKE_BUILTIN_MEMCPY = @as(c_int, 1);
pub const __CC_SUPPORTS_INLINE = @as(c_int, 1);
pub const __CC_SUPPORTS___INLINE = @as(c_int, 1);
pub const __CC_SUPPORTS___INLINE__ = @as(c_int, 1);
pub const __CC_SUPPORTS___FUNC__ = @as(c_int, 1);
pub const __CC_SUPPORTS_WARNING = @as(c_int, 1);
pub const __CC_SUPPORTS_VARADIC_XXX = @as(c_int, 1);
pub const __CC_SUPPORTS_DYNAMIC_ARRAY_INIT = @as(c_int, 1);
pub inline fn __P(protos: anytype) @TypeOf(protos) {
    _ = &protos;
    return protos;
}
pub const __CONCAT1 = @compileError("unable to translate C expr: unexpected token '##'");
// /usr/arm-none-eabi/include/sys/cdefs.h:165:9
pub inline fn __CONCAT(x: anytype, y: anytype) @TypeOf(__CONCAT1(x, y)) {
    _ = &x;
    _ = &y;
    return __CONCAT1(x, y);
}
pub const __STRING = @compileError("unable to translate C expr: unexpected token '#'");
// /usr/arm-none-eabi/include/sys/cdefs.h:167:9
pub inline fn __XSTRING(x: anytype) @TypeOf(__STRING(x)) {
    _ = &x;
    return __STRING(x);
}
pub const __const = @compileError("unable to translate C expr: unexpected token 'const'");
// /usr/arm-none-eabi/include/sys/cdefs.h:170:9
pub const __signed = c_int;
pub const __volatile = @compileError("unable to translate C expr: unexpected token 'volatile'");
// /usr/arm-none-eabi/include/sys/cdefs.h:172:9
pub const __weak_symbol = @compileError("unable to translate macro: undefined identifier `__weak__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:217:9
pub const __dead2 = @compileError("unable to translate macro: undefined identifier `__noreturn__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:230:9
pub const __pure2 = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// /usr/arm-none-eabi/include/sys/cdefs.h:231:9
pub const __unused = @compileError("unable to translate macro: undefined identifier `__unused__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:232:9
pub const __used = @compileError("unable to translate macro: undefined identifier `__used__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:233:9
pub const __packed = @compileError("unable to translate macro: undefined identifier `__packed__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:234:9
pub const __aligned = @compileError("unable to translate macro: undefined identifier `__aligned__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:235:9
pub const __section = @compileError("unable to translate macro: undefined identifier `__section__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:236:9
pub const __alloc_size = @compileError("unable to translate macro: undefined identifier `__alloc_size__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:239:9
pub const __alloc_size2 = @compileError("unable to translate macro: undefined identifier `__alloc_size__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:240:9
pub const __alloc_align = @compileError("unable to translate macro: undefined identifier `__alloc_align__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:246:9
pub const __generic = @compileError("unable to translate C expr: unexpected token '_Generic'");
// /usr/arm-none-eabi/include/sys/cdefs.h:338:9
pub const __min_size = @compileError("unable to translate C expr: unexpected token 'static'");
// /usr/arm-none-eabi/include/sys/cdefs.h:356:9
pub const __malloc_like = @compileError("unable to translate macro: undefined identifier `__malloc__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:362:9
pub const __pure = @compileError("unable to translate macro: undefined identifier `__pure__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:363:9
pub const __always_inline = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:370:9
pub const __noinline = @compileError("unable to translate macro: undefined identifier `__noinline__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:376:9
pub const __nonnull = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:382:9
pub const __nonnull_all = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:383:9
pub const __fastcall = @compileError("unable to translate macro: undefined identifier `__fastcall__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:390:9
pub const __result_use_check = @compileError("unable to translate macro: undefined identifier `__warn_unused_result__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:391:9
pub const __returns_twice = @compileError("unable to translate macro: undefined identifier `__returns_twice__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:398:9
pub inline fn __unreachable() @TypeOf(__builtin_unreachable()) {
    return __builtin_unreachable();
}
pub const __restrict = @compileError("unable to translate C expr: unexpected token 'restrict'");
// /usr/arm-none-eabi/include/sys/cdefs.h:421:9
pub const __restrict_arr = @compileError("unable to translate C expr: unexpected token 'restrict'");
// /usr/arm-none-eabi/include/sys/cdefs.h:434:9
pub inline fn __predict_true(exp: anytype) @TypeOf(__builtin_expect(exp, @as(c_int, 1))) {
    _ = &exp;
    return __builtin_expect(exp, @as(c_int, 1));
}
pub inline fn __predict_false(exp: anytype) @TypeOf(__builtin_expect(exp, @as(c_int, 0))) {
    _ = &exp;
    return __builtin_expect(exp, @as(c_int, 0));
}
pub const __null_sentinel = @compileError("unable to translate macro: undefined identifier `__sentinel__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:476:9
pub const __exported = @compileError("unable to translate macro: undefined identifier `__visibility__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:477:9
pub const __hidden = @compileError("unable to translate macro: undefined identifier `__visibility__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:480:9
pub inline fn __offsetof(@"type": anytype, field: anytype) @TypeOf(offsetof(@"type", field)) {
    _ = &@"type";
    _ = &field;
    return offsetof(@"type", field);
}
pub inline fn __rangeof(@"type": anytype, start: anytype, end: anytype) @TypeOf(__offsetof(@"type", end) - __offsetof(@"type", start)) {
    _ = &@"type";
    _ = &start;
    _ = &end;
    return __offsetof(@"type", end) - __offsetof(@"type", start);
}
pub const __containerof = @compileError("unable to translate macro: undefined identifier `__x`");
// /usr/arm-none-eabi/include/sys/cdefs.h:501:9
pub const __printflike = @compileError("unable to translate macro: undefined identifier `__format__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:523:9
pub const __scanflike = @compileError("unable to translate macro: undefined identifier `__format__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:525:9
pub const __format_arg = @compileError("unable to translate macro: undefined identifier `__format_arg__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:527:9
pub const __strfmonlike = @compileError("unable to translate macro: undefined identifier `__format__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:528:9
pub const __strftimelike = @compileError("unable to translate macro: undefined identifier `__format__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:530:9
pub const __printf0like = @compileError("unable to translate C expr: unexpected token ''");
// /usr/arm-none-eabi/include/sys/cdefs.h:540:9
pub const __strong_reference = @compileError("unable to translate macro: undefined identifier `__alias__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:544:9
pub const __weak_reference = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/arm-none-eabi/include/sys/cdefs.h:548:9
pub const __warn_references = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/arm-none-eabi/include/sys/cdefs.h:551:9
pub const __sym_compat = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/arm-none-eabi/include/sys/cdefs.h:555:9
pub const __sym_default = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/arm-none-eabi/include/sys/cdefs.h:557:9
pub const __FBSDID = @compileError("unable to translate macro: undefined identifier `__hack`");
// /usr/arm-none-eabi/include/sys/cdefs.h:592:9
pub const __RCSID = @compileError("unable to translate macro: undefined identifier `__hack`");
// /usr/arm-none-eabi/include/sys/cdefs.h:596:9
pub const __RCSID_SOURCE = @compileError("unable to translate macro: undefined identifier `__hack`");
// /usr/arm-none-eabi/include/sys/cdefs.h:600:9
pub const __SCCSID = @compileError("unable to translate macro: undefined identifier `__hack`");
// /usr/arm-none-eabi/include/sys/cdefs.h:604:9
pub const __COPYRIGHT = @compileError("unable to translate macro: undefined identifier `__hack`");
// /usr/arm-none-eabi/include/sys/cdefs.h:608:9
pub const __DECONST = @compileError("unable to translate C expr: unexpected token 'const'");
// /usr/arm-none-eabi/include/sys/cdefs.h:612:9
pub const __DEVOLATILE = @compileError("unable to translate C expr: unexpected token 'volatile'");
// /usr/arm-none-eabi/include/sys/cdefs.h:616:9
pub const __DEQUALIFY = @compileError("unable to translate C expr: unexpected token 'const'");
// /usr/arm-none-eabi/include/sys/cdefs.h:620:9
pub const __NULLABILITY_PRAGMA_PUSH = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /usr/arm-none-eabi/include/sys/cdefs.h:633:9
pub const __NULLABILITY_PRAGMA_POP = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /usr/arm-none-eabi/include/sys/cdefs.h:635:9
pub const __arg_type_tag = @compileError("unable to translate macro: undefined identifier `__argument_with_type_tag__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:647:9
pub const __datatype_type_tag = @compileError("unable to translate macro: undefined identifier `__type_tag_for_datatype__`");
// /usr/arm-none-eabi/include/sys/cdefs.h:649:9
pub const __lock_annotate = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// /usr/arm-none-eabi/include/sys/cdefs.h:669:9
pub const __lockable = @compileError("unable to translate macro: undefined identifier `lockable`");
// /usr/arm-none-eabi/include/sys/cdefs.h:677:9
pub const __locks_exclusive = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /usr/arm-none-eabi/include/sys/cdefs.h:680:9
pub const __locks_shared = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /usr/arm-none-eabi/include/sys/cdefs.h:682:9
pub const __trylocks_exclusive = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /usr/arm-none-eabi/include/sys/cdefs.h:686:9
pub const __trylocks_shared = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /usr/arm-none-eabi/include/sys/cdefs.h:688:9
pub const __unlocks = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /usr/arm-none-eabi/include/sys/cdefs.h:692:9
pub const __asserts_exclusive = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /usr/arm-none-eabi/include/sys/cdefs.h:695:9
pub const __asserts_shared = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /usr/arm-none-eabi/include/sys/cdefs.h:697:9
pub const __requires_exclusive = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /usr/arm-none-eabi/include/sys/cdefs.h:701:9
pub const __requires_shared = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /usr/arm-none-eabi/include/sys/cdefs.h:703:9
pub const __requires_unlocked = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /usr/arm-none-eabi/include/sys/cdefs.h:705:9
pub const __no_lock_analysis = @compileError("unable to translate macro: undefined identifier `no_thread_safety_analysis`");
// /usr/arm-none-eabi/include/sys/cdefs.h:709:9
pub const __nosanitizeaddress = @compileError("unable to translate macro: undefined identifier `no_sanitize`");
// /usr/arm-none-eabi/include/sys/cdefs.h:721:9
pub const __nosanitizememory = @compileError("unable to translate macro: undefined identifier `no_sanitize`");
// /usr/arm-none-eabi/include/sys/cdefs.h:722:9
pub const __nosanitizethread = @compileError("unable to translate macro: undefined identifier `no_sanitize`");
// /usr/arm-none-eabi/include/sys/cdefs.h:724:9
pub const __guarded_by = @compileError("unable to translate macro: undefined identifier `guarded_by`");
// /usr/arm-none-eabi/include/sys/cdefs.h:732:9
pub const __pt_guarded_by = @compileError("unable to translate macro: undefined identifier `pt_guarded_by`");
// /usr/arm-none-eabi/include/sys/cdefs.h:733:9
pub const __align_up = @compileError("unable to translate macro: undefined identifier `__builtin_align_up`");
// /usr/arm-none-eabi/include/sys/cdefs.h:750:9
pub const __align_down = @compileError("unable to translate macro: undefined identifier `__builtin_align_down`");
// /usr/arm-none-eabi/include/sys/cdefs.h:751:9
pub const __is_aligned = @compileError("unable to translate macro: undefined identifier `__builtin_is_aligned`");
// /usr/arm-none-eabi/include/sys/cdefs.h:752:9
pub const PICO_C_COMPILER_IS_CLANG = @as(c_int, 1);
pub const __weak = @compileError("unable to translate macro: undefined identifier `weak`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:73:9
pub const GCC_Like_Pragma = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:79:9
pub const Clang_Pragma = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:86:9
pub const GCC_Pragma = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:95:9
pub const __isr = "";
pub const __packed_aligned = __packed ++ __aligned(@as(c_int, 4));
pub const __force_inline = __always_inline;
pub const count_of = @compileError("unable to translate C expr: unexpected token '('");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:132:9
pub inline fn MAX(a: anytype, b: anytype) @TypeOf(if (a > b) a else b) {
    _ = &a;
    _ = &b;
    return if (a > b) a else b;
}
pub inline fn MIN(a: anytype, b: anytype) @TypeOf(if (b > a) a else b) {
    _ = &a;
    _ = &b;
    return if (b > a) a else b;
}
pub const pico_default_asm = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:150:9
pub const pico_default_asm_volatile = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:151:9
pub const pico_default_asm_goto = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:152:9
pub const pico_default_asm_volatile_goto = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:153:9
pub const __check_type_compatible = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:183:9
pub const WRAPPER_FUNC = @compileError("unable to translate macro: undefined identifier `__wrap_`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:185:9
pub const REAL_FUNC = @compileError("unable to translate macro: undefined identifier `__real_`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_compiler/include/pico/platform/compiler.h:186:9
pub const _PICO_PLATFORM_SECTION_MACROS_H = "";
pub const __after_data = @compileError("unable to translate macro: undefined identifier `section`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_sections/include/pico/platform/sections.h:25:9
pub const __not_in_flash = @compileError("unable to translate macro: undefined identifier `section`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_sections/include/pico/platform/sections.h:41:9
pub const __scratch_x = @compileError("unable to translate macro: undefined identifier `section`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_sections/include/pico/platform/sections.h:60:9
pub const __scratch_y = @compileError("unable to translate macro: undefined identifier `section`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_sections/include/pico/platform/sections.h:79:9
pub const __uninitialized_ram = @compileError("unable to translate macro: undefined identifier `section`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_sections/include/pico/platform/sections.h:98:9
pub const __in_flash = @compileError("unable to translate macro: undefined identifier `section`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_sections/include/pico/platform/sections.h:114:9
pub inline fn __not_in_flash_func(func_name: anytype) @TypeOf(__not_in_flash(__STRING(func_name)) ++ func_name) {
    _ = &func_name;
    return __not_in_flash(__STRING(func_name)) ++ func_name;
}
pub inline fn __time_critical_func(func_name: anytype) @TypeOf(__not_in_flash_func(func_name)) {
    _ = &func_name;
    return __not_in_flash_func(func_name);
}
pub inline fn __no_inline_not_in_flash_func(func_name: anytype) @TypeOf(__noinline ++ __not_in_flash_func(func_name)) {
    _ = &func_name;
    return __noinline ++ __not_in_flash_func(func_name);
}
pub const _PICO_PLATFORM_PANIC_H = "";
pub const panic_compact = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_platform_panic/include/pico/platform/panic.h:36:9
pub const _PICO_PLATFORM_COMMON_H = "";
pub const PICO_MINIMAL_STORED_VECTOR_TABLE = @as(c_int, 0);
pub const PICO_NUM_VTABLE_IRQS = NUM_IRQS;
pub const PICO_NO_FPGA_CHECK = @as(c_int, 1);
pub const PICO_NO_SIM_CHECK = @as(c_int, 1);
pub inline fn host_safe_hw_ptr(x: anytype) usize {
    _ = &x;
    return @import("std").zig.c_translation.cast(usize, x);
}
pub inline fn native_safe_hw_ptr(x: anytype) @TypeOf(host_safe_hw_ptr(x)) {
    _ = &x;
    return host_safe_hw_ptr(x);
}
pub const _ADDRESSMAP_H = "";
pub const REG_ALIAS_RW_BITS = _u(@as(c_int, 0x0)) << _u(@as(c_int, 12));
pub const REG_ALIAS_XOR_BITS = _u(@as(c_int, 0x1)) << _u(@as(c_int, 12));
pub const REG_ALIAS_SET_BITS = _u(@as(c_int, 0x2)) << _u(@as(c_int, 12));
pub const REG_ALIAS_CLR_BITS = _u(@as(c_int, 0x3)) << _u(@as(c_int, 12));
pub const ROM_BASE = _u(@as(c_int, 0x00000000));
pub const XIP_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const XIP_SRAM_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x13ffc000, .hex));
pub const XIP_END = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x14000000, .hex));
pub const XIP_NOCACHE_NOALLOC_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x14000000, .hex));
pub const XIP_SRAM_END = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x14000000, .hex));
pub const XIP_NOCACHE_NOALLOC_END = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x18000000, .hex));
pub const XIP_MAINTENANCE_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x18000000, .hex));
pub const XIP_NOCACHE_NOALLOC_NOTRANSLATE_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1c000000, .hex));
pub const SRAM0_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const XIP_NOCACHE_NOALLOC_NOTRANSLATE_END = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const SRAM_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const SRAM_STRIPED_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const SRAM4_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20040000, .hex));
pub const SRAM8_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20080000, .hex));
pub const SRAM_STRIPED_END = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20080000, .hex));
pub const SRAM_SCRATCH_X_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20080000, .hex));
pub const SRAM9_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20081000, .hex));
pub const SRAM_SCRATCH_Y_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20081000, .hex));
pub const SRAM_END = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20082000, .hex));
pub const SYSINFO_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const SYSCFG_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40008000, .hex));
pub const CLOCKS_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40010000, .hex));
pub const PSM_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40018000, .hex));
pub const RESETS_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40020000, .hex));
pub const IO_BANK0_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40028000, .hex));
pub const IO_QSPI_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40030000, .hex));
pub const PADS_BANK0_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40038000, .hex));
pub const PADS_QSPI_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40040000, .hex));
pub const XOSC_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40048000, .hex));
pub const PLL_SYS_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40050000, .hex));
pub const PLL_USB_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40058000, .hex));
pub const ACCESSCTRL_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40060000, .hex));
pub const BUSCTRL_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40068000, .hex));
pub const UART0_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40070000, .hex));
pub const UART1_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40078000, .hex));
pub const SPI0_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40080000, .hex));
pub const SPI1_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40088000, .hex));
pub const I2C0_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40090000, .hex));
pub const I2C1_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40098000, .hex));
pub const ADC_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400a0000, .hex));
pub const PWM_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400a8000, .hex));
pub const TIMER0_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400b0000, .hex));
pub const TIMER1_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400b8000, .hex));
pub const HSTX_CTRL_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400c0000, .hex));
pub const XIP_CTRL_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400c8000, .hex));
pub const XIP_QMI_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400d0000, .hex));
pub const WATCHDOG_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400d8000, .hex));
pub const BOOTRAM_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400e0000, .hex));
pub const BOOTRAM_END = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400e0400, .hex));
pub const ROSC_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400e8000, .hex));
pub const TRNG_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400f0000, .hex));
pub const SHA256_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400f8000, .hex));
pub const POWMAN_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40100000, .hex));
pub const TICKS_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40108000, .hex));
pub const OTP_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40120000, .hex));
pub const OTP_DATA_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40130000, .hex));
pub const OTP_DATA_RAW_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40134000, .hex));
pub const OTP_DATA_GUARDED_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40138000, .hex));
pub const OTP_DATA_RAW_GUARDED_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x4013c000, .hex));
pub const CORESIGHT_PERIPH_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40140000, .hex));
pub const CORESIGHT_ROMTABLE_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40140000, .hex));
pub const CORESIGHT_AHB_AP_CORE0_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40142000, .hex));
pub const CORESIGHT_AHB_AP_CORE1_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40144000, .hex));
pub const CORESIGHT_TIMESTAMP_GEN_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40146000, .hex));
pub const CORESIGHT_ATB_FUNNEL_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40147000, .hex));
pub const CORESIGHT_TPIU_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40148000, .hex));
pub const CORESIGHT_CTI_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40149000, .hex));
pub const CORESIGHT_APB_AP_RISCV_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x4014a000, .hex));
pub const DFT_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40150000, .hex));
pub const GLITCH_DETECTOR_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40158000, .hex));
pub const TBMAN_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40160000, .hex));
pub const DMA_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x50000000, .hex));
pub const USBCTRL_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x50100000, .hex));
pub const USBCTRL_DPRAM_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x50100000, .hex));
pub const USBCTRL_REGS_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x50110000, .hex));
pub const PIO0_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x50200000, .hex));
pub const PIO1_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x50300000, .hex));
pub const PIO2_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x50400000, .hex));
pub const XIP_AUX_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x50500000, .hex));
pub const HSTX_FIFO_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x50600000, .hex));
pub const CORESIGHT_TRACE_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x50700000, .hex));
pub const SIO_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xd0000000, .hex));
pub const SIO_NONSEC_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xd0020000, .hex));
pub const PPB_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe0000000, .hex));
pub const PPB_NONSEC_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe0020000, .hex));
pub const EPPB_BASE = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe0080000, .hex));
pub const _HARDWARE_REGS_SIO_H = "";
pub const SIO_CPUID_OFFSET = _u(@as(c_int, 0x00000000));
pub const SIO_CPUID_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_CPUID_RESET = "-";
pub const SIO_CPUID_MSB = _u(@as(c_int, 31));
pub const SIO_CPUID_LSB = _u(@as(c_int, 0));
pub const SIO_CPUID_ACCESS = "RO";
pub const SIO_GPIO_IN_OFFSET = _u(@as(c_int, 0x00000004));
pub const SIO_GPIO_IN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_GPIO_IN_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_IN_MSB = _u(@as(c_int, 31));
pub const SIO_GPIO_IN_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_IN_ACCESS = "RO";
pub const SIO_GPIO_HI_IN_OFFSET = _u(@as(c_int, 0x00000008));
pub const SIO_GPIO_HI_IN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00ffff, .hex));
pub const SIO_GPIO_HI_IN_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_HI_IN_QSPI_SD_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_IN_QSPI_SD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const SIO_GPIO_HI_IN_QSPI_SD_MSB = _u(@as(c_int, 31));
pub const SIO_GPIO_HI_IN_QSPI_SD_LSB = _u(@as(c_int, 28));
pub const SIO_GPIO_HI_IN_QSPI_SD_ACCESS = "RO";
pub const SIO_GPIO_HI_IN_QSPI_CSN_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_IN_QSPI_CSN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const SIO_GPIO_HI_IN_QSPI_CSN_MSB = _u(@as(c_int, 27));
pub const SIO_GPIO_HI_IN_QSPI_CSN_LSB = _u(@as(c_int, 27));
pub const SIO_GPIO_HI_IN_QSPI_CSN_ACCESS = "RO";
pub const SIO_GPIO_HI_IN_QSPI_SCK_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_IN_QSPI_SCK_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const SIO_GPIO_HI_IN_QSPI_SCK_MSB = _u(@as(c_int, 26));
pub const SIO_GPIO_HI_IN_QSPI_SCK_LSB = _u(@as(c_int, 26));
pub const SIO_GPIO_HI_IN_QSPI_SCK_ACCESS = "RO";
pub const SIO_GPIO_HI_IN_USB_DM_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_IN_USB_DM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const SIO_GPIO_HI_IN_USB_DM_MSB = _u(@as(c_int, 25));
pub const SIO_GPIO_HI_IN_USB_DM_LSB = _u(@as(c_int, 25));
pub const SIO_GPIO_HI_IN_USB_DM_ACCESS = "RO";
pub const SIO_GPIO_HI_IN_USB_DP_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_IN_USB_DP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const SIO_GPIO_HI_IN_USB_DP_MSB = _u(@as(c_int, 24));
pub const SIO_GPIO_HI_IN_USB_DP_LSB = _u(@as(c_int, 24));
pub const SIO_GPIO_HI_IN_USB_DP_ACCESS = "RO";
pub const SIO_GPIO_HI_IN_GPIO_RESET = _u(@as(c_int, 0x0000));
pub const SIO_GPIO_HI_IN_GPIO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const SIO_GPIO_HI_IN_GPIO_MSB = _u(@as(c_int, 15));
pub const SIO_GPIO_HI_IN_GPIO_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_HI_IN_GPIO_ACCESS = "RO";
pub const SIO_GPIO_OUT_OFFSET = _u(@as(c_int, 0x00000010));
pub const SIO_GPIO_OUT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_GPIO_OUT_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_OUT_MSB = _u(@as(c_int, 31));
pub const SIO_GPIO_OUT_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_OUT_ACCESS = "RW";
pub const SIO_GPIO_HI_OUT_OFFSET = _u(@as(c_int, 0x00000014));
pub const SIO_GPIO_HI_OUT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00ffff, .hex));
pub const SIO_GPIO_HI_OUT_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_HI_OUT_QSPI_SD_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OUT_QSPI_SD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const SIO_GPIO_HI_OUT_QSPI_SD_MSB = _u(@as(c_int, 31));
pub const SIO_GPIO_HI_OUT_QSPI_SD_LSB = _u(@as(c_int, 28));
pub const SIO_GPIO_HI_OUT_QSPI_SD_ACCESS = "RW";
pub const SIO_GPIO_HI_OUT_QSPI_CSN_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OUT_QSPI_CSN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const SIO_GPIO_HI_OUT_QSPI_CSN_MSB = _u(@as(c_int, 27));
pub const SIO_GPIO_HI_OUT_QSPI_CSN_LSB = _u(@as(c_int, 27));
pub const SIO_GPIO_HI_OUT_QSPI_CSN_ACCESS = "RW";
pub const SIO_GPIO_HI_OUT_QSPI_SCK_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OUT_QSPI_SCK_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const SIO_GPIO_HI_OUT_QSPI_SCK_MSB = _u(@as(c_int, 26));
pub const SIO_GPIO_HI_OUT_QSPI_SCK_LSB = _u(@as(c_int, 26));
pub const SIO_GPIO_HI_OUT_QSPI_SCK_ACCESS = "RW";
pub const SIO_GPIO_HI_OUT_USB_DM_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OUT_USB_DM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const SIO_GPIO_HI_OUT_USB_DM_MSB = _u(@as(c_int, 25));
pub const SIO_GPIO_HI_OUT_USB_DM_LSB = _u(@as(c_int, 25));
pub const SIO_GPIO_HI_OUT_USB_DM_ACCESS = "RW";
pub const SIO_GPIO_HI_OUT_USB_DP_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OUT_USB_DP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const SIO_GPIO_HI_OUT_USB_DP_MSB = _u(@as(c_int, 24));
pub const SIO_GPIO_HI_OUT_USB_DP_LSB = _u(@as(c_int, 24));
pub const SIO_GPIO_HI_OUT_USB_DP_ACCESS = "RW";
pub const SIO_GPIO_HI_OUT_GPIO_RESET = _u(@as(c_int, 0x0000));
pub const SIO_GPIO_HI_OUT_GPIO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const SIO_GPIO_HI_OUT_GPIO_MSB = _u(@as(c_int, 15));
pub const SIO_GPIO_HI_OUT_GPIO_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_HI_OUT_GPIO_ACCESS = "RW";
pub const SIO_GPIO_OUT_SET_OFFSET = _u(@as(c_int, 0x00000018));
pub const SIO_GPIO_OUT_SET_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_GPIO_OUT_SET_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_OUT_SET_MSB = _u(@as(c_int, 31));
pub const SIO_GPIO_OUT_SET_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_OUT_SET_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_SET_OFFSET = _u(@as(c_int, 0x0000001c));
pub const SIO_GPIO_HI_OUT_SET_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00ffff, .hex));
pub const SIO_GPIO_HI_OUT_SET_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_HI_OUT_SET_QSPI_SD_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OUT_SET_QSPI_SD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const SIO_GPIO_HI_OUT_SET_QSPI_SD_MSB = _u(@as(c_int, 31));
pub const SIO_GPIO_HI_OUT_SET_QSPI_SD_LSB = _u(@as(c_int, 28));
pub const SIO_GPIO_HI_OUT_SET_QSPI_SD_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_SET_QSPI_CSN_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OUT_SET_QSPI_CSN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const SIO_GPIO_HI_OUT_SET_QSPI_CSN_MSB = _u(@as(c_int, 27));
pub const SIO_GPIO_HI_OUT_SET_QSPI_CSN_LSB = _u(@as(c_int, 27));
pub const SIO_GPIO_HI_OUT_SET_QSPI_CSN_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_SET_QSPI_SCK_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OUT_SET_QSPI_SCK_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const SIO_GPIO_HI_OUT_SET_QSPI_SCK_MSB = _u(@as(c_int, 26));
pub const SIO_GPIO_HI_OUT_SET_QSPI_SCK_LSB = _u(@as(c_int, 26));
pub const SIO_GPIO_HI_OUT_SET_QSPI_SCK_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_SET_USB_DM_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OUT_SET_USB_DM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const SIO_GPIO_HI_OUT_SET_USB_DM_MSB = _u(@as(c_int, 25));
pub const SIO_GPIO_HI_OUT_SET_USB_DM_LSB = _u(@as(c_int, 25));
pub const SIO_GPIO_HI_OUT_SET_USB_DM_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_SET_USB_DP_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OUT_SET_USB_DP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const SIO_GPIO_HI_OUT_SET_USB_DP_MSB = _u(@as(c_int, 24));
pub const SIO_GPIO_HI_OUT_SET_USB_DP_LSB = _u(@as(c_int, 24));
pub const SIO_GPIO_HI_OUT_SET_USB_DP_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_SET_GPIO_RESET = _u(@as(c_int, 0x0000));
pub const SIO_GPIO_HI_OUT_SET_GPIO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const SIO_GPIO_HI_OUT_SET_GPIO_MSB = _u(@as(c_int, 15));
pub const SIO_GPIO_HI_OUT_SET_GPIO_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_HI_OUT_SET_GPIO_ACCESS = "WO";
pub const SIO_GPIO_OUT_CLR_OFFSET = _u(@as(c_int, 0x00000020));
pub const SIO_GPIO_OUT_CLR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_GPIO_OUT_CLR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_OUT_CLR_MSB = _u(@as(c_int, 31));
pub const SIO_GPIO_OUT_CLR_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_OUT_CLR_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_CLR_OFFSET = _u(@as(c_int, 0x00000024));
pub const SIO_GPIO_HI_OUT_CLR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00ffff, .hex));
pub const SIO_GPIO_HI_OUT_CLR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_HI_OUT_CLR_QSPI_SD_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OUT_CLR_QSPI_SD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const SIO_GPIO_HI_OUT_CLR_QSPI_SD_MSB = _u(@as(c_int, 31));
pub const SIO_GPIO_HI_OUT_CLR_QSPI_SD_LSB = _u(@as(c_int, 28));
pub const SIO_GPIO_HI_OUT_CLR_QSPI_SD_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_CLR_QSPI_CSN_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OUT_CLR_QSPI_CSN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const SIO_GPIO_HI_OUT_CLR_QSPI_CSN_MSB = _u(@as(c_int, 27));
pub const SIO_GPIO_HI_OUT_CLR_QSPI_CSN_LSB = _u(@as(c_int, 27));
pub const SIO_GPIO_HI_OUT_CLR_QSPI_CSN_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_CLR_QSPI_SCK_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OUT_CLR_QSPI_SCK_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const SIO_GPIO_HI_OUT_CLR_QSPI_SCK_MSB = _u(@as(c_int, 26));
pub const SIO_GPIO_HI_OUT_CLR_QSPI_SCK_LSB = _u(@as(c_int, 26));
pub const SIO_GPIO_HI_OUT_CLR_QSPI_SCK_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_CLR_USB_DM_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OUT_CLR_USB_DM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const SIO_GPIO_HI_OUT_CLR_USB_DM_MSB = _u(@as(c_int, 25));
pub const SIO_GPIO_HI_OUT_CLR_USB_DM_LSB = _u(@as(c_int, 25));
pub const SIO_GPIO_HI_OUT_CLR_USB_DM_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_CLR_USB_DP_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OUT_CLR_USB_DP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const SIO_GPIO_HI_OUT_CLR_USB_DP_MSB = _u(@as(c_int, 24));
pub const SIO_GPIO_HI_OUT_CLR_USB_DP_LSB = _u(@as(c_int, 24));
pub const SIO_GPIO_HI_OUT_CLR_USB_DP_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_CLR_GPIO_RESET = _u(@as(c_int, 0x0000));
pub const SIO_GPIO_HI_OUT_CLR_GPIO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const SIO_GPIO_HI_OUT_CLR_GPIO_MSB = _u(@as(c_int, 15));
pub const SIO_GPIO_HI_OUT_CLR_GPIO_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_HI_OUT_CLR_GPIO_ACCESS = "WO";
pub const SIO_GPIO_OUT_XOR_OFFSET = _u(@as(c_int, 0x00000028));
pub const SIO_GPIO_OUT_XOR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_GPIO_OUT_XOR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_OUT_XOR_MSB = _u(@as(c_int, 31));
pub const SIO_GPIO_OUT_XOR_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_OUT_XOR_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_XOR_OFFSET = _u(@as(c_int, 0x0000002c));
pub const SIO_GPIO_HI_OUT_XOR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00ffff, .hex));
pub const SIO_GPIO_HI_OUT_XOR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_HI_OUT_XOR_QSPI_SD_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OUT_XOR_QSPI_SD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const SIO_GPIO_HI_OUT_XOR_QSPI_SD_MSB = _u(@as(c_int, 31));
pub const SIO_GPIO_HI_OUT_XOR_QSPI_SD_LSB = _u(@as(c_int, 28));
pub const SIO_GPIO_HI_OUT_XOR_QSPI_SD_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_XOR_QSPI_CSN_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OUT_XOR_QSPI_CSN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const SIO_GPIO_HI_OUT_XOR_QSPI_CSN_MSB = _u(@as(c_int, 27));
pub const SIO_GPIO_HI_OUT_XOR_QSPI_CSN_LSB = _u(@as(c_int, 27));
pub const SIO_GPIO_HI_OUT_XOR_QSPI_CSN_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_XOR_QSPI_SCK_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OUT_XOR_QSPI_SCK_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const SIO_GPIO_HI_OUT_XOR_QSPI_SCK_MSB = _u(@as(c_int, 26));
pub const SIO_GPIO_HI_OUT_XOR_QSPI_SCK_LSB = _u(@as(c_int, 26));
pub const SIO_GPIO_HI_OUT_XOR_QSPI_SCK_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_XOR_USB_DM_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OUT_XOR_USB_DM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const SIO_GPIO_HI_OUT_XOR_USB_DM_MSB = _u(@as(c_int, 25));
pub const SIO_GPIO_HI_OUT_XOR_USB_DM_LSB = _u(@as(c_int, 25));
pub const SIO_GPIO_HI_OUT_XOR_USB_DM_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_XOR_USB_DP_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OUT_XOR_USB_DP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const SIO_GPIO_HI_OUT_XOR_USB_DP_MSB = _u(@as(c_int, 24));
pub const SIO_GPIO_HI_OUT_XOR_USB_DP_LSB = _u(@as(c_int, 24));
pub const SIO_GPIO_HI_OUT_XOR_USB_DP_ACCESS = "WO";
pub const SIO_GPIO_HI_OUT_XOR_GPIO_RESET = _u(@as(c_int, 0x0000));
pub const SIO_GPIO_HI_OUT_XOR_GPIO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const SIO_GPIO_HI_OUT_XOR_GPIO_MSB = _u(@as(c_int, 15));
pub const SIO_GPIO_HI_OUT_XOR_GPIO_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_HI_OUT_XOR_GPIO_ACCESS = "WO";
pub const SIO_GPIO_OE_OFFSET = _u(@as(c_int, 0x00000030));
pub const SIO_GPIO_OE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_GPIO_OE_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_OE_MSB = _u(@as(c_int, 31));
pub const SIO_GPIO_OE_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_OE_ACCESS = "RW";
pub const SIO_GPIO_HI_OE_OFFSET = _u(@as(c_int, 0x00000034));
pub const SIO_GPIO_HI_OE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00ffff, .hex));
pub const SIO_GPIO_HI_OE_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_HI_OE_QSPI_SD_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OE_QSPI_SD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const SIO_GPIO_HI_OE_QSPI_SD_MSB = _u(@as(c_int, 31));
pub const SIO_GPIO_HI_OE_QSPI_SD_LSB = _u(@as(c_int, 28));
pub const SIO_GPIO_HI_OE_QSPI_SD_ACCESS = "RW";
pub const SIO_GPIO_HI_OE_QSPI_CSN_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OE_QSPI_CSN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const SIO_GPIO_HI_OE_QSPI_CSN_MSB = _u(@as(c_int, 27));
pub const SIO_GPIO_HI_OE_QSPI_CSN_LSB = _u(@as(c_int, 27));
pub const SIO_GPIO_HI_OE_QSPI_CSN_ACCESS = "RW";
pub const SIO_GPIO_HI_OE_QSPI_SCK_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OE_QSPI_SCK_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const SIO_GPIO_HI_OE_QSPI_SCK_MSB = _u(@as(c_int, 26));
pub const SIO_GPIO_HI_OE_QSPI_SCK_LSB = _u(@as(c_int, 26));
pub const SIO_GPIO_HI_OE_QSPI_SCK_ACCESS = "RW";
pub const SIO_GPIO_HI_OE_USB_DM_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OE_USB_DM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const SIO_GPIO_HI_OE_USB_DM_MSB = _u(@as(c_int, 25));
pub const SIO_GPIO_HI_OE_USB_DM_LSB = _u(@as(c_int, 25));
pub const SIO_GPIO_HI_OE_USB_DM_ACCESS = "RW";
pub const SIO_GPIO_HI_OE_USB_DP_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OE_USB_DP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const SIO_GPIO_HI_OE_USB_DP_MSB = _u(@as(c_int, 24));
pub const SIO_GPIO_HI_OE_USB_DP_LSB = _u(@as(c_int, 24));
pub const SIO_GPIO_HI_OE_USB_DP_ACCESS = "RW";
pub const SIO_GPIO_HI_OE_GPIO_RESET = _u(@as(c_int, 0x0000));
pub const SIO_GPIO_HI_OE_GPIO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const SIO_GPIO_HI_OE_GPIO_MSB = _u(@as(c_int, 15));
pub const SIO_GPIO_HI_OE_GPIO_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_HI_OE_GPIO_ACCESS = "RW";
pub const SIO_GPIO_OE_SET_OFFSET = _u(@as(c_int, 0x00000038));
pub const SIO_GPIO_OE_SET_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_GPIO_OE_SET_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_OE_SET_MSB = _u(@as(c_int, 31));
pub const SIO_GPIO_OE_SET_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_OE_SET_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_SET_OFFSET = _u(@as(c_int, 0x0000003c));
pub const SIO_GPIO_HI_OE_SET_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00ffff, .hex));
pub const SIO_GPIO_HI_OE_SET_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_HI_OE_SET_QSPI_SD_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OE_SET_QSPI_SD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const SIO_GPIO_HI_OE_SET_QSPI_SD_MSB = _u(@as(c_int, 31));
pub const SIO_GPIO_HI_OE_SET_QSPI_SD_LSB = _u(@as(c_int, 28));
pub const SIO_GPIO_HI_OE_SET_QSPI_SD_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_SET_QSPI_CSN_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OE_SET_QSPI_CSN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const SIO_GPIO_HI_OE_SET_QSPI_CSN_MSB = _u(@as(c_int, 27));
pub const SIO_GPIO_HI_OE_SET_QSPI_CSN_LSB = _u(@as(c_int, 27));
pub const SIO_GPIO_HI_OE_SET_QSPI_CSN_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_SET_QSPI_SCK_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OE_SET_QSPI_SCK_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const SIO_GPIO_HI_OE_SET_QSPI_SCK_MSB = _u(@as(c_int, 26));
pub const SIO_GPIO_HI_OE_SET_QSPI_SCK_LSB = _u(@as(c_int, 26));
pub const SIO_GPIO_HI_OE_SET_QSPI_SCK_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_SET_USB_DM_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OE_SET_USB_DM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const SIO_GPIO_HI_OE_SET_USB_DM_MSB = _u(@as(c_int, 25));
pub const SIO_GPIO_HI_OE_SET_USB_DM_LSB = _u(@as(c_int, 25));
pub const SIO_GPIO_HI_OE_SET_USB_DM_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_SET_USB_DP_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OE_SET_USB_DP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const SIO_GPIO_HI_OE_SET_USB_DP_MSB = _u(@as(c_int, 24));
pub const SIO_GPIO_HI_OE_SET_USB_DP_LSB = _u(@as(c_int, 24));
pub const SIO_GPIO_HI_OE_SET_USB_DP_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_SET_GPIO_RESET = _u(@as(c_int, 0x0000));
pub const SIO_GPIO_HI_OE_SET_GPIO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const SIO_GPIO_HI_OE_SET_GPIO_MSB = _u(@as(c_int, 15));
pub const SIO_GPIO_HI_OE_SET_GPIO_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_HI_OE_SET_GPIO_ACCESS = "WO";
pub const SIO_GPIO_OE_CLR_OFFSET = _u(@as(c_int, 0x00000040));
pub const SIO_GPIO_OE_CLR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_GPIO_OE_CLR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_OE_CLR_MSB = _u(@as(c_int, 31));
pub const SIO_GPIO_OE_CLR_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_OE_CLR_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_CLR_OFFSET = _u(@as(c_int, 0x00000044));
pub const SIO_GPIO_HI_OE_CLR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00ffff, .hex));
pub const SIO_GPIO_HI_OE_CLR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_HI_OE_CLR_QSPI_SD_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OE_CLR_QSPI_SD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const SIO_GPIO_HI_OE_CLR_QSPI_SD_MSB = _u(@as(c_int, 31));
pub const SIO_GPIO_HI_OE_CLR_QSPI_SD_LSB = _u(@as(c_int, 28));
pub const SIO_GPIO_HI_OE_CLR_QSPI_SD_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_CLR_QSPI_CSN_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OE_CLR_QSPI_CSN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const SIO_GPIO_HI_OE_CLR_QSPI_CSN_MSB = _u(@as(c_int, 27));
pub const SIO_GPIO_HI_OE_CLR_QSPI_CSN_LSB = _u(@as(c_int, 27));
pub const SIO_GPIO_HI_OE_CLR_QSPI_CSN_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_CLR_QSPI_SCK_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OE_CLR_QSPI_SCK_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const SIO_GPIO_HI_OE_CLR_QSPI_SCK_MSB = _u(@as(c_int, 26));
pub const SIO_GPIO_HI_OE_CLR_QSPI_SCK_LSB = _u(@as(c_int, 26));
pub const SIO_GPIO_HI_OE_CLR_QSPI_SCK_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_CLR_USB_DM_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OE_CLR_USB_DM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const SIO_GPIO_HI_OE_CLR_USB_DM_MSB = _u(@as(c_int, 25));
pub const SIO_GPIO_HI_OE_CLR_USB_DM_LSB = _u(@as(c_int, 25));
pub const SIO_GPIO_HI_OE_CLR_USB_DM_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_CLR_USB_DP_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OE_CLR_USB_DP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const SIO_GPIO_HI_OE_CLR_USB_DP_MSB = _u(@as(c_int, 24));
pub const SIO_GPIO_HI_OE_CLR_USB_DP_LSB = _u(@as(c_int, 24));
pub const SIO_GPIO_HI_OE_CLR_USB_DP_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_CLR_GPIO_RESET = _u(@as(c_int, 0x0000));
pub const SIO_GPIO_HI_OE_CLR_GPIO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const SIO_GPIO_HI_OE_CLR_GPIO_MSB = _u(@as(c_int, 15));
pub const SIO_GPIO_HI_OE_CLR_GPIO_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_HI_OE_CLR_GPIO_ACCESS = "WO";
pub const SIO_GPIO_OE_XOR_OFFSET = _u(@as(c_int, 0x00000048));
pub const SIO_GPIO_OE_XOR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_GPIO_OE_XOR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_OE_XOR_MSB = _u(@as(c_int, 31));
pub const SIO_GPIO_OE_XOR_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_OE_XOR_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_XOR_OFFSET = _u(@as(c_int, 0x0000004c));
pub const SIO_GPIO_HI_OE_XOR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00ffff, .hex));
pub const SIO_GPIO_HI_OE_XOR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_GPIO_HI_OE_XOR_QSPI_SD_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OE_XOR_QSPI_SD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const SIO_GPIO_HI_OE_XOR_QSPI_SD_MSB = _u(@as(c_int, 31));
pub const SIO_GPIO_HI_OE_XOR_QSPI_SD_LSB = _u(@as(c_int, 28));
pub const SIO_GPIO_HI_OE_XOR_QSPI_SD_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_XOR_QSPI_CSN_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OE_XOR_QSPI_CSN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const SIO_GPIO_HI_OE_XOR_QSPI_CSN_MSB = _u(@as(c_int, 27));
pub const SIO_GPIO_HI_OE_XOR_QSPI_CSN_LSB = _u(@as(c_int, 27));
pub const SIO_GPIO_HI_OE_XOR_QSPI_CSN_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_XOR_QSPI_SCK_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OE_XOR_QSPI_SCK_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const SIO_GPIO_HI_OE_XOR_QSPI_SCK_MSB = _u(@as(c_int, 26));
pub const SIO_GPIO_HI_OE_XOR_QSPI_SCK_LSB = _u(@as(c_int, 26));
pub const SIO_GPIO_HI_OE_XOR_QSPI_SCK_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_XOR_USB_DM_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OE_XOR_USB_DM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const SIO_GPIO_HI_OE_XOR_USB_DM_MSB = _u(@as(c_int, 25));
pub const SIO_GPIO_HI_OE_XOR_USB_DM_LSB = _u(@as(c_int, 25));
pub const SIO_GPIO_HI_OE_XOR_USB_DM_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_XOR_USB_DP_RESET = _u(@as(c_int, 0x0));
pub const SIO_GPIO_HI_OE_XOR_USB_DP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const SIO_GPIO_HI_OE_XOR_USB_DP_MSB = _u(@as(c_int, 24));
pub const SIO_GPIO_HI_OE_XOR_USB_DP_LSB = _u(@as(c_int, 24));
pub const SIO_GPIO_HI_OE_XOR_USB_DP_ACCESS = "WO";
pub const SIO_GPIO_HI_OE_XOR_GPIO_RESET = _u(@as(c_int, 0x0000));
pub const SIO_GPIO_HI_OE_XOR_GPIO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const SIO_GPIO_HI_OE_XOR_GPIO_MSB = _u(@as(c_int, 15));
pub const SIO_GPIO_HI_OE_XOR_GPIO_LSB = _u(@as(c_int, 0));
pub const SIO_GPIO_HI_OE_XOR_GPIO_ACCESS = "WO";
pub const SIO_FIFO_ST_OFFSET = _u(@as(c_int, 0x00000050));
pub const SIO_FIFO_ST_BITS = _u(@as(c_int, 0x0000000f));
pub const SIO_FIFO_ST_RESET = _u(@as(c_int, 0x00000002));
pub const SIO_FIFO_ST_ROE_RESET = _u(@as(c_int, 0x0));
pub const SIO_FIFO_ST_ROE_BITS = _u(@as(c_int, 0x00000008));
pub const SIO_FIFO_ST_ROE_MSB = _u(@as(c_int, 3));
pub const SIO_FIFO_ST_ROE_LSB = _u(@as(c_int, 3));
pub const SIO_FIFO_ST_ROE_ACCESS = "WC";
pub const SIO_FIFO_ST_WOF_RESET = _u(@as(c_int, 0x0));
pub const SIO_FIFO_ST_WOF_BITS = _u(@as(c_int, 0x00000004));
pub const SIO_FIFO_ST_WOF_MSB = _u(@as(c_int, 2));
pub const SIO_FIFO_ST_WOF_LSB = _u(@as(c_int, 2));
pub const SIO_FIFO_ST_WOF_ACCESS = "WC";
pub const SIO_FIFO_ST_RDY_RESET = _u(@as(c_int, 0x1));
pub const SIO_FIFO_ST_RDY_BITS = _u(@as(c_int, 0x00000002));
pub const SIO_FIFO_ST_RDY_MSB = _u(@as(c_int, 1));
pub const SIO_FIFO_ST_RDY_LSB = _u(@as(c_int, 1));
pub const SIO_FIFO_ST_RDY_ACCESS = "RO";
pub const SIO_FIFO_ST_VLD_RESET = _u(@as(c_int, 0x0));
pub const SIO_FIFO_ST_VLD_BITS = _u(@as(c_int, 0x00000001));
pub const SIO_FIFO_ST_VLD_MSB = _u(@as(c_int, 0));
pub const SIO_FIFO_ST_VLD_LSB = _u(@as(c_int, 0));
pub const SIO_FIFO_ST_VLD_ACCESS = "RO";
pub const SIO_FIFO_WR_OFFSET = _u(@as(c_int, 0x00000054));
pub const SIO_FIFO_WR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_FIFO_WR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_FIFO_WR_MSB = _u(@as(c_int, 31));
pub const SIO_FIFO_WR_LSB = _u(@as(c_int, 0));
pub const SIO_FIFO_WR_ACCESS = "WF";
pub const SIO_FIFO_RD_OFFSET = _u(@as(c_int, 0x00000058));
pub const SIO_FIFO_RD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_FIFO_RD_RESET = "-";
pub const SIO_FIFO_RD_MSB = _u(@as(c_int, 31));
pub const SIO_FIFO_RD_LSB = _u(@as(c_int, 0));
pub const SIO_FIFO_RD_ACCESS = "RF";
pub const SIO_SPINLOCK_ST_OFFSET = _u(@as(c_int, 0x0000005c));
pub const SIO_SPINLOCK_ST_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK_ST_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK_ST_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK_ST_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK_ST_ACCESS = "RO";
pub const SIO_INTERP0_ACCUM0_OFFSET = _u(@as(c_int, 0x00000080));
pub const SIO_INTERP0_ACCUM0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP0_ACCUM0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_ACCUM0_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_ACCUM0_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_ACCUM0_ACCESS = "RW";
pub const SIO_INTERP0_ACCUM1_OFFSET = _u(@as(c_int, 0x00000084));
pub const SIO_INTERP0_ACCUM1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP0_ACCUM1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_ACCUM1_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_ACCUM1_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_ACCUM1_ACCESS = "RW";
pub const SIO_INTERP0_BASE0_OFFSET = _u(@as(c_int, 0x00000088));
pub const SIO_INTERP0_BASE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP0_BASE0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_BASE0_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_BASE0_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_BASE0_ACCESS = "RW";
pub const SIO_INTERP0_BASE1_OFFSET = _u(@as(c_int, 0x0000008c));
pub const SIO_INTERP0_BASE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP0_BASE1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_BASE1_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_BASE1_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_BASE1_ACCESS = "RW";
pub const SIO_INTERP0_BASE2_OFFSET = _u(@as(c_int, 0x00000090));
pub const SIO_INTERP0_BASE2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP0_BASE2_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_BASE2_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_BASE2_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_BASE2_ACCESS = "RW";
pub const SIO_INTERP0_POP_LANE0_OFFSET = _u(@as(c_int, 0x00000094));
pub const SIO_INTERP0_POP_LANE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP0_POP_LANE0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_POP_LANE0_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_POP_LANE0_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_POP_LANE0_ACCESS = "RO";
pub const SIO_INTERP0_POP_LANE1_OFFSET = _u(@as(c_int, 0x00000098));
pub const SIO_INTERP0_POP_LANE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP0_POP_LANE1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_POP_LANE1_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_POP_LANE1_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_POP_LANE1_ACCESS = "RO";
pub const SIO_INTERP0_POP_FULL_OFFSET = _u(@as(c_int, 0x0000009c));
pub const SIO_INTERP0_POP_FULL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP0_POP_FULL_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_POP_FULL_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_POP_FULL_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_POP_FULL_ACCESS = "RO";
pub const SIO_INTERP0_PEEK_LANE0_OFFSET = _u(@as(c_int, 0x000000a0));
pub const SIO_INTERP0_PEEK_LANE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP0_PEEK_LANE0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_PEEK_LANE0_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_PEEK_LANE0_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_PEEK_LANE0_ACCESS = "RO";
pub const SIO_INTERP0_PEEK_LANE1_OFFSET = _u(@as(c_int, 0x000000a4));
pub const SIO_INTERP0_PEEK_LANE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP0_PEEK_LANE1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_PEEK_LANE1_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_PEEK_LANE1_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_PEEK_LANE1_ACCESS = "RO";
pub const SIO_INTERP0_PEEK_FULL_OFFSET = _u(@as(c_int, 0x000000a8));
pub const SIO_INTERP0_PEEK_FULL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP0_PEEK_FULL_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_PEEK_FULL_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_PEEK_FULL_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_PEEK_FULL_ACCESS = "RO";
pub const SIO_INTERP0_CTRL_LANE0_OFFSET = _u(@as(c_int, 0x000000ac));
pub const SIO_INTERP0_CTRL_LANE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x03bfffff, .hex));
pub const SIO_INTERP0_CTRL_LANE0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_CTRL_LANE0_OVERF_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE0_OVERF_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const SIO_INTERP0_CTRL_LANE0_OVERF_MSB = _u(@as(c_int, 25));
pub const SIO_INTERP0_CTRL_LANE0_OVERF_LSB = _u(@as(c_int, 25));
pub const SIO_INTERP0_CTRL_LANE0_OVERF_ACCESS = "RO";
pub const SIO_INTERP0_CTRL_LANE0_OVERF1_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE0_OVERF1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const SIO_INTERP0_CTRL_LANE0_OVERF1_MSB = _u(@as(c_int, 24));
pub const SIO_INTERP0_CTRL_LANE0_OVERF1_LSB = _u(@as(c_int, 24));
pub const SIO_INTERP0_CTRL_LANE0_OVERF1_ACCESS = "RO";
pub const SIO_INTERP0_CTRL_LANE0_OVERF0_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE0_OVERF0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const SIO_INTERP0_CTRL_LANE0_OVERF0_MSB = _u(@as(c_int, 23));
pub const SIO_INTERP0_CTRL_LANE0_OVERF0_LSB = _u(@as(c_int, 23));
pub const SIO_INTERP0_CTRL_LANE0_OVERF0_ACCESS = "RO";
pub const SIO_INTERP0_CTRL_LANE0_BLEND_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE0_BLEND_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const SIO_INTERP0_CTRL_LANE0_BLEND_MSB = _u(@as(c_int, 21));
pub const SIO_INTERP0_CTRL_LANE0_BLEND_LSB = _u(@as(c_int, 21));
pub const SIO_INTERP0_CTRL_LANE0_BLEND_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE0_FORCE_MSB_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE0_FORCE_MSB_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00180000, .hex));
pub const SIO_INTERP0_CTRL_LANE0_FORCE_MSB_MSB = _u(@as(c_int, 20));
pub const SIO_INTERP0_CTRL_LANE0_FORCE_MSB_LSB = _u(@as(c_int, 19));
pub const SIO_INTERP0_CTRL_LANE0_FORCE_MSB_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE0_ADD_RAW_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE0_ADD_RAW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const SIO_INTERP0_CTRL_LANE0_ADD_RAW_MSB = _u(@as(c_int, 18));
pub const SIO_INTERP0_CTRL_LANE0_ADD_RAW_LSB = _u(@as(c_int, 18));
pub const SIO_INTERP0_CTRL_LANE0_ADD_RAW_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE0_CROSS_RESULT_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE0_CROSS_RESULT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const SIO_INTERP0_CTRL_LANE0_CROSS_RESULT_MSB = _u(@as(c_int, 17));
pub const SIO_INTERP0_CTRL_LANE0_CROSS_RESULT_LSB = _u(@as(c_int, 17));
pub const SIO_INTERP0_CTRL_LANE0_CROSS_RESULT_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE0_CROSS_INPUT_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE0_CROSS_INPUT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const SIO_INTERP0_CTRL_LANE0_CROSS_INPUT_MSB = _u(@as(c_int, 16));
pub const SIO_INTERP0_CTRL_LANE0_CROSS_INPUT_LSB = _u(@as(c_int, 16));
pub const SIO_INTERP0_CTRL_LANE0_CROSS_INPUT_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE0_SIGNED_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE0_SIGNED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const SIO_INTERP0_CTRL_LANE0_SIGNED_MSB = _u(@as(c_int, 15));
pub const SIO_INTERP0_CTRL_LANE0_SIGNED_LSB = _u(@as(c_int, 15));
pub const SIO_INTERP0_CTRL_LANE0_SIGNED_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE0_MASK_MSB_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP0_CTRL_LANE0_MASK_MSB_BITS = _u(@as(c_int, 0x00007c00));
pub const SIO_INTERP0_CTRL_LANE0_MASK_MSB_MSB = _u(@as(c_int, 14));
pub const SIO_INTERP0_CTRL_LANE0_MASK_MSB_LSB = _u(@as(c_int, 10));
pub const SIO_INTERP0_CTRL_LANE0_MASK_MSB_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE0_MASK_LSB_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP0_CTRL_LANE0_MASK_LSB_BITS = _u(@as(c_int, 0x000003e0));
pub const SIO_INTERP0_CTRL_LANE0_MASK_LSB_MSB = _u(@as(c_int, 9));
pub const SIO_INTERP0_CTRL_LANE0_MASK_LSB_LSB = _u(@as(c_int, 5));
pub const SIO_INTERP0_CTRL_LANE0_MASK_LSB_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE0_SHIFT_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP0_CTRL_LANE0_SHIFT_BITS = _u(@as(c_int, 0x0000001f));
pub const SIO_INTERP0_CTRL_LANE0_SHIFT_MSB = _u(@as(c_int, 4));
pub const SIO_INTERP0_CTRL_LANE0_SHIFT_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_CTRL_LANE0_SHIFT_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE1_OFFSET = _u(@as(c_int, 0x000000b0));
pub const SIO_INTERP0_CTRL_LANE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x001fffff, .hex));
pub const SIO_INTERP0_CTRL_LANE1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_CTRL_LANE1_FORCE_MSB_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE1_FORCE_MSB_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00180000, .hex));
pub const SIO_INTERP0_CTRL_LANE1_FORCE_MSB_MSB = _u(@as(c_int, 20));
pub const SIO_INTERP0_CTRL_LANE1_FORCE_MSB_LSB = _u(@as(c_int, 19));
pub const SIO_INTERP0_CTRL_LANE1_FORCE_MSB_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE1_ADD_RAW_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE1_ADD_RAW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const SIO_INTERP0_CTRL_LANE1_ADD_RAW_MSB = _u(@as(c_int, 18));
pub const SIO_INTERP0_CTRL_LANE1_ADD_RAW_LSB = _u(@as(c_int, 18));
pub const SIO_INTERP0_CTRL_LANE1_ADD_RAW_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE1_CROSS_RESULT_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE1_CROSS_RESULT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const SIO_INTERP0_CTRL_LANE1_CROSS_RESULT_MSB = _u(@as(c_int, 17));
pub const SIO_INTERP0_CTRL_LANE1_CROSS_RESULT_LSB = _u(@as(c_int, 17));
pub const SIO_INTERP0_CTRL_LANE1_CROSS_RESULT_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE1_CROSS_INPUT_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE1_CROSS_INPUT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const SIO_INTERP0_CTRL_LANE1_CROSS_INPUT_MSB = _u(@as(c_int, 16));
pub const SIO_INTERP0_CTRL_LANE1_CROSS_INPUT_LSB = _u(@as(c_int, 16));
pub const SIO_INTERP0_CTRL_LANE1_CROSS_INPUT_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE1_SIGNED_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP0_CTRL_LANE1_SIGNED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const SIO_INTERP0_CTRL_LANE1_SIGNED_MSB = _u(@as(c_int, 15));
pub const SIO_INTERP0_CTRL_LANE1_SIGNED_LSB = _u(@as(c_int, 15));
pub const SIO_INTERP0_CTRL_LANE1_SIGNED_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE1_MASK_MSB_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP0_CTRL_LANE1_MASK_MSB_BITS = _u(@as(c_int, 0x00007c00));
pub const SIO_INTERP0_CTRL_LANE1_MASK_MSB_MSB = _u(@as(c_int, 14));
pub const SIO_INTERP0_CTRL_LANE1_MASK_MSB_LSB = _u(@as(c_int, 10));
pub const SIO_INTERP0_CTRL_LANE1_MASK_MSB_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE1_MASK_LSB_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP0_CTRL_LANE1_MASK_LSB_BITS = _u(@as(c_int, 0x000003e0));
pub const SIO_INTERP0_CTRL_LANE1_MASK_LSB_MSB = _u(@as(c_int, 9));
pub const SIO_INTERP0_CTRL_LANE1_MASK_LSB_LSB = _u(@as(c_int, 5));
pub const SIO_INTERP0_CTRL_LANE1_MASK_LSB_ACCESS = "RW";
pub const SIO_INTERP0_CTRL_LANE1_SHIFT_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP0_CTRL_LANE1_SHIFT_BITS = _u(@as(c_int, 0x0000001f));
pub const SIO_INTERP0_CTRL_LANE1_SHIFT_MSB = _u(@as(c_int, 4));
pub const SIO_INTERP0_CTRL_LANE1_SHIFT_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_CTRL_LANE1_SHIFT_ACCESS = "RW";
pub const SIO_INTERP0_ACCUM0_ADD_OFFSET = _u(@as(c_int, 0x000000b4));
pub const SIO_INTERP0_ACCUM0_ADD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hex));
pub const SIO_INTERP0_ACCUM0_ADD_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_ACCUM0_ADD_MSB = _u(@as(c_int, 23));
pub const SIO_INTERP0_ACCUM0_ADD_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_ACCUM0_ADD_ACCESS = "RW";
pub const SIO_INTERP0_ACCUM1_ADD_OFFSET = _u(@as(c_int, 0x000000b8));
pub const SIO_INTERP0_ACCUM1_ADD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hex));
pub const SIO_INTERP0_ACCUM1_ADD_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_ACCUM1_ADD_MSB = _u(@as(c_int, 23));
pub const SIO_INTERP0_ACCUM1_ADD_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_ACCUM1_ADD_ACCESS = "RW";
pub const SIO_INTERP0_BASE_1AND0_OFFSET = _u(@as(c_int, 0x000000bc));
pub const SIO_INTERP0_BASE_1AND0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP0_BASE_1AND0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP0_BASE_1AND0_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP0_BASE_1AND0_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP0_BASE_1AND0_ACCESS = "WO";
pub const SIO_INTERP1_ACCUM0_OFFSET = _u(@as(c_int, 0x000000c0));
pub const SIO_INTERP1_ACCUM0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP1_ACCUM0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_ACCUM0_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_ACCUM0_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_ACCUM0_ACCESS = "RW";
pub const SIO_INTERP1_ACCUM1_OFFSET = _u(@as(c_int, 0x000000c4));
pub const SIO_INTERP1_ACCUM1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP1_ACCUM1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_ACCUM1_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_ACCUM1_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_ACCUM1_ACCESS = "RW";
pub const SIO_INTERP1_BASE0_OFFSET = _u(@as(c_int, 0x000000c8));
pub const SIO_INTERP1_BASE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP1_BASE0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_BASE0_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_BASE0_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_BASE0_ACCESS = "RW";
pub const SIO_INTERP1_BASE1_OFFSET = _u(@as(c_int, 0x000000cc));
pub const SIO_INTERP1_BASE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP1_BASE1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_BASE1_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_BASE1_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_BASE1_ACCESS = "RW";
pub const SIO_INTERP1_BASE2_OFFSET = _u(@as(c_int, 0x000000d0));
pub const SIO_INTERP1_BASE2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP1_BASE2_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_BASE2_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_BASE2_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_BASE2_ACCESS = "RW";
pub const SIO_INTERP1_POP_LANE0_OFFSET = _u(@as(c_int, 0x000000d4));
pub const SIO_INTERP1_POP_LANE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP1_POP_LANE0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_POP_LANE0_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_POP_LANE0_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_POP_LANE0_ACCESS = "RO";
pub const SIO_INTERP1_POP_LANE1_OFFSET = _u(@as(c_int, 0x000000d8));
pub const SIO_INTERP1_POP_LANE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP1_POP_LANE1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_POP_LANE1_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_POP_LANE1_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_POP_LANE1_ACCESS = "RO";
pub const SIO_INTERP1_POP_FULL_OFFSET = _u(@as(c_int, 0x000000dc));
pub const SIO_INTERP1_POP_FULL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP1_POP_FULL_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_POP_FULL_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_POP_FULL_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_POP_FULL_ACCESS = "RO";
pub const SIO_INTERP1_PEEK_LANE0_OFFSET = _u(@as(c_int, 0x000000e0));
pub const SIO_INTERP1_PEEK_LANE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP1_PEEK_LANE0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_PEEK_LANE0_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_PEEK_LANE0_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_PEEK_LANE0_ACCESS = "RO";
pub const SIO_INTERP1_PEEK_LANE1_OFFSET = _u(@as(c_int, 0x000000e4));
pub const SIO_INTERP1_PEEK_LANE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP1_PEEK_LANE1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_PEEK_LANE1_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_PEEK_LANE1_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_PEEK_LANE1_ACCESS = "RO";
pub const SIO_INTERP1_PEEK_FULL_OFFSET = _u(@as(c_int, 0x000000e8));
pub const SIO_INTERP1_PEEK_FULL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP1_PEEK_FULL_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_PEEK_FULL_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_PEEK_FULL_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_PEEK_FULL_ACCESS = "RO";
pub const SIO_INTERP1_CTRL_LANE0_OFFSET = _u(@as(c_int, 0x000000ec));
pub const SIO_INTERP1_CTRL_LANE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x03dfffff, .hex));
pub const SIO_INTERP1_CTRL_LANE0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_CTRL_LANE0_OVERF_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE0_OVERF_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const SIO_INTERP1_CTRL_LANE0_OVERF_MSB = _u(@as(c_int, 25));
pub const SIO_INTERP1_CTRL_LANE0_OVERF_LSB = _u(@as(c_int, 25));
pub const SIO_INTERP1_CTRL_LANE0_OVERF_ACCESS = "RO";
pub const SIO_INTERP1_CTRL_LANE0_OVERF1_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE0_OVERF1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const SIO_INTERP1_CTRL_LANE0_OVERF1_MSB = _u(@as(c_int, 24));
pub const SIO_INTERP1_CTRL_LANE0_OVERF1_LSB = _u(@as(c_int, 24));
pub const SIO_INTERP1_CTRL_LANE0_OVERF1_ACCESS = "RO";
pub const SIO_INTERP1_CTRL_LANE0_OVERF0_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE0_OVERF0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const SIO_INTERP1_CTRL_LANE0_OVERF0_MSB = _u(@as(c_int, 23));
pub const SIO_INTERP1_CTRL_LANE0_OVERF0_LSB = _u(@as(c_int, 23));
pub const SIO_INTERP1_CTRL_LANE0_OVERF0_ACCESS = "RO";
pub const SIO_INTERP1_CTRL_LANE0_CLAMP_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE0_CLAMP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const SIO_INTERP1_CTRL_LANE0_CLAMP_MSB = _u(@as(c_int, 22));
pub const SIO_INTERP1_CTRL_LANE0_CLAMP_LSB = _u(@as(c_int, 22));
pub const SIO_INTERP1_CTRL_LANE0_CLAMP_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE0_FORCE_MSB_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE0_FORCE_MSB_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00180000, .hex));
pub const SIO_INTERP1_CTRL_LANE0_FORCE_MSB_MSB = _u(@as(c_int, 20));
pub const SIO_INTERP1_CTRL_LANE0_FORCE_MSB_LSB = _u(@as(c_int, 19));
pub const SIO_INTERP1_CTRL_LANE0_FORCE_MSB_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE0_ADD_RAW_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE0_ADD_RAW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const SIO_INTERP1_CTRL_LANE0_ADD_RAW_MSB = _u(@as(c_int, 18));
pub const SIO_INTERP1_CTRL_LANE0_ADD_RAW_LSB = _u(@as(c_int, 18));
pub const SIO_INTERP1_CTRL_LANE0_ADD_RAW_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE0_CROSS_RESULT_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE0_CROSS_RESULT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const SIO_INTERP1_CTRL_LANE0_CROSS_RESULT_MSB = _u(@as(c_int, 17));
pub const SIO_INTERP1_CTRL_LANE0_CROSS_RESULT_LSB = _u(@as(c_int, 17));
pub const SIO_INTERP1_CTRL_LANE0_CROSS_RESULT_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE0_CROSS_INPUT_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE0_CROSS_INPUT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const SIO_INTERP1_CTRL_LANE0_CROSS_INPUT_MSB = _u(@as(c_int, 16));
pub const SIO_INTERP1_CTRL_LANE0_CROSS_INPUT_LSB = _u(@as(c_int, 16));
pub const SIO_INTERP1_CTRL_LANE0_CROSS_INPUT_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE0_SIGNED_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE0_SIGNED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const SIO_INTERP1_CTRL_LANE0_SIGNED_MSB = _u(@as(c_int, 15));
pub const SIO_INTERP1_CTRL_LANE0_SIGNED_LSB = _u(@as(c_int, 15));
pub const SIO_INTERP1_CTRL_LANE0_SIGNED_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE0_MASK_MSB_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP1_CTRL_LANE0_MASK_MSB_BITS = _u(@as(c_int, 0x00007c00));
pub const SIO_INTERP1_CTRL_LANE0_MASK_MSB_MSB = _u(@as(c_int, 14));
pub const SIO_INTERP1_CTRL_LANE0_MASK_MSB_LSB = _u(@as(c_int, 10));
pub const SIO_INTERP1_CTRL_LANE0_MASK_MSB_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE0_MASK_LSB_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP1_CTRL_LANE0_MASK_LSB_BITS = _u(@as(c_int, 0x000003e0));
pub const SIO_INTERP1_CTRL_LANE0_MASK_LSB_MSB = _u(@as(c_int, 9));
pub const SIO_INTERP1_CTRL_LANE0_MASK_LSB_LSB = _u(@as(c_int, 5));
pub const SIO_INTERP1_CTRL_LANE0_MASK_LSB_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE0_SHIFT_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP1_CTRL_LANE0_SHIFT_BITS = _u(@as(c_int, 0x0000001f));
pub const SIO_INTERP1_CTRL_LANE0_SHIFT_MSB = _u(@as(c_int, 4));
pub const SIO_INTERP1_CTRL_LANE0_SHIFT_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_CTRL_LANE0_SHIFT_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE1_OFFSET = _u(@as(c_int, 0x000000f0));
pub const SIO_INTERP1_CTRL_LANE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x001fffff, .hex));
pub const SIO_INTERP1_CTRL_LANE1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_CTRL_LANE1_FORCE_MSB_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE1_FORCE_MSB_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00180000, .hex));
pub const SIO_INTERP1_CTRL_LANE1_FORCE_MSB_MSB = _u(@as(c_int, 20));
pub const SIO_INTERP1_CTRL_LANE1_FORCE_MSB_LSB = _u(@as(c_int, 19));
pub const SIO_INTERP1_CTRL_LANE1_FORCE_MSB_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE1_ADD_RAW_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE1_ADD_RAW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const SIO_INTERP1_CTRL_LANE1_ADD_RAW_MSB = _u(@as(c_int, 18));
pub const SIO_INTERP1_CTRL_LANE1_ADD_RAW_LSB = _u(@as(c_int, 18));
pub const SIO_INTERP1_CTRL_LANE1_ADD_RAW_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE1_CROSS_RESULT_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE1_CROSS_RESULT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const SIO_INTERP1_CTRL_LANE1_CROSS_RESULT_MSB = _u(@as(c_int, 17));
pub const SIO_INTERP1_CTRL_LANE1_CROSS_RESULT_LSB = _u(@as(c_int, 17));
pub const SIO_INTERP1_CTRL_LANE1_CROSS_RESULT_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE1_CROSS_INPUT_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE1_CROSS_INPUT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const SIO_INTERP1_CTRL_LANE1_CROSS_INPUT_MSB = _u(@as(c_int, 16));
pub const SIO_INTERP1_CTRL_LANE1_CROSS_INPUT_LSB = _u(@as(c_int, 16));
pub const SIO_INTERP1_CTRL_LANE1_CROSS_INPUT_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE1_SIGNED_RESET = _u(@as(c_int, 0x0));
pub const SIO_INTERP1_CTRL_LANE1_SIGNED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const SIO_INTERP1_CTRL_LANE1_SIGNED_MSB = _u(@as(c_int, 15));
pub const SIO_INTERP1_CTRL_LANE1_SIGNED_LSB = _u(@as(c_int, 15));
pub const SIO_INTERP1_CTRL_LANE1_SIGNED_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE1_MASK_MSB_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP1_CTRL_LANE1_MASK_MSB_BITS = _u(@as(c_int, 0x00007c00));
pub const SIO_INTERP1_CTRL_LANE1_MASK_MSB_MSB = _u(@as(c_int, 14));
pub const SIO_INTERP1_CTRL_LANE1_MASK_MSB_LSB = _u(@as(c_int, 10));
pub const SIO_INTERP1_CTRL_LANE1_MASK_MSB_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE1_MASK_LSB_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP1_CTRL_LANE1_MASK_LSB_BITS = _u(@as(c_int, 0x000003e0));
pub const SIO_INTERP1_CTRL_LANE1_MASK_LSB_MSB = _u(@as(c_int, 9));
pub const SIO_INTERP1_CTRL_LANE1_MASK_LSB_LSB = _u(@as(c_int, 5));
pub const SIO_INTERP1_CTRL_LANE1_MASK_LSB_ACCESS = "RW";
pub const SIO_INTERP1_CTRL_LANE1_SHIFT_RESET = _u(@as(c_int, 0x00));
pub const SIO_INTERP1_CTRL_LANE1_SHIFT_BITS = _u(@as(c_int, 0x0000001f));
pub const SIO_INTERP1_CTRL_LANE1_SHIFT_MSB = _u(@as(c_int, 4));
pub const SIO_INTERP1_CTRL_LANE1_SHIFT_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_CTRL_LANE1_SHIFT_ACCESS = "RW";
pub const SIO_INTERP1_ACCUM0_ADD_OFFSET = _u(@as(c_int, 0x000000f4));
pub const SIO_INTERP1_ACCUM0_ADD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hex));
pub const SIO_INTERP1_ACCUM0_ADD_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_ACCUM0_ADD_MSB = _u(@as(c_int, 23));
pub const SIO_INTERP1_ACCUM0_ADD_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_ACCUM0_ADD_ACCESS = "RW";
pub const SIO_INTERP1_ACCUM1_ADD_OFFSET = _u(@as(c_int, 0x000000f8));
pub const SIO_INTERP1_ACCUM1_ADD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hex));
pub const SIO_INTERP1_ACCUM1_ADD_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_ACCUM1_ADD_MSB = _u(@as(c_int, 23));
pub const SIO_INTERP1_ACCUM1_ADD_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_ACCUM1_ADD_ACCESS = "RW";
pub const SIO_INTERP1_BASE_1AND0_OFFSET = _u(@as(c_int, 0x000000fc));
pub const SIO_INTERP1_BASE_1AND0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_INTERP1_BASE_1AND0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_INTERP1_BASE_1AND0_MSB = _u(@as(c_int, 31));
pub const SIO_INTERP1_BASE_1AND0_LSB = _u(@as(c_int, 0));
pub const SIO_INTERP1_BASE_1AND0_ACCESS = "WO";
pub const SIO_SPINLOCK0_OFFSET = _u(@as(c_int, 0x00000100));
pub const SIO_SPINLOCK0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK0_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK0_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK0_ACCESS = "RW";
pub const SIO_SPINLOCK1_OFFSET = _u(@as(c_int, 0x00000104));
pub const SIO_SPINLOCK1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK1_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK1_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK1_ACCESS = "RW";
pub const SIO_SPINLOCK2_OFFSET = _u(@as(c_int, 0x00000108));
pub const SIO_SPINLOCK2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK2_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK2_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK2_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK2_ACCESS = "RW";
pub const SIO_SPINLOCK3_OFFSET = _u(@as(c_int, 0x0000010c));
pub const SIO_SPINLOCK3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK3_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK3_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK3_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK3_ACCESS = "RW";
pub const SIO_SPINLOCK4_OFFSET = _u(@as(c_int, 0x00000110));
pub const SIO_SPINLOCK4_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK4_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK4_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK4_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK4_ACCESS = "RW";
pub const SIO_SPINLOCK5_OFFSET = _u(@as(c_int, 0x00000114));
pub const SIO_SPINLOCK5_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK5_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK5_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK5_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK5_ACCESS = "RW";
pub const SIO_SPINLOCK6_OFFSET = _u(@as(c_int, 0x00000118));
pub const SIO_SPINLOCK6_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK6_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK6_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK6_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK6_ACCESS = "RW";
pub const SIO_SPINLOCK7_OFFSET = _u(@as(c_int, 0x0000011c));
pub const SIO_SPINLOCK7_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK7_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK7_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK7_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK7_ACCESS = "RW";
pub const SIO_SPINLOCK8_OFFSET = _u(@as(c_int, 0x00000120));
pub const SIO_SPINLOCK8_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK8_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK8_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK8_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK8_ACCESS = "RW";
pub const SIO_SPINLOCK9_OFFSET = _u(@as(c_int, 0x00000124));
pub const SIO_SPINLOCK9_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK9_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK9_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK9_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK9_ACCESS = "RW";
pub const SIO_SPINLOCK10_OFFSET = _u(@as(c_int, 0x00000128));
pub const SIO_SPINLOCK10_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK10_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK10_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK10_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK10_ACCESS = "RW";
pub const SIO_SPINLOCK11_OFFSET = _u(@as(c_int, 0x0000012c));
pub const SIO_SPINLOCK11_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK11_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK11_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK11_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK11_ACCESS = "RW";
pub const SIO_SPINLOCK12_OFFSET = _u(@as(c_int, 0x00000130));
pub const SIO_SPINLOCK12_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK12_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK12_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK12_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK12_ACCESS = "RW";
pub const SIO_SPINLOCK13_OFFSET = _u(@as(c_int, 0x00000134));
pub const SIO_SPINLOCK13_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK13_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK13_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK13_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK13_ACCESS = "RW";
pub const SIO_SPINLOCK14_OFFSET = _u(@as(c_int, 0x00000138));
pub const SIO_SPINLOCK14_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK14_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK14_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK14_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK14_ACCESS = "RW";
pub const SIO_SPINLOCK15_OFFSET = _u(@as(c_int, 0x0000013c));
pub const SIO_SPINLOCK15_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK15_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK15_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK15_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK15_ACCESS = "RW";
pub const SIO_SPINLOCK16_OFFSET = _u(@as(c_int, 0x00000140));
pub const SIO_SPINLOCK16_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK16_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK16_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK16_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK16_ACCESS = "RW";
pub const SIO_SPINLOCK17_OFFSET = _u(@as(c_int, 0x00000144));
pub const SIO_SPINLOCK17_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK17_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK17_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK17_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK17_ACCESS = "RW";
pub const SIO_SPINLOCK18_OFFSET = _u(@as(c_int, 0x00000148));
pub const SIO_SPINLOCK18_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK18_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK18_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK18_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK18_ACCESS = "RW";
pub const SIO_SPINLOCK19_OFFSET = _u(@as(c_int, 0x0000014c));
pub const SIO_SPINLOCK19_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK19_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK19_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK19_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK19_ACCESS = "RW";
pub const SIO_SPINLOCK20_OFFSET = _u(@as(c_int, 0x00000150));
pub const SIO_SPINLOCK20_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK20_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK20_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK20_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK20_ACCESS = "RW";
pub const SIO_SPINLOCK21_OFFSET = _u(@as(c_int, 0x00000154));
pub const SIO_SPINLOCK21_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK21_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK21_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK21_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK21_ACCESS = "RW";
pub const SIO_SPINLOCK22_OFFSET = _u(@as(c_int, 0x00000158));
pub const SIO_SPINLOCK22_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK22_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK22_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK22_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK22_ACCESS = "RW";
pub const SIO_SPINLOCK23_OFFSET = _u(@as(c_int, 0x0000015c));
pub const SIO_SPINLOCK23_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK23_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK23_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK23_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK23_ACCESS = "RW";
pub const SIO_SPINLOCK24_OFFSET = _u(@as(c_int, 0x00000160));
pub const SIO_SPINLOCK24_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK24_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK24_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK24_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK24_ACCESS = "RW";
pub const SIO_SPINLOCK25_OFFSET = _u(@as(c_int, 0x00000164));
pub const SIO_SPINLOCK25_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK25_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK25_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK25_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK25_ACCESS = "RW";
pub const SIO_SPINLOCK26_OFFSET = _u(@as(c_int, 0x00000168));
pub const SIO_SPINLOCK26_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK26_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK26_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK26_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK26_ACCESS = "RW";
pub const SIO_SPINLOCK27_OFFSET = _u(@as(c_int, 0x0000016c));
pub const SIO_SPINLOCK27_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK27_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK27_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK27_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK27_ACCESS = "RW";
pub const SIO_SPINLOCK28_OFFSET = _u(@as(c_int, 0x00000170));
pub const SIO_SPINLOCK28_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK28_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK28_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK28_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK28_ACCESS = "RW";
pub const SIO_SPINLOCK29_OFFSET = _u(@as(c_int, 0x00000174));
pub const SIO_SPINLOCK29_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK29_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK29_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK29_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK29_ACCESS = "RW";
pub const SIO_SPINLOCK30_OFFSET = _u(@as(c_int, 0x00000178));
pub const SIO_SPINLOCK30_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK30_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK30_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK30_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK30_ACCESS = "RW";
pub const SIO_SPINLOCK31_OFFSET = _u(@as(c_int, 0x0000017c));
pub const SIO_SPINLOCK31_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_SPINLOCK31_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_SPINLOCK31_MSB = _u(@as(c_int, 31));
pub const SIO_SPINLOCK31_LSB = _u(@as(c_int, 0));
pub const SIO_SPINLOCK31_ACCESS = "RW";
pub const SIO_DOORBELL_OUT_SET_OFFSET = _u(@as(c_int, 0x00000180));
pub const SIO_DOORBELL_OUT_SET_BITS = _u(@as(c_int, 0x000000ff));
pub const SIO_DOORBELL_OUT_SET_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_DOORBELL_OUT_SET_MSB = _u(@as(c_int, 7));
pub const SIO_DOORBELL_OUT_SET_LSB = _u(@as(c_int, 0));
pub const SIO_DOORBELL_OUT_SET_ACCESS = "RW";
pub const SIO_DOORBELL_OUT_CLR_OFFSET = _u(@as(c_int, 0x00000184));
pub const SIO_DOORBELL_OUT_CLR_BITS = _u(@as(c_int, 0x000000ff));
pub const SIO_DOORBELL_OUT_CLR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_DOORBELL_OUT_CLR_MSB = _u(@as(c_int, 7));
pub const SIO_DOORBELL_OUT_CLR_LSB = _u(@as(c_int, 0));
pub const SIO_DOORBELL_OUT_CLR_ACCESS = "WC";
pub const SIO_DOORBELL_IN_SET_OFFSET = _u(@as(c_int, 0x00000188));
pub const SIO_DOORBELL_IN_SET_BITS = _u(@as(c_int, 0x000000ff));
pub const SIO_DOORBELL_IN_SET_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_DOORBELL_IN_SET_MSB = _u(@as(c_int, 7));
pub const SIO_DOORBELL_IN_SET_LSB = _u(@as(c_int, 0));
pub const SIO_DOORBELL_IN_SET_ACCESS = "RW";
pub const SIO_DOORBELL_IN_CLR_OFFSET = _u(@as(c_int, 0x0000018c));
pub const SIO_DOORBELL_IN_CLR_BITS = _u(@as(c_int, 0x000000ff));
pub const SIO_DOORBELL_IN_CLR_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_DOORBELL_IN_CLR_MSB = _u(@as(c_int, 7));
pub const SIO_DOORBELL_IN_CLR_LSB = _u(@as(c_int, 0));
pub const SIO_DOORBELL_IN_CLR_ACCESS = "WC";
pub const SIO_PERI_NONSEC_OFFSET = _u(@as(c_int, 0x00000190));
pub const SIO_PERI_NONSEC_BITS = _u(@as(c_int, 0x00000023));
pub const SIO_PERI_NONSEC_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_PERI_NONSEC_TMDS_RESET = _u(@as(c_int, 0x0));
pub const SIO_PERI_NONSEC_TMDS_BITS = _u(@as(c_int, 0x00000020));
pub const SIO_PERI_NONSEC_TMDS_MSB = _u(@as(c_int, 5));
pub const SIO_PERI_NONSEC_TMDS_LSB = _u(@as(c_int, 5));
pub const SIO_PERI_NONSEC_TMDS_ACCESS = "RW";
pub const SIO_PERI_NONSEC_INTERP1_RESET = _u(@as(c_int, 0x0));
pub const SIO_PERI_NONSEC_INTERP1_BITS = _u(@as(c_int, 0x00000002));
pub const SIO_PERI_NONSEC_INTERP1_MSB = _u(@as(c_int, 1));
pub const SIO_PERI_NONSEC_INTERP1_LSB = _u(@as(c_int, 1));
pub const SIO_PERI_NONSEC_INTERP1_ACCESS = "RW";
pub const SIO_PERI_NONSEC_INTERP0_RESET = _u(@as(c_int, 0x0));
pub const SIO_PERI_NONSEC_INTERP0_BITS = _u(@as(c_int, 0x00000001));
pub const SIO_PERI_NONSEC_INTERP0_MSB = _u(@as(c_int, 0));
pub const SIO_PERI_NONSEC_INTERP0_LSB = _u(@as(c_int, 0));
pub const SIO_PERI_NONSEC_INTERP0_ACCESS = "RW";
pub const SIO_RISCV_SOFTIRQ_OFFSET = _u(@as(c_int, 0x000001a0));
pub const SIO_RISCV_SOFTIRQ_BITS = _u(@as(c_int, 0x00000303));
pub const SIO_RISCV_SOFTIRQ_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_RISCV_SOFTIRQ_CORE1_CLR_RESET = _u(@as(c_int, 0x0));
pub const SIO_RISCV_SOFTIRQ_CORE1_CLR_BITS = _u(@as(c_int, 0x00000200));
pub const SIO_RISCV_SOFTIRQ_CORE1_CLR_MSB = _u(@as(c_int, 9));
pub const SIO_RISCV_SOFTIRQ_CORE1_CLR_LSB = _u(@as(c_int, 9));
pub const SIO_RISCV_SOFTIRQ_CORE1_CLR_ACCESS = "RW";
pub const SIO_RISCV_SOFTIRQ_CORE0_CLR_RESET = _u(@as(c_int, 0x0));
pub const SIO_RISCV_SOFTIRQ_CORE0_CLR_BITS = _u(@as(c_int, 0x00000100));
pub const SIO_RISCV_SOFTIRQ_CORE0_CLR_MSB = _u(@as(c_int, 8));
pub const SIO_RISCV_SOFTIRQ_CORE0_CLR_LSB = _u(@as(c_int, 8));
pub const SIO_RISCV_SOFTIRQ_CORE0_CLR_ACCESS = "RW";
pub const SIO_RISCV_SOFTIRQ_CORE1_SET_RESET = _u(@as(c_int, 0x0));
pub const SIO_RISCV_SOFTIRQ_CORE1_SET_BITS = _u(@as(c_int, 0x00000002));
pub const SIO_RISCV_SOFTIRQ_CORE1_SET_MSB = _u(@as(c_int, 1));
pub const SIO_RISCV_SOFTIRQ_CORE1_SET_LSB = _u(@as(c_int, 1));
pub const SIO_RISCV_SOFTIRQ_CORE1_SET_ACCESS = "RW";
pub const SIO_RISCV_SOFTIRQ_CORE0_SET_RESET = _u(@as(c_int, 0x0));
pub const SIO_RISCV_SOFTIRQ_CORE0_SET_BITS = _u(@as(c_int, 0x00000001));
pub const SIO_RISCV_SOFTIRQ_CORE0_SET_MSB = _u(@as(c_int, 0));
pub const SIO_RISCV_SOFTIRQ_CORE0_SET_LSB = _u(@as(c_int, 0));
pub const SIO_RISCV_SOFTIRQ_CORE0_SET_ACCESS = "RW";
pub const SIO_MTIME_CTRL_OFFSET = _u(@as(c_int, 0x000001a4));
pub const SIO_MTIME_CTRL_BITS = _u(@as(c_int, 0x0000000f));
pub const SIO_MTIME_CTRL_RESET = _u(@as(c_int, 0x0000000d));
pub const SIO_MTIME_CTRL_DBGPAUSE_CORE1_RESET = _u(@as(c_int, 0x1));
pub const SIO_MTIME_CTRL_DBGPAUSE_CORE1_BITS = _u(@as(c_int, 0x00000008));
pub const SIO_MTIME_CTRL_DBGPAUSE_CORE1_MSB = _u(@as(c_int, 3));
pub const SIO_MTIME_CTRL_DBGPAUSE_CORE1_LSB = _u(@as(c_int, 3));
pub const SIO_MTIME_CTRL_DBGPAUSE_CORE1_ACCESS = "RW";
pub const SIO_MTIME_CTRL_DBGPAUSE_CORE0_RESET = _u(@as(c_int, 0x1));
pub const SIO_MTIME_CTRL_DBGPAUSE_CORE0_BITS = _u(@as(c_int, 0x00000004));
pub const SIO_MTIME_CTRL_DBGPAUSE_CORE0_MSB = _u(@as(c_int, 2));
pub const SIO_MTIME_CTRL_DBGPAUSE_CORE0_LSB = _u(@as(c_int, 2));
pub const SIO_MTIME_CTRL_DBGPAUSE_CORE0_ACCESS = "RW";
pub const SIO_MTIME_CTRL_FULLSPEED_RESET = _u(@as(c_int, 0x0));
pub const SIO_MTIME_CTRL_FULLSPEED_BITS = _u(@as(c_int, 0x00000002));
pub const SIO_MTIME_CTRL_FULLSPEED_MSB = _u(@as(c_int, 1));
pub const SIO_MTIME_CTRL_FULLSPEED_LSB = _u(@as(c_int, 1));
pub const SIO_MTIME_CTRL_FULLSPEED_ACCESS = "RW";
pub const SIO_MTIME_CTRL_EN_RESET = _u(@as(c_int, 0x1));
pub const SIO_MTIME_CTRL_EN_BITS = _u(@as(c_int, 0x00000001));
pub const SIO_MTIME_CTRL_EN_MSB = _u(@as(c_int, 0));
pub const SIO_MTIME_CTRL_EN_LSB = _u(@as(c_int, 0));
pub const SIO_MTIME_CTRL_EN_ACCESS = "RW";
pub const SIO_MTIME_OFFSET = _u(@as(c_int, 0x000001b0));
pub const SIO_MTIME_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_MTIME_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_MTIME_MSB = _u(@as(c_int, 31));
pub const SIO_MTIME_LSB = _u(@as(c_int, 0));
pub const SIO_MTIME_ACCESS = "RW";
pub const SIO_MTIMEH_OFFSET = _u(@as(c_int, 0x000001b4));
pub const SIO_MTIMEH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_MTIMEH_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_MTIMEH_MSB = _u(@as(c_int, 31));
pub const SIO_MTIMEH_LSB = _u(@as(c_int, 0));
pub const SIO_MTIMEH_ACCESS = "RW";
pub const SIO_MTIMECMP_OFFSET = _u(@as(c_int, 0x000001b8));
pub const SIO_MTIMECMP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_MTIMECMP_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_MTIMECMP_MSB = _u(@as(c_int, 31));
pub const SIO_MTIMECMP_LSB = _u(@as(c_int, 0));
pub const SIO_MTIMECMP_ACCESS = "RW";
pub const SIO_MTIMECMPH_OFFSET = _u(@as(c_int, 0x000001bc));
pub const SIO_MTIMECMPH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_MTIMECMPH_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_MTIMECMPH_MSB = _u(@as(c_int, 31));
pub const SIO_MTIMECMPH_LSB = _u(@as(c_int, 0));
pub const SIO_MTIMECMPH_ACCESS = "RW";
pub const SIO_TMDS_CTRL_OFFSET = _u(@as(c_int, 0x000001c0));
pub const SIO_TMDS_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1f9fffff, .hex));
pub const SIO_TMDS_CTRL_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_TMDS_CTRL_CLEAR_BALANCE_RESET = _u(@as(c_int, 0x0));
pub const SIO_TMDS_CTRL_CLEAR_BALANCE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const SIO_TMDS_CTRL_CLEAR_BALANCE_MSB = _u(@as(c_int, 28));
pub const SIO_TMDS_CTRL_CLEAR_BALANCE_LSB = _u(@as(c_int, 28));
pub const SIO_TMDS_CTRL_CLEAR_BALANCE_ACCESS = "SC";
pub const SIO_TMDS_CTRL_PIX2_NOSHIFT_RESET = _u(@as(c_int, 0x0));
pub const SIO_TMDS_CTRL_PIX2_NOSHIFT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const SIO_TMDS_CTRL_PIX2_NOSHIFT_MSB = _u(@as(c_int, 27));
pub const SIO_TMDS_CTRL_PIX2_NOSHIFT_LSB = _u(@as(c_int, 27));
pub const SIO_TMDS_CTRL_PIX2_NOSHIFT_ACCESS = "RW";
pub const SIO_TMDS_CTRL_PIX_SHIFT_RESET = _u(@as(c_int, 0x0));
pub const SIO_TMDS_CTRL_PIX_SHIFT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x07000000, .hex));
pub const SIO_TMDS_CTRL_PIX_SHIFT_MSB = _u(@as(c_int, 26));
pub const SIO_TMDS_CTRL_PIX_SHIFT_LSB = _u(@as(c_int, 24));
pub const SIO_TMDS_CTRL_PIX_SHIFT_ACCESS = "RW";
pub const SIO_TMDS_CTRL_PIX_SHIFT_VALUE_0 = _u(@as(c_int, 0x0));
pub const SIO_TMDS_CTRL_PIX_SHIFT_VALUE_1 = _u(@as(c_int, 0x1));
pub const SIO_TMDS_CTRL_PIX_SHIFT_VALUE_2 = _u(@as(c_int, 0x2));
pub const SIO_TMDS_CTRL_PIX_SHIFT_VALUE_4 = _u(@as(c_int, 0x3));
pub const SIO_TMDS_CTRL_PIX_SHIFT_VALUE_8 = _u(@as(c_int, 0x4));
pub const SIO_TMDS_CTRL_PIX_SHIFT_VALUE_16 = _u(@as(c_int, 0x5));
pub const SIO_TMDS_CTRL_INTERLEAVE_RESET = _u(@as(c_int, 0x0));
pub const SIO_TMDS_CTRL_INTERLEAVE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const SIO_TMDS_CTRL_INTERLEAVE_MSB = _u(@as(c_int, 23));
pub const SIO_TMDS_CTRL_INTERLEAVE_LSB = _u(@as(c_int, 23));
pub const SIO_TMDS_CTRL_INTERLEAVE_ACCESS = "RW";
pub const SIO_TMDS_CTRL_L2_NBITS_RESET = _u(@as(c_int, 0x0));
pub const SIO_TMDS_CTRL_L2_NBITS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x001c0000, .hex));
pub const SIO_TMDS_CTRL_L2_NBITS_MSB = _u(@as(c_int, 20));
pub const SIO_TMDS_CTRL_L2_NBITS_LSB = _u(@as(c_int, 18));
pub const SIO_TMDS_CTRL_L2_NBITS_ACCESS = "RW";
pub const SIO_TMDS_CTRL_L1_NBITS_RESET = _u(@as(c_int, 0x0));
pub const SIO_TMDS_CTRL_L1_NBITS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00038000, .hex));
pub const SIO_TMDS_CTRL_L1_NBITS_MSB = _u(@as(c_int, 17));
pub const SIO_TMDS_CTRL_L1_NBITS_LSB = _u(@as(c_int, 15));
pub const SIO_TMDS_CTRL_L1_NBITS_ACCESS = "RW";
pub const SIO_TMDS_CTRL_L0_NBITS_RESET = _u(@as(c_int, 0x0));
pub const SIO_TMDS_CTRL_L0_NBITS_BITS = _u(@as(c_int, 0x00007000));
pub const SIO_TMDS_CTRL_L0_NBITS_MSB = _u(@as(c_int, 14));
pub const SIO_TMDS_CTRL_L0_NBITS_LSB = _u(@as(c_int, 12));
pub const SIO_TMDS_CTRL_L0_NBITS_ACCESS = "RW";
pub const SIO_TMDS_CTRL_L2_ROT_RESET = _u(@as(c_int, 0x0));
pub const SIO_TMDS_CTRL_L2_ROT_BITS = _u(@as(c_int, 0x00000f00));
pub const SIO_TMDS_CTRL_L2_ROT_MSB = _u(@as(c_int, 11));
pub const SIO_TMDS_CTRL_L2_ROT_LSB = _u(@as(c_int, 8));
pub const SIO_TMDS_CTRL_L2_ROT_ACCESS = "RW";
pub const SIO_TMDS_CTRL_L1_ROT_RESET = _u(@as(c_int, 0x0));
pub const SIO_TMDS_CTRL_L1_ROT_BITS = _u(@as(c_int, 0x000000f0));
pub const SIO_TMDS_CTRL_L1_ROT_MSB = _u(@as(c_int, 7));
pub const SIO_TMDS_CTRL_L1_ROT_LSB = _u(@as(c_int, 4));
pub const SIO_TMDS_CTRL_L1_ROT_ACCESS = "RW";
pub const SIO_TMDS_CTRL_L0_ROT_RESET = _u(@as(c_int, 0x0));
pub const SIO_TMDS_CTRL_L0_ROT_BITS = _u(@as(c_int, 0x0000000f));
pub const SIO_TMDS_CTRL_L0_ROT_MSB = _u(@as(c_int, 3));
pub const SIO_TMDS_CTRL_L0_ROT_LSB = _u(@as(c_int, 0));
pub const SIO_TMDS_CTRL_L0_ROT_ACCESS = "RW";
pub const SIO_TMDS_WDATA_OFFSET = _u(@as(c_int, 0x000001c4));
pub const SIO_TMDS_WDATA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_TMDS_WDATA_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_TMDS_WDATA_MSB = _u(@as(c_int, 31));
pub const SIO_TMDS_WDATA_LSB = _u(@as(c_int, 0));
pub const SIO_TMDS_WDATA_ACCESS = "WO";
pub const SIO_TMDS_PEEK_SINGLE_OFFSET = _u(@as(c_int, 0x000001c8));
pub const SIO_TMDS_PEEK_SINGLE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_TMDS_PEEK_SINGLE_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_TMDS_PEEK_SINGLE_MSB = _u(@as(c_int, 31));
pub const SIO_TMDS_PEEK_SINGLE_LSB = _u(@as(c_int, 0));
pub const SIO_TMDS_PEEK_SINGLE_ACCESS = "RF";
pub const SIO_TMDS_POP_SINGLE_OFFSET = _u(@as(c_int, 0x000001cc));
pub const SIO_TMDS_POP_SINGLE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_TMDS_POP_SINGLE_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_TMDS_POP_SINGLE_MSB = _u(@as(c_int, 31));
pub const SIO_TMDS_POP_SINGLE_LSB = _u(@as(c_int, 0));
pub const SIO_TMDS_POP_SINGLE_ACCESS = "RF";
pub const SIO_TMDS_PEEK_DOUBLE_L0_OFFSET = _u(@as(c_int, 0x000001d0));
pub const SIO_TMDS_PEEK_DOUBLE_L0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_TMDS_PEEK_DOUBLE_L0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_TMDS_PEEK_DOUBLE_L0_MSB = _u(@as(c_int, 31));
pub const SIO_TMDS_PEEK_DOUBLE_L0_LSB = _u(@as(c_int, 0));
pub const SIO_TMDS_PEEK_DOUBLE_L0_ACCESS = "RF";
pub const SIO_TMDS_POP_DOUBLE_L0_OFFSET = _u(@as(c_int, 0x000001d4));
pub const SIO_TMDS_POP_DOUBLE_L0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_TMDS_POP_DOUBLE_L0_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_TMDS_POP_DOUBLE_L0_MSB = _u(@as(c_int, 31));
pub const SIO_TMDS_POP_DOUBLE_L0_LSB = _u(@as(c_int, 0));
pub const SIO_TMDS_POP_DOUBLE_L0_ACCESS = "RF";
pub const SIO_TMDS_PEEK_DOUBLE_L1_OFFSET = _u(@as(c_int, 0x000001d8));
pub const SIO_TMDS_PEEK_DOUBLE_L1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_TMDS_PEEK_DOUBLE_L1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_TMDS_PEEK_DOUBLE_L1_MSB = _u(@as(c_int, 31));
pub const SIO_TMDS_PEEK_DOUBLE_L1_LSB = _u(@as(c_int, 0));
pub const SIO_TMDS_PEEK_DOUBLE_L1_ACCESS = "RF";
pub const SIO_TMDS_POP_DOUBLE_L1_OFFSET = _u(@as(c_int, 0x000001dc));
pub const SIO_TMDS_POP_DOUBLE_L1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_TMDS_POP_DOUBLE_L1_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_TMDS_POP_DOUBLE_L1_MSB = _u(@as(c_int, 31));
pub const SIO_TMDS_POP_DOUBLE_L1_LSB = _u(@as(c_int, 0));
pub const SIO_TMDS_POP_DOUBLE_L1_ACCESS = "RF";
pub const SIO_TMDS_PEEK_DOUBLE_L2_OFFSET = _u(@as(c_int, 0x000001e0));
pub const SIO_TMDS_PEEK_DOUBLE_L2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_TMDS_PEEK_DOUBLE_L2_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_TMDS_PEEK_DOUBLE_L2_MSB = _u(@as(c_int, 31));
pub const SIO_TMDS_PEEK_DOUBLE_L2_LSB = _u(@as(c_int, 0));
pub const SIO_TMDS_PEEK_DOUBLE_L2_ACCESS = "RF";
pub const SIO_TMDS_POP_DOUBLE_L2_OFFSET = _u(@as(c_int, 0x000001e4));
pub const SIO_TMDS_POP_DOUBLE_L2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const SIO_TMDS_POP_DOUBLE_L2_RESET = _u(@as(c_int, 0x00000000));
pub const SIO_TMDS_POP_DOUBLE_L2_MSB = _u(@as(c_int, 31));
pub const SIO_TMDS_POP_DOUBLE_L2_LSB = _u(@as(c_int, 0));
pub const SIO_TMDS_POP_DOUBLE_L2_ACCESS = "RF";
pub const PICO_STACK_SIZE = _u(@as(c_int, 0x800));
pub const PICO_HEAP_SIZE = _u(@as(c_int, 0x800));
pub const PICO_NO_RAM_VECTOR_TABLE = @as(c_int, 0);
pub const PICO_USE_STACK_GUARDS = @as(c_int, 0);
pub const PICO_CLKDIV_ROUND_NEAREST = @as(c_int, 1);
pub const __fast_mul = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/pico_platform/include/pico/platform.h:247:9
pub const _PICO_ERROR_H = "";
pub const _HARDWARE_STRUCTS_ADC_H = "";
pub const _HARDWARE_ADDRESS_MAPPED_H = "";
pub inline fn check_hw_layout(@"type": anytype, member: anytype, offset: anytype) @TypeOf(static_assert(offsetof(@"type", member) == offset, "hw offset mismatch")) {
    _ = &@"type";
    _ = &member;
    _ = &offset;
    return static_assert(offsetof(@"type", member) == offset, "hw offset mismatch");
}
pub inline fn check_hw_size(@"type": anytype, size: anytype) @TypeOf(static_assert(@import("std").zig.c_translation.sizeof(@"type") == size, "hw size mismatch")) {
    _ = &@"type";
    _ = &size;
    return static_assert(@import("std").zig.c_translation.sizeof(@"type") == size, "hw size mismatch");
}
pub const PARAM_ASSERTIONS_ENABLED_ADDRESS_ALIAS = @as(c_int, 0);
pub const _REG_ = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_base/include/hardware/address_mapped.h:84:9
pub inline fn hw_alias_check_addr(addr: anytype) usize {
    _ = &addr;
    return @import("std").zig.c_translation.cast(usize, addr);
}
pub inline fn hw_set_alias_untyped(addr: anytype) ?*anyopaque {
    _ = &addr;
    return @import("std").zig.c_translation.cast(?*anyopaque, REG_ALIAS_SET_BITS + hw_alias_check_addr(addr));
}
pub inline fn hw_clear_alias_untyped(addr: anytype) ?*anyopaque {
    _ = &addr;
    return @import("std").zig.c_translation.cast(?*anyopaque, REG_ALIAS_CLR_BITS + hw_alias_check_addr(addr));
}
pub inline fn hw_xor_alias_untyped(addr: anytype) ?*anyopaque {
    _ = &addr;
    return @import("std").zig.c_translation.cast(?*anyopaque, REG_ALIAS_XOR_BITS + hw_alias_check_addr(addr));
}
pub const hw_set_alias = @compileError("unable to translate C expr: unexpected token 'typeof'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_base/include/hardware/address_mapped.h:122:9
pub const hw_clear_alias = @compileError("unable to translate C expr: unexpected token 'typeof'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_base/include/hardware/address_mapped.h:123:9
pub const hw_xor_alias = @compileError("unable to translate C expr: unexpected token 'typeof'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_base/include/hardware/address_mapped.h:124:9
pub const xip_noalloc_alias = @compileError("unable to translate macro: undefined identifier `xip_noalloc_alias_untyped`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_base/include/hardware/address_mapped.h:125:9
pub const xip_nocache_alias = @compileError("unable to translate macro: undefined identifier `xip_nocache_alias_untyped`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_base/include/hardware/address_mapped.h:126:9
pub const xip_nocache_noalloc_alias = @compileError("unable to translate macro: undefined identifier `xip_nocache_noalloc_alias_untyped`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_base/include/hardware/address_mapped.h:127:9
pub const _HARDWARE_STRUCTS_ACCESSCTRL_H = "";
pub const _HARDWARE_REGS_ACCESSCTRL_H = "";
pub const ACCESSCTRL_LOCK_OFFSET = _u(@as(c_int, 0x00000000));
pub const ACCESSCTRL_LOCK_BITS = _u(@as(c_int, 0x0000000f));
pub const ACCESSCTRL_LOCK_RESET = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_LOCK_DEBUG_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_LOCK_DEBUG_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_LOCK_DEBUG_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_LOCK_DEBUG_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_LOCK_DEBUG_ACCESS = "RW";
pub const ACCESSCTRL_LOCK_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_LOCK_DMA_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_LOCK_DMA_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_LOCK_DMA_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_LOCK_DMA_ACCESS = "RO";
pub const ACCESSCTRL_LOCK_CORE1_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_LOCK_CORE1_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_LOCK_CORE1_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_LOCK_CORE1_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_LOCK_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_LOCK_CORE0_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_LOCK_CORE0_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_LOCK_CORE0_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_LOCK_CORE0_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_LOCK_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_FORCE_CORE_NS_OFFSET = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_FORCE_CORE_NS_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_FORCE_CORE_NS_RESET = _u(@as(c_int, 0x00000000));
pub const ACCESSCTRL_FORCE_CORE_NS_CORE1_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_FORCE_CORE_NS_CORE1_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_FORCE_CORE_NS_CORE1_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_FORCE_CORE_NS_CORE1_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_FORCE_CORE_NS_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_CFGRESET_OFFSET = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_CFGRESET_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_CFGRESET_RESET = _u(@as(c_int, 0x00000000));
pub const ACCESSCTRL_CFGRESET_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_CFGRESET_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_CFGRESET_ACCESS = "SC";
pub const ACCESSCTRL_GPIO_NSMASK0_OFFSET = _u(@as(c_int, 0x0000000c));
pub const ACCESSCTRL_GPIO_NSMASK0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const ACCESSCTRL_GPIO_NSMASK0_RESET = _u(@as(c_int, 0x00000000));
pub const ACCESSCTRL_GPIO_NSMASK0_MSB = _u(@as(c_int, 31));
pub const ACCESSCTRL_GPIO_NSMASK0_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_GPIO_NSMASK0_ACCESS = "RW";
pub const ACCESSCTRL_GPIO_NSMASK1_OFFSET = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_GPIO_NSMASK1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00ffff, .hex));
pub const ACCESSCTRL_GPIO_NSMASK1_RESET = _u(@as(c_int, 0x00000000));
pub const ACCESSCTRL_GPIO_NSMASK1_QSPI_SD_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_GPIO_NSMASK1_QSPI_SD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const ACCESSCTRL_GPIO_NSMASK1_QSPI_SD_MSB = _u(@as(c_int, 31));
pub const ACCESSCTRL_GPIO_NSMASK1_QSPI_SD_LSB = _u(@as(c_int, 28));
pub const ACCESSCTRL_GPIO_NSMASK1_QSPI_SD_ACCESS = "RW";
pub const ACCESSCTRL_GPIO_NSMASK1_QSPI_CSN_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_GPIO_NSMASK1_QSPI_CSN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const ACCESSCTRL_GPIO_NSMASK1_QSPI_CSN_MSB = _u(@as(c_int, 27));
pub const ACCESSCTRL_GPIO_NSMASK1_QSPI_CSN_LSB = _u(@as(c_int, 27));
pub const ACCESSCTRL_GPIO_NSMASK1_QSPI_CSN_ACCESS = "RW";
pub const ACCESSCTRL_GPIO_NSMASK1_QSPI_SCK_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_GPIO_NSMASK1_QSPI_SCK_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const ACCESSCTRL_GPIO_NSMASK1_QSPI_SCK_MSB = _u(@as(c_int, 26));
pub const ACCESSCTRL_GPIO_NSMASK1_QSPI_SCK_LSB = _u(@as(c_int, 26));
pub const ACCESSCTRL_GPIO_NSMASK1_QSPI_SCK_ACCESS = "RW";
pub const ACCESSCTRL_GPIO_NSMASK1_USB_DM_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_GPIO_NSMASK1_USB_DM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const ACCESSCTRL_GPIO_NSMASK1_USB_DM_MSB = _u(@as(c_int, 25));
pub const ACCESSCTRL_GPIO_NSMASK1_USB_DM_LSB = _u(@as(c_int, 25));
pub const ACCESSCTRL_GPIO_NSMASK1_USB_DM_ACCESS = "RW";
pub const ACCESSCTRL_GPIO_NSMASK1_USB_DP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_GPIO_NSMASK1_USB_DP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const ACCESSCTRL_GPIO_NSMASK1_USB_DP_MSB = _u(@as(c_int, 24));
pub const ACCESSCTRL_GPIO_NSMASK1_USB_DP_LSB = _u(@as(c_int, 24));
pub const ACCESSCTRL_GPIO_NSMASK1_USB_DP_ACCESS = "RW";
pub const ACCESSCTRL_GPIO_NSMASK1_GPIO_RESET = _u(@as(c_int, 0x0000));
pub const ACCESSCTRL_GPIO_NSMASK1_GPIO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const ACCESSCTRL_GPIO_NSMASK1_GPIO_MSB = _u(@as(c_int, 15));
pub const ACCESSCTRL_GPIO_NSMASK1_GPIO_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_GPIO_NSMASK1_GPIO_ACCESS = "RW";
pub const ACCESSCTRL_ROM_OFFSET = _u(@as(c_int, 0x00000014));
pub const ACCESSCTRL_ROM_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_ROM_RESET = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_ROM_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_ROM_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_ROM_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_ROM_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_ROM_DBG_ACCESS = "RW";
pub const ACCESSCTRL_ROM_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_ROM_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_ROM_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_ROM_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_ROM_DMA_ACCESS = "RW";
pub const ACCESSCTRL_ROM_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_ROM_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_ROM_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_ROM_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_ROM_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_ROM_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_ROM_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_ROM_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_ROM_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_ROM_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_ROM_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_ROM_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_ROM_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_ROM_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_ROM_SP_ACCESS = "RW";
pub const ACCESSCTRL_ROM_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_ROM_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_ROM_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_ROM_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_ROM_SU_ACCESS = "RW";
pub const ACCESSCTRL_ROM_NSP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_ROM_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_ROM_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_ROM_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_ROM_NSP_ACCESS = "RW";
pub const ACCESSCTRL_ROM_NSU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_ROM_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_ROM_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_ROM_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_ROM_NSU_ACCESS = "RW";
pub const ACCESSCTRL_XIP_MAIN_OFFSET = _u(@as(c_int, 0x00000018));
pub const ACCESSCTRL_XIP_MAIN_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_XIP_MAIN_RESET = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_XIP_MAIN_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_MAIN_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_XIP_MAIN_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_XIP_MAIN_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_XIP_MAIN_DBG_ACCESS = "RW";
pub const ACCESSCTRL_XIP_MAIN_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_MAIN_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_XIP_MAIN_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_XIP_MAIN_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_XIP_MAIN_DMA_ACCESS = "RW";
pub const ACCESSCTRL_XIP_MAIN_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_MAIN_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_XIP_MAIN_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_XIP_MAIN_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_XIP_MAIN_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_XIP_MAIN_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_MAIN_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_XIP_MAIN_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_XIP_MAIN_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_XIP_MAIN_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_XIP_MAIN_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_MAIN_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_XIP_MAIN_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_XIP_MAIN_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_XIP_MAIN_SP_ACCESS = "RW";
pub const ACCESSCTRL_XIP_MAIN_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_MAIN_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_XIP_MAIN_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_XIP_MAIN_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_XIP_MAIN_SU_ACCESS = "RW";
pub const ACCESSCTRL_XIP_MAIN_NSP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_MAIN_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_XIP_MAIN_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_XIP_MAIN_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_XIP_MAIN_NSP_ACCESS = "RW";
pub const ACCESSCTRL_XIP_MAIN_NSU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_MAIN_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_XIP_MAIN_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_XIP_MAIN_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_XIP_MAIN_NSU_ACCESS = "RW";
pub const ACCESSCTRL_SRAM0_OFFSET = _u(@as(c_int, 0x0000001c));
pub const ACCESSCTRL_SRAM0_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SRAM0_RESET = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SRAM0_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM0_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_SRAM0_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SRAM0_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SRAM0_DBG_ACCESS = "RW";
pub const ACCESSCTRL_SRAM0_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM0_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_SRAM0_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SRAM0_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SRAM0_DMA_ACCESS = "RW";
pub const ACCESSCTRL_SRAM0_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM0_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_SRAM0_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SRAM0_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SRAM0_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_SRAM0_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM0_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_SRAM0_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SRAM0_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SRAM0_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_SRAM0_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM0_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_SRAM0_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SRAM0_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SRAM0_SP_ACCESS = "RW";
pub const ACCESSCTRL_SRAM0_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM0_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_SRAM0_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SRAM0_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SRAM0_SU_ACCESS = "RW";
pub const ACCESSCTRL_SRAM0_NSP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM0_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_SRAM0_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SRAM0_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SRAM0_NSP_ACCESS = "RW";
pub const ACCESSCTRL_SRAM0_NSU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM0_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_SRAM0_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SRAM0_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SRAM0_NSU_ACCESS = "RW";
pub const ACCESSCTRL_SRAM1_OFFSET = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_SRAM1_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SRAM1_RESET = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SRAM1_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM1_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_SRAM1_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SRAM1_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SRAM1_DBG_ACCESS = "RW";
pub const ACCESSCTRL_SRAM1_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM1_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_SRAM1_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SRAM1_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SRAM1_DMA_ACCESS = "RW";
pub const ACCESSCTRL_SRAM1_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM1_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_SRAM1_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SRAM1_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SRAM1_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_SRAM1_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM1_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_SRAM1_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SRAM1_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SRAM1_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_SRAM1_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM1_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_SRAM1_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SRAM1_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SRAM1_SP_ACCESS = "RW";
pub const ACCESSCTRL_SRAM1_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM1_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_SRAM1_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SRAM1_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SRAM1_SU_ACCESS = "RW";
pub const ACCESSCTRL_SRAM1_NSP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM1_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_SRAM1_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SRAM1_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SRAM1_NSP_ACCESS = "RW";
pub const ACCESSCTRL_SRAM1_NSU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM1_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_SRAM1_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SRAM1_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SRAM1_NSU_ACCESS = "RW";
pub const ACCESSCTRL_SRAM2_OFFSET = _u(@as(c_int, 0x00000024));
pub const ACCESSCTRL_SRAM2_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SRAM2_RESET = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SRAM2_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM2_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_SRAM2_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SRAM2_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SRAM2_DBG_ACCESS = "RW";
pub const ACCESSCTRL_SRAM2_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM2_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_SRAM2_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SRAM2_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SRAM2_DMA_ACCESS = "RW";
pub const ACCESSCTRL_SRAM2_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM2_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_SRAM2_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SRAM2_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SRAM2_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_SRAM2_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM2_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_SRAM2_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SRAM2_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SRAM2_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_SRAM2_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM2_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_SRAM2_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SRAM2_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SRAM2_SP_ACCESS = "RW";
pub const ACCESSCTRL_SRAM2_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM2_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_SRAM2_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SRAM2_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SRAM2_SU_ACCESS = "RW";
pub const ACCESSCTRL_SRAM2_NSP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM2_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_SRAM2_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SRAM2_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SRAM2_NSP_ACCESS = "RW";
pub const ACCESSCTRL_SRAM2_NSU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM2_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_SRAM2_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SRAM2_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SRAM2_NSU_ACCESS = "RW";
pub const ACCESSCTRL_SRAM3_OFFSET = _u(@as(c_int, 0x00000028));
pub const ACCESSCTRL_SRAM3_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SRAM3_RESET = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SRAM3_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM3_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_SRAM3_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SRAM3_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SRAM3_DBG_ACCESS = "RW";
pub const ACCESSCTRL_SRAM3_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM3_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_SRAM3_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SRAM3_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SRAM3_DMA_ACCESS = "RW";
pub const ACCESSCTRL_SRAM3_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM3_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_SRAM3_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SRAM3_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SRAM3_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_SRAM3_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM3_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_SRAM3_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SRAM3_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SRAM3_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_SRAM3_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM3_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_SRAM3_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SRAM3_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SRAM3_SP_ACCESS = "RW";
pub const ACCESSCTRL_SRAM3_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM3_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_SRAM3_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SRAM3_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SRAM3_SU_ACCESS = "RW";
pub const ACCESSCTRL_SRAM3_NSP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM3_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_SRAM3_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SRAM3_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SRAM3_NSP_ACCESS = "RW";
pub const ACCESSCTRL_SRAM3_NSU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM3_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_SRAM3_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SRAM3_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SRAM3_NSU_ACCESS = "RW";
pub const ACCESSCTRL_SRAM4_OFFSET = _u(@as(c_int, 0x0000002c));
pub const ACCESSCTRL_SRAM4_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SRAM4_RESET = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SRAM4_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM4_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_SRAM4_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SRAM4_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SRAM4_DBG_ACCESS = "RW";
pub const ACCESSCTRL_SRAM4_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM4_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_SRAM4_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SRAM4_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SRAM4_DMA_ACCESS = "RW";
pub const ACCESSCTRL_SRAM4_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM4_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_SRAM4_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SRAM4_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SRAM4_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_SRAM4_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM4_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_SRAM4_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SRAM4_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SRAM4_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_SRAM4_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM4_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_SRAM4_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SRAM4_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SRAM4_SP_ACCESS = "RW";
pub const ACCESSCTRL_SRAM4_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM4_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_SRAM4_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SRAM4_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SRAM4_SU_ACCESS = "RW";
pub const ACCESSCTRL_SRAM4_NSP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM4_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_SRAM4_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SRAM4_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SRAM4_NSP_ACCESS = "RW";
pub const ACCESSCTRL_SRAM4_NSU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM4_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_SRAM4_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SRAM4_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SRAM4_NSU_ACCESS = "RW";
pub const ACCESSCTRL_SRAM5_OFFSET = _u(@as(c_int, 0x00000030));
pub const ACCESSCTRL_SRAM5_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SRAM5_RESET = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SRAM5_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM5_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_SRAM5_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SRAM5_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SRAM5_DBG_ACCESS = "RW";
pub const ACCESSCTRL_SRAM5_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM5_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_SRAM5_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SRAM5_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SRAM5_DMA_ACCESS = "RW";
pub const ACCESSCTRL_SRAM5_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM5_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_SRAM5_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SRAM5_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SRAM5_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_SRAM5_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM5_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_SRAM5_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SRAM5_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SRAM5_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_SRAM5_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM5_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_SRAM5_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SRAM5_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SRAM5_SP_ACCESS = "RW";
pub const ACCESSCTRL_SRAM5_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM5_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_SRAM5_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SRAM5_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SRAM5_SU_ACCESS = "RW";
pub const ACCESSCTRL_SRAM5_NSP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM5_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_SRAM5_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SRAM5_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SRAM5_NSP_ACCESS = "RW";
pub const ACCESSCTRL_SRAM5_NSU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM5_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_SRAM5_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SRAM5_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SRAM5_NSU_ACCESS = "RW";
pub const ACCESSCTRL_SRAM6_OFFSET = _u(@as(c_int, 0x00000034));
pub const ACCESSCTRL_SRAM6_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SRAM6_RESET = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SRAM6_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM6_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_SRAM6_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SRAM6_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SRAM6_DBG_ACCESS = "RW";
pub const ACCESSCTRL_SRAM6_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM6_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_SRAM6_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SRAM6_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SRAM6_DMA_ACCESS = "RW";
pub const ACCESSCTRL_SRAM6_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM6_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_SRAM6_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SRAM6_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SRAM6_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_SRAM6_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM6_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_SRAM6_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SRAM6_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SRAM6_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_SRAM6_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM6_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_SRAM6_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SRAM6_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SRAM6_SP_ACCESS = "RW";
pub const ACCESSCTRL_SRAM6_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM6_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_SRAM6_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SRAM6_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SRAM6_SU_ACCESS = "RW";
pub const ACCESSCTRL_SRAM6_NSP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM6_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_SRAM6_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SRAM6_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SRAM6_NSP_ACCESS = "RW";
pub const ACCESSCTRL_SRAM6_NSU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM6_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_SRAM6_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SRAM6_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SRAM6_NSU_ACCESS = "RW";
pub const ACCESSCTRL_SRAM7_OFFSET = _u(@as(c_int, 0x00000038));
pub const ACCESSCTRL_SRAM7_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SRAM7_RESET = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SRAM7_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM7_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_SRAM7_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SRAM7_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SRAM7_DBG_ACCESS = "RW";
pub const ACCESSCTRL_SRAM7_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM7_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_SRAM7_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SRAM7_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SRAM7_DMA_ACCESS = "RW";
pub const ACCESSCTRL_SRAM7_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM7_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_SRAM7_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SRAM7_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SRAM7_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_SRAM7_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM7_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_SRAM7_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SRAM7_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SRAM7_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_SRAM7_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM7_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_SRAM7_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SRAM7_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SRAM7_SP_ACCESS = "RW";
pub const ACCESSCTRL_SRAM7_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM7_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_SRAM7_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SRAM7_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SRAM7_SU_ACCESS = "RW";
pub const ACCESSCTRL_SRAM7_NSP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM7_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_SRAM7_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SRAM7_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SRAM7_NSP_ACCESS = "RW";
pub const ACCESSCTRL_SRAM7_NSU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM7_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_SRAM7_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SRAM7_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SRAM7_NSU_ACCESS = "RW";
pub const ACCESSCTRL_SRAM8_OFFSET = _u(@as(c_int, 0x0000003c));
pub const ACCESSCTRL_SRAM8_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SRAM8_RESET = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SRAM8_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM8_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_SRAM8_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SRAM8_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SRAM8_DBG_ACCESS = "RW";
pub const ACCESSCTRL_SRAM8_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM8_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_SRAM8_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SRAM8_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SRAM8_DMA_ACCESS = "RW";
pub const ACCESSCTRL_SRAM8_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM8_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_SRAM8_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SRAM8_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SRAM8_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_SRAM8_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM8_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_SRAM8_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SRAM8_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SRAM8_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_SRAM8_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM8_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_SRAM8_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SRAM8_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SRAM8_SP_ACCESS = "RW";
pub const ACCESSCTRL_SRAM8_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM8_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_SRAM8_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SRAM8_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SRAM8_SU_ACCESS = "RW";
pub const ACCESSCTRL_SRAM8_NSP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM8_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_SRAM8_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SRAM8_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SRAM8_NSP_ACCESS = "RW";
pub const ACCESSCTRL_SRAM8_NSU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM8_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_SRAM8_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SRAM8_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SRAM8_NSU_ACCESS = "RW";
pub const ACCESSCTRL_SRAM9_OFFSET = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_SRAM9_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SRAM9_RESET = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SRAM9_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM9_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_SRAM9_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SRAM9_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SRAM9_DBG_ACCESS = "RW";
pub const ACCESSCTRL_SRAM9_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM9_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_SRAM9_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SRAM9_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SRAM9_DMA_ACCESS = "RW";
pub const ACCESSCTRL_SRAM9_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM9_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_SRAM9_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SRAM9_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SRAM9_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_SRAM9_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM9_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_SRAM9_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SRAM9_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SRAM9_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_SRAM9_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM9_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_SRAM9_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SRAM9_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SRAM9_SP_ACCESS = "RW";
pub const ACCESSCTRL_SRAM9_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM9_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_SRAM9_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SRAM9_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SRAM9_SU_ACCESS = "RW";
pub const ACCESSCTRL_SRAM9_NSP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM9_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_SRAM9_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SRAM9_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SRAM9_NSP_ACCESS = "RW";
pub const ACCESSCTRL_SRAM9_NSU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SRAM9_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_SRAM9_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SRAM9_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SRAM9_NSU_ACCESS = "RW";
pub const ACCESSCTRL_DMA_OFFSET = _u(@as(c_int, 0x00000044));
pub const ACCESSCTRL_DMA_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_DMA_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_DMA_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_DMA_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_DMA_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_DMA_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_DMA_DBG_ACCESS = "RW";
pub const ACCESSCTRL_DMA_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_DMA_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_DMA_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_DMA_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_DMA_DMA_ACCESS = "RW";
pub const ACCESSCTRL_DMA_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_DMA_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_DMA_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_DMA_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_DMA_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_DMA_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_DMA_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_DMA_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_DMA_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_DMA_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_DMA_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_DMA_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_DMA_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_DMA_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_DMA_SP_ACCESS = "RW";
pub const ACCESSCTRL_DMA_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_DMA_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_DMA_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_DMA_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_DMA_SU_ACCESS = "RW";
pub const ACCESSCTRL_DMA_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_DMA_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_DMA_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_DMA_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_DMA_NSP_ACCESS = "RW";
pub const ACCESSCTRL_DMA_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_DMA_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_DMA_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_DMA_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_DMA_NSU_ACCESS = "RW";
pub const ACCESSCTRL_USBCTRL_OFFSET = _u(@as(c_int, 0x00000048));
pub const ACCESSCTRL_USBCTRL_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_USBCTRL_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_USBCTRL_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_USBCTRL_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_USBCTRL_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_USBCTRL_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_USBCTRL_DBG_ACCESS = "RW";
pub const ACCESSCTRL_USBCTRL_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_USBCTRL_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_USBCTRL_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_USBCTRL_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_USBCTRL_DMA_ACCESS = "RW";
pub const ACCESSCTRL_USBCTRL_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_USBCTRL_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_USBCTRL_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_USBCTRL_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_USBCTRL_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_USBCTRL_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_USBCTRL_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_USBCTRL_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_USBCTRL_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_USBCTRL_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_USBCTRL_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_USBCTRL_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_USBCTRL_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_USBCTRL_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_USBCTRL_SP_ACCESS = "RW";
pub const ACCESSCTRL_USBCTRL_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_USBCTRL_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_USBCTRL_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_USBCTRL_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_USBCTRL_SU_ACCESS = "RW";
pub const ACCESSCTRL_USBCTRL_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_USBCTRL_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_USBCTRL_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_USBCTRL_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_USBCTRL_NSP_ACCESS = "RW";
pub const ACCESSCTRL_USBCTRL_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_USBCTRL_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_USBCTRL_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_USBCTRL_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_USBCTRL_NSU_ACCESS = "RW";
pub const ACCESSCTRL_PIO0_OFFSET = _u(@as(c_int, 0x0000004c));
pub const ACCESSCTRL_PIO0_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_PIO0_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_PIO0_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PIO0_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_PIO0_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_PIO0_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_PIO0_DBG_ACCESS = "RW";
pub const ACCESSCTRL_PIO0_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PIO0_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_PIO0_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_PIO0_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_PIO0_DMA_ACCESS = "RW";
pub const ACCESSCTRL_PIO0_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PIO0_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_PIO0_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_PIO0_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_PIO0_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_PIO0_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PIO0_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_PIO0_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_PIO0_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_PIO0_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_PIO0_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PIO0_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_PIO0_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_PIO0_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_PIO0_SP_ACCESS = "RW";
pub const ACCESSCTRL_PIO0_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PIO0_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_PIO0_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_PIO0_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_PIO0_SU_ACCESS = "RW";
pub const ACCESSCTRL_PIO0_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_PIO0_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_PIO0_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_PIO0_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_PIO0_NSP_ACCESS = "RW";
pub const ACCESSCTRL_PIO0_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_PIO0_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_PIO0_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_PIO0_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_PIO0_NSU_ACCESS = "RW";
pub const ACCESSCTRL_PIO1_OFFSET = _u(@as(c_int, 0x00000050));
pub const ACCESSCTRL_PIO1_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_PIO1_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_PIO1_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PIO1_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_PIO1_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_PIO1_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_PIO1_DBG_ACCESS = "RW";
pub const ACCESSCTRL_PIO1_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PIO1_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_PIO1_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_PIO1_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_PIO1_DMA_ACCESS = "RW";
pub const ACCESSCTRL_PIO1_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PIO1_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_PIO1_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_PIO1_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_PIO1_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_PIO1_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PIO1_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_PIO1_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_PIO1_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_PIO1_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_PIO1_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PIO1_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_PIO1_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_PIO1_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_PIO1_SP_ACCESS = "RW";
pub const ACCESSCTRL_PIO1_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PIO1_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_PIO1_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_PIO1_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_PIO1_SU_ACCESS = "RW";
pub const ACCESSCTRL_PIO1_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_PIO1_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_PIO1_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_PIO1_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_PIO1_NSP_ACCESS = "RW";
pub const ACCESSCTRL_PIO1_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_PIO1_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_PIO1_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_PIO1_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_PIO1_NSU_ACCESS = "RW";
pub const ACCESSCTRL_PIO2_OFFSET = _u(@as(c_int, 0x00000054));
pub const ACCESSCTRL_PIO2_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_PIO2_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_PIO2_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PIO2_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_PIO2_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_PIO2_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_PIO2_DBG_ACCESS = "RW";
pub const ACCESSCTRL_PIO2_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PIO2_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_PIO2_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_PIO2_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_PIO2_DMA_ACCESS = "RW";
pub const ACCESSCTRL_PIO2_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PIO2_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_PIO2_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_PIO2_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_PIO2_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_PIO2_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PIO2_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_PIO2_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_PIO2_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_PIO2_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_PIO2_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PIO2_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_PIO2_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_PIO2_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_PIO2_SP_ACCESS = "RW";
pub const ACCESSCTRL_PIO2_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PIO2_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_PIO2_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_PIO2_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_PIO2_SU_ACCESS = "RW";
pub const ACCESSCTRL_PIO2_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_PIO2_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_PIO2_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_PIO2_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_PIO2_NSP_ACCESS = "RW";
pub const ACCESSCTRL_PIO2_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_PIO2_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_PIO2_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_PIO2_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_PIO2_NSU_ACCESS = "RW";
pub const ACCESSCTRL_CORESIGHT_TRACE_OFFSET = _u(@as(c_int, 0x00000058));
pub const ACCESSCTRL_CORESIGHT_TRACE_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_CORESIGHT_TRACE_RESET = _u(@as(c_int, 0x000000b8));
pub const ACCESSCTRL_CORESIGHT_TRACE_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_CORESIGHT_TRACE_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_CORESIGHT_TRACE_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_CORESIGHT_TRACE_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_CORESIGHT_TRACE_DBG_ACCESS = "RW";
pub const ACCESSCTRL_CORESIGHT_TRACE_DMA_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_CORESIGHT_TRACE_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_CORESIGHT_TRACE_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_CORESIGHT_TRACE_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_CORESIGHT_TRACE_DMA_ACCESS = "RW";
pub const ACCESSCTRL_CORESIGHT_TRACE_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_CORESIGHT_TRACE_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_CORESIGHT_TRACE_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_CORESIGHT_TRACE_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_CORESIGHT_TRACE_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_CORESIGHT_TRACE_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_CORESIGHT_TRACE_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_CORESIGHT_TRACE_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_CORESIGHT_TRACE_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_CORESIGHT_TRACE_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_CORESIGHT_TRACE_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_CORESIGHT_TRACE_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_CORESIGHT_TRACE_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_CORESIGHT_TRACE_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_CORESIGHT_TRACE_SP_ACCESS = "RW";
pub const ACCESSCTRL_CORESIGHT_TRACE_SU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_CORESIGHT_TRACE_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_CORESIGHT_TRACE_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_CORESIGHT_TRACE_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_CORESIGHT_TRACE_SU_ACCESS = "RW";
pub const ACCESSCTRL_CORESIGHT_TRACE_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_CORESIGHT_TRACE_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_CORESIGHT_TRACE_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_CORESIGHT_TRACE_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_CORESIGHT_TRACE_NSP_ACCESS = "RW";
pub const ACCESSCTRL_CORESIGHT_TRACE_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_CORESIGHT_TRACE_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_CORESIGHT_TRACE_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_CORESIGHT_TRACE_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_CORESIGHT_TRACE_NSU_ACCESS = "RW";
pub const ACCESSCTRL_CORESIGHT_PERIPH_OFFSET = _u(@as(c_int, 0x0000005c));
pub const ACCESSCTRL_CORESIGHT_PERIPH_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_CORESIGHT_PERIPH_RESET = _u(@as(c_int, 0x000000b8));
pub const ACCESSCTRL_CORESIGHT_PERIPH_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_CORESIGHT_PERIPH_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_CORESIGHT_PERIPH_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_CORESIGHT_PERIPH_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_CORESIGHT_PERIPH_DBG_ACCESS = "RW";
pub const ACCESSCTRL_CORESIGHT_PERIPH_DMA_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_CORESIGHT_PERIPH_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_CORESIGHT_PERIPH_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_CORESIGHT_PERIPH_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_CORESIGHT_PERIPH_DMA_ACCESS = "RW";
pub const ACCESSCTRL_CORESIGHT_PERIPH_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_CORESIGHT_PERIPH_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_CORESIGHT_PERIPH_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_CORESIGHT_PERIPH_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_CORESIGHT_PERIPH_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_CORESIGHT_PERIPH_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_CORESIGHT_PERIPH_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_CORESIGHT_PERIPH_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_CORESIGHT_PERIPH_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_CORESIGHT_PERIPH_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_CORESIGHT_PERIPH_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_CORESIGHT_PERIPH_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_CORESIGHT_PERIPH_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_CORESIGHT_PERIPH_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_CORESIGHT_PERIPH_SP_ACCESS = "RW";
pub const ACCESSCTRL_CORESIGHT_PERIPH_SU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_CORESIGHT_PERIPH_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_CORESIGHT_PERIPH_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_CORESIGHT_PERIPH_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_CORESIGHT_PERIPH_SU_ACCESS = "RW";
pub const ACCESSCTRL_CORESIGHT_PERIPH_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_CORESIGHT_PERIPH_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_CORESIGHT_PERIPH_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_CORESIGHT_PERIPH_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_CORESIGHT_PERIPH_NSP_ACCESS = "RW";
pub const ACCESSCTRL_CORESIGHT_PERIPH_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_CORESIGHT_PERIPH_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_CORESIGHT_PERIPH_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_CORESIGHT_PERIPH_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_CORESIGHT_PERIPH_NSU_ACCESS = "RW";
pub const ACCESSCTRL_SYSINFO_OFFSET = _u(@as(c_int, 0x00000060));
pub const ACCESSCTRL_SYSINFO_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SYSINFO_RESET = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SYSINFO_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SYSINFO_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_SYSINFO_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SYSINFO_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SYSINFO_DBG_ACCESS = "RW";
pub const ACCESSCTRL_SYSINFO_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SYSINFO_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_SYSINFO_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SYSINFO_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SYSINFO_DMA_ACCESS = "RW";
pub const ACCESSCTRL_SYSINFO_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SYSINFO_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_SYSINFO_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SYSINFO_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SYSINFO_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_SYSINFO_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SYSINFO_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_SYSINFO_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SYSINFO_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SYSINFO_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_SYSINFO_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SYSINFO_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_SYSINFO_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SYSINFO_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SYSINFO_SP_ACCESS = "RW";
pub const ACCESSCTRL_SYSINFO_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SYSINFO_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_SYSINFO_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SYSINFO_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SYSINFO_SU_ACCESS = "RW";
pub const ACCESSCTRL_SYSINFO_NSP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SYSINFO_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_SYSINFO_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SYSINFO_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SYSINFO_NSP_ACCESS = "RW";
pub const ACCESSCTRL_SYSINFO_NSU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SYSINFO_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_SYSINFO_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SYSINFO_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SYSINFO_NSU_ACCESS = "RW";
pub const ACCESSCTRL_RESETS_OFFSET = _u(@as(c_int, 0x00000064));
pub const ACCESSCTRL_RESETS_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_RESETS_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_RESETS_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_RESETS_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_RESETS_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_RESETS_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_RESETS_DBG_ACCESS = "RW";
pub const ACCESSCTRL_RESETS_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_RESETS_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_RESETS_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_RESETS_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_RESETS_DMA_ACCESS = "RW";
pub const ACCESSCTRL_RESETS_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_RESETS_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_RESETS_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_RESETS_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_RESETS_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_RESETS_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_RESETS_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_RESETS_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_RESETS_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_RESETS_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_RESETS_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_RESETS_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_RESETS_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_RESETS_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_RESETS_SP_ACCESS = "RW";
pub const ACCESSCTRL_RESETS_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_RESETS_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_RESETS_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_RESETS_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_RESETS_SU_ACCESS = "RW";
pub const ACCESSCTRL_RESETS_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_RESETS_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_RESETS_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_RESETS_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_RESETS_NSP_ACCESS = "RW";
pub const ACCESSCTRL_RESETS_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_RESETS_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_RESETS_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_RESETS_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_RESETS_NSU_ACCESS = "RW";
pub const ACCESSCTRL_IO_BANK0_OFFSET = _u(@as(c_int, 0x00000068));
pub const ACCESSCTRL_IO_BANK0_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_IO_BANK0_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_IO_BANK0_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_IO_BANK0_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_IO_BANK0_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_IO_BANK0_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_IO_BANK0_DBG_ACCESS = "RW";
pub const ACCESSCTRL_IO_BANK0_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_IO_BANK0_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_IO_BANK0_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_IO_BANK0_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_IO_BANK0_DMA_ACCESS = "RW";
pub const ACCESSCTRL_IO_BANK0_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_IO_BANK0_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_IO_BANK0_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_IO_BANK0_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_IO_BANK0_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_IO_BANK0_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_IO_BANK0_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_IO_BANK0_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_IO_BANK0_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_IO_BANK0_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_IO_BANK0_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_IO_BANK0_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_IO_BANK0_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_IO_BANK0_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_IO_BANK0_SP_ACCESS = "RW";
pub const ACCESSCTRL_IO_BANK0_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_IO_BANK0_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_IO_BANK0_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_IO_BANK0_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_IO_BANK0_SU_ACCESS = "RW";
pub const ACCESSCTRL_IO_BANK0_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_IO_BANK0_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_IO_BANK0_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_IO_BANK0_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_IO_BANK0_NSP_ACCESS = "RW";
pub const ACCESSCTRL_IO_BANK0_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_IO_BANK0_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_IO_BANK0_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_IO_BANK0_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_IO_BANK0_NSU_ACCESS = "RW";
pub const ACCESSCTRL_IO_BANK1_OFFSET = _u(@as(c_int, 0x0000006c));
pub const ACCESSCTRL_IO_BANK1_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_IO_BANK1_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_IO_BANK1_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_IO_BANK1_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_IO_BANK1_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_IO_BANK1_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_IO_BANK1_DBG_ACCESS = "RW";
pub const ACCESSCTRL_IO_BANK1_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_IO_BANK1_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_IO_BANK1_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_IO_BANK1_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_IO_BANK1_DMA_ACCESS = "RW";
pub const ACCESSCTRL_IO_BANK1_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_IO_BANK1_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_IO_BANK1_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_IO_BANK1_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_IO_BANK1_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_IO_BANK1_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_IO_BANK1_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_IO_BANK1_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_IO_BANK1_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_IO_BANK1_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_IO_BANK1_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_IO_BANK1_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_IO_BANK1_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_IO_BANK1_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_IO_BANK1_SP_ACCESS = "RW";
pub const ACCESSCTRL_IO_BANK1_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_IO_BANK1_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_IO_BANK1_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_IO_BANK1_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_IO_BANK1_SU_ACCESS = "RW";
pub const ACCESSCTRL_IO_BANK1_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_IO_BANK1_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_IO_BANK1_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_IO_BANK1_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_IO_BANK1_NSP_ACCESS = "RW";
pub const ACCESSCTRL_IO_BANK1_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_IO_BANK1_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_IO_BANK1_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_IO_BANK1_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_IO_BANK1_NSU_ACCESS = "RW";
pub const ACCESSCTRL_PADS_BANK0_OFFSET = _u(@as(c_int, 0x00000070));
pub const ACCESSCTRL_PADS_BANK0_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_PADS_BANK0_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_PADS_BANK0_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PADS_BANK0_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_PADS_BANK0_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_PADS_BANK0_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_PADS_BANK0_DBG_ACCESS = "RW";
pub const ACCESSCTRL_PADS_BANK0_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PADS_BANK0_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_PADS_BANK0_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_PADS_BANK0_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_PADS_BANK0_DMA_ACCESS = "RW";
pub const ACCESSCTRL_PADS_BANK0_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PADS_BANK0_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_PADS_BANK0_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_PADS_BANK0_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_PADS_BANK0_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_PADS_BANK0_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PADS_BANK0_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_PADS_BANK0_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_PADS_BANK0_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_PADS_BANK0_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_PADS_BANK0_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PADS_BANK0_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_PADS_BANK0_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_PADS_BANK0_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_PADS_BANK0_SP_ACCESS = "RW";
pub const ACCESSCTRL_PADS_BANK0_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PADS_BANK0_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_PADS_BANK0_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_PADS_BANK0_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_PADS_BANK0_SU_ACCESS = "RW";
pub const ACCESSCTRL_PADS_BANK0_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_PADS_BANK0_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_PADS_BANK0_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_PADS_BANK0_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_PADS_BANK0_NSP_ACCESS = "RW";
pub const ACCESSCTRL_PADS_BANK0_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_PADS_BANK0_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_PADS_BANK0_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_PADS_BANK0_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_PADS_BANK0_NSU_ACCESS = "RW";
pub const ACCESSCTRL_PADS_QSPI_OFFSET = _u(@as(c_int, 0x00000074));
pub const ACCESSCTRL_PADS_QSPI_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_PADS_QSPI_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_PADS_QSPI_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PADS_QSPI_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_PADS_QSPI_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_PADS_QSPI_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_PADS_QSPI_DBG_ACCESS = "RW";
pub const ACCESSCTRL_PADS_QSPI_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PADS_QSPI_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_PADS_QSPI_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_PADS_QSPI_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_PADS_QSPI_DMA_ACCESS = "RW";
pub const ACCESSCTRL_PADS_QSPI_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PADS_QSPI_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_PADS_QSPI_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_PADS_QSPI_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_PADS_QSPI_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_PADS_QSPI_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PADS_QSPI_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_PADS_QSPI_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_PADS_QSPI_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_PADS_QSPI_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_PADS_QSPI_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PADS_QSPI_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_PADS_QSPI_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_PADS_QSPI_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_PADS_QSPI_SP_ACCESS = "RW";
pub const ACCESSCTRL_PADS_QSPI_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PADS_QSPI_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_PADS_QSPI_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_PADS_QSPI_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_PADS_QSPI_SU_ACCESS = "RW";
pub const ACCESSCTRL_PADS_QSPI_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_PADS_QSPI_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_PADS_QSPI_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_PADS_QSPI_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_PADS_QSPI_NSP_ACCESS = "RW";
pub const ACCESSCTRL_PADS_QSPI_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_PADS_QSPI_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_PADS_QSPI_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_PADS_QSPI_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_PADS_QSPI_NSU_ACCESS = "RW";
pub const ACCESSCTRL_BUSCTRL_OFFSET = _u(@as(c_int, 0x00000078));
pub const ACCESSCTRL_BUSCTRL_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_BUSCTRL_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_BUSCTRL_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_BUSCTRL_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_BUSCTRL_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_BUSCTRL_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_BUSCTRL_DBG_ACCESS = "RW";
pub const ACCESSCTRL_BUSCTRL_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_BUSCTRL_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_BUSCTRL_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_BUSCTRL_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_BUSCTRL_DMA_ACCESS = "RW";
pub const ACCESSCTRL_BUSCTRL_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_BUSCTRL_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_BUSCTRL_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_BUSCTRL_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_BUSCTRL_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_BUSCTRL_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_BUSCTRL_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_BUSCTRL_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_BUSCTRL_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_BUSCTRL_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_BUSCTRL_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_BUSCTRL_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_BUSCTRL_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_BUSCTRL_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_BUSCTRL_SP_ACCESS = "RW";
pub const ACCESSCTRL_BUSCTRL_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_BUSCTRL_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_BUSCTRL_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_BUSCTRL_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_BUSCTRL_SU_ACCESS = "RW";
pub const ACCESSCTRL_BUSCTRL_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_BUSCTRL_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_BUSCTRL_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_BUSCTRL_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_BUSCTRL_NSP_ACCESS = "RW";
pub const ACCESSCTRL_BUSCTRL_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_BUSCTRL_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_BUSCTRL_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_BUSCTRL_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_BUSCTRL_NSU_ACCESS = "RW";
pub const ACCESSCTRL_ADC0_OFFSET = _u(@as(c_int, 0x0000007c));
pub const ACCESSCTRL_ADC0_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_ADC0_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_ADC0_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_ADC0_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_ADC0_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_ADC0_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_ADC0_DBG_ACCESS = "RW";
pub const ACCESSCTRL_ADC0_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_ADC0_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_ADC0_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_ADC0_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_ADC0_DMA_ACCESS = "RW";
pub const ACCESSCTRL_ADC0_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_ADC0_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_ADC0_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_ADC0_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_ADC0_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_ADC0_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_ADC0_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_ADC0_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_ADC0_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_ADC0_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_ADC0_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_ADC0_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_ADC0_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_ADC0_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_ADC0_SP_ACCESS = "RW";
pub const ACCESSCTRL_ADC0_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_ADC0_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_ADC0_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_ADC0_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_ADC0_SU_ACCESS = "RW";
pub const ACCESSCTRL_ADC0_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_ADC0_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_ADC0_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_ADC0_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_ADC0_NSP_ACCESS = "RW";
pub const ACCESSCTRL_ADC0_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_ADC0_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_ADC0_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_ADC0_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_ADC0_NSU_ACCESS = "RW";
pub const ACCESSCTRL_HSTX_OFFSET = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_HSTX_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_HSTX_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_HSTX_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_HSTX_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_HSTX_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_HSTX_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_HSTX_DBG_ACCESS = "RW";
pub const ACCESSCTRL_HSTX_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_HSTX_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_HSTX_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_HSTX_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_HSTX_DMA_ACCESS = "RW";
pub const ACCESSCTRL_HSTX_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_HSTX_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_HSTX_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_HSTX_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_HSTX_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_HSTX_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_HSTX_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_HSTX_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_HSTX_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_HSTX_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_HSTX_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_HSTX_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_HSTX_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_HSTX_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_HSTX_SP_ACCESS = "RW";
pub const ACCESSCTRL_HSTX_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_HSTX_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_HSTX_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_HSTX_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_HSTX_SU_ACCESS = "RW";
pub const ACCESSCTRL_HSTX_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_HSTX_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_HSTX_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_HSTX_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_HSTX_NSP_ACCESS = "RW";
pub const ACCESSCTRL_HSTX_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_HSTX_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_HSTX_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_HSTX_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_HSTX_NSU_ACCESS = "RW";
pub const ACCESSCTRL_I2C0_OFFSET = _u(@as(c_int, 0x00000084));
pub const ACCESSCTRL_I2C0_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_I2C0_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_I2C0_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_I2C0_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_I2C0_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_I2C0_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_I2C0_DBG_ACCESS = "RW";
pub const ACCESSCTRL_I2C0_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_I2C0_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_I2C0_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_I2C0_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_I2C0_DMA_ACCESS = "RW";
pub const ACCESSCTRL_I2C0_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_I2C0_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_I2C0_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_I2C0_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_I2C0_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_I2C0_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_I2C0_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_I2C0_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_I2C0_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_I2C0_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_I2C0_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_I2C0_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_I2C0_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_I2C0_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_I2C0_SP_ACCESS = "RW";
pub const ACCESSCTRL_I2C0_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_I2C0_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_I2C0_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_I2C0_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_I2C0_SU_ACCESS = "RW";
pub const ACCESSCTRL_I2C0_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_I2C0_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_I2C0_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_I2C0_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_I2C0_NSP_ACCESS = "RW";
pub const ACCESSCTRL_I2C0_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_I2C0_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_I2C0_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_I2C0_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_I2C0_NSU_ACCESS = "RW";
pub const ACCESSCTRL_I2C1_OFFSET = _u(@as(c_int, 0x00000088));
pub const ACCESSCTRL_I2C1_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_I2C1_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_I2C1_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_I2C1_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_I2C1_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_I2C1_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_I2C1_DBG_ACCESS = "RW";
pub const ACCESSCTRL_I2C1_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_I2C1_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_I2C1_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_I2C1_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_I2C1_DMA_ACCESS = "RW";
pub const ACCESSCTRL_I2C1_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_I2C1_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_I2C1_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_I2C1_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_I2C1_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_I2C1_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_I2C1_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_I2C1_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_I2C1_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_I2C1_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_I2C1_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_I2C1_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_I2C1_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_I2C1_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_I2C1_SP_ACCESS = "RW";
pub const ACCESSCTRL_I2C1_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_I2C1_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_I2C1_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_I2C1_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_I2C1_SU_ACCESS = "RW";
pub const ACCESSCTRL_I2C1_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_I2C1_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_I2C1_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_I2C1_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_I2C1_NSP_ACCESS = "RW";
pub const ACCESSCTRL_I2C1_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_I2C1_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_I2C1_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_I2C1_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_I2C1_NSU_ACCESS = "RW";
pub const ACCESSCTRL_PWM_OFFSET = _u(@as(c_int, 0x0000008c));
pub const ACCESSCTRL_PWM_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_PWM_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_PWM_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PWM_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_PWM_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_PWM_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_PWM_DBG_ACCESS = "RW";
pub const ACCESSCTRL_PWM_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PWM_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_PWM_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_PWM_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_PWM_DMA_ACCESS = "RW";
pub const ACCESSCTRL_PWM_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PWM_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_PWM_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_PWM_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_PWM_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_PWM_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PWM_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_PWM_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_PWM_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_PWM_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_PWM_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PWM_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_PWM_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_PWM_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_PWM_SP_ACCESS = "RW";
pub const ACCESSCTRL_PWM_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PWM_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_PWM_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_PWM_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_PWM_SU_ACCESS = "RW";
pub const ACCESSCTRL_PWM_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_PWM_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_PWM_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_PWM_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_PWM_NSP_ACCESS = "RW";
pub const ACCESSCTRL_PWM_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_PWM_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_PWM_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_PWM_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_PWM_NSU_ACCESS = "RW";
pub const ACCESSCTRL_SPI0_OFFSET = _u(@as(c_int, 0x00000090));
pub const ACCESSCTRL_SPI0_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SPI0_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_SPI0_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SPI0_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_SPI0_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SPI0_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SPI0_DBG_ACCESS = "RW";
pub const ACCESSCTRL_SPI0_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SPI0_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_SPI0_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SPI0_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SPI0_DMA_ACCESS = "RW";
pub const ACCESSCTRL_SPI0_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SPI0_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_SPI0_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SPI0_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SPI0_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_SPI0_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SPI0_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_SPI0_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SPI0_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SPI0_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_SPI0_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SPI0_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_SPI0_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SPI0_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SPI0_SP_ACCESS = "RW";
pub const ACCESSCTRL_SPI0_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SPI0_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_SPI0_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SPI0_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SPI0_SU_ACCESS = "RW";
pub const ACCESSCTRL_SPI0_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_SPI0_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_SPI0_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SPI0_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SPI0_NSP_ACCESS = "RW";
pub const ACCESSCTRL_SPI0_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_SPI0_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_SPI0_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SPI0_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SPI0_NSU_ACCESS = "RW";
pub const ACCESSCTRL_SPI1_OFFSET = _u(@as(c_int, 0x00000094));
pub const ACCESSCTRL_SPI1_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SPI1_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_SPI1_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SPI1_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_SPI1_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SPI1_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SPI1_DBG_ACCESS = "RW";
pub const ACCESSCTRL_SPI1_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SPI1_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_SPI1_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SPI1_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SPI1_DMA_ACCESS = "RW";
pub const ACCESSCTRL_SPI1_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SPI1_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_SPI1_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SPI1_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SPI1_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_SPI1_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SPI1_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_SPI1_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SPI1_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SPI1_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_SPI1_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SPI1_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_SPI1_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SPI1_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SPI1_SP_ACCESS = "RW";
pub const ACCESSCTRL_SPI1_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SPI1_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_SPI1_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SPI1_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SPI1_SU_ACCESS = "RW";
pub const ACCESSCTRL_SPI1_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_SPI1_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_SPI1_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SPI1_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SPI1_NSP_ACCESS = "RW";
pub const ACCESSCTRL_SPI1_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_SPI1_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_SPI1_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SPI1_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SPI1_NSU_ACCESS = "RW";
pub const ACCESSCTRL_TIMER0_OFFSET = _u(@as(c_int, 0x00000098));
pub const ACCESSCTRL_TIMER0_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_TIMER0_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_TIMER0_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TIMER0_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_TIMER0_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_TIMER0_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_TIMER0_DBG_ACCESS = "RW";
pub const ACCESSCTRL_TIMER0_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TIMER0_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_TIMER0_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_TIMER0_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_TIMER0_DMA_ACCESS = "RW";
pub const ACCESSCTRL_TIMER0_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TIMER0_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_TIMER0_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_TIMER0_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_TIMER0_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_TIMER0_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TIMER0_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_TIMER0_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_TIMER0_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_TIMER0_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_TIMER0_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TIMER0_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_TIMER0_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_TIMER0_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_TIMER0_SP_ACCESS = "RW";
pub const ACCESSCTRL_TIMER0_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TIMER0_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_TIMER0_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_TIMER0_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_TIMER0_SU_ACCESS = "RW";
pub const ACCESSCTRL_TIMER0_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_TIMER0_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_TIMER0_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_TIMER0_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_TIMER0_NSP_ACCESS = "RW";
pub const ACCESSCTRL_TIMER0_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_TIMER0_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_TIMER0_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_TIMER0_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_TIMER0_NSU_ACCESS = "RW";
pub const ACCESSCTRL_TIMER1_OFFSET = _u(@as(c_int, 0x0000009c));
pub const ACCESSCTRL_TIMER1_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_TIMER1_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_TIMER1_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TIMER1_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_TIMER1_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_TIMER1_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_TIMER1_DBG_ACCESS = "RW";
pub const ACCESSCTRL_TIMER1_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TIMER1_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_TIMER1_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_TIMER1_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_TIMER1_DMA_ACCESS = "RW";
pub const ACCESSCTRL_TIMER1_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TIMER1_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_TIMER1_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_TIMER1_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_TIMER1_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_TIMER1_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TIMER1_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_TIMER1_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_TIMER1_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_TIMER1_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_TIMER1_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TIMER1_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_TIMER1_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_TIMER1_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_TIMER1_SP_ACCESS = "RW";
pub const ACCESSCTRL_TIMER1_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TIMER1_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_TIMER1_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_TIMER1_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_TIMER1_SU_ACCESS = "RW";
pub const ACCESSCTRL_TIMER1_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_TIMER1_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_TIMER1_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_TIMER1_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_TIMER1_NSP_ACCESS = "RW";
pub const ACCESSCTRL_TIMER1_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_TIMER1_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_TIMER1_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_TIMER1_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_TIMER1_NSU_ACCESS = "RW";
pub const ACCESSCTRL_UART0_OFFSET = _u(@as(c_int, 0x000000a0));
pub const ACCESSCTRL_UART0_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_UART0_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_UART0_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_UART0_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_UART0_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_UART0_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_UART0_DBG_ACCESS = "RW";
pub const ACCESSCTRL_UART0_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_UART0_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_UART0_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_UART0_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_UART0_DMA_ACCESS = "RW";
pub const ACCESSCTRL_UART0_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_UART0_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_UART0_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_UART0_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_UART0_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_UART0_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_UART0_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_UART0_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_UART0_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_UART0_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_UART0_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_UART0_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_UART0_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_UART0_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_UART0_SP_ACCESS = "RW";
pub const ACCESSCTRL_UART0_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_UART0_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_UART0_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_UART0_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_UART0_SU_ACCESS = "RW";
pub const ACCESSCTRL_UART0_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_UART0_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_UART0_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_UART0_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_UART0_NSP_ACCESS = "RW";
pub const ACCESSCTRL_UART0_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_UART0_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_UART0_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_UART0_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_UART0_NSU_ACCESS = "RW";
pub const ACCESSCTRL_UART1_OFFSET = _u(@as(c_int, 0x000000a4));
pub const ACCESSCTRL_UART1_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_UART1_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_UART1_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_UART1_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_UART1_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_UART1_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_UART1_DBG_ACCESS = "RW";
pub const ACCESSCTRL_UART1_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_UART1_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_UART1_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_UART1_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_UART1_DMA_ACCESS = "RW";
pub const ACCESSCTRL_UART1_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_UART1_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_UART1_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_UART1_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_UART1_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_UART1_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_UART1_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_UART1_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_UART1_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_UART1_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_UART1_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_UART1_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_UART1_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_UART1_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_UART1_SP_ACCESS = "RW";
pub const ACCESSCTRL_UART1_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_UART1_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_UART1_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_UART1_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_UART1_SU_ACCESS = "RW";
pub const ACCESSCTRL_UART1_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_UART1_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_UART1_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_UART1_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_UART1_NSP_ACCESS = "RW";
pub const ACCESSCTRL_UART1_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_UART1_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_UART1_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_UART1_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_UART1_NSU_ACCESS = "RW";
pub const ACCESSCTRL_OTP_OFFSET = _u(@as(c_int, 0x000000a8));
pub const ACCESSCTRL_OTP_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_OTP_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_OTP_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_OTP_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_OTP_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_OTP_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_OTP_DBG_ACCESS = "RW";
pub const ACCESSCTRL_OTP_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_OTP_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_OTP_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_OTP_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_OTP_DMA_ACCESS = "RW";
pub const ACCESSCTRL_OTP_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_OTP_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_OTP_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_OTP_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_OTP_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_OTP_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_OTP_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_OTP_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_OTP_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_OTP_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_OTP_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_OTP_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_OTP_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_OTP_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_OTP_SP_ACCESS = "RW";
pub const ACCESSCTRL_OTP_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_OTP_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_OTP_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_OTP_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_OTP_SU_ACCESS = "RW";
pub const ACCESSCTRL_OTP_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_OTP_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_OTP_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_OTP_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_OTP_NSP_ACCESS = "RW";
pub const ACCESSCTRL_OTP_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_OTP_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_OTP_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_OTP_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_OTP_NSU_ACCESS = "RW";
pub const ACCESSCTRL_TBMAN_OFFSET = _u(@as(c_int, 0x000000ac));
pub const ACCESSCTRL_TBMAN_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_TBMAN_RESET = _u(@as(c_int, 0x000000fc));
pub const ACCESSCTRL_TBMAN_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TBMAN_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_TBMAN_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_TBMAN_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_TBMAN_DBG_ACCESS = "RW";
pub const ACCESSCTRL_TBMAN_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TBMAN_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_TBMAN_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_TBMAN_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_TBMAN_DMA_ACCESS = "RW";
pub const ACCESSCTRL_TBMAN_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TBMAN_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_TBMAN_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_TBMAN_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_TBMAN_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_TBMAN_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TBMAN_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_TBMAN_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_TBMAN_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_TBMAN_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_TBMAN_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TBMAN_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_TBMAN_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_TBMAN_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_TBMAN_SP_ACCESS = "RW";
pub const ACCESSCTRL_TBMAN_SU_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TBMAN_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_TBMAN_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_TBMAN_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_TBMAN_SU_ACCESS = "RW";
pub const ACCESSCTRL_TBMAN_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_TBMAN_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_TBMAN_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_TBMAN_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_TBMAN_NSP_ACCESS = "RW";
pub const ACCESSCTRL_TBMAN_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_TBMAN_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_TBMAN_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_TBMAN_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_TBMAN_NSU_ACCESS = "RW";
pub const ACCESSCTRL_POWMAN_OFFSET = _u(@as(c_int, 0x000000b0));
pub const ACCESSCTRL_POWMAN_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_POWMAN_RESET = _u(@as(c_int, 0x000000b8));
pub const ACCESSCTRL_POWMAN_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_POWMAN_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_POWMAN_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_POWMAN_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_POWMAN_DBG_ACCESS = "RW";
pub const ACCESSCTRL_POWMAN_DMA_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_POWMAN_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_POWMAN_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_POWMAN_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_POWMAN_DMA_ACCESS = "RW";
pub const ACCESSCTRL_POWMAN_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_POWMAN_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_POWMAN_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_POWMAN_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_POWMAN_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_POWMAN_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_POWMAN_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_POWMAN_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_POWMAN_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_POWMAN_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_POWMAN_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_POWMAN_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_POWMAN_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_POWMAN_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_POWMAN_SP_ACCESS = "RW";
pub const ACCESSCTRL_POWMAN_SU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_POWMAN_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_POWMAN_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_POWMAN_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_POWMAN_SU_ACCESS = "RW";
pub const ACCESSCTRL_POWMAN_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_POWMAN_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_POWMAN_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_POWMAN_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_POWMAN_NSP_ACCESS = "RW";
pub const ACCESSCTRL_POWMAN_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_POWMAN_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_POWMAN_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_POWMAN_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_POWMAN_NSU_ACCESS = "RW";
pub const ACCESSCTRL_TRNG_OFFSET = _u(@as(c_int, 0x000000b4));
pub const ACCESSCTRL_TRNG_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_TRNG_RESET = _u(@as(c_int, 0x000000b8));
pub const ACCESSCTRL_TRNG_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TRNG_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_TRNG_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_TRNG_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_TRNG_DBG_ACCESS = "RW";
pub const ACCESSCTRL_TRNG_DMA_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_TRNG_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_TRNG_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_TRNG_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_TRNG_DMA_ACCESS = "RW";
pub const ACCESSCTRL_TRNG_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TRNG_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_TRNG_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_TRNG_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_TRNG_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_TRNG_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TRNG_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_TRNG_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_TRNG_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_TRNG_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_TRNG_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TRNG_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_TRNG_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_TRNG_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_TRNG_SP_ACCESS = "RW";
pub const ACCESSCTRL_TRNG_SU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_TRNG_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_TRNG_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_TRNG_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_TRNG_SU_ACCESS = "RW";
pub const ACCESSCTRL_TRNG_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_TRNG_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_TRNG_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_TRNG_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_TRNG_NSP_ACCESS = "RW";
pub const ACCESSCTRL_TRNG_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_TRNG_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_TRNG_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_TRNG_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_TRNG_NSU_ACCESS = "RW";
pub const ACCESSCTRL_SHA256_OFFSET = _u(@as(c_int, 0x000000b8));
pub const ACCESSCTRL_SHA256_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SHA256_RESET = _u(@as(c_int, 0x000000f8));
pub const ACCESSCTRL_SHA256_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SHA256_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_SHA256_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SHA256_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SHA256_DBG_ACCESS = "RW";
pub const ACCESSCTRL_SHA256_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SHA256_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_SHA256_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SHA256_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SHA256_DMA_ACCESS = "RW";
pub const ACCESSCTRL_SHA256_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SHA256_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_SHA256_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SHA256_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SHA256_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_SHA256_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SHA256_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_SHA256_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SHA256_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SHA256_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_SHA256_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SHA256_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_SHA256_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SHA256_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SHA256_SP_ACCESS = "RW";
pub const ACCESSCTRL_SHA256_SU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_SHA256_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_SHA256_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SHA256_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SHA256_SU_ACCESS = "RW";
pub const ACCESSCTRL_SHA256_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_SHA256_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_SHA256_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SHA256_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SHA256_NSP_ACCESS = "RW";
pub const ACCESSCTRL_SHA256_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_SHA256_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_SHA256_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SHA256_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SHA256_NSU_ACCESS = "RW";
pub const ACCESSCTRL_SYSCFG_OFFSET = _u(@as(c_int, 0x000000bc));
pub const ACCESSCTRL_SYSCFG_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_SYSCFG_RESET = _u(@as(c_int, 0x000000b8));
pub const ACCESSCTRL_SYSCFG_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SYSCFG_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_SYSCFG_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SYSCFG_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_SYSCFG_DBG_ACCESS = "RW";
pub const ACCESSCTRL_SYSCFG_DMA_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_SYSCFG_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_SYSCFG_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SYSCFG_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_SYSCFG_DMA_ACCESS = "RW";
pub const ACCESSCTRL_SYSCFG_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SYSCFG_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_SYSCFG_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SYSCFG_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_SYSCFG_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_SYSCFG_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SYSCFG_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_SYSCFG_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SYSCFG_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_SYSCFG_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_SYSCFG_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_SYSCFG_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_SYSCFG_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SYSCFG_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_SYSCFG_SP_ACCESS = "RW";
pub const ACCESSCTRL_SYSCFG_SU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_SYSCFG_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_SYSCFG_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SYSCFG_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_SYSCFG_SU_ACCESS = "RW";
pub const ACCESSCTRL_SYSCFG_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_SYSCFG_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_SYSCFG_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SYSCFG_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_SYSCFG_NSP_ACCESS = "RW";
pub const ACCESSCTRL_SYSCFG_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_SYSCFG_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_SYSCFG_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SYSCFG_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_SYSCFG_NSU_ACCESS = "RW";
pub const ACCESSCTRL_CLOCKS_OFFSET = _u(@as(c_int, 0x000000c0));
pub const ACCESSCTRL_CLOCKS_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_CLOCKS_RESET = _u(@as(c_int, 0x000000b8));
pub const ACCESSCTRL_CLOCKS_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_CLOCKS_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_CLOCKS_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_CLOCKS_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_CLOCKS_DBG_ACCESS = "RW";
pub const ACCESSCTRL_CLOCKS_DMA_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_CLOCKS_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_CLOCKS_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_CLOCKS_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_CLOCKS_DMA_ACCESS = "RW";
pub const ACCESSCTRL_CLOCKS_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_CLOCKS_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_CLOCKS_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_CLOCKS_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_CLOCKS_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_CLOCKS_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_CLOCKS_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_CLOCKS_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_CLOCKS_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_CLOCKS_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_CLOCKS_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_CLOCKS_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_CLOCKS_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_CLOCKS_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_CLOCKS_SP_ACCESS = "RW";
pub const ACCESSCTRL_CLOCKS_SU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_CLOCKS_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_CLOCKS_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_CLOCKS_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_CLOCKS_SU_ACCESS = "RW";
pub const ACCESSCTRL_CLOCKS_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_CLOCKS_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_CLOCKS_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_CLOCKS_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_CLOCKS_NSP_ACCESS = "RW";
pub const ACCESSCTRL_CLOCKS_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_CLOCKS_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_CLOCKS_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_CLOCKS_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_CLOCKS_NSU_ACCESS = "RW";
pub const ACCESSCTRL_XOSC_OFFSET = _u(@as(c_int, 0x000000c4));
pub const ACCESSCTRL_XOSC_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_XOSC_RESET = _u(@as(c_int, 0x000000b8));
pub const ACCESSCTRL_XOSC_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XOSC_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_XOSC_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_XOSC_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_XOSC_DBG_ACCESS = "RW";
pub const ACCESSCTRL_XOSC_DMA_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_XOSC_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_XOSC_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_XOSC_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_XOSC_DMA_ACCESS = "RW";
pub const ACCESSCTRL_XOSC_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XOSC_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_XOSC_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_XOSC_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_XOSC_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_XOSC_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XOSC_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_XOSC_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_XOSC_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_XOSC_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_XOSC_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XOSC_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_XOSC_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_XOSC_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_XOSC_SP_ACCESS = "RW";
pub const ACCESSCTRL_XOSC_SU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_XOSC_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_XOSC_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_XOSC_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_XOSC_SU_ACCESS = "RW";
pub const ACCESSCTRL_XOSC_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_XOSC_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_XOSC_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_XOSC_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_XOSC_NSP_ACCESS = "RW";
pub const ACCESSCTRL_XOSC_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_XOSC_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_XOSC_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_XOSC_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_XOSC_NSU_ACCESS = "RW";
pub const ACCESSCTRL_ROSC_OFFSET = _u(@as(c_int, 0x000000c8));
pub const ACCESSCTRL_ROSC_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_ROSC_RESET = _u(@as(c_int, 0x000000b8));
pub const ACCESSCTRL_ROSC_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_ROSC_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_ROSC_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_ROSC_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_ROSC_DBG_ACCESS = "RW";
pub const ACCESSCTRL_ROSC_DMA_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_ROSC_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_ROSC_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_ROSC_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_ROSC_DMA_ACCESS = "RW";
pub const ACCESSCTRL_ROSC_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_ROSC_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_ROSC_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_ROSC_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_ROSC_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_ROSC_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_ROSC_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_ROSC_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_ROSC_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_ROSC_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_ROSC_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_ROSC_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_ROSC_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_ROSC_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_ROSC_SP_ACCESS = "RW";
pub const ACCESSCTRL_ROSC_SU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_ROSC_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_ROSC_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_ROSC_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_ROSC_SU_ACCESS = "RW";
pub const ACCESSCTRL_ROSC_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_ROSC_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_ROSC_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_ROSC_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_ROSC_NSP_ACCESS = "RW";
pub const ACCESSCTRL_ROSC_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_ROSC_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_ROSC_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_ROSC_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_ROSC_NSU_ACCESS = "RW";
pub const ACCESSCTRL_PLL_SYS_OFFSET = _u(@as(c_int, 0x000000cc));
pub const ACCESSCTRL_PLL_SYS_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_PLL_SYS_RESET = _u(@as(c_int, 0x000000b8));
pub const ACCESSCTRL_PLL_SYS_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PLL_SYS_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_PLL_SYS_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_PLL_SYS_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_PLL_SYS_DBG_ACCESS = "RW";
pub const ACCESSCTRL_PLL_SYS_DMA_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_PLL_SYS_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_PLL_SYS_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_PLL_SYS_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_PLL_SYS_DMA_ACCESS = "RW";
pub const ACCESSCTRL_PLL_SYS_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PLL_SYS_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_PLL_SYS_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_PLL_SYS_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_PLL_SYS_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_PLL_SYS_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PLL_SYS_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_PLL_SYS_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_PLL_SYS_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_PLL_SYS_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_PLL_SYS_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PLL_SYS_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_PLL_SYS_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_PLL_SYS_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_PLL_SYS_SP_ACCESS = "RW";
pub const ACCESSCTRL_PLL_SYS_SU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_PLL_SYS_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_PLL_SYS_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_PLL_SYS_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_PLL_SYS_SU_ACCESS = "RW";
pub const ACCESSCTRL_PLL_SYS_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_PLL_SYS_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_PLL_SYS_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_PLL_SYS_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_PLL_SYS_NSP_ACCESS = "RW";
pub const ACCESSCTRL_PLL_SYS_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_PLL_SYS_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_PLL_SYS_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_PLL_SYS_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_PLL_SYS_NSU_ACCESS = "RW";
pub const ACCESSCTRL_PLL_USB_OFFSET = _u(@as(c_int, 0x000000d0));
pub const ACCESSCTRL_PLL_USB_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_PLL_USB_RESET = _u(@as(c_int, 0x000000b8));
pub const ACCESSCTRL_PLL_USB_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PLL_USB_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_PLL_USB_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_PLL_USB_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_PLL_USB_DBG_ACCESS = "RW";
pub const ACCESSCTRL_PLL_USB_DMA_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_PLL_USB_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_PLL_USB_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_PLL_USB_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_PLL_USB_DMA_ACCESS = "RW";
pub const ACCESSCTRL_PLL_USB_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PLL_USB_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_PLL_USB_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_PLL_USB_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_PLL_USB_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_PLL_USB_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PLL_USB_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_PLL_USB_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_PLL_USB_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_PLL_USB_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_PLL_USB_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_PLL_USB_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_PLL_USB_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_PLL_USB_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_PLL_USB_SP_ACCESS = "RW";
pub const ACCESSCTRL_PLL_USB_SU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_PLL_USB_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_PLL_USB_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_PLL_USB_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_PLL_USB_SU_ACCESS = "RW";
pub const ACCESSCTRL_PLL_USB_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_PLL_USB_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_PLL_USB_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_PLL_USB_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_PLL_USB_NSP_ACCESS = "RW";
pub const ACCESSCTRL_PLL_USB_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_PLL_USB_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_PLL_USB_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_PLL_USB_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_PLL_USB_NSU_ACCESS = "RW";
pub const ACCESSCTRL_TICKS_OFFSET = _u(@as(c_int, 0x000000d4));
pub const ACCESSCTRL_TICKS_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_TICKS_RESET = _u(@as(c_int, 0x000000b8));
pub const ACCESSCTRL_TICKS_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TICKS_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_TICKS_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_TICKS_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_TICKS_DBG_ACCESS = "RW";
pub const ACCESSCTRL_TICKS_DMA_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_TICKS_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_TICKS_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_TICKS_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_TICKS_DMA_ACCESS = "RW";
pub const ACCESSCTRL_TICKS_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TICKS_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_TICKS_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_TICKS_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_TICKS_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_TICKS_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TICKS_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_TICKS_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_TICKS_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_TICKS_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_TICKS_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_TICKS_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_TICKS_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_TICKS_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_TICKS_SP_ACCESS = "RW";
pub const ACCESSCTRL_TICKS_SU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_TICKS_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_TICKS_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_TICKS_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_TICKS_SU_ACCESS = "RW";
pub const ACCESSCTRL_TICKS_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_TICKS_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_TICKS_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_TICKS_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_TICKS_NSP_ACCESS = "RW";
pub const ACCESSCTRL_TICKS_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_TICKS_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_TICKS_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_TICKS_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_TICKS_NSU_ACCESS = "RW";
pub const ACCESSCTRL_WATCHDOG_OFFSET = _u(@as(c_int, 0x000000d8));
pub const ACCESSCTRL_WATCHDOG_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_WATCHDOG_RESET = _u(@as(c_int, 0x000000b8));
pub const ACCESSCTRL_WATCHDOG_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_WATCHDOG_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_WATCHDOG_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_WATCHDOG_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_WATCHDOG_DBG_ACCESS = "RW";
pub const ACCESSCTRL_WATCHDOG_DMA_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_WATCHDOG_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_WATCHDOG_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_WATCHDOG_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_WATCHDOG_DMA_ACCESS = "RW";
pub const ACCESSCTRL_WATCHDOG_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_WATCHDOG_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_WATCHDOG_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_WATCHDOG_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_WATCHDOG_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_WATCHDOG_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_WATCHDOG_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_WATCHDOG_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_WATCHDOG_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_WATCHDOG_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_WATCHDOG_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_WATCHDOG_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_WATCHDOG_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_WATCHDOG_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_WATCHDOG_SP_ACCESS = "RW";
pub const ACCESSCTRL_WATCHDOG_SU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_WATCHDOG_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_WATCHDOG_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_WATCHDOG_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_WATCHDOG_SU_ACCESS = "RW";
pub const ACCESSCTRL_WATCHDOG_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_WATCHDOG_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_WATCHDOG_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_WATCHDOG_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_WATCHDOG_NSP_ACCESS = "RW";
pub const ACCESSCTRL_WATCHDOG_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_WATCHDOG_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_WATCHDOG_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_WATCHDOG_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_WATCHDOG_NSU_ACCESS = "RW";
pub const ACCESSCTRL_RSM_OFFSET = _u(@as(c_int, 0x000000dc));
pub const ACCESSCTRL_RSM_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_RSM_RESET = _u(@as(c_int, 0x000000b8));
pub const ACCESSCTRL_RSM_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_RSM_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_RSM_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_RSM_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_RSM_DBG_ACCESS = "RW";
pub const ACCESSCTRL_RSM_DMA_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_RSM_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_RSM_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_RSM_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_RSM_DMA_ACCESS = "RW";
pub const ACCESSCTRL_RSM_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_RSM_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_RSM_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_RSM_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_RSM_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_RSM_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_RSM_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_RSM_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_RSM_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_RSM_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_RSM_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_RSM_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_RSM_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_RSM_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_RSM_SP_ACCESS = "RW";
pub const ACCESSCTRL_RSM_SU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_RSM_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_RSM_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_RSM_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_RSM_SU_ACCESS = "RW";
pub const ACCESSCTRL_RSM_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_RSM_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_RSM_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_RSM_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_RSM_NSP_ACCESS = "RW";
pub const ACCESSCTRL_RSM_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_RSM_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_RSM_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_RSM_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_RSM_NSU_ACCESS = "RW";
pub const ACCESSCTRL_XIP_CTRL_OFFSET = _u(@as(c_int, 0x000000e0));
pub const ACCESSCTRL_XIP_CTRL_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_XIP_CTRL_RESET = _u(@as(c_int, 0x000000b8));
pub const ACCESSCTRL_XIP_CTRL_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_CTRL_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_XIP_CTRL_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_XIP_CTRL_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_XIP_CTRL_DBG_ACCESS = "RW";
pub const ACCESSCTRL_XIP_CTRL_DMA_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_XIP_CTRL_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_XIP_CTRL_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_XIP_CTRL_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_XIP_CTRL_DMA_ACCESS = "RW";
pub const ACCESSCTRL_XIP_CTRL_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_CTRL_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_XIP_CTRL_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_XIP_CTRL_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_XIP_CTRL_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_XIP_CTRL_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_CTRL_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_XIP_CTRL_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_XIP_CTRL_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_XIP_CTRL_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_XIP_CTRL_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_CTRL_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_XIP_CTRL_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_XIP_CTRL_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_XIP_CTRL_SP_ACCESS = "RW";
pub const ACCESSCTRL_XIP_CTRL_SU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_XIP_CTRL_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_XIP_CTRL_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_XIP_CTRL_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_XIP_CTRL_SU_ACCESS = "RW";
pub const ACCESSCTRL_XIP_CTRL_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_XIP_CTRL_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_XIP_CTRL_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_XIP_CTRL_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_XIP_CTRL_NSP_ACCESS = "RW";
pub const ACCESSCTRL_XIP_CTRL_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_XIP_CTRL_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_XIP_CTRL_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_XIP_CTRL_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_XIP_CTRL_NSU_ACCESS = "RW";
pub const ACCESSCTRL_XIP_QMI_OFFSET = _u(@as(c_int, 0x000000e4));
pub const ACCESSCTRL_XIP_QMI_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_XIP_QMI_RESET = _u(@as(c_int, 0x000000b8));
pub const ACCESSCTRL_XIP_QMI_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_QMI_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_XIP_QMI_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_XIP_QMI_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_XIP_QMI_DBG_ACCESS = "RW";
pub const ACCESSCTRL_XIP_QMI_DMA_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_XIP_QMI_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_XIP_QMI_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_XIP_QMI_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_XIP_QMI_DMA_ACCESS = "RW";
pub const ACCESSCTRL_XIP_QMI_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_QMI_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_XIP_QMI_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_XIP_QMI_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_XIP_QMI_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_XIP_QMI_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_QMI_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_XIP_QMI_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_XIP_QMI_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_XIP_QMI_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_XIP_QMI_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_QMI_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_XIP_QMI_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_XIP_QMI_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_XIP_QMI_SP_ACCESS = "RW";
pub const ACCESSCTRL_XIP_QMI_SU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_XIP_QMI_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_XIP_QMI_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_XIP_QMI_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_XIP_QMI_SU_ACCESS = "RW";
pub const ACCESSCTRL_XIP_QMI_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_XIP_QMI_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_XIP_QMI_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_XIP_QMI_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_XIP_QMI_NSP_ACCESS = "RW";
pub const ACCESSCTRL_XIP_QMI_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_XIP_QMI_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_XIP_QMI_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_XIP_QMI_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_XIP_QMI_NSU_ACCESS = "RW";
pub const ACCESSCTRL_XIP_AUX_OFFSET = _u(@as(c_int, 0x000000e8));
pub const ACCESSCTRL_XIP_AUX_BITS = _u(@as(c_int, 0x000000ff));
pub const ACCESSCTRL_XIP_AUX_RESET = _u(@as(c_int, 0x000000f8));
pub const ACCESSCTRL_XIP_AUX_DBG_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_AUX_DBG_BITS = _u(@as(c_int, 0x00000080));
pub const ACCESSCTRL_XIP_AUX_DBG_MSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_XIP_AUX_DBG_LSB = _u(@as(c_int, 7));
pub const ACCESSCTRL_XIP_AUX_DBG_ACCESS = "RW";
pub const ACCESSCTRL_XIP_AUX_DMA_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_AUX_DMA_BITS = _u(@as(c_int, 0x00000040));
pub const ACCESSCTRL_XIP_AUX_DMA_MSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_XIP_AUX_DMA_LSB = _u(@as(c_int, 6));
pub const ACCESSCTRL_XIP_AUX_DMA_ACCESS = "RW";
pub const ACCESSCTRL_XIP_AUX_CORE1_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_AUX_CORE1_BITS = _u(@as(c_int, 0x00000020));
pub const ACCESSCTRL_XIP_AUX_CORE1_MSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_XIP_AUX_CORE1_LSB = _u(@as(c_int, 5));
pub const ACCESSCTRL_XIP_AUX_CORE1_ACCESS = "RW";
pub const ACCESSCTRL_XIP_AUX_CORE0_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_AUX_CORE0_BITS = _u(@as(c_int, 0x00000010));
pub const ACCESSCTRL_XIP_AUX_CORE0_MSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_XIP_AUX_CORE0_LSB = _u(@as(c_int, 4));
pub const ACCESSCTRL_XIP_AUX_CORE0_ACCESS = "RW";
pub const ACCESSCTRL_XIP_AUX_SP_RESET = _u(@as(c_int, 0x1));
pub const ACCESSCTRL_XIP_AUX_SP_BITS = _u(@as(c_int, 0x00000008));
pub const ACCESSCTRL_XIP_AUX_SP_MSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_XIP_AUX_SP_LSB = _u(@as(c_int, 3));
pub const ACCESSCTRL_XIP_AUX_SP_ACCESS = "RW";
pub const ACCESSCTRL_XIP_AUX_SU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_XIP_AUX_SU_BITS = _u(@as(c_int, 0x00000004));
pub const ACCESSCTRL_XIP_AUX_SU_MSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_XIP_AUX_SU_LSB = _u(@as(c_int, 2));
pub const ACCESSCTRL_XIP_AUX_SU_ACCESS = "RW";
pub const ACCESSCTRL_XIP_AUX_NSP_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_XIP_AUX_NSP_BITS = _u(@as(c_int, 0x00000002));
pub const ACCESSCTRL_XIP_AUX_NSP_MSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_XIP_AUX_NSP_LSB = _u(@as(c_int, 1));
pub const ACCESSCTRL_XIP_AUX_NSP_ACCESS = "RW";
pub const ACCESSCTRL_XIP_AUX_NSU_RESET = _u(@as(c_int, 0x0));
pub const ACCESSCTRL_XIP_AUX_NSU_BITS = _u(@as(c_int, 0x00000001));
pub const ACCESSCTRL_XIP_AUX_NSU_MSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_XIP_AUX_NSU_LSB = _u(@as(c_int, 0));
pub const ACCESSCTRL_XIP_AUX_NSU_ACCESS = "RW";
pub const accessctrl_hw = @import("std").zig.c_translation.cast([*c]accessctrl_hw_t, ACCESSCTRL_BASE);
pub const _HARDWARE_REGS_ADC_H = "";
pub const ADC_CS_OFFSET = _u(@as(c_int, 0x00000000));
pub const ADC_CS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01fff70f, .hex));
pub const ADC_CS_RESET = _u(@as(c_int, 0x00000000));
pub const ADC_CS_RROBIN_RESET = _u(@as(c_int, 0x000));
pub const ADC_CS_RROBIN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01ff0000, .hex));
pub const ADC_CS_RROBIN_MSB = _u(@as(c_int, 24));
pub const ADC_CS_RROBIN_LSB = _u(@as(c_int, 16));
pub const ADC_CS_RROBIN_ACCESS = "RW";
pub const ADC_CS_AINSEL_RESET = _u(@as(c_int, 0x0));
pub const ADC_CS_AINSEL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const ADC_CS_AINSEL_MSB = _u(@as(c_int, 15));
pub const ADC_CS_AINSEL_LSB = _u(@as(c_int, 12));
pub const ADC_CS_AINSEL_ACCESS = "RW";
pub const ADC_CS_ERR_STICKY_RESET = _u(@as(c_int, 0x0));
pub const ADC_CS_ERR_STICKY_BITS = _u(@as(c_int, 0x00000400));
pub const ADC_CS_ERR_STICKY_MSB = _u(@as(c_int, 10));
pub const ADC_CS_ERR_STICKY_LSB = _u(@as(c_int, 10));
pub const ADC_CS_ERR_STICKY_ACCESS = "WC";
pub const ADC_CS_ERR_RESET = _u(@as(c_int, 0x0));
pub const ADC_CS_ERR_BITS = _u(@as(c_int, 0x00000200));
pub const ADC_CS_ERR_MSB = _u(@as(c_int, 9));
pub const ADC_CS_ERR_LSB = _u(@as(c_int, 9));
pub const ADC_CS_ERR_ACCESS = "RO";
pub const ADC_CS_READY_RESET = _u(@as(c_int, 0x0));
pub const ADC_CS_READY_BITS = _u(@as(c_int, 0x00000100));
pub const ADC_CS_READY_MSB = _u(@as(c_int, 8));
pub const ADC_CS_READY_LSB = _u(@as(c_int, 8));
pub const ADC_CS_READY_ACCESS = "RO";
pub const ADC_CS_START_MANY_RESET = _u(@as(c_int, 0x0));
pub const ADC_CS_START_MANY_BITS = _u(@as(c_int, 0x00000008));
pub const ADC_CS_START_MANY_MSB = _u(@as(c_int, 3));
pub const ADC_CS_START_MANY_LSB = _u(@as(c_int, 3));
pub const ADC_CS_START_MANY_ACCESS = "RW";
pub const ADC_CS_START_ONCE_RESET = _u(@as(c_int, 0x0));
pub const ADC_CS_START_ONCE_BITS = _u(@as(c_int, 0x00000004));
pub const ADC_CS_START_ONCE_MSB = _u(@as(c_int, 2));
pub const ADC_CS_START_ONCE_LSB = _u(@as(c_int, 2));
pub const ADC_CS_START_ONCE_ACCESS = "SC";
pub const ADC_CS_TS_EN_RESET = _u(@as(c_int, 0x0));
pub const ADC_CS_TS_EN_BITS = _u(@as(c_int, 0x00000002));
pub const ADC_CS_TS_EN_MSB = _u(@as(c_int, 1));
pub const ADC_CS_TS_EN_LSB = _u(@as(c_int, 1));
pub const ADC_CS_TS_EN_ACCESS = "RW";
pub const ADC_CS_EN_RESET = _u(@as(c_int, 0x0));
pub const ADC_CS_EN_BITS = _u(@as(c_int, 0x00000001));
pub const ADC_CS_EN_MSB = _u(@as(c_int, 0));
pub const ADC_CS_EN_LSB = _u(@as(c_int, 0));
pub const ADC_CS_EN_ACCESS = "RW";
pub const ADC_RESULT_OFFSET = _u(@as(c_int, 0x00000004));
pub const ADC_RESULT_BITS = _u(@as(c_int, 0x00000fff));
pub const ADC_RESULT_RESET = _u(@as(c_int, 0x00000000));
pub const ADC_RESULT_MSB = _u(@as(c_int, 11));
pub const ADC_RESULT_LSB = _u(@as(c_int, 0));
pub const ADC_RESULT_ACCESS = "RO";
pub const ADC_FCS_OFFSET = _u(@as(c_int, 0x00000008));
pub const ADC_FCS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f0f0f0f, .hex));
pub const ADC_FCS_RESET = _u(@as(c_int, 0x00000000));
pub const ADC_FCS_THRESH_RESET = _u(@as(c_int, 0x0));
pub const ADC_FCS_THRESH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f000000, .hex));
pub const ADC_FCS_THRESH_MSB = _u(@as(c_int, 27));
pub const ADC_FCS_THRESH_LSB = _u(@as(c_int, 24));
pub const ADC_FCS_THRESH_ACCESS = "RW";
pub const ADC_FCS_LEVEL_RESET = _u(@as(c_int, 0x0));
pub const ADC_FCS_LEVEL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hex));
pub const ADC_FCS_LEVEL_MSB = _u(@as(c_int, 19));
pub const ADC_FCS_LEVEL_LSB = _u(@as(c_int, 16));
pub const ADC_FCS_LEVEL_ACCESS = "RO";
pub const ADC_FCS_OVER_RESET = _u(@as(c_int, 0x0));
pub const ADC_FCS_OVER_BITS = _u(@as(c_int, 0x00000800));
pub const ADC_FCS_OVER_MSB = _u(@as(c_int, 11));
pub const ADC_FCS_OVER_LSB = _u(@as(c_int, 11));
pub const ADC_FCS_OVER_ACCESS = "WC";
pub const ADC_FCS_UNDER_RESET = _u(@as(c_int, 0x0));
pub const ADC_FCS_UNDER_BITS = _u(@as(c_int, 0x00000400));
pub const ADC_FCS_UNDER_MSB = _u(@as(c_int, 10));
pub const ADC_FCS_UNDER_LSB = _u(@as(c_int, 10));
pub const ADC_FCS_UNDER_ACCESS = "WC";
pub const ADC_FCS_FULL_RESET = _u(@as(c_int, 0x0));
pub const ADC_FCS_FULL_BITS = _u(@as(c_int, 0x00000200));
pub const ADC_FCS_FULL_MSB = _u(@as(c_int, 9));
pub const ADC_FCS_FULL_LSB = _u(@as(c_int, 9));
pub const ADC_FCS_FULL_ACCESS = "RO";
pub const ADC_FCS_EMPTY_RESET = _u(@as(c_int, 0x0));
pub const ADC_FCS_EMPTY_BITS = _u(@as(c_int, 0x00000100));
pub const ADC_FCS_EMPTY_MSB = _u(@as(c_int, 8));
pub const ADC_FCS_EMPTY_LSB = _u(@as(c_int, 8));
pub const ADC_FCS_EMPTY_ACCESS = "RO";
pub const ADC_FCS_DREQ_EN_RESET = _u(@as(c_int, 0x0));
pub const ADC_FCS_DREQ_EN_BITS = _u(@as(c_int, 0x00000008));
pub const ADC_FCS_DREQ_EN_MSB = _u(@as(c_int, 3));
pub const ADC_FCS_DREQ_EN_LSB = _u(@as(c_int, 3));
pub const ADC_FCS_DREQ_EN_ACCESS = "RW";
pub const ADC_FCS_ERR_RESET = _u(@as(c_int, 0x0));
pub const ADC_FCS_ERR_BITS = _u(@as(c_int, 0x00000004));
pub const ADC_FCS_ERR_MSB = _u(@as(c_int, 2));
pub const ADC_FCS_ERR_LSB = _u(@as(c_int, 2));
pub const ADC_FCS_ERR_ACCESS = "RW";
pub const ADC_FCS_SHIFT_RESET = _u(@as(c_int, 0x0));
pub const ADC_FCS_SHIFT_BITS = _u(@as(c_int, 0x00000002));
pub const ADC_FCS_SHIFT_MSB = _u(@as(c_int, 1));
pub const ADC_FCS_SHIFT_LSB = _u(@as(c_int, 1));
pub const ADC_FCS_SHIFT_ACCESS = "RW";
pub const ADC_FCS_EN_RESET = _u(@as(c_int, 0x0));
pub const ADC_FCS_EN_BITS = _u(@as(c_int, 0x00000001));
pub const ADC_FCS_EN_MSB = _u(@as(c_int, 0));
pub const ADC_FCS_EN_LSB = _u(@as(c_int, 0));
pub const ADC_FCS_EN_ACCESS = "RW";
pub const ADC_FIFO_OFFSET = _u(@as(c_int, 0x0000000c));
pub const ADC_FIFO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008fff, .hex));
pub const ADC_FIFO_RESET = _u(@as(c_int, 0x00000000));
pub const ADC_FIFO_ERR_RESET = "-";
pub const ADC_FIFO_ERR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const ADC_FIFO_ERR_MSB = _u(@as(c_int, 15));
pub const ADC_FIFO_ERR_LSB = _u(@as(c_int, 15));
pub const ADC_FIFO_ERR_ACCESS = "RF";
pub const ADC_FIFO_VAL_RESET = "-";
pub const ADC_FIFO_VAL_BITS = _u(@as(c_int, 0x00000fff));
pub const ADC_FIFO_VAL_MSB = _u(@as(c_int, 11));
pub const ADC_FIFO_VAL_LSB = _u(@as(c_int, 0));
pub const ADC_FIFO_VAL_ACCESS = "RF";
pub const ADC_DIV_OFFSET = _u(@as(c_int, 0x00000010));
pub const ADC_DIV_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hex));
pub const ADC_DIV_RESET = _u(@as(c_int, 0x00000000));
pub const ADC_DIV_INT_RESET = _u(@as(c_int, 0x0000));
pub const ADC_DIV_INT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffff00, .hex));
pub const ADC_DIV_INT_MSB = _u(@as(c_int, 23));
pub const ADC_DIV_INT_LSB = _u(@as(c_int, 8));
pub const ADC_DIV_INT_ACCESS = "RW";
pub const ADC_DIV_FRAC_RESET = _u(@as(c_int, 0x00));
pub const ADC_DIV_FRAC_BITS = _u(@as(c_int, 0x000000ff));
pub const ADC_DIV_FRAC_MSB = _u(@as(c_int, 7));
pub const ADC_DIV_FRAC_LSB = _u(@as(c_int, 0));
pub const ADC_DIV_FRAC_ACCESS = "RW";
pub const ADC_INTR_OFFSET = _u(@as(c_int, 0x00000014));
pub const ADC_INTR_BITS = _u(@as(c_int, 0x00000001));
pub const ADC_INTR_RESET = _u(@as(c_int, 0x00000000));
pub const ADC_INTR_FIFO_RESET = _u(@as(c_int, 0x0));
pub const ADC_INTR_FIFO_BITS = _u(@as(c_int, 0x00000001));
pub const ADC_INTR_FIFO_MSB = _u(@as(c_int, 0));
pub const ADC_INTR_FIFO_LSB = _u(@as(c_int, 0));
pub const ADC_INTR_FIFO_ACCESS = "RO";
pub const ADC_INTE_OFFSET = _u(@as(c_int, 0x00000018));
pub const ADC_INTE_BITS = _u(@as(c_int, 0x00000001));
pub const ADC_INTE_RESET = _u(@as(c_int, 0x00000000));
pub const ADC_INTE_FIFO_RESET = _u(@as(c_int, 0x0));
pub const ADC_INTE_FIFO_BITS = _u(@as(c_int, 0x00000001));
pub const ADC_INTE_FIFO_MSB = _u(@as(c_int, 0));
pub const ADC_INTE_FIFO_LSB = _u(@as(c_int, 0));
pub const ADC_INTE_FIFO_ACCESS = "RW";
pub const ADC_INTF_OFFSET = _u(@as(c_int, 0x0000001c));
pub const ADC_INTF_BITS = _u(@as(c_int, 0x00000001));
pub const ADC_INTF_RESET = _u(@as(c_int, 0x00000000));
pub const ADC_INTF_FIFO_RESET = _u(@as(c_int, 0x0));
pub const ADC_INTF_FIFO_BITS = _u(@as(c_int, 0x00000001));
pub const ADC_INTF_FIFO_MSB = _u(@as(c_int, 0));
pub const ADC_INTF_FIFO_LSB = _u(@as(c_int, 0));
pub const ADC_INTF_FIFO_ACCESS = "RW";
pub const ADC_INTS_OFFSET = _u(@as(c_int, 0x00000020));
pub const ADC_INTS_BITS = _u(@as(c_int, 0x00000001));
pub const ADC_INTS_RESET = _u(@as(c_int, 0x00000000));
pub const ADC_INTS_FIFO_RESET = _u(@as(c_int, 0x0));
pub const ADC_INTS_FIFO_BITS = _u(@as(c_int, 0x00000001));
pub const ADC_INTS_FIFO_MSB = _u(@as(c_int, 0));
pub const ADC_INTS_FIFO_LSB = _u(@as(c_int, 0));
pub const ADC_INTS_FIFO_ACCESS = "RO";
pub const adc_hw = @import("std").zig.c_translation.cast([*c]adc_hw_t, ADC_BASE);
pub const _HARDWARE_GPIO_H = "";
pub const _HARDWARE_STRUCTS_SIO_H = "";
pub const _HARDWARE_STRUCTS_INTERP_H = "";
pub const interp_hw_array = @import("std").zig.c_translation.cast([*c]interp_hw_t, SIO_BASE + SIO_INTERP0_ACCUM0_OFFSET);
pub const interp_hw_array_ns = @import("std").zig.c_translation.cast([*c]interp_hw_t, SIO_NONSEC_BASE + SIO_INTERP0_ACCUM0_OFFSET);
pub const interp0_hw = &interp_hw_array[@as(usize, @intCast(@as(c_int, 0)))];
pub const interp1_hw = &interp_hw_array[@as(usize, @intCast(@as(c_int, 1)))];
pub const sio_hw = @import("std").zig.c_translation.cast([*c]sio_hw_t, SIO_BASE);
pub const sio_ns_hw = @import("std").zig.c_translation.cast([*c]sio_hw_t, SIO_NONSEC_BASE);
pub const _HARDWARE_STRUCTS_PADS_BANK0_H = "";
pub const _HARDWARE_REGS_PADS_BANK0_H = "";
pub const PADS_BANK0_VOLTAGE_SELECT_OFFSET = _u(@as(c_int, 0x00000000));
pub const PADS_BANK0_VOLTAGE_SELECT_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_VOLTAGE_SELECT_RESET = _u(@as(c_int, 0x00000000));
pub const PADS_BANK0_VOLTAGE_SELECT_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_VOLTAGE_SELECT_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_VOLTAGE_SELECT_ACCESS = "RW";
pub const PADS_BANK0_VOLTAGE_SELECT_VALUE_3V3 = _u(@as(c_int, 0x0));
pub const PADS_BANK0_VOLTAGE_SELECT_VALUE_1V8 = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO0_OFFSET = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO0_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO0_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO0_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO0_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO0_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO0_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO0_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO0_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO0_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO0_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO0_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO0_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO0_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO0_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO0_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO0_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO0_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO0_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO0_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO0_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO0_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO0_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO0_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO0_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO0_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO0_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO0_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO0_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO0_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO0_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO0_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO0_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO0_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO0_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO0_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO0_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO0_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO0_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO0_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO0_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO0_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO0_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO0_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO0_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO0_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO0_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO1_OFFSET = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO1_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO1_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO1_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO1_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO1_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO1_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO1_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO1_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO1_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO1_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO1_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO1_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO1_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO1_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO1_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO1_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO1_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO1_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO1_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO1_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO1_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO1_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO1_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO1_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO1_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO1_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO1_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO1_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO1_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO1_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO1_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO1_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO1_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO1_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO1_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO1_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO1_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO1_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO1_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO1_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO1_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO1_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO1_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO1_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO1_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO1_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO2_OFFSET = _u(@as(c_int, 0x0000000c));
pub const PADS_BANK0_GPIO2_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO2_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO2_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO2_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO2_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO2_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO2_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO2_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO2_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO2_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO2_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO2_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO2_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO2_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO2_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO2_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO2_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO2_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO2_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO2_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO2_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO2_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO2_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO2_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO2_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO2_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO2_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO2_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO2_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO2_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO2_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO2_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO2_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO2_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO2_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO2_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO2_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO2_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO2_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO2_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO2_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO2_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO2_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO2_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO2_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO2_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO3_OFFSET = _u(@as(c_int, 0x00000010));
pub const PADS_BANK0_GPIO3_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO3_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO3_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO3_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO3_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO3_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO3_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO3_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO3_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO3_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO3_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO3_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO3_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO3_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO3_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO3_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO3_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO3_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO3_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO3_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO3_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO3_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO3_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO3_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO3_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO3_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO3_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO3_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO3_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO3_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO3_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO3_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO3_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO3_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO3_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO3_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO3_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO3_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO3_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO3_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO3_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO3_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO3_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO3_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO3_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO3_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO4_OFFSET = _u(@as(c_int, 0x00000014));
pub const PADS_BANK0_GPIO4_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO4_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO4_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO4_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO4_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO4_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO4_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO4_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO4_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO4_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO4_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO4_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO4_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO4_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO4_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO4_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO4_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO4_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO4_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO4_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO4_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO4_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO4_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO4_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO4_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO4_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO4_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO4_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO4_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO4_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO4_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO4_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO4_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO4_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO4_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO4_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO4_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO4_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO4_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO4_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO4_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO4_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO4_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO4_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO4_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO4_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO5_OFFSET = _u(@as(c_int, 0x00000018));
pub const PADS_BANK0_GPIO5_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO5_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO5_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO5_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO5_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO5_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO5_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO5_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO5_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO5_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO5_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO5_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO5_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO5_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO5_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO5_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO5_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO5_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO5_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO5_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO5_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO5_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO5_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO5_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO5_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO5_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO5_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO5_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO5_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO5_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO5_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO5_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO5_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO5_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO5_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO5_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO5_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO5_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO5_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO5_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO5_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO5_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO5_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO5_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO5_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO5_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO6_OFFSET = _u(@as(c_int, 0x0000001c));
pub const PADS_BANK0_GPIO6_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO6_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO6_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO6_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO6_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO6_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO6_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO6_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO6_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO6_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO6_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO6_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO6_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO6_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO6_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO6_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO6_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO6_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO6_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO6_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO6_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO6_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO6_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO6_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO6_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO6_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO6_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO6_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO6_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO6_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO6_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO6_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO6_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO6_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO6_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO6_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO6_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO6_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO6_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO6_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO6_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO6_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO6_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO6_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO6_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO6_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO7_OFFSET = _u(@as(c_int, 0x00000020));
pub const PADS_BANK0_GPIO7_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO7_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO7_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO7_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO7_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO7_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO7_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO7_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO7_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO7_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO7_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO7_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO7_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO7_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO7_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO7_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO7_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO7_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO7_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO7_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO7_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO7_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO7_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO7_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO7_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO7_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO7_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO7_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO7_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO7_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO7_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO7_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO7_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO7_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO7_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO7_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO7_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO7_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO7_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO7_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO7_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO7_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO7_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO7_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO7_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO7_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO8_OFFSET = _u(@as(c_int, 0x00000024));
pub const PADS_BANK0_GPIO8_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO8_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO8_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO8_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO8_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO8_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO8_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO8_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO8_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO8_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO8_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO8_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO8_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO8_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO8_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO8_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO8_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO8_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO8_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO8_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO8_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO8_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO8_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO8_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO8_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO8_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO8_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO8_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO8_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO8_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO8_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO8_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO8_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO8_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO8_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO8_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO8_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO8_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO8_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO8_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO8_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO8_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO8_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO8_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO8_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO8_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO9_OFFSET = _u(@as(c_int, 0x00000028));
pub const PADS_BANK0_GPIO9_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO9_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO9_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO9_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO9_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO9_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO9_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO9_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO9_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO9_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO9_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO9_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO9_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO9_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO9_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO9_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO9_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO9_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO9_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO9_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO9_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO9_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO9_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO9_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO9_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO9_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO9_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO9_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO9_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO9_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO9_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO9_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO9_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO9_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO9_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO9_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO9_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO9_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO9_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO9_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO9_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO9_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO9_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO9_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO9_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO9_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO10_OFFSET = _u(@as(c_int, 0x0000002c));
pub const PADS_BANK0_GPIO10_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO10_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO10_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO10_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO10_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO10_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO10_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO10_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO10_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO10_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO10_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO10_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO10_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO10_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO10_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO10_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO10_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO10_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO10_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO10_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO10_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO10_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO10_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO10_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO10_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO10_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO10_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO10_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO10_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO10_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO10_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO10_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO10_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO10_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO10_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO10_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO10_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO10_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO10_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO10_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO10_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO10_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO10_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO10_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO10_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO10_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO11_OFFSET = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO11_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO11_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO11_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO11_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO11_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO11_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO11_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO11_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO11_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO11_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO11_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO11_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO11_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO11_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO11_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO11_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO11_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO11_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO11_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO11_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO11_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO11_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO11_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO11_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO11_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO11_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO11_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO11_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO11_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO11_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO11_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO11_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO11_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO11_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO11_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO11_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO11_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO11_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO11_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO11_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO11_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO11_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO11_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO11_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO11_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO11_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO12_OFFSET = _u(@as(c_int, 0x00000034));
pub const PADS_BANK0_GPIO12_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO12_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO12_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO12_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO12_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO12_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO12_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO12_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO12_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO12_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO12_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO12_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO12_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO12_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO12_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO12_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO12_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO12_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO12_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO12_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO12_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO12_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO12_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO12_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO12_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO12_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO12_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO12_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO12_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO12_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO12_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO12_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO12_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO12_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO12_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO12_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO12_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO12_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO12_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO12_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO12_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO12_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO12_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO12_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO12_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO12_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO13_OFFSET = _u(@as(c_int, 0x00000038));
pub const PADS_BANK0_GPIO13_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO13_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO13_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO13_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO13_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO13_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO13_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO13_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO13_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO13_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO13_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO13_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO13_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO13_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO13_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO13_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO13_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO13_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO13_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO13_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO13_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO13_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO13_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO13_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO13_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO13_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO13_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO13_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO13_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO13_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO13_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO13_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO13_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO13_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO13_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO13_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO13_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO13_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO13_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO13_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO13_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO13_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO13_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO13_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO13_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO13_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO14_OFFSET = _u(@as(c_int, 0x0000003c));
pub const PADS_BANK0_GPIO14_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO14_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO14_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO14_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO14_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO14_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO14_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO14_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO14_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO14_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO14_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO14_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO14_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO14_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO14_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO14_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO14_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO14_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO14_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO14_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO14_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO14_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO14_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO14_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO14_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO14_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO14_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO14_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO14_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO14_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO14_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO14_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO14_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO14_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO14_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO14_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO14_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO14_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO14_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO14_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO14_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO14_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO14_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO14_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO14_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO14_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO15_OFFSET = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO15_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO15_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO15_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO15_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO15_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO15_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO15_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO15_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO15_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO15_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO15_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO15_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO15_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO15_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO15_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO15_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO15_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO15_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO15_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO15_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO15_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO15_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO15_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO15_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO15_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO15_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO15_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO15_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO15_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO15_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO15_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO15_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO15_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO15_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO15_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO15_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO15_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO15_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO15_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO15_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO15_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO15_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO15_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO15_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO15_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO15_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO16_OFFSET = _u(@as(c_int, 0x00000044));
pub const PADS_BANK0_GPIO16_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO16_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO16_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO16_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO16_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO16_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO16_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO16_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO16_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO16_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO16_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO16_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO16_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO16_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO16_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO16_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO16_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO16_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO16_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO16_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO16_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO16_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO16_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO16_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO16_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO16_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO16_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO16_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO16_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO16_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO16_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO16_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO16_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO16_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO16_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO16_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO16_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO16_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO16_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO16_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO16_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO16_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO16_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO16_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO16_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO16_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO17_OFFSET = _u(@as(c_int, 0x00000048));
pub const PADS_BANK0_GPIO17_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO17_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO17_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO17_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO17_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO17_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO17_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO17_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO17_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO17_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO17_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO17_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO17_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO17_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO17_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO17_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO17_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO17_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO17_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO17_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO17_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO17_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO17_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO17_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO17_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO17_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO17_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO17_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO17_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO17_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO17_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO17_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO17_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO17_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO17_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO17_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO17_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO17_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO17_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO17_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO17_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO17_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO17_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO17_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO17_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO17_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO18_OFFSET = _u(@as(c_int, 0x0000004c));
pub const PADS_BANK0_GPIO18_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO18_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO18_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO18_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO18_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO18_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO18_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO18_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO18_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO18_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO18_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO18_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO18_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO18_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO18_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO18_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO18_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO18_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO18_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO18_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO18_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO18_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO18_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO18_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO18_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO18_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO18_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO18_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO18_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO18_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO18_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO18_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO18_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO18_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO18_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO18_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO18_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO18_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO18_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO18_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO18_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO18_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO18_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO18_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO18_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO18_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO19_OFFSET = _u(@as(c_int, 0x00000050));
pub const PADS_BANK0_GPIO19_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO19_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO19_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO19_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO19_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO19_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO19_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO19_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO19_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO19_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO19_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO19_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO19_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO19_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO19_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO19_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO19_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO19_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO19_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO19_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO19_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO19_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO19_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO19_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO19_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO19_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO19_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO19_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO19_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO19_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO19_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO19_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO19_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO19_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO19_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO19_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO19_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO19_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO19_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO19_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO19_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO19_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO19_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO19_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO19_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO19_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO20_OFFSET = _u(@as(c_int, 0x00000054));
pub const PADS_BANK0_GPIO20_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO20_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO20_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO20_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO20_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO20_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO20_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO20_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO20_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO20_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO20_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO20_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO20_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO20_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO20_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO20_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO20_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO20_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO20_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO20_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO20_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO20_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO20_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO20_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO20_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO20_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO20_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO20_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO20_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO20_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO20_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO20_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO20_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO20_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO20_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO20_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO20_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO20_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO20_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO20_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO20_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO20_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO20_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO20_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO20_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO20_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO21_OFFSET = _u(@as(c_int, 0x00000058));
pub const PADS_BANK0_GPIO21_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO21_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO21_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO21_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO21_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO21_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO21_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO21_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO21_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO21_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO21_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO21_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO21_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO21_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO21_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO21_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO21_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO21_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO21_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO21_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO21_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO21_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO21_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO21_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO21_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO21_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO21_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO21_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO21_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO21_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO21_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO21_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO21_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO21_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO21_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO21_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO21_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO21_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO21_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO21_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO21_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO21_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO21_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO21_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO21_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO21_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO22_OFFSET = _u(@as(c_int, 0x0000005c));
pub const PADS_BANK0_GPIO22_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO22_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO22_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO22_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO22_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO22_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO22_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO22_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO22_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO22_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO22_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO22_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO22_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO22_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO22_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO22_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO22_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO22_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO22_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO22_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO22_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO22_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO22_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO22_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO22_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO22_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO22_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO22_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO22_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO22_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO22_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO22_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO22_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO22_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO22_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO22_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO22_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO22_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO22_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO22_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO22_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO22_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO22_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO22_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO22_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO22_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO23_OFFSET = _u(@as(c_int, 0x00000060));
pub const PADS_BANK0_GPIO23_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO23_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO23_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO23_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO23_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO23_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO23_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO23_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO23_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO23_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO23_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO23_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO23_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO23_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO23_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO23_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO23_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO23_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO23_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO23_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO23_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO23_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO23_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO23_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO23_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO23_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO23_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO23_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO23_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO23_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO23_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO23_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO23_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO23_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO23_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO23_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO23_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO23_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO23_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO23_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO23_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO23_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO23_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO23_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO23_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO23_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO24_OFFSET = _u(@as(c_int, 0x00000064));
pub const PADS_BANK0_GPIO24_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO24_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO24_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO24_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO24_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO24_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO24_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO24_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO24_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO24_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO24_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO24_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO24_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO24_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO24_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO24_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO24_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO24_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO24_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO24_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO24_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO24_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO24_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO24_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO24_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO24_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO24_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO24_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO24_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO24_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO24_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO24_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO24_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO24_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO24_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO24_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO24_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO24_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO24_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO24_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO24_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO24_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO24_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO24_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO24_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO24_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO25_OFFSET = _u(@as(c_int, 0x00000068));
pub const PADS_BANK0_GPIO25_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO25_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO25_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO25_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO25_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO25_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO25_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO25_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO25_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO25_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO25_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO25_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO25_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO25_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO25_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO25_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO25_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO25_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO25_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO25_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO25_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO25_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO25_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO25_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO25_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO25_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO25_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO25_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO25_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO25_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO25_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO25_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO25_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO25_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO25_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO25_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO25_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO25_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO25_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO25_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO25_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO25_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO25_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO25_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO25_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO25_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO26_OFFSET = _u(@as(c_int, 0x0000006c));
pub const PADS_BANK0_GPIO26_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO26_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO26_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO26_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO26_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO26_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO26_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO26_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO26_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO26_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO26_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO26_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO26_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO26_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO26_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO26_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO26_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO26_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO26_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO26_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO26_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO26_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO26_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO26_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO26_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO26_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO26_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO26_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO26_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO26_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO26_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO26_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO26_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO26_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO26_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO26_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO26_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO26_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO26_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO26_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO26_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO26_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO26_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO26_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO26_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO26_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO27_OFFSET = _u(@as(c_int, 0x00000070));
pub const PADS_BANK0_GPIO27_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO27_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO27_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO27_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO27_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO27_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO27_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO27_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO27_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO27_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO27_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO27_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO27_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO27_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO27_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO27_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO27_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO27_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO27_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO27_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO27_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO27_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO27_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO27_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO27_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO27_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO27_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO27_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO27_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO27_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO27_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO27_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO27_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO27_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO27_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO27_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO27_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO27_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO27_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO27_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO27_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO27_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO27_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO27_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO27_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO27_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO28_OFFSET = _u(@as(c_int, 0x00000074));
pub const PADS_BANK0_GPIO28_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO28_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO28_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO28_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO28_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO28_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO28_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO28_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO28_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO28_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO28_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO28_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO28_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO28_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO28_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO28_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO28_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO28_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO28_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO28_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO28_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO28_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO28_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO28_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO28_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO28_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO28_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO28_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO28_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO28_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO28_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO28_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO28_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO28_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO28_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO28_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO28_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO28_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO28_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO28_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO28_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO28_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO28_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO28_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO28_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO28_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO29_OFFSET = _u(@as(c_int, 0x00000078));
pub const PADS_BANK0_GPIO29_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO29_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO29_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO29_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO29_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO29_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO29_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO29_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO29_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO29_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO29_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO29_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO29_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO29_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO29_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO29_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO29_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO29_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO29_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO29_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO29_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO29_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO29_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO29_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO29_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO29_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO29_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO29_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO29_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO29_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO29_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO29_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO29_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO29_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO29_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO29_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO29_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO29_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO29_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO29_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO29_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO29_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO29_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO29_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO29_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO29_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO30_OFFSET = _u(@as(c_int, 0x0000007c));
pub const PADS_BANK0_GPIO30_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO30_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO30_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO30_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO30_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO30_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO30_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO30_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO30_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO30_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO30_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO30_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO30_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO30_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO30_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO30_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO30_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO30_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO30_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO30_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO30_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO30_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO30_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO30_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO30_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO30_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO30_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO30_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO30_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO30_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO30_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO30_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO30_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO30_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO30_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO30_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO30_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO30_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO30_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO30_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO30_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO30_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO30_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO30_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO30_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO30_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO31_OFFSET = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO31_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO31_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO31_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO31_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO31_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO31_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO31_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO31_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO31_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO31_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO31_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO31_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO31_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO31_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO31_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO31_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO31_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO31_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO31_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO31_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO31_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO31_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO31_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO31_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO31_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO31_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO31_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO31_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO31_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO31_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO31_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO31_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO31_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO31_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO31_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO31_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO31_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO31_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO31_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO31_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO31_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO31_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO31_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO31_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO31_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO31_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO32_OFFSET = _u(@as(c_int, 0x00000084));
pub const PADS_BANK0_GPIO32_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO32_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO32_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO32_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO32_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO32_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO32_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO32_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO32_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO32_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO32_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO32_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO32_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO32_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO32_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO32_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO32_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO32_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO32_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO32_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO32_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO32_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO32_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO32_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO32_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO32_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO32_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO32_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO32_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO32_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO32_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO32_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO32_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO32_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO32_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO32_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO32_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO32_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO32_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO32_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO32_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO32_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO32_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO32_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO32_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO32_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO33_OFFSET = _u(@as(c_int, 0x00000088));
pub const PADS_BANK0_GPIO33_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO33_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO33_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO33_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO33_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO33_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO33_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO33_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO33_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO33_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO33_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO33_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO33_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO33_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO33_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO33_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO33_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO33_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO33_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO33_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO33_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO33_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO33_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO33_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO33_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO33_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO33_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO33_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO33_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO33_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO33_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO33_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO33_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO33_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO33_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO33_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO33_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO33_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO33_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO33_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO33_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO33_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO33_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO33_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO33_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO33_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO34_OFFSET = _u(@as(c_int, 0x0000008c));
pub const PADS_BANK0_GPIO34_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO34_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO34_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO34_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO34_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO34_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO34_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO34_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO34_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO34_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO34_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO34_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO34_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO34_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO34_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO34_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO34_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO34_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO34_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO34_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO34_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO34_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO34_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO34_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO34_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO34_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO34_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO34_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO34_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO34_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO34_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO34_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO34_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO34_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO34_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO34_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO34_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO34_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO34_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO34_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO34_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO34_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO34_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO34_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO34_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO34_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO35_OFFSET = _u(@as(c_int, 0x00000090));
pub const PADS_BANK0_GPIO35_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO35_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO35_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO35_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO35_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO35_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO35_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO35_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO35_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO35_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO35_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO35_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO35_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO35_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO35_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO35_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO35_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO35_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO35_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO35_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO35_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO35_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO35_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO35_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO35_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO35_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO35_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO35_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO35_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO35_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO35_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO35_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO35_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO35_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO35_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO35_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO35_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO35_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO35_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO35_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO35_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO35_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO35_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO35_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO35_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO35_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO36_OFFSET = _u(@as(c_int, 0x00000094));
pub const PADS_BANK0_GPIO36_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO36_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO36_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO36_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO36_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO36_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO36_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO36_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO36_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO36_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO36_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO36_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO36_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO36_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO36_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO36_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO36_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO36_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO36_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO36_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO36_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO36_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO36_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO36_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO36_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO36_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO36_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO36_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO36_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO36_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO36_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO36_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO36_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO36_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO36_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO36_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO36_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO36_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO36_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO36_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO36_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO36_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO36_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO36_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO36_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO36_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO37_OFFSET = _u(@as(c_int, 0x00000098));
pub const PADS_BANK0_GPIO37_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO37_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO37_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO37_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO37_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO37_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO37_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO37_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO37_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO37_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO37_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO37_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO37_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO37_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO37_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO37_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO37_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO37_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO37_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO37_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO37_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO37_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO37_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO37_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO37_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO37_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO37_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO37_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO37_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO37_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO37_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO37_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO37_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO37_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO37_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO37_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO37_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO37_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO37_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO37_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO37_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO37_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO37_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO37_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO37_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO37_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO38_OFFSET = _u(@as(c_int, 0x0000009c));
pub const PADS_BANK0_GPIO38_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO38_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO38_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO38_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO38_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO38_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO38_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO38_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO38_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO38_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO38_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO38_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO38_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO38_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO38_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO38_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO38_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO38_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO38_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO38_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO38_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO38_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO38_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO38_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO38_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO38_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO38_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO38_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO38_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO38_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO38_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO38_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO38_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO38_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO38_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO38_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO38_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO38_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO38_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO38_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO38_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO38_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO38_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO38_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO38_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO38_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO39_OFFSET = _u(@as(c_int, 0x000000a0));
pub const PADS_BANK0_GPIO39_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO39_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO39_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO39_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO39_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO39_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO39_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO39_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO39_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO39_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO39_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO39_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO39_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO39_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO39_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO39_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO39_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO39_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO39_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO39_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO39_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO39_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO39_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO39_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO39_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO39_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO39_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO39_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO39_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO39_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO39_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO39_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO39_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO39_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO39_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO39_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO39_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO39_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO39_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO39_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO39_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO39_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO39_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO39_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO39_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO39_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO40_OFFSET = _u(@as(c_int, 0x000000a4));
pub const PADS_BANK0_GPIO40_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO40_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO40_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO40_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO40_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO40_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO40_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO40_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO40_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO40_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO40_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO40_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO40_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO40_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO40_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO40_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO40_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO40_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO40_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO40_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO40_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO40_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO40_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO40_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO40_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO40_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO40_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO40_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO40_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO40_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO40_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO40_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO40_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO40_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO40_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO40_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO40_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO40_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO40_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO40_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO40_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO40_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO40_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO40_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO40_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO40_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO41_OFFSET = _u(@as(c_int, 0x000000a8));
pub const PADS_BANK0_GPIO41_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO41_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO41_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO41_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO41_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO41_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO41_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO41_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO41_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO41_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO41_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO41_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO41_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO41_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO41_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO41_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO41_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO41_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO41_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO41_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO41_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO41_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO41_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO41_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO41_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO41_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO41_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO41_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO41_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO41_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO41_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO41_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO41_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO41_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO41_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO41_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO41_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO41_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO41_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO41_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO41_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO41_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO41_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO41_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO41_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO41_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO42_OFFSET = _u(@as(c_int, 0x000000ac));
pub const PADS_BANK0_GPIO42_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO42_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO42_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO42_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO42_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO42_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO42_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO42_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO42_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO42_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO42_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO42_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO42_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO42_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO42_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO42_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO42_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO42_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO42_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO42_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO42_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO42_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO42_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO42_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO42_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO42_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO42_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO42_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO42_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO42_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO42_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO42_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO42_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO42_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO42_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO42_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO42_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO42_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO42_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO42_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO42_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO42_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO42_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO42_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO42_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO42_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO43_OFFSET = _u(@as(c_int, 0x000000b0));
pub const PADS_BANK0_GPIO43_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO43_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO43_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO43_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO43_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO43_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO43_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO43_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO43_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO43_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO43_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO43_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO43_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO43_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO43_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO43_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO43_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO43_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO43_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO43_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO43_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO43_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO43_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO43_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO43_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO43_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO43_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO43_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO43_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO43_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO43_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO43_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO43_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO43_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO43_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO43_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO43_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO43_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO43_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO43_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO43_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO43_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO43_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO43_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO43_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO43_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO44_OFFSET = _u(@as(c_int, 0x000000b4));
pub const PADS_BANK0_GPIO44_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO44_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO44_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO44_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO44_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO44_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO44_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO44_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO44_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO44_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO44_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO44_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO44_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO44_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO44_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO44_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO44_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO44_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO44_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO44_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO44_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO44_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO44_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO44_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO44_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO44_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO44_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO44_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO44_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO44_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO44_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO44_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO44_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO44_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO44_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO44_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO44_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO44_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO44_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO44_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO44_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO44_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO44_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO44_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO44_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO44_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO45_OFFSET = _u(@as(c_int, 0x000000b8));
pub const PADS_BANK0_GPIO45_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO45_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO45_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO45_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO45_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO45_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO45_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO45_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO45_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO45_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO45_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO45_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO45_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO45_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO45_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO45_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO45_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO45_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO45_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO45_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO45_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO45_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO45_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO45_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO45_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO45_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO45_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO45_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO45_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO45_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO45_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO45_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO45_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO45_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO45_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO45_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO45_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO45_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO45_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO45_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO45_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO45_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO45_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO45_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO45_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO45_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO46_OFFSET = _u(@as(c_int, 0x000000bc));
pub const PADS_BANK0_GPIO46_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO46_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO46_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO46_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO46_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO46_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO46_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO46_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO46_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO46_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO46_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO46_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO46_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO46_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO46_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO46_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO46_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO46_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO46_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO46_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO46_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO46_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO46_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO46_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO46_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO46_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO46_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO46_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO46_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO46_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO46_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO46_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO46_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO46_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO46_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO46_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO46_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO46_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO46_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO46_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO46_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO46_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO46_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO46_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO46_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO46_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_GPIO47_OFFSET = _u(@as(c_int, 0x000000c0));
pub const PADS_BANK0_GPIO47_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_GPIO47_RESET = _u(@as(c_int, 0x00000116));
pub const PADS_BANK0_GPIO47_ISO_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO47_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_GPIO47_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO47_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_GPIO47_ISO_ACCESS = "RW";
pub const PADS_BANK0_GPIO47_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO47_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_GPIO47_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO47_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_GPIO47_OD_ACCESS = "RW";
pub const PADS_BANK0_GPIO47_IE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO47_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_GPIO47_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO47_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_GPIO47_IE_ACCESS = "RW";
pub const PADS_BANK0_GPIO47_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO47_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_GPIO47_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_GPIO47_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_GPIO47_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_GPIO47_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO47_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO47_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_GPIO47_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_GPIO47_PUE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO47_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_GPIO47_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO47_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_GPIO47_PUE_ACCESS = "RW";
pub const PADS_BANK0_GPIO47_PDE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO47_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_GPIO47_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO47_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_GPIO47_PDE_ACCESS = "RW";
pub const PADS_BANK0_GPIO47_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_GPIO47_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_GPIO47_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO47_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_GPIO47_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_GPIO47_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_GPIO47_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_GPIO47_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO47_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_GPIO47_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_SWCLK_OFFSET = _u(@as(c_int, 0x000000c4));
pub const PADS_BANK0_SWCLK_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_SWCLK_RESET = _u(@as(c_int, 0x0000005a));
pub const PADS_BANK0_SWCLK_ISO_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_SWCLK_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_SWCLK_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_SWCLK_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_SWCLK_ISO_ACCESS = "RW";
pub const PADS_BANK0_SWCLK_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_SWCLK_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_SWCLK_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_SWCLK_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_SWCLK_OD_ACCESS = "RW";
pub const PADS_BANK0_SWCLK_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWCLK_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_SWCLK_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_SWCLK_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_SWCLK_IE_ACCESS = "RW";
pub const PADS_BANK0_SWCLK_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWCLK_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_SWCLK_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_SWCLK_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_SWCLK_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_SWCLK_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_SWCLK_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWCLK_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_SWCLK_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_SWCLK_PUE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWCLK_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_SWCLK_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_SWCLK_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_SWCLK_PUE_ACCESS = "RW";
pub const PADS_BANK0_SWCLK_PDE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_SWCLK_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_SWCLK_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_SWCLK_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_SWCLK_PDE_ACCESS = "RW";
pub const PADS_BANK0_SWCLK_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWCLK_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_SWCLK_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_SWCLK_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_SWCLK_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_SWCLK_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_SWCLK_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_SWCLK_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_SWCLK_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_SWCLK_SLEWFAST_ACCESS = "RW";
pub const PADS_BANK0_SWD_OFFSET = _u(@as(c_int, 0x000000c8));
pub const PADS_BANK0_SWD_BITS = _u(@as(c_int, 0x000001ff));
pub const PADS_BANK0_SWD_RESET = _u(@as(c_int, 0x0000005a));
pub const PADS_BANK0_SWD_ISO_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_SWD_ISO_BITS = _u(@as(c_int, 0x00000100));
pub const PADS_BANK0_SWD_ISO_MSB = _u(@as(c_int, 8));
pub const PADS_BANK0_SWD_ISO_LSB = _u(@as(c_int, 8));
pub const PADS_BANK0_SWD_ISO_ACCESS = "RW";
pub const PADS_BANK0_SWD_OD_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_SWD_OD_BITS = _u(@as(c_int, 0x00000080));
pub const PADS_BANK0_SWD_OD_MSB = _u(@as(c_int, 7));
pub const PADS_BANK0_SWD_OD_LSB = _u(@as(c_int, 7));
pub const PADS_BANK0_SWD_OD_ACCESS = "RW";
pub const PADS_BANK0_SWD_IE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWD_IE_BITS = _u(@as(c_int, 0x00000040));
pub const PADS_BANK0_SWD_IE_MSB = _u(@as(c_int, 6));
pub const PADS_BANK0_SWD_IE_LSB = _u(@as(c_int, 6));
pub const PADS_BANK0_SWD_IE_ACCESS = "RW";
pub const PADS_BANK0_SWD_DRIVE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWD_DRIVE_BITS = _u(@as(c_int, 0x00000030));
pub const PADS_BANK0_SWD_DRIVE_MSB = _u(@as(c_int, 5));
pub const PADS_BANK0_SWD_DRIVE_LSB = _u(@as(c_int, 4));
pub const PADS_BANK0_SWD_DRIVE_ACCESS = "RW";
pub const PADS_BANK0_SWD_DRIVE_VALUE_2MA = _u(@as(c_int, 0x0));
pub const PADS_BANK0_SWD_DRIVE_VALUE_4MA = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWD_DRIVE_VALUE_8MA = _u(@as(c_int, 0x2));
pub const PADS_BANK0_SWD_DRIVE_VALUE_12MA = _u(@as(c_int, 0x3));
pub const PADS_BANK0_SWD_PUE_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWD_PUE_BITS = _u(@as(c_int, 0x00000008));
pub const PADS_BANK0_SWD_PUE_MSB = _u(@as(c_int, 3));
pub const PADS_BANK0_SWD_PUE_LSB = _u(@as(c_int, 3));
pub const PADS_BANK0_SWD_PUE_ACCESS = "RW";
pub const PADS_BANK0_SWD_PDE_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_SWD_PDE_BITS = _u(@as(c_int, 0x00000004));
pub const PADS_BANK0_SWD_PDE_MSB = _u(@as(c_int, 2));
pub const PADS_BANK0_SWD_PDE_LSB = _u(@as(c_int, 2));
pub const PADS_BANK0_SWD_PDE_ACCESS = "RW";
pub const PADS_BANK0_SWD_SCHMITT_RESET = _u(@as(c_int, 0x1));
pub const PADS_BANK0_SWD_SCHMITT_BITS = _u(@as(c_int, 0x00000002));
pub const PADS_BANK0_SWD_SCHMITT_MSB = _u(@as(c_int, 1));
pub const PADS_BANK0_SWD_SCHMITT_LSB = _u(@as(c_int, 1));
pub const PADS_BANK0_SWD_SCHMITT_ACCESS = "RW";
pub const PADS_BANK0_SWD_SLEWFAST_RESET = _u(@as(c_int, 0x0));
pub const PADS_BANK0_SWD_SLEWFAST_BITS = _u(@as(c_int, 0x00000001));
pub const PADS_BANK0_SWD_SLEWFAST_MSB = _u(@as(c_int, 0));
pub const PADS_BANK0_SWD_SLEWFAST_LSB = _u(@as(c_int, 0));
pub const PADS_BANK0_SWD_SLEWFAST_ACCESS = "RW";
pub const pads_bank0_hw = @import("std").zig.c_translation.cast([*c]pads_bank0_hw_t, PADS_BANK0_BASE);
pub const _HARDWARE_STRUCTS_IO_BANK0_H = "";
pub const _HARDWARE_REGS_IO_BANK0_H = "";
pub const IO_BANK0_GPIO0_STATUS_OFFSET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO0_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO0_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO0_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO0_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO0_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO0_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO0_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO0_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO0_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO0_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO0_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO0_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO0_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO0_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO0_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO0_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO0_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO0_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO0_CTRL_OFFSET = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_GPIO0_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO0_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO0_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO0_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO0_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO0_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO0_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO0_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO0_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO0_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO0_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO0_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO0_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO0_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO0_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO0_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO0_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO0_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO0_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO0_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO0_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO0_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO0_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO0_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO0_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO0_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO0_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO0_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO0_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO0_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO0_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_JTAG_TCK = _u(@as(c_int, 0x00));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_SPI0_RX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_UART0_TX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_I2C0_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_PWM_A_0 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_SIOB_PROC_0 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_PIO0_0 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_PIO1_0 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_PIO2_0 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_XIP_SS_N_1 = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO1_STATUS_OFFSET = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_GPIO1_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO1_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO1_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO1_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO1_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO1_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO1_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO1_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO1_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO1_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO1_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO1_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO1_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO1_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO1_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO1_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO1_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO1_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO1_CTRL_OFFSET = _u(@as(c_int, 0x0000000c));
pub const IO_BANK0_GPIO1_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO1_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO1_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO1_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO1_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO1_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO1_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO1_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO1_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO1_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO1_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO1_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO1_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO1_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO1_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO1_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO1_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO1_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO1_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO1_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO1_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO1_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO1_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO1_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO1_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO1_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO1_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO1_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO1_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO1_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO1_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_JTAG_TMS = _u(@as(c_int, 0x00));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_SPI0_SS_N = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_UART0_RX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_I2C0_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_PWM_B_0 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_SIOB_PROC_1 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_PIO0_1 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_PIO1_1 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_PIO2_1 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_CORESIGHT_TRACECLK = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO2_STATUS_OFFSET = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_GPIO2_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO2_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO2_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO2_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO2_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO2_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO2_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO2_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO2_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO2_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO2_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO2_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO2_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO2_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO2_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO2_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO2_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO2_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO2_CTRL_OFFSET = _u(@as(c_int, 0x00000014));
pub const IO_BANK0_GPIO2_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO2_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO2_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO2_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO2_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO2_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO2_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO2_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO2_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO2_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO2_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO2_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO2_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO2_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO2_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO2_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO2_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO2_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO2_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO2_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO2_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO2_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO2_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO2_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO2_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO2_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO2_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO2_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO2_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO2_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO2_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_JTAG_TDI = _u(@as(c_int, 0x00));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_SPI0_SCLK = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_UART0_CTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_I2C1_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_PWM_A_1 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_SIOB_PROC_2 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_PIO0_2 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_PIO1_2 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_PIO2_2 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_CORESIGHT_TRACEDATA_0 = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_UART0_TX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO3_STATUS_OFFSET = _u(@as(c_int, 0x00000018));
pub const IO_BANK0_GPIO3_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO3_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO3_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO3_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO3_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO3_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO3_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO3_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO3_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO3_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO3_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO3_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO3_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO3_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO3_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO3_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO3_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO3_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO3_CTRL_OFFSET = _u(@as(c_int, 0x0000001c));
pub const IO_BANK0_GPIO3_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO3_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO3_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO3_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO3_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO3_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO3_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO3_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO3_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO3_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO3_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO3_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO3_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO3_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO3_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO3_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO3_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO3_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO3_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO3_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO3_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO3_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO3_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO3_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO3_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO3_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO3_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO3_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO3_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO3_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO3_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_JTAG_TDO = _u(@as(c_int, 0x00));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_SPI0_TX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_UART0_RTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_I2C1_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_PWM_B_1 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_SIOB_PROC_3 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_PIO0_3 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_PIO1_3 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_PIO2_3 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_CORESIGHT_TRACEDATA_1 = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_UART0_RX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO4_STATUS_OFFSET = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_GPIO4_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO4_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO4_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO4_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO4_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO4_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO4_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO4_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO4_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO4_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO4_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO4_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO4_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO4_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO4_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO4_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO4_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO4_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO4_CTRL_OFFSET = _u(@as(c_int, 0x00000024));
pub const IO_BANK0_GPIO4_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO4_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO4_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO4_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO4_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO4_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO4_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO4_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO4_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO4_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO4_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO4_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO4_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO4_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO4_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO4_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO4_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO4_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO4_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO4_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO4_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO4_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO4_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO4_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO4_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO4_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO4_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO4_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO4_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO4_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO4_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_SPI0_RX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_UART1_TX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_I2C0_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_PWM_A_2 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_SIOB_PROC_4 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_PIO0_4 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_PIO1_4 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_PIO2_4 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_CORESIGHT_TRACEDATA_2 = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO5_STATUS_OFFSET = _u(@as(c_int, 0x00000028));
pub const IO_BANK0_GPIO5_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO5_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO5_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO5_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO5_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO5_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO5_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO5_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO5_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO5_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO5_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO5_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO5_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO5_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO5_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO5_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO5_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO5_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO5_CTRL_OFFSET = _u(@as(c_int, 0x0000002c));
pub const IO_BANK0_GPIO5_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO5_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO5_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO5_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO5_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO5_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO5_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO5_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO5_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO5_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO5_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO5_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO5_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO5_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO5_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO5_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO5_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO5_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO5_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO5_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO5_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO5_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO5_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO5_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO5_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO5_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO5_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO5_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO5_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO5_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO5_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_SPI0_SS_N = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_UART1_RX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_I2C0_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_PWM_B_2 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_SIOB_PROC_5 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_PIO0_5 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_PIO1_5 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_PIO2_5 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_CORESIGHT_TRACEDATA_3 = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO6_STATUS_OFFSET = _u(@as(c_int, 0x00000030));
pub const IO_BANK0_GPIO6_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO6_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO6_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO6_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO6_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO6_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO6_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO6_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO6_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO6_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO6_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO6_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO6_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO6_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO6_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO6_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO6_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO6_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO6_CTRL_OFFSET = _u(@as(c_int, 0x00000034));
pub const IO_BANK0_GPIO6_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO6_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO6_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO6_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO6_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO6_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO6_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO6_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO6_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO6_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO6_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO6_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO6_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO6_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO6_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO6_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO6_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO6_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO6_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO6_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO6_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO6_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO6_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO6_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO6_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO6_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO6_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO6_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO6_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO6_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO6_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_SPI0_SCLK = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_UART1_CTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_I2C1_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_PWM_A_3 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_SIOB_PROC_6 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_PIO0_6 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_PIO1_6 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_PIO2_6 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_UART1_TX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO7_STATUS_OFFSET = _u(@as(c_int, 0x00000038));
pub const IO_BANK0_GPIO7_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO7_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO7_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO7_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO7_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO7_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO7_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO7_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO7_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO7_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO7_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO7_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO7_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO7_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO7_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO7_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO7_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO7_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO7_CTRL_OFFSET = _u(@as(c_int, 0x0000003c));
pub const IO_BANK0_GPIO7_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO7_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO7_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO7_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO7_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO7_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO7_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO7_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO7_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO7_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO7_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO7_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO7_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO7_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO7_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO7_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO7_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO7_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO7_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO7_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO7_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO7_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO7_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO7_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO7_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO7_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO7_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO7_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO7_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO7_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO7_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_SPI0_TX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_UART1_RTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_I2C1_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_PWM_B_3 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_SIOB_PROC_7 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_PIO0_7 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_PIO1_7 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_PIO2_7 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_UART1_RX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO8_STATUS_OFFSET = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_GPIO8_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO8_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO8_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO8_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO8_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO8_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO8_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO8_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO8_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO8_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO8_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO8_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO8_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO8_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO8_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO8_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO8_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO8_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO8_CTRL_OFFSET = _u(@as(c_int, 0x00000044));
pub const IO_BANK0_GPIO8_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO8_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO8_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO8_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO8_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO8_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO8_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO8_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO8_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO8_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO8_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO8_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO8_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO8_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO8_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO8_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO8_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO8_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO8_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO8_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO8_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO8_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO8_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO8_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO8_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO8_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO8_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO8_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO8_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO8_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO8_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_SPI1_RX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_UART1_TX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_I2C0_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_PWM_A_4 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_SIOB_PROC_8 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_PIO0_8 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_PIO1_8 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_PIO2_8 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_XIP_SS_N_1 = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO9_STATUS_OFFSET = _u(@as(c_int, 0x00000048));
pub const IO_BANK0_GPIO9_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO9_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO9_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO9_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO9_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO9_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO9_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO9_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO9_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO9_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO9_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO9_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO9_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO9_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO9_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO9_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO9_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO9_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO9_CTRL_OFFSET = _u(@as(c_int, 0x0000004c));
pub const IO_BANK0_GPIO9_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO9_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO9_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO9_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO9_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO9_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO9_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO9_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO9_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO9_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO9_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO9_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO9_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO9_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO9_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO9_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO9_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO9_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO9_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO9_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO9_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO9_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO9_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO9_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO9_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO9_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO9_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO9_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO9_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO9_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO9_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_SPI1_SS_N = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_UART1_RX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_I2C0_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_PWM_B_4 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_SIOB_PROC_9 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_PIO0_9 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_PIO1_9 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_PIO2_9 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO10_STATUS_OFFSET = _u(@as(c_int, 0x00000050));
pub const IO_BANK0_GPIO10_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO10_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO10_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO10_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO10_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO10_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO10_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO10_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO10_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO10_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO10_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO10_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO10_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO10_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO10_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO10_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO10_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO10_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO10_CTRL_OFFSET = _u(@as(c_int, 0x00000054));
pub const IO_BANK0_GPIO10_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO10_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO10_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO10_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO10_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO10_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO10_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO10_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO10_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO10_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO10_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO10_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO10_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO10_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO10_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO10_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO10_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO10_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO10_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO10_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO10_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO10_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO10_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO10_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO10_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO10_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO10_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO10_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO10_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO10_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO10_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_SPI1_SCLK = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_UART1_CTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_I2C1_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_PWM_A_5 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_SIOB_PROC_10 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_PIO0_10 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_PIO1_10 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_PIO2_10 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_UART1_TX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO11_STATUS_OFFSET = _u(@as(c_int, 0x00000058));
pub const IO_BANK0_GPIO11_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO11_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO11_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO11_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO11_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO11_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO11_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO11_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO11_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO11_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO11_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO11_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO11_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO11_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO11_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO11_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO11_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO11_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO11_CTRL_OFFSET = _u(@as(c_int, 0x0000005c));
pub const IO_BANK0_GPIO11_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO11_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO11_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO11_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO11_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO11_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO11_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO11_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO11_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO11_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO11_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO11_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO11_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO11_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO11_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO11_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO11_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO11_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO11_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO11_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO11_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO11_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO11_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO11_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO11_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO11_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO11_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO11_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO11_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO11_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO11_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_SPI1_TX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_UART1_RTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_I2C1_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_PWM_B_5 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_SIOB_PROC_11 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_PIO0_11 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_PIO1_11 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_PIO2_11 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_UART1_RX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO12_STATUS_OFFSET = _u(@as(c_int, 0x00000060));
pub const IO_BANK0_GPIO12_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO12_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO12_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO12_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO12_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO12_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO12_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO12_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO12_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO12_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO12_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO12_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO12_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO12_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO12_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO12_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO12_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO12_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO12_CTRL_OFFSET = _u(@as(c_int, 0x00000064));
pub const IO_BANK0_GPIO12_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO12_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO12_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO12_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO12_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO12_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO12_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO12_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO12_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO12_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO12_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO12_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO12_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO12_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO12_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO12_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO12_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO12_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO12_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO12_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO12_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO12_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO12_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO12_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO12_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO12_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO12_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO12_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO12_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO12_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO12_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_HSTX_0 = _u(@as(c_int, 0x00));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_SPI1_RX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_UART0_TX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_I2C0_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_PWM_A_6 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_SIOB_PROC_12 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_PIO0_12 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_PIO1_12 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_PIO2_12 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_CLOCKS_GPIN_0 = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO13_STATUS_OFFSET = _u(@as(c_int, 0x00000068));
pub const IO_BANK0_GPIO13_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO13_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO13_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO13_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO13_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO13_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO13_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO13_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO13_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO13_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO13_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO13_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO13_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO13_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO13_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO13_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO13_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO13_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO13_CTRL_OFFSET = _u(@as(c_int, 0x0000006c));
pub const IO_BANK0_GPIO13_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO13_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO13_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO13_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO13_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO13_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO13_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO13_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO13_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO13_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO13_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO13_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO13_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO13_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO13_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO13_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO13_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO13_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO13_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO13_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO13_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO13_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO13_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO13_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO13_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO13_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO13_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO13_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO13_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO13_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO13_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_HSTX_1 = _u(@as(c_int, 0x00));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_SPI1_SS_N = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_UART0_RX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_I2C0_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_PWM_B_6 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_SIOB_PROC_13 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_PIO0_13 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_PIO1_13 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_PIO2_13 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_CLOCKS_GPOUT_0 = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO14_STATUS_OFFSET = _u(@as(c_int, 0x00000070));
pub const IO_BANK0_GPIO14_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO14_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO14_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO14_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO14_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO14_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO14_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO14_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO14_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO14_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO14_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO14_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO14_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO14_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO14_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO14_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO14_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO14_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO14_CTRL_OFFSET = _u(@as(c_int, 0x00000074));
pub const IO_BANK0_GPIO14_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO14_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO14_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO14_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO14_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO14_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO14_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO14_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO14_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO14_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO14_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO14_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO14_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO14_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO14_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO14_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO14_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO14_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO14_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO14_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO14_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO14_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO14_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO14_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO14_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO14_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO14_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO14_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO14_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO14_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO14_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_HSTX_2 = _u(@as(c_int, 0x00));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_SPI1_SCLK = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_UART0_CTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_I2C1_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_PWM_A_7 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_SIOB_PROC_14 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_PIO0_14 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_PIO1_14 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_PIO2_14 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_CLOCKS_GPIN_1 = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_UART0_TX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO15_STATUS_OFFSET = _u(@as(c_int, 0x00000078));
pub const IO_BANK0_GPIO15_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO15_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO15_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO15_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO15_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO15_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO15_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO15_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO15_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO15_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO15_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO15_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO15_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO15_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO15_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO15_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO15_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO15_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO15_CTRL_OFFSET = _u(@as(c_int, 0x0000007c));
pub const IO_BANK0_GPIO15_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO15_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO15_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO15_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO15_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO15_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO15_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO15_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO15_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO15_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO15_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO15_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO15_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO15_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO15_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO15_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO15_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO15_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO15_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO15_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO15_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO15_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO15_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO15_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO15_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO15_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO15_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO15_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO15_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO15_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO15_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_HSTX_3 = _u(@as(c_int, 0x00));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_SPI1_TX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_UART0_RTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_I2C1_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_PWM_B_7 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_SIOB_PROC_15 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_PIO0_15 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_PIO1_15 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_PIO2_15 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_CLOCKS_GPOUT_1 = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_UART0_RX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO16_STATUS_OFFSET = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_GPIO16_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO16_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO16_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO16_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO16_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO16_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO16_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO16_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO16_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO16_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO16_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO16_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO16_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO16_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO16_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO16_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO16_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO16_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO16_CTRL_OFFSET = _u(@as(c_int, 0x00000084));
pub const IO_BANK0_GPIO16_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO16_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO16_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO16_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO16_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO16_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO16_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO16_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO16_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO16_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO16_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO16_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO16_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO16_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO16_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO16_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO16_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO16_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO16_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO16_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO16_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO16_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO16_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO16_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO16_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO16_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO16_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO16_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO16_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO16_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO16_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_HSTX_4 = _u(@as(c_int, 0x00));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_SPI0_RX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_UART0_TX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_I2C0_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_PWM_A_0 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_SIOB_PROC_16 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_PIO0_16 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_PIO1_16 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_PIO2_16 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO17_STATUS_OFFSET = _u(@as(c_int, 0x00000088));
pub const IO_BANK0_GPIO17_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO17_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO17_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO17_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO17_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO17_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO17_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO17_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO17_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO17_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO17_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO17_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO17_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO17_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO17_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO17_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO17_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO17_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO17_CTRL_OFFSET = _u(@as(c_int, 0x0000008c));
pub const IO_BANK0_GPIO17_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO17_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO17_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO17_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO17_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO17_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO17_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO17_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO17_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO17_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO17_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO17_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO17_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO17_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO17_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO17_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO17_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO17_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO17_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO17_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO17_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO17_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO17_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO17_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO17_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO17_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO17_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO17_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO17_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO17_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO17_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_HSTX_5 = _u(@as(c_int, 0x00));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_SPI0_SS_N = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_UART0_RX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_I2C0_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_PWM_B_0 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_SIOB_PROC_17 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_PIO0_17 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_PIO1_17 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_PIO2_17 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO18_STATUS_OFFSET = _u(@as(c_int, 0x00000090));
pub const IO_BANK0_GPIO18_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO18_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO18_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO18_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO18_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO18_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO18_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO18_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO18_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO18_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO18_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO18_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO18_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO18_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO18_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO18_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO18_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO18_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO18_CTRL_OFFSET = _u(@as(c_int, 0x00000094));
pub const IO_BANK0_GPIO18_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO18_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO18_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO18_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO18_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO18_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO18_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO18_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO18_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO18_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO18_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO18_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO18_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO18_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO18_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO18_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO18_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO18_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO18_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO18_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO18_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO18_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO18_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO18_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO18_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO18_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO18_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO18_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO18_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO18_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO18_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_HSTX_6 = _u(@as(c_int, 0x00));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_SPI0_SCLK = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_UART0_CTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_I2C1_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_PWM_A_1 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_SIOB_PROC_18 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_PIO0_18 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_PIO1_18 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_PIO2_18 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_UART0_TX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO19_STATUS_OFFSET = _u(@as(c_int, 0x00000098));
pub const IO_BANK0_GPIO19_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO19_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO19_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO19_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO19_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO19_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO19_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO19_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO19_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO19_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO19_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO19_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO19_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO19_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO19_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO19_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO19_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO19_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO19_CTRL_OFFSET = _u(@as(c_int, 0x0000009c));
pub const IO_BANK0_GPIO19_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO19_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO19_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO19_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO19_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO19_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO19_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO19_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO19_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO19_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO19_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO19_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO19_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO19_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO19_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO19_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO19_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO19_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO19_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO19_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO19_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO19_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO19_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO19_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO19_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO19_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO19_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO19_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO19_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO19_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO19_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_HSTX_7 = _u(@as(c_int, 0x00));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_SPI0_TX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_UART0_RTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_I2C1_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_PWM_B_1 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_SIOB_PROC_19 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_PIO0_19 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_PIO1_19 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_PIO2_19 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_XIP_SS_N_1 = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_UART0_RX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO20_STATUS_OFFSET = _u(@as(c_int, 0x000000a0));
pub const IO_BANK0_GPIO20_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO20_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO20_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO20_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO20_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO20_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO20_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO20_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO20_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO20_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO20_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO20_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO20_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO20_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO20_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO20_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO20_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO20_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO20_CTRL_OFFSET = _u(@as(c_int, 0x000000a4));
pub const IO_BANK0_GPIO20_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO20_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO20_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO20_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO20_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO20_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO20_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO20_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO20_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO20_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO20_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO20_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO20_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO20_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO20_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO20_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO20_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO20_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO20_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO20_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO20_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO20_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO20_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO20_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO20_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO20_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO20_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO20_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO20_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO20_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO20_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_SPI0_RX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_UART1_TX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_I2C0_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_PWM_A_2 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_SIOB_PROC_20 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_PIO0_20 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_PIO1_20 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_PIO2_20 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_CLOCKS_GPIN_0 = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO21_STATUS_OFFSET = _u(@as(c_int, 0x000000a8));
pub const IO_BANK0_GPIO21_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO21_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO21_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO21_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO21_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO21_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO21_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO21_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO21_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO21_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO21_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO21_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO21_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO21_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO21_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO21_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO21_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO21_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO21_CTRL_OFFSET = _u(@as(c_int, 0x000000ac));
pub const IO_BANK0_GPIO21_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO21_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO21_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO21_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO21_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO21_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO21_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO21_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO21_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO21_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO21_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO21_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO21_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO21_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO21_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO21_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO21_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO21_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO21_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO21_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO21_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO21_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO21_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO21_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO21_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO21_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO21_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO21_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO21_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO21_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO21_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_SPI0_SS_N = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_UART1_RX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_I2C0_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_PWM_B_2 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_SIOB_PROC_21 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_PIO0_21 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_PIO1_21 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_PIO2_21 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_CLOCKS_GPOUT_0 = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO22_STATUS_OFFSET = _u(@as(c_int, 0x000000b0));
pub const IO_BANK0_GPIO22_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO22_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO22_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO22_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO22_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO22_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO22_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO22_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO22_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO22_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO22_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO22_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO22_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO22_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO22_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO22_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO22_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO22_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO22_CTRL_OFFSET = _u(@as(c_int, 0x000000b4));
pub const IO_BANK0_GPIO22_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO22_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO22_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO22_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO22_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO22_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO22_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO22_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO22_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO22_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO22_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO22_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO22_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO22_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO22_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO22_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO22_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO22_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO22_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO22_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO22_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO22_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO22_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO22_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO22_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO22_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO22_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO22_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO22_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO22_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO22_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_SPI0_SCLK = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_UART1_CTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_I2C1_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_PWM_A_3 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_SIOB_PROC_22 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_PIO0_22 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_PIO1_22 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_PIO2_22 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_CLOCKS_GPIN_1 = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_UART1_TX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO23_STATUS_OFFSET = _u(@as(c_int, 0x000000b8));
pub const IO_BANK0_GPIO23_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO23_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO23_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO23_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO23_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO23_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO23_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO23_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO23_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO23_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO23_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO23_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO23_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO23_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO23_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO23_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO23_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO23_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO23_CTRL_OFFSET = _u(@as(c_int, 0x000000bc));
pub const IO_BANK0_GPIO23_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO23_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO23_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO23_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO23_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO23_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO23_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO23_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO23_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO23_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO23_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO23_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO23_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO23_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO23_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO23_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO23_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO23_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO23_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO23_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO23_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO23_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO23_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO23_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO23_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO23_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO23_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO23_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO23_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO23_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO23_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_SPI0_TX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_UART1_RTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_I2C1_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_PWM_B_3 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_SIOB_PROC_23 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_PIO0_23 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_PIO1_23 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_PIO2_23 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_CLOCKS_GPOUT_1 = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_UART1_RX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO24_STATUS_OFFSET = _u(@as(c_int, 0x000000c0));
pub const IO_BANK0_GPIO24_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO24_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO24_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO24_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO24_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO24_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO24_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO24_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO24_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO24_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO24_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO24_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO24_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO24_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO24_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO24_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO24_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO24_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO24_CTRL_OFFSET = _u(@as(c_int, 0x000000c4));
pub const IO_BANK0_GPIO24_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO24_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO24_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO24_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO24_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO24_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO24_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO24_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO24_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO24_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO24_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO24_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO24_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO24_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO24_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO24_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO24_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO24_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO24_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO24_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO24_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO24_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO24_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO24_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO24_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO24_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO24_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO24_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO24_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO24_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO24_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_SPI1_RX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_UART1_TX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_I2C0_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_PWM_A_4 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_SIOB_PROC_24 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_PIO0_24 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_PIO1_24 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_PIO2_24 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_CLOCKS_GPOUT_2 = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO25_STATUS_OFFSET = _u(@as(c_int, 0x000000c8));
pub const IO_BANK0_GPIO25_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO25_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO25_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO25_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO25_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO25_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO25_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO25_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO25_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO25_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO25_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO25_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO25_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO25_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO25_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO25_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO25_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO25_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO25_CTRL_OFFSET = _u(@as(c_int, 0x000000cc));
pub const IO_BANK0_GPIO25_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO25_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO25_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO25_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO25_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO25_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO25_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO25_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO25_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO25_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO25_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO25_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO25_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO25_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO25_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO25_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO25_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO25_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO25_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO25_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO25_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO25_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO25_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO25_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO25_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO25_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO25_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO25_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO25_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO25_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO25_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_SPI1_SS_N = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_UART1_RX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_I2C0_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_PWM_B_4 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_SIOB_PROC_25 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_PIO0_25 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_PIO1_25 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_PIO2_25 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_CLOCKS_GPOUT_3 = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO26_STATUS_OFFSET = _u(@as(c_int, 0x000000d0));
pub const IO_BANK0_GPIO26_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO26_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO26_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO26_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO26_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO26_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO26_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO26_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO26_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO26_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO26_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO26_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO26_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO26_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO26_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO26_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO26_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO26_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO26_CTRL_OFFSET = _u(@as(c_int, 0x000000d4));
pub const IO_BANK0_GPIO26_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO26_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO26_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO26_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO26_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO26_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO26_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO26_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO26_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO26_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO26_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO26_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO26_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO26_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO26_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO26_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO26_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO26_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO26_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO26_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO26_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO26_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO26_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO26_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO26_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO26_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO26_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO26_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO26_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO26_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO26_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_SPI1_SCLK = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_UART1_CTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_I2C1_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_PWM_A_5 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_SIOB_PROC_26 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_PIO0_26 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_PIO1_26 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_PIO2_26 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_UART1_TX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO27_STATUS_OFFSET = _u(@as(c_int, 0x000000d8));
pub const IO_BANK0_GPIO27_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO27_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO27_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO27_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO27_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO27_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO27_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO27_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO27_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO27_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO27_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO27_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO27_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO27_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO27_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO27_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO27_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO27_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO27_CTRL_OFFSET = _u(@as(c_int, 0x000000dc));
pub const IO_BANK0_GPIO27_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO27_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO27_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO27_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO27_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO27_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO27_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO27_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO27_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO27_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO27_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO27_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO27_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO27_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO27_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO27_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO27_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO27_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO27_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO27_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO27_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO27_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO27_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO27_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO27_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO27_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO27_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO27_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO27_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO27_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO27_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_SPI1_TX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_UART1_RTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_I2C1_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_PWM_B_5 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_SIOB_PROC_27 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_PIO0_27 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_PIO1_27 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_PIO2_27 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_UART1_RX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO28_STATUS_OFFSET = _u(@as(c_int, 0x000000e0));
pub const IO_BANK0_GPIO28_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO28_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO28_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO28_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO28_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO28_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO28_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO28_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO28_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO28_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO28_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO28_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO28_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO28_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO28_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO28_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO28_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO28_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO28_CTRL_OFFSET = _u(@as(c_int, 0x000000e4));
pub const IO_BANK0_GPIO28_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO28_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO28_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO28_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO28_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO28_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO28_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO28_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO28_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO28_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO28_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO28_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO28_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO28_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO28_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO28_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO28_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO28_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO28_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO28_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO28_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO28_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO28_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO28_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO28_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO28_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO28_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO28_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO28_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO28_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO28_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_SPI1_RX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_UART0_TX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_I2C0_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_PWM_A_6 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_SIOB_PROC_28 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_PIO0_28 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_PIO1_28 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_PIO2_28 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO29_STATUS_OFFSET = _u(@as(c_int, 0x000000e8));
pub const IO_BANK0_GPIO29_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO29_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO29_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO29_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO29_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO29_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO29_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO29_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO29_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO29_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO29_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO29_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO29_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO29_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO29_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO29_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO29_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO29_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO29_CTRL_OFFSET = _u(@as(c_int, 0x000000ec));
pub const IO_BANK0_GPIO29_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO29_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO29_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO29_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO29_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO29_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO29_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO29_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO29_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO29_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO29_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO29_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO29_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO29_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO29_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO29_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO29_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO29_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO29_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO29_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO29_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO29_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO29_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO29_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO29_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO29_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO29_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO29_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO29_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO29_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO29_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_SPI1_SS_N = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_UART0_RX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_I2C0_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_PWM_B_6 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_SIOB_PROC_29 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_PIO0_29 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_PIO1_29 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_PIO2_29 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO30_STATUS_OFFSET = _u(@as(c_int, 0x000000f0));
pub const IO_BANK0_GPIO30_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO30_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO30_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO30_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO30_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO30_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO30_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO30_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO30_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO30_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO30_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO30_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO30_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO30_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO30_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO30_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO30_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO30_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO30_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO30_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO30_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO30_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO30_CTRL_OFFSET = _u(@as(c_int, 0x000000f4));
pub const IO_BANK0_GPIO30_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO30_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO30_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO30_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO30_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO30_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO30_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO30_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO30_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO30_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO30_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO30_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO30_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO30_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO30_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO30_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO30_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO30_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO30_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO30_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO30_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO30_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO30_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO30_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO30_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO30_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO30_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO30_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO30_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO30_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO30_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO30_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO30_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO30_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO30_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO30_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO30_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO30_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO30_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO30_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO30_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO30_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO30_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO30_CTRL_FUNCSEL_VALUE_SPI1_SCLK = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO30_CTRL_FUNCSEL_VALUE_UART0_CTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO30_CTRL_FUNCSEL_VALUE_I2C1_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO30_CTRL_FUNCSEL_VALUE_PWM_A_7 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO30_CTRL_FUNCSEL_VALUE_SIOB_PROC_30 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO30_CTRL_FUNCSEL_VALUE_PIO0_30 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO30_CTRL_FUNCSEL_VALUE_PIO1_30 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO30_CTRL_FUNCSEL_VALUE_PIO2_30 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO30_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO30_CTRL_FUNCSEL_VALUE_UART0_TX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO30_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO31_STATUS_OFFSET = _u(@as(c_int, 0x000000f8));
pub const IO_BANK0_GPIO31_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO31_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO31_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO31_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO31_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO31_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO31_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO31_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO31_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO31_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO31_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO31_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO31_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO31_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO31_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO31_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO31_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO31_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO31_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO31_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO31_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO31_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO31_CTRL_OFFSET = _u(@as(c_int, 0x000000fc));
pub const IO_BANK0_GPIO31_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO31_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO31_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO31_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO31_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO31_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO31_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO31_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO31_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO31_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO31_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO31_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO31_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO31_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO31_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO31_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO31_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO31_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO31_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO31_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO31_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO31_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO31_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO31_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO31_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO31_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO31_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO31_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO31_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO31_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO31_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO31_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO31_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO31_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO31_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO31_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO31_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO31_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO31_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO31_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO31_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO31_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO31_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO31_CTRL_FUNCSEL_VALUE_SPI1_TX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO31_CTRL_FUNCSEL_VALUE_UART0_RTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO31_CTRL_FUNCSEL_VALUE_I2C1_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO31_CTRL_FUNCSEL_VALUE_PWM_B_7 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO31_CTRL_FUNCSEL_VALUE_SIOB_PROC_31 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO31_CTRL_FUNCSEL_VALUE_PIO0_31 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO31_CTRL_FUNCSEL_VALUE_PIO1_31 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO31_CTRL_FUNCSEL_VALUE_PIO2_31 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO31_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO31_CTRL_FUNCSEL_VALUE_UART0_RX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO31_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO32_STATUS_OFFSET = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_GPIO32_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO32_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO32_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO32_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO32_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO32_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO32_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO32_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO32_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO32_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO32_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO32_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO32_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO32_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO32_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO32_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO32_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO32_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO32_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO32_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO32_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO32_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO32_CTRL_OFFSET = _u(@as(c_int, 0x00000104));
pub const IO_BANK0_GPIO32_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO32_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO32_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO32_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO32_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO32_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO32_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO32_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO32_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO32_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO32_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO32_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO32_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO32_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO32_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO32_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO32_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO32_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO32_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO32_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO32_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO32_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO32_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO32_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO32_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO32_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO32_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO32_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO32_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO32_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO32_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO32_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO32_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO32_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO32_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO32_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO32_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO32_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO32_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO32_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO32_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO32_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO32_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO32_CTRL_FUNCSEL_VALUE_SPI0_RX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO32_CTRL_FUNCSEL_VALUE_UART0_TX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO32_CTRL_FUNCSEL_VALUE_I2C0_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO32_CTRL_FUNCSEL_VALUE_PWM_A_8 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO32_CTRL_FUNCSEL_VALUE_SIOB_PROC_32 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO32_CTRL_FUNCSEL_VALUE_PIO0_32 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO32_CTRL_FUNCSEL_VALUE_PIO1_32 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO32_CTRL_FUNCSEL_VALUE_PIO2_32 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO32_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO32_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO33_STATUS_OFFSET = _u(@as(c_int, 0x00000108));
pub const IO_BANK0_GPIO33_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO33_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO33_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO33_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO33_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO33_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO33_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO33_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO33_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO33_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO33_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO33_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO33_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO33_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO33_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO33_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO33_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO33_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO33_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO33_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO33_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO33_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO33_CTRL_OFFSET = _u(@as(c_int, 0x0000010c));
pub const IO_BANK0_GPIO33_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO33_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO33_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO33_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO33_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO33_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO33_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO33_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO33_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO33_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO33_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO33_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO33_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO33_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO33_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO33_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO33_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO33_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO33_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO33_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO33_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO33_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO33_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO33_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO33_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO33_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO33_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO33_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO33_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO33_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO33_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO33_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO33_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO33_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO33_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO33_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO33_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO33_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO33_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO33_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO33_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO33_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO33_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO33_CTRL_FUNCSEL_VALUE_SPI0_SS_N = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO33_CTRL_FUNCSEL_VALUE_UART0_RX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO33_CTRL_FUNCSEL_VALUE_I2C0_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO33_CTRL_FUNCSEL_VALUE_PWM_B_8 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO33_CTRL_FUNCSEL_VALUE_SIOB_PROC_33 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO33_CTRL_FUNCSEL_VALUE_PIO0_33 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO33_CTRL_FUNCSEL_VALUE_PIO1_33 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO33_CTRL_FUNCSEL_VALUE_PIO2_33 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO33_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO33_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO34_STATUS_OFFSET = _u(@as(c_int, 0x00000110));
pub const IO_BANK0_GPIO34_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO34_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO34_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO34_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO34_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO34_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO34_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO34_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO34_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO34_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO34_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO34_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO34_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO34_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO34_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO34_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO34_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO34_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO34_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO34_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO34_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO34_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO34_CTRL_OFFSET = _u(@as(c_int, 0x00000114));
pub const IO_BANK0_GPIO34_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO34_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO34_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO34_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO34_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO34_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO34_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO34_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO34_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO34_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO34_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO34_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO34_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO34_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO34_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO34_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO34_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO34_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO34_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO34_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO34_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO34_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO34_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO34_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO34_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO34_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO34_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO34_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO34_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO34_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO34_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO34_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO34_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO34_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO34_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO34_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO34_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO34_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO34_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO34_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO34_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO34_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO34_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO34_CTRL_FUNCSEL_VALUE_SPI0_SCLK = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO34_CTRL_FUNCSEL_VALUE_UART0_CTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO34_CTRL_FUNCSEL_VALUE_I2C1_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO34_CTRL_FUNCSEL_VALUE_PWM_A_9 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO34_CTRL_FUNCSEL_VALUE_SIOB_PROC_34 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO34_CTRL_FUNCSEL_VALUE_PIO0_34 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO34_CTRL_FUNCSEL_VALUE_PIO1_34 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO34_CTRL_FUNCSEL_VALUE_PIO2_34 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO34_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO34_CTRL_FUNCSEL_VALUE_UART0_TX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO34_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO35_STATUS_OFFSET = _u(@as(c_int, 0x00000118));
pub const IO_BANK0_GPIO35_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO35_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO35_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO35_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO35_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO35_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO35_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO35_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO35_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO35_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO35_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO35_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO35_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO35_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO35_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO35_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO35_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO35_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO35_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO35_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO35_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO35_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO35_CTRL_OFFSET = _u(@as(c_int, 0x0000011c));
pub const IO_BANK0_GPIO35_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO35_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO35_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO35_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO35_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO35_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO35_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO35_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO35_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO35_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO35_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO35_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO35_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO35_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO35_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO35_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO35_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO35_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO35_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO35_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO35_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO35_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO35_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO35_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO35_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO35_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO35_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO35_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO35_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO35_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO35_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO35_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO35_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO35_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO35_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO35_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO35_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO35_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO35_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO35_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO35_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO35_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO35_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO35_CTRL_FUNCSEL_VALUE_SPI0_TX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO35_CTRL_FUNCSEL_VALUE_UART0_RTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO35_CTRL_FUNCSEL_VALUE_I2C1_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO35_CTRL_FUNCSEL_VALUE_PWM_B_9 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO35_CTRL_FUNCSEL_VALUE_SIOB_PROC_35 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO35_CTRL_FUNCSEL_VALUE_PIO0_35 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO35_CTRL_FUNCSEL_VALUE_PIO1_35 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO35_CTRL_FUNCSEL_VALUE_PIO2_35 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO35_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO35_CTRL_FUNCSEL_VALUE_UART0_RX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO35_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO36_STATUS_OFFSET = _u(@as(c_int, 0x00000120));
pub const IO_BANK0_GPIO36_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO36_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO36_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO36_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO36_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO36_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO36_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO36_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO36_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO36_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO36_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO36_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO36_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO36_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO36_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO36_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO36_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO36_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO36_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO36_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO36_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO36_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO36_CTRL_OFFSET = _u(@as(c_int, 0x00000124));
pub const IO_BANK0_GPIO36_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO36_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO36_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO36_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO36_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO36_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO36_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO36_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO36_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO36_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO36_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO36_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO36_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO36_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO36_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO36_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO36_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO36_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO36_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO36_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO36_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO36_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO36_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO36_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO36_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO36_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO36_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO36_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO36_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO36_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO36_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO36_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO36_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO36_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO36_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO36_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO36_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO36_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO36_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO36_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO36_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO36_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO36_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO36_CTRL_FUNCSEL_VALUE_SPI0_RX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO36_CTRL_FUNCSEL_VALUE_UART1_TX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO36_CTRL_FUNCSEL_VALUE_I2C0_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO36_CTRL_FUNCSEL_VALUE_PWM_A_10 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO36_CTRL_FUNCSEL_VALUE_SIOB_PROC_36 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO36_CTRL_FUNCSEL_VALUE_PIO0_36 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO36_CTRL_FUNCSEL_VALUE_PIO1_36 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO36_CTRL_FUNCSEL_VALUE_PIO2_36 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO36_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO36_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO37_STATUS_OFFSET = _u(@as(c_int, 0x00000128));
pub const IO_BANK0_GPIO37_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO37_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO37_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO37_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO37_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO37_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO37_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO37_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO37_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO37_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO37_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO37_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO37_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO37_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO37_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO37_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO37_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO37_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO37_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO37_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO37_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO37_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO37_CTRL_OFFSET = _u(@as(c_int, 0x0000012c));
pub const IO_BANK0_GPIO37_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO37_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO37_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO37_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO37_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO37_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO37_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO37_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO37_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO37_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO37_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO37_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO37_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO37_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO37_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO37_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO37_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO37_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO37_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO37_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO37_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO37_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO37_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO37_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO37_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO37_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO37_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO37_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO37_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO37_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO37_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO37_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO37_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO37_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO37_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO37_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO37_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO37_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO37_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO37_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO37_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO37_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO37_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO37_CTRL_FUNCSEL_VALUE_SPI0_SS_N = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO37_CTRL_FUNCSEL_VALUE_UART1_RX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO37_CTRL_FUNCSEL_VALUE_I2C0_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO37_CTRL_FUNCSEL_VALUE_PWM_B_10 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO37_CTRL_FUNCSEL_VALUE_SIOB_PROC_37 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO37_CTRL_FUNCSEL_VALUE_PIO0_37 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO37_CTRL_FUNCSEL_VALUE_PIO1_37 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO37_CTRL_FUNCSEL_VALUE_PIO2_37 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO37_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO37_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO38_STATUS_OFFSET = _u(@as(c_int, 0x00000130));
pub const IO_BANK0_GPIO38_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO38_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO38_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO38_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO38_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO38_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO38_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO38_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO38_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO38_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO38_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO38_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO38_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO38_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO38_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO38_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO38_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO38_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO38_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO38_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO38_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO38_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO38_CTRL_OFFSET = _u(@as(c_int, 0x00000134));
pub const IO_BANK0_GPIO38_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO38_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO38_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO38_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO38_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO38_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO38_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO38_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO38_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO38_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO38_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO38_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO38_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO38_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO38_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO38_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO38_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO38_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO38_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO38_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO38_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO38_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO38_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO38_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO38_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO38_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO38_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO38_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO38_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO38_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO38_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO38_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO38_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO38_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO38_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO38_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO38_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO38_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO38_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO38_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO38_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO38_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO38_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO38_CTRL_FUNCSEL_VALUE_SPI0_SCLK = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO38_CTRL_FUNCSEL_VALUE_UART1_CTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO38_CTRL_FUNCSEL_VALUE_I2C1_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO38_CTRL_FUNCSEL_VALUE_PWM_A_11 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO38_CTRL_FUNCSEL_VALUE_SIOB_PROC_38 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO38_CTRL_FUNCSEL_VALUE_PIO0_38 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO38_CTRL_FUNCSEL_VALUE_PIO1_38 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO38_CTRL_FUNCSEL_VALUE_PIO2_38 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO38_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO38_CTRL_FUNCSEL_VALUE_UART1_TX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO38_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO39_STATUS_OFFSET = _u(@as(c_int, 0x00000138));
pub const IO_BANK0_GPIO39_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO39_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO39_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO39_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO39_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO39_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO39_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO39_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO39_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO39_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO39_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO39_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO39_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO39_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO39_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO39_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO39_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO39_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO39_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO39_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO39_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO39_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO39_CTRL_OFFSET = _u(@as(c_int, 0x0000013c));
pub const IO_BANK0_GPIO39_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO39_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO39_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO39_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO39_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO39_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO39_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO39_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO39_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO39_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO39_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO39_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO39_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO39_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO39_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO39_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO39_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO39_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO39_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO39_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO39_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO39_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO39_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO39_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO39_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO39_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO39_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO39_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO39_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO39_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO39_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO39_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO39_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO39_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO39_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO39_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO39_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO39_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO39_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO39_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO39_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO39_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO39_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO39_CTRL_FUNCSEL_VALUE_SPI0_TX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO39_CTRL_FUNCSEL_VALUE_UART1_RTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO39_CTRL_FUNCSEL_VALUE_I2C1_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO39_CTRL_FUNCSEL_VALUE_PWM_B_11 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO39_CTRL_FUNCSEL_VALUE_SIOB_PROC_39 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO39_CTRL_FUNCSEL_VALUE_PIO0_39 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO39_CTRL_FUNCSEL_VALUE_PIO1_39 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO39_CTRL_FUNCSEL_VALUE_PIO2_39 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO39_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO39_CTRL_FUNCSEL_VALUE_UART1_RX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO39_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO40_STATUS_OFFSET = _u(@as(c_int, 0x00000140));
pub const IO_BANK0_GPIO40_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO40_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO40_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO40_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO40_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO40_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO40_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO40_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO40_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO40_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO40_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO40_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO40_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO40_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO40_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO40_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO40_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO40_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO40_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO40_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO40_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO40_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO40_CTRL_OFFSET = _u(@as(c_int, 0x00000144));
pub const IO_BANK0_GPIO40_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO40_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO40_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO40_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO40_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO40_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO40_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO40_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO40_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO40_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO40_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO40_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO40_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO40_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO40_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO40_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO40_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO40_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO40_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO40_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO40_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO40_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO40_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO40_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO40_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO40_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO40_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO40_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO40_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO40_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO40_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO40_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO40_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO40_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO40_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO40_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO40_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO40_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO40_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO40_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO40_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO40_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO40_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO40_CTRL_FUNCSEL_VALUE_SPI1_RX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO40_CTRL_FUNCSEL_VALUE_UART1_TX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO40_CTRL_FUNCSEL_VALUE_I2C0_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO40_CTRL_FUNCSEL_VALUE_PWM_A_8 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO40_CTRL_FUNCSEL_VALUE_SIOB_PROC_40 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO40_CTRL_FUNCSEL_VALUE_PIO0_40 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO40_CTRL_FUNCSEL_VALUE_PIO1_40 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO40_CTRL_FUNCSEL_VALUE_PIO2_40 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO40_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO40_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO41_STATUS_OFFSET = _u(@as(c_int, 0x00000148));
pub const IO_BANK0_GPIO41_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO41_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO41_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO41_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO41_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO41_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO41_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO41_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO41_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO41_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO41_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO41_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO41_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO41_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO41_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO41_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO41_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO41_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO41_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO41_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO41_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO41_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO41_CTRL_OFFSET = _u(@as(c_int, 0x0000014c));
pub const IO_BANK0_GPIO41_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO41_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO41_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO41_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO41_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO41_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO41_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO41_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO41_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO41_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO41_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO41_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO41_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO41_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO41_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO41_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO41_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO41_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO41_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO41_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO41_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO41_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO41_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO41_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO41_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO41_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO41_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO41_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO41_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO41_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO41_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO41_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO41_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO41_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO41_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO41_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO41_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO41_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO41_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO41_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO41_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO41_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO41_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO41_CTRL_FUNCSEL_VALUE_SPI1_SS_N = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO41_CTRL_FUNCSEL_VALUE_UART1_RX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO41_CTRL_FUNCSEL_VALUE_I2C0_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO41_CTRL_FUNCSEL_VALUE_PWM_B_8 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO41_CTRL_FUNCSEL_VALUE_SIOB_PROC_41 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO41_CTRL_FUNCSEL_VALUE_PIO0_41 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO41_CTRL_FUNCSEL_VALUE_PIO1_41 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO41_CTRL_FUNCSEL_VALUE_PIO2_41 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO41_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO41_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO42_STATUS_OFFSET = _u(@as(c_int, 0x00000150));
pub const IO_BANK0_GPIO42_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO42_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO42_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO42_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO42_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO42_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO42_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO42_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO42_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO42_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO42_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO42_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO42_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO42_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO42_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO42_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO42_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO42_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO42_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO42_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO42_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO42_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO42_CTRL_OFFSET = _u(@as(c_int, 0x00000154));
pub const IO_BANK0_GPIO42_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO42_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO42_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO42_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO42_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO42_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO42_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO42_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO42_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO42_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO42_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO42_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO42_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO42_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO42_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO42_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO42_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO42_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO42_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO42_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO42_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO42_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO42_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO42_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO42_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO42_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO42_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO42_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO42_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO42_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO42_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO42_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO42_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO42_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO42_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO42_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO42_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO42_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO42_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO42_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO42_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO42_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO42_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO42_CTRL_FUNCSEL_VALUE_SPI1_SCLK = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO42_CTRL_FUNCSEL_VALUE_UART1_CTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO42_CTRL_FUNCSEL_VALUE_I2C1_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO42_CTRL_FUNCSEL_VALUE_PWM_A_9 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO42_CTRL_FUNCSEL_VALUE_SIOB_PROC_42 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO42_CTRL_FUNCSEL_VALUE_PIO0_42 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO42_CTRL_FUNCSEL_VALUE_PIO1_42 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO42_CTRL_FUNCSEL_VALUE_PIO2_42 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO42_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO42_CTRL_FUNCSEL_VALUE_UART1_TX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO42_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO43_STATUS_OFFSET = _u(@as(c_int, 0x00000158));
pub const IO_BANK0_GPIO43_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO43_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO43_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO43_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO43_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO43_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO43_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO43_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO43_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO43_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO43_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO43_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO43_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO43_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO43_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO43_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO43_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO43_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO43_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO43_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO43_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO43_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO43_CTRL_OFFSET = _u(@as(c_int, 0x0000015c));
pub const IO_BANK0_GPIO43_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO43_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO43_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO43_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO43_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO43_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO43_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO43_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO43_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO43_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO43_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO43_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO43_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO43_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO43_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO43_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO43_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO43_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO43_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO43_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO43_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO43_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO43_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO43_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO43_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO43_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO43_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO43_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO43_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO43_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO43_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO43_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO43_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO43_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO43_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO43_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO43_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO43_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO43_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO43_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO43_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO43_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO43_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO43_CTRL_FUNCSEL_VALUE_SPI1_TX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO43_CTRL_FUNCSEL_VALUE_UART1_RTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO43_CTRL_FUNCSEL_VALUE_I2C1_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO43_CTRL_FUNCSEL_VALUE_PWM_B_9 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO43_CTRL_FUNCSEL_VALUE_SIOB_PROC_43 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO43_CTRL_FUNCSEL_VALUE_PIO0_43 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO43_CTRL_FUNCSEL_VALUE_PIO1_43 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO43_CTRL_FUNCSEL_VALUE_PIO2_43 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO43_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO43_CTRL_FUNCSEL_VALUE_UART1_RX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO43_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO44_STATUS_OFFSET = _u(@as(c_int, 0x00000160));
pub const IO_BANK0_GPIO44_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO44_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO44_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO44_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO44_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO44_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO44_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO44_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO44_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO44_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO44_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO44_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO44_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO44_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO44_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO44_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO44_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO44_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO44_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO44_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO44_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO44_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO44_CTRL_OFFSET = _u(@as(c_int, 0x00000164));
pub const IO_BANK0_GPIO44_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO44_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO44_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO44_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO44_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO44_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO44_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO44_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO44_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO44_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO44_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO44_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO44_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO44_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO44_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO44_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO44_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO44_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO44_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO44_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO44_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO44_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO44_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO44_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO44_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO44_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO44_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO44_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO44_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO44_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO44_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO44_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO44_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO44_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO44_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO44_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO44_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO44_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO44_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO44_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO44_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO44_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO44_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO44_CTRL_FUNCSEL_VALUE_SPI1_RX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO44_CTRL_FUNCSEL_VALUE_UART0_TX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO44_CTRL_FUNCSEL_VALUE_I2C0_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO44_CTRL_FUNCSEL_VALUE_PWM_A_10 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO44_CTRL_FUNCSEL_VALUE_SIOB_PROC_44 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO44_CTRL_FUNCSEL_VALUE_PIO0_44 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO44_CTRL_FUNCSEL_VALUE_PIO1_44 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO44_CTRL_FUNCSEL_VALUE_PIO2_44 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO44_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO44_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO45_STATUS_OFFSET = _u(@as(c_int, 0x00000168));
pub const IO_BANK0_GPIO45_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO45_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO45_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO45_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO45_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO45_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO45_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO45_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO45_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO45_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO45_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO45_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO45_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO45_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO45_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO45_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO45_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO45_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO45_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO45_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO45_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO45_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO45_CTRL_OFFSET = _u(@as(c_int, 0x0000016c));
pub const IO_BANK0_GPIO45_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO45_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO45_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO45_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO45_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO45_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO45_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO45_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO45_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO45_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO45_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO45_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO45_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO45_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO45_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO45_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO45_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO45_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO45_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO45_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO45_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO45_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO45_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO45_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO45_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO45_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO45_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO45_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO45_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO45_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO45_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO45_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO45_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO45_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO45_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO45_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO45_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO45_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO45_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO45_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO45_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO45_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO45_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO45_CTRL_FUNCSEL_VALUE_SPI1_SS_N = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO45_CTRL_FUNCSEL_VALUE_UART0_RX = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO45_CTRL_FUNCSEL_VALUE_I2C0_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO45_CTRL_FUNCSEL_VALUE_PWM_B_10 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO45_CTRL_FUNCSEL_VALUE_SIOB_PROC_45 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO45_CTRL_FUNCSEL_VALUE_PIO0_45 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO45_CTRL_FUNCSEL_VALUE_PIO1_45 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO45_CTRL_FUNCSEL_VALUE_PIO2_45 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO45_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO45_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO46_STATUS_OFFSET = _u(@as(c_int, 0x00000170));
pub const IO_BANK0_GPIO46_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO46_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO46_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO46_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO46_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO46_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO46_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO46_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO46_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO46_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO46_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO46_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO46_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO46_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO46_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO46_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO46_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO46_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO46_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO46_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO46_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO46_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO46_CTRL_OFFSET = _u(@as(c_int, 0x00000174));
pub const IO_BANK0_GPIO46_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO46_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO46_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO46_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO46_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO46_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO46_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO46_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO46_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO46_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO46_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO46_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO46_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO46_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO46_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO46_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO46_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO46_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO46_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO46_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO46_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO46_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO46_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO46_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO46_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO46_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO46_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO46_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO46_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO46_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO46_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO46_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO46_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO46_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO46_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO46_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO46_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO46_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO46_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO46_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO46_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO46_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO46_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO46_CTRL_FUNCSEL_VALUE_SPI1_SCLK = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO46_CTRL_FUNCSEL_VALUE_UART0_CTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO46_CTRL_FUNCSEL_VALUE_I2C1_SDA = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO46_CTRL_FUNCSEL_VALUE_PWM_A_11 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO46_CTRL_FUNCSEL_VALUE_SIOB_PROC_46 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO46_CTRL_FUNCSEL_VALUE_PIO0_46 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO46_CTRL_FUNCSEL_VALUE_PIO1_46 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO46_CTRL_FUNCSEL_VALUE_PIO2_46 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO46_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO46_CTRL_FUNCSEL_VALUE_UART0_TX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO46_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO47_STATUS_OFFSET = _u(@as(c_int, 0x00000178));
pub const IO_BANK0_GPIO47_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04022200, .hex));
pub const IO_BANK0_GPIO47_STATUS_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_GPIO47_STATUS_IRQTOPROC_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO47_STATUS_IRQTOPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_GPIO47_STATUS_IRQTOPROC_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO47_STATUS_IRQTOPROC_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_GPIO47_STATUS_IRQTOPROC_ACCESS = "RO";
pub const IO_BANK0_GPIO47_STATUS_INFROMPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO47_STATUS_INFROMPAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_GPIO47_STATUS_INFROMPAD_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO47_STATUS_INFROMPAD_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO47_STATUS_INFROMPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO47_STATUS_OETOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO47_STATUS_OETOPAD_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_GPIO47_STATUS_OETOPAD_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO47_STATUS_OETOPAD_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO47_STATUS_OETOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO47_STATUS_OUTTOPAD_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO47_STATUS_OUTTOPAD_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_GPIO47_STATUS_OUTTOPAD_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO47_STATUS_OUTTOPAD_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_GPIO47_STATUS_OUTTOPAD_ACCESS = "RO";
pub const IO_BANK0_GPIO47_CTRL_OFFSET = _u(@as(c_int, 0x0000017c));
pub const IO_BANK0_GPIO47_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3003f01f, .hex));
pub const IO_BANK0_GPIO47_CTRL_RESET = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO47_CTRL_IRQOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO47_CTRL_IRQOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30000000, .hex));
pub const IO_BANK0_GPIO47_CTRL_IRQOVER_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_GPIO47_CTRL_IRQOVER_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_GPIO47_CTRL_IRQOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO47_CTRL_IRQOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO47_CTRL_IRQOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO47_CTRL_IRQOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO47_CTRL_IRQOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO47_CTRL_INOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO47_CTRL_INOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hex));
pub const IO_BANK0_GPIO47_CTRL_INOVER_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_GPIO47_CTRL_INOVER_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_GPIO47_CTRL_INOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO47_CTRL_INOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO47_CTRL_INOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO47_CTRL_INOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO47_CTRL_INOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO47_CTRL_OEOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO47_CTRL_OEOVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const IO_BANK0_GPIO47_CTRL_OEOVER_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_GPIO47_CTRL_OEOVER_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_GPIO47_CTRL_OEOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO47_CTRL_OEOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO47_CTRL_OEOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO47_CTRL_OEOVER_VALUE_DISABLE = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO47_CTRL_OEOVER_VALUE_ENABLE = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO47_CTRL_OUTOVER_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO47_CTRL_OUTOVER_BITS = _u(@as(c_int, 0x00003000));
pub const IO_BANK0_GPIO47_CTRL_OUTOVER_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_GPIO47_CTRL_OUTOVER_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_GPIO47_CTRL_OUTOVER_ACCESS = "RW";
pub const IO_BANK0_GPIO47_CTRL_OUTOVER_VALUE_NORMAL = _u(@as(c_int, 0x0));
pub const IO_BANK0_GPIO47_CTRL_OUTOVER_VALUE_INVERT = _u(@as(c_int, 0x1));
pub const IO_BANK0_GPIO47_CTRL_OUTOVER_VALUE_LOW = _u(@as(c_int, 0x2));
pub const IO_BANK0_GPIO47_CTRL_OUTOVER_VALUE_HIGH = _u(@as(c_int, 0x3));
pub const IO_BANK0_GPIO47_CTRL_FUNCSEL_RESET = _u(@as(c_int, 0x1f));
pub const IO_BANK0_GPIO47_CTRL_FUNCSEL_BITS = _u(@as(c_int, 0x0000001f));
pub const IO_BANK0_GPIO47_CTRL_FUNCSEL_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_GPIO47_CTRL_FUNCSEL_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_GPIO47_CTRL_FUNCSEL_ACCESS = "RW";
pub const IO_BANK0_GPIO47_CTRL_FUNCSEL_VALUE_SPI1_TX = _u(@as(c_int, 0x01));
pub const IO_BANK0_GPIO47_CTRL_FUNCSEL_VALUE_UART0_RTS = _u(@as(c_int, 0x02));
pub const IO_BANK0_GPIO47_CTRL_FUNCSEL_VALUE_I2C1_SCL = _u(@as(c_int, 0x03));
pub const IO_BANK0_GPIO47_CTRL_FUNCSEL_VALUE_PWM_B_11 = _u(@as(c_int, 0x04));
pub const IO_BANK0_GPIO47_CTRL_FUNCSEL_VALUE_SIOB_PROC_47 = _u(@as(c_int, 0x05));
pub const IO_BANK0_GPIO47_CTRL_FUNCSEL_VALUE_PIO0_47 = _u(@as(c_int, 0x06));
pub const IO_BANK0_GPIO47_CTRL_FUNCSEL_VALUE_PIO1_47 = _u(@as(c_int, 0x07));
pub const IO_BANK0_GPIO47_CTRL_FUNCSEL_VALUE_PIO2_47 = _u(@as(c_int, 0x08));
pub const IO_BANK0_GPIO47_CTRL_FUNCSEL_VALUE_XIP_SS_N_1 = _u(@as(c_int, 0x09));
pub const IO_BANK0_GPIO47_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN = _u(@as(c_int, 0x0a));
pub const IO_BANK0_GPIO47_CTRL_FUNCSEL_VALUE_UART0_RX = _u(@as(c_int, 0x0b));
pub const IO_BANK0_GPIO47_CTRL_FUNCSEL_VALUE_NULL = _u(@as(c_int, 0x1f));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_OFFSET = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO31_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO31_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO31_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO31_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO31_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO30_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO30_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO30_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO30_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO30_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO29_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO29_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO29_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO29_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO29_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO28_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO28_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO28_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO28_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO28_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO27_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO27_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO27_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO27_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO27_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO26_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO26_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO26_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO26_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO26_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO25_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO25_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO25_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO25_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO25_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO24_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO24_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO24_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO24_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO24_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO23_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO23_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO23_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO23_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO23_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO22_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO22_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO22_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO22_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO22_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO21_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO21_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO21_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO21_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO21_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO20_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO20_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO20_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO20_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO20_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO19_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO19_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO19_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO19_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO19_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO18_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO18_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO18_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO18_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO18_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO17_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO17_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO17_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO17_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO17_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO16_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO16_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO16_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO16_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO16_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO15_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO15_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO15_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO15_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO15_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO14_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO14_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO14_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO14_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO14_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO13_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO13_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO13_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO13_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO13_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO12_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO12_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO12_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO12_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO12_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO11_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO11_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO11_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO11_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO11_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO10_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO10_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO10_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO10_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO10_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO9_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO9_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO9_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO9_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO9_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO8_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO8_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO8_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO8_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO8_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO7_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO7_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO7_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO7_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO7_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO6_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO6_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO6_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO6_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO6_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO5_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO5_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO5_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO5_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO5_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO4_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO4_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO4_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO4_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO4_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO3_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO3_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO3_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO3_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO3_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO2_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO2_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO2_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO2_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO2_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO1_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO1_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO1_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO1_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO1_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO0_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO0_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO0_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO0_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE0_GPIO0_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_OFFSET = _u(@as(c_int, 0x00000204));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO47_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO47_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO47_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO47_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO47_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO46_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO46_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO46_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO46_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO46_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO45_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO45_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO45_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO45_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO45_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO44_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO44_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO44_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO44_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO44_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO43_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO43_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO43_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO43_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO43_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO42_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO42_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO42_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO42_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO42_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO41_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO41_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO41_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO41_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO41_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO40_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO40_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO40_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO40_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO40_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO39_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO39_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO39_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO39_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO39_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO38_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO38_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO38_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO38_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO38_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO37_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO37_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO37_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO37_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO37_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO36_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO36_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO36_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO36_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO36_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO35_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO35_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO35_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO35_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO35_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO34_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO34_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO34_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO34_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO34_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO33_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO33_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO33_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO33_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO33_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO32_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO32_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO32_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO32_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_PROC0_SECURE1_GPIO32_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_OFFSET = _u(@as(c_int, 0x00000208));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO31_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO31_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO31_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO31_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO31_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO30_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO30_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO30_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO30_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO30_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO29_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO29_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO29_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO29_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO29_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO28_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO28_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO28_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO28_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO28_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO27_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO27_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO27_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO27_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO27_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO26_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO26_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO26_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO26_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO26_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO25_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO25_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO25_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO25_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO25_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO24_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO24_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO24_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO24_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO24_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO23_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO23_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO23_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO23_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO23_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO22_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO22_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO22_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO22_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO22_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO21_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO21_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO21_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO21_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO21_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO20_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO20_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO20_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO20_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO20_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO19_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO19_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO19_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO19_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO19_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO18_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO18_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO18_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO18_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO18_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO17_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO17_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO17_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO17_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO17_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO16_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO16_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO16_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO16_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO16_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO15_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO15_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO15_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO15_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO15_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO14_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO14_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO14_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO14_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO14_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO13_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO13_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO13_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO13_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO13_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO12_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO12_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO12_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO12_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO12_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO11_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO11_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO11_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO11_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO11_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO10_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO10_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO10_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO10_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO10_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO9_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO9_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO9_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO9_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO9_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO8_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO8_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO8_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO8_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO8_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO7_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO7_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO7_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO7_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO7_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO6_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO6_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO6_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO6_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO6_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO5_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO5_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO5_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO5_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO5_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO4_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO4_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO4_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO4_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO4_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO3_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO3_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO3_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO3_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO3_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO2_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO2_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO2_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO2_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO2_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO1_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO1_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO1_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO1_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO1_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO0_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO0_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO0_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO0_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE0_GPIO0_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_OFFSET = _u(@as(c_int, 0x0000020c));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO47_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO47_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO47_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO47_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO47_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO46_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO46_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO46_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO46_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO46_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO45_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO45_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO45_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO45_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO45_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO44_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO44_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO44_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO44_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO44_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO43_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO43_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO43_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO43_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO43_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO42_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO42_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO42_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO42_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO42_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO41_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO41_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO41_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO41_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO41_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO40_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO40_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO40_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO40_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO40_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO39_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO39_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO39_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO39_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO39_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO38_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO38_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO38_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO38_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO38_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO37_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO37_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO37_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO37_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO37_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO36_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO36_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO36_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO36_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO36_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO35_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO35_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO35_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO35_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO35_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO34_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO34_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO34_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO34_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO34_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO33_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO33_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO33_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO33_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO33_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO32_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO32_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO32_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO32_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_PROC0_NONSECURE1_GPIO32_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_OFFSET = _u(@as(c_int, 0x00000210));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO31_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO31_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO31_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO31_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO31_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO30_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO30_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO30_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO30_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO30_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO29_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO29_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO29_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO29_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO29_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO28_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO28_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO28_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO28_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO28_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO27_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO27_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO27_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO27_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO27_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO26_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO26_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO26_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO26_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO26_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO25_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO25_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO25_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO25_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO25_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO24_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO24_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO24_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO24_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO24_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO23_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO23_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO23_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO23_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO23_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO22_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO22_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO22_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO22_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO22_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO21_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO21_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO21_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO21_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO21_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO20_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO20_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO20_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO20_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO20_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO19_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO19_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO19_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO19_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO19_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO18_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO18_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO18_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO18_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO18_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO17_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO17_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO17_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO17_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO17_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO16_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO16_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO16_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO16_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO16_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO15_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO15_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO15_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO15_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO15_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO14_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO14_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO14_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO14_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO14_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO13_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO13_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO13_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO13_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO13_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO12_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO12_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO12_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO12_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO12_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO11_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO11_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO11_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO11_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO11_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO10_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO10_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO10_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO10_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO10_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO9_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO9_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO9_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO9_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO9_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO8_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO8_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO8_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO8_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO8_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO7_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO7_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO7_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO7_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO7_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO6_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO6_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO6_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO6_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO6_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO5_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO5_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO5_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO5_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO5_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO4_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO4_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO4_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO4_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO4_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO3_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO3_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO3_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO3_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO3_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO2_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO2_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO2_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO2_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO2_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO1_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO1_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO1_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO1_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO1_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO0_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO0_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO0_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO0_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE0_GPIO0_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_OFFSET = _u(@as(c_int, 0x00000214));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO47_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO47_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO47_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO47_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO47_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO46_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO46_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO46_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO46_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO46_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO45_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO45_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO45_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO45_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO45_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO44_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO44_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO44_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO44_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO44_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO43_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO43_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO43_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO43_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO43_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO42_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO42_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO42_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO42_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO42_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO41_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO41_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO41_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO41_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO41_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO40_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO40_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO40_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO40_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO40_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO39_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO39_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO39_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO39_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO39_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO38_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO38_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO38_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO38_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO38_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO37_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO37_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO37_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO37_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO37_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO36_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO36_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO36_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO36_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO36_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO35_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO35_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO35_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO35_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO35_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO34_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO34_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO34_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO34_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO34_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO33_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO33_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO33_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO33_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO33_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO32_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO32_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO32_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO32_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_PROC1_SECURE1_GPIO32_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_OFFSET = _u(@as(c_int, 0x00000218));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO31_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO31_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO31_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO31_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO31_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO30_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO30_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO30_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO30_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO30_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO29_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO29_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO29_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO29_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO29_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO28_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO28_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO28_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO28_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO28_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO27_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO27_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO27_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO27_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO27_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO26_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO26_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO26_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO26_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO26_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO25_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO25_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO25_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO25_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO25_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO24_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO24_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO24_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO24_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO24_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO23_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO23_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO23_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO23_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO23_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO22_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO22_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO22_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO22_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO22_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO21_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO21_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO21_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO21_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO21_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO20_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO20_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO20_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO20_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO20_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO19_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO19_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO19_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO19_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO19_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO18_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO18_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO18_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO18_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO18_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO17_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO17_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO17_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO17_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO17_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO16_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO16_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO16_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO16_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO16_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO15_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO15_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO15_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO15_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO15_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO14_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO14_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO14_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO14_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO14_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO13_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO13_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO13_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO13_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO13_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO12_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO12_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO12_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO12_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO12_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO11_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO11_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO11_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO11_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO11_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO10_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO10_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO10_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO10_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO10_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO9_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO9_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO9_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO9_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO9_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO8_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO8_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO8_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO8_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO8_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO7_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO7_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO7_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO7_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO7_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO6_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO6_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO6_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO6_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO6_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO5_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO5_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO5_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO5_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO5_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO4_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO4_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO4_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO4_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO4_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO3_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO3_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO3_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO3_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO3_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO2_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO2_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO2_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO2_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO2_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO1_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO1_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO1_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO1_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO1_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO0_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO0_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO0_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO0_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE0_GPIO0_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_OFFSET = _u(@as(c_int, 0x0000021c));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO47_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO47_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO47_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO47_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO47_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO46_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO46_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO46_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO46_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO46_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO45_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO45_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO45_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO45_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO45_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO44_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO44_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO44_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO44_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO44_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO43_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO43_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO43_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO43_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO43_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO42_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO42_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO42_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO42_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO42_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO41_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO41_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO41_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO41_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO41_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO40_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO40_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO40_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO40_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO40_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO39_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO39_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO39_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO39_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO39_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO38_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO38_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO38_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO38_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO38_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO37_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO37_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO37_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO37_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO37_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO36_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO36_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO36_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO36_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO36_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO35_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO35_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO35_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO35_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO35_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO34_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO34_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO34_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO34_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO34_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO33_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO33_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO33_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO33_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO33_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO32_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO32_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO32_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO32_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_PROC1_NONSECURE1_GPIO32_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_OFFSET = _u(@as(c_int, 0x00000220));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO31_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO31_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO31_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO31_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO31_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO30_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO30_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO30_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO30_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO30_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO29_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO29_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO29_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO29_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO29_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO28_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO28_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO28_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO28_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO28_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO27_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO27_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO27_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO27_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO27_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO26_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO26_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO26_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO26_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO26_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO25_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO25_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO25_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO25_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO25_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO24_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO24_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO24_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO24_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO24_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO23_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO23_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO23_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO23_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO23_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO22_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO22_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO22_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO22_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO22_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO21_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO21_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO21_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO21_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO21_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO20_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO20_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO20_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO20_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO20_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO19_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO19_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO19_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO19_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO19_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO18_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO18_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO18_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO18_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO18_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO17_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO17_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO17_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO17_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO17_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO16_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO16_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO16_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO16_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO16_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO15_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO15_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO15_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO15_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO15_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO14_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO14_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO14_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO14_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO14_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO13_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO13_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO13_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO13_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO13_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO12_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO12_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO12_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO12_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO12_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO11_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO11_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO11_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO11_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO11_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO10_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO10_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO10_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO10_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO10_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO9_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO9_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO9_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO9_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO9_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO8_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO8_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO8_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO8_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO8_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO7_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO7_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO7_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO7_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO7_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO6_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO6_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO6_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO6_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO6_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO5_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO5_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO5_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO5_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO5_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO4_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO4_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO4_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO4_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO4_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO3_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO3_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO3_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO3_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO3_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO2_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO2_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO2_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO2_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO2_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO1_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO1_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO1_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO1_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO1_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO0_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO0_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO0_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO0_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE0_GPIO0_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_OFFSET = _u(@as(c_int, 0x00000224));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO47_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO47_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO47_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO47_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO47_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO46_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO46_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO46_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO46_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO46_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO45_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO45_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO45_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO45_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO45_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO44_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO44_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO44_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO44_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO44_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO43_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO43_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO43_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO43_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO43_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO42_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO42_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO42_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO42_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO42_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO41_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO41_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO41_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO41_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO41_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO40_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO40_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO40_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO40_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO40_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO39_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO39_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO39_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO39_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO39_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO38_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO38_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO38_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO38_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO38_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO37_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO37_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO37_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO37_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO37_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO36_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO36_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO36_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO36_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO36_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO35_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO35_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO35_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO35_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO35_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO34_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO34_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO34_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO34_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO34_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO33_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO33_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO33_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO33_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO33_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO32_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO32_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO32_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO32_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_SECURE1_GPIO32_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_OFFSET = _u(@as(c_int, 0x00000228));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO31_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO31_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO31_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO31_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO31_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO30_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO30_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO30_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO30_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO30_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO29_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO29_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO29_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO29_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO29_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO28_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO28_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO28_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO28_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO28_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO27_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO27_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO27_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO27_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO27_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO26_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO26_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO26_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO26_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO26_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO25_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO25_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO25_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO25_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO25_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO24_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO24_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO24_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO24_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO24_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO23_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO23_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO23_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO23_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO23_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO22_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO22_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO22_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO22_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO22_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO21_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO21_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO21_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO21_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO21_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO20_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO20_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO20_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO20_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO20_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO19_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO19_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO19_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO19_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO19_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO18_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO18_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO18_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO18_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO18_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO17_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO17_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO17_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO17_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO17_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO16_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO16_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO16_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO16_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO16_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO15_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO15_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO15_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO15_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO15_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO14_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO14_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO14_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO14_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO14_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO13_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO13_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO13_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO13_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO13_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO12_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO12_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO12_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO12_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO12_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO11_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO11_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO11_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO11_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO11_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO10_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO10_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO10_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO10_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO10_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO9_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO9_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO9_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO9_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO9_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO8_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO8_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO8_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO8_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO8_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO7_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO7_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO7_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO7_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO7_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO6_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO6_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO6_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO6_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO6_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO5_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO5_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO5_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO5_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO5_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO4_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO4_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO4_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO4_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO4_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO3_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO3_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO3_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO3_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO3_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO2_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO2_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO2_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO2_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO2_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO1_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO1_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO1_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO1_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO1_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO0_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO0_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO0_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO0_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE0_GPIO0_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_OFFSET = _u(@as(c_int, 0x0000022c));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO47_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO47_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO47_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO47_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO47_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO46_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO46_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO46_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO46_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO46_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO45_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO45_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO45_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO45_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO45_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO44_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO44_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO44_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO44_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO44_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO43_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO43_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO43_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO43_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO43_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO42_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO42_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO42_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO42_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO42_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO41_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO41_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO41_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO41_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO41_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO40_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO40_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO40_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO40_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO40_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO39_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO39_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO39_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO39_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO39_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO38_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO38_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO38_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO38_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO38_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO37_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO37_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO37_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO37_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO37_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO36_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO36_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO36_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO36_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO36_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO35_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO35_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO35_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO35_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO35_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO34_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO34_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO34_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO34_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO34_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO33_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO33_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO33_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO33_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO33_ACCESS = "RO";
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO32_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO32_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO32_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO32_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_IRQSUMMARY_DORMANT_WAKE_NONSECURE1_GPIO32_ACCESS = "RO";
pub const IO_BANK0_INTR0_OFFSET = _u(@as(c_int, 0x00000230));
pub const IO_BANK0_INTR0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_INTR0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_INTR0_GPIO7_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO7_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_INTR0_GPIO7_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_INTR0_GPIO7_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_INTR0_GPIO7_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO7_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO7_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_INTR0_GPIO7_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_INTR0_GPIO7_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_INTR0_GPIO7_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO7_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO7_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_INTR0_GPIO7_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_INTR0_GPIO7_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_INTR0_GPIO7_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO7_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO7_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_INTR0_GPIO7_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_INTR0_GPIO7_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_INTR0_GPIO7_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO6_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO6_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_INTR0_GPIO6_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_INTR0_GPIO6_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_INTR0_GPIO6_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO6_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO6_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_INTR0_GPIO6_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_INTR0_GPIO6_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_INTR0_GPIO6_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO6_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO6_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_INTR0_GPIO6_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_INTR0_GPIO6_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_INTR0_GPIO6_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO6_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO6_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_INTR0_GPIO6_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_INTR0_GPIO6_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_INTR0_GPIO6_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO5_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO5_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_INTR0_GPIO5_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_INTR0_GPIO5_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_INTR0_GPIO5_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO5_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO5_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_INTR0_GPIO5_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_INTR0_GPIO5_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_INTR0_GPIO5_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO5_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO5_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_INTR0_GPIO5_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_INTR0_GPIO5_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_INTR0_GPIO5_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO5_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO5_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_INTR0_GPIO5_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_INTR0_GPIO5_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_INTR0_GPIO5_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO4_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO4_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_INTR0_GPIO4_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_INTR0_GPIO4_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_INTR0_GPIO4_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO4_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO4_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_INTR0_GPIO4_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_INTR0_GPIO4_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_INTR0_GPIO4_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO4_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO4_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_INTR0_GPIO4_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_INTR0_GPIO4_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_INTR0_GPIO4_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO4_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO4_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_INTR0_GPIO4_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_INTR0_GPIO4_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_INTR0_GPIO4_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO3_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO3_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_INTR0_GPIO3_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_INTR0_GPIO3_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_INTR0_GPIO3_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO3_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO3_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_INTR0_GPIO3_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_INTR0_GPIO3_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_INTR0_GPIO3_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO3_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO3_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_INTR0_GPIO3_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_INTR0_GPIO3_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_INTR0_GPIO3_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO3_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO3_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_INTR0_GPIO3_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_INTR0_GPIO3_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_INTR0_GPIO3_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO2_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO2_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_INTR0_GPIO2_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_INTR0_GPIO2_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_INTR0_GPIO2_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO2_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO2_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_INTR0_GPIO2_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_INTR0_GPIO2_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_INTR0_GPIO2_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO2_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO2_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_INTR0_GPIO2_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_INTR0_GPIO2_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_INTR0_GPIO2_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO2_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO2_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_INTR0_GPIO2_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_INTR0_GPIO2_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_INTR0_GPIO2_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO1_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO1_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_INTR0_GPIO1_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_INTR0_GPIO1_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_INTR0_GPIO1_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO1_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO1_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_INTR0_GPIO1_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_INTR0_GPIO1_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_INTR0_GPIO1_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO1_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO1_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_INTR0_GPIO1_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_INTR0_GPIO1_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_INTR0_GPIO1_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO1_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO1_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_INTR0_GPIO1_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_INTR0_GPIO1_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_INTR0_GPIO1_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO0_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO0_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_INTR0_GPIO0_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_INTR0_GPIO0_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_INTR0_GPIO0_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO0_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO0_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_INTR0_GPIO0_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_INTR0_GPIO0_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_INTR0_GPIO0_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR0_GPIO0_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO0_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_INTR0_GPIO0_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_INTR0_GPIO0_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_INTR0_GPIO0_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR0_GPIO0_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR0_GPIO0_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_INTR0_GPIO0_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_INTR0_GPIO0_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_INTR0_GPIO0_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR1_OFFSET = _u(@as(c_int, 0x00000234));
pub const IO_BANK0_INTR1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_INTR1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_INTR1_GPIO15_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO15_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_INTR1_GPIO15_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_INTR1_GPIO15_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_INTR1_GPIO15_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO15_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO15_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_INTR1_GPIO15_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_INTR1_GPIO15_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_INTR1_GPIO15_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO15_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO15_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_INTR1_GPIO15_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_INTR1_GPIO15_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_INTR1_GPIO15_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO15_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO15_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_INTR1_GPIO15_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_INTR1_GPIO15_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_INTR1_GPIO15_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO14_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO14_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_INTR1_GPIO14_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_INTR1_GPIO14_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_INTR1_GPIO14_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO14_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO14_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_INTR1_GPIO14_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_INTR1_GPIO14_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_INTR1_GPIO14_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO14_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO14_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_INTR1_GPIO14_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_INTR1_GPIO14_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_INTR1_GPIO14_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO14_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO14_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_INTR1_GPIO14_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_INTR1_GPIO14_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_INTR1_GPIO14_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO13_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO13_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_INTR1_GPIO13_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_INTR1_GPIO13_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_INTR1_GPIO13_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO13_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO13_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_INTR1_GPIO13_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_INTR1_GPIO13_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_INTR1_GPIO13_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO13_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO13_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_INTR1_GPIO13_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_INTR1_GPIO13_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_INTR1_GPIO13_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO13_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO13_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_INTR1_GPIO13_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_INTR1_GPIO13_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_INTR1_GPIO13_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO12_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO12_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_INTR1_GPIO12_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_INTR1_GPIO12_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_INTR1_GPIO12_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO12_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO12_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_INTR1_GPIO12_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_INTR1_GPIO12_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_INTR1_GPIO12_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO12_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO12_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_INTR1_GPIO12_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_INTR1_GPIO12_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_INTR1_GPIO12_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO12_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO12_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_INTR1_GPIO12_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_INTR1_GPIO12_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_INTR1_GPIO12_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO11_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO11_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_INTR1_GPIO11_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_INTR1_GPIO11_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_INTR1_GPIO11_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO11_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO11_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_INTR1_GPIO11_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_INTR1_GPIO11_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_INTR1_GPIO11_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO11_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO11_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_INTR1_GPIO11_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_INTR1_GPIO11_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_INTR1_GPIO11_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO11_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO11_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_INTR1_GPIO11_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_INTR1_GPIO11_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_INTR1_GPIO11_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO10_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO10_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_INTR1_GPIO10_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_INTR1_GPIO10_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_INTR1_GPIO10_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO10_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO10_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_INTR1_GPIO10_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_INTR1_GPIO10_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_INTR1_GPIO10_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO10_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO10_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_INTR1_GPIO10_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_INTR1_GPIO10_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_INTR1_GPIO10_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO10_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO10_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_INTR1_GPIO10_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_INTR1_GPIO10_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_INTR1_GPIO10_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO9_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO9_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_INTR1_GPIO9_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_INTR1_GPIO9_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_INTR1_GPIO9_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO9_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO9_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_INTR1_GPIO9_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_INTR1_GPIO9_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_INTR1_GPIO9_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO9_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO9_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_INTR1_GPIO9_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_INTR1_GPIO9_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_INTR1_GPIO9_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO9_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO9_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_INTR1_GPIO9_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_INTR1_GPIO9_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_INTR1_GPIO9_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO8_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO8_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_INTR1_GPIO8_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_INTR1_GPIO8_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_INTR1_GPIO8_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO8_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO8_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_INTR1_GPIO8_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_INTR1_GPIO8_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_INTR1_GPIO8_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR1_GPIO8_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO8_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_INTR1_GPIO8_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_INTR1_GPIO8_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_INTR1_GPIO8_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR1_GPIO8_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR1_GPIO8_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_INTR1_GPIO8_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_INTR1_GPIO8_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_INTR1_GPIO8_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR2_OFFSET = _u(@as(c_int, 0x00000238));
pub const IO_BANK0_INTR2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_INTR2_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_INTR2_GPIO23_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO23_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_INTR2_GPIO23_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_INTR2_GPIO23_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_INTR2_GPIO23_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO23_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO23_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_INTR2_GPIO23_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_INTR2_GPIO23_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_INTR2_GPIO23_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO23_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO23_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_INTR2_GPIO23_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_INTR2_GPIO23_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_INTR2_GPIO23_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO23_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO23_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_INTR2_GPIO23_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_INTR2_GPIO23_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_INTR2_GPIO23_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO22_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO22_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_INTR2_GPIO22_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_INTR2_GPIO22_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_INTR2_GPIO22_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO22_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO22_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_INTR2_GPIO22_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_INTR2_GPIO22_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_INTR2_GPIO22_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO22_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO22_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_INTR2_GPIO22_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_INTR2_GPIO22_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_INTR2_GPIO22_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO22_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO22_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_INTR2_GPIO22_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_INTR2_GPIO22_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_INTR2_GPIO22_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO21_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO21_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_INTR2_GPIO21_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_INTR2_GPIO21_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_INTR2_GPIO21_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO21_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO21_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_INTR2_GPIO21_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_INTR2_GPIO21_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_INTR2_GPIO21_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO21_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO21_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_INTR2_GPIO21_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_INTR2_GPIO21_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_INTR2_GPIO21_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO21_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO21_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_INTR2_GPIO21_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_INTR2_GPIO21_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_INTR2_GPIO21_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO20_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO20_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_INTR2_GPIO20_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_INTR2_GPIO20_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_INTR2_GPIO20_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO20_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO20_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_INTR2_GPIO20_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_INTR2_GPIO20_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_INTR2_GPIO20_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO20_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO20_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_INTR2_GPIO20_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_INTR2_GPIO20_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_INTR2_GPIO20_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO20_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO20_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_INTR2_GPIO20_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_INTR2_GPIO20_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_INTR2_GPIO20_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO19_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO19_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_INTR2_GPIO19_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_INTR2_GPIO19_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_INTR2_GPIO19_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO19_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO19_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_INTR2_GPIO19_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_INTR2_GPIO19_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_INTR2_GPIO19_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO19_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO19_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_INTR2_GPIO19_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_INTR2_GPIO19_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_INTR2_GPIO19_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO19_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO19_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_INTR2_GPIO19_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_INTR2_GPIO19_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_INTR2_GPIO19_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO18_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO18_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_INTR2_GPIO18_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_INTR2_GPIO18_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_INTR2_GPIO18_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO18_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO18_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_INTR2_GPIO18_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_INTR2_GPIO18_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_INTR2_GPIO18_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO18_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO18_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_INTR2_GPIO18_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_INTR2_GPIO18_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_INTR2_GPIO18_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO18_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO18_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_INTR2_GPIO18_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_INTR2_GPIO18_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_INTR2_GPIO18_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO17_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO17_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_INTR2_GPIO17_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_INTR2_GPIO17_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_INTR2_GPIO17_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO17_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO17_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_INTR2_GPIO17_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_INTR2_GPIO17_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_INTR2_GPIO17_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO17_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO17_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_INTR2_GPIO17_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_INTR2_GPIO17_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_INTR2_GPIO17_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO17_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO17_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_INTR2_GPIO17_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_INTR2_GPIO17_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_INTR2_GPIO17_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO16_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO16_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_INTR2_GPIO16_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_INTR2_GPIO16_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_INTR2_GPIO16_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO16_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO16_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_INTR2_GPIO16_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_INTR2_GPIO16_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_INTR2_GPIO16_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR2_GPIO16_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO16_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_INTR2_GPIO16_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_INTR2_GPIO16_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_INTR2_GPIO16_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR2_GPIO16_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR2_GPIO16_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_INTR2_GPIO16_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_INTR2_GPIO16_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_INTR2_GPIO16_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR3_OFFSET = _u(@as(c_int, 0x0000023c));
pub const IO_BANK0_INTR3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_INTR3_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_INTR3_GPIO31_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO31_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_INTR3_GPIO31_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_INTR3_GPIO31_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_INTR3_GPIO31_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO31_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO31_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_INTR3_GPIO31_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_INTR3_GPIO31_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_INTR3_GPIO31_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO31_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO31_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_INTR3_GPIO31_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_INTR3_GPIO31_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_INTR3_GPIO31_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO31_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO31_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_INTR3_GPIO31_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_INTR3_GPIO31_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_INTR3_GPIO31_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO30_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO30_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_INTR3_GPIO30_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_INTR3_GPIO30_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_INTR3_GPIO30_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO30_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO30_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_INTR3_GPIO30_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_INTR3_GPIO30_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_INTR3_GPIO30_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO30_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO30_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_INTR3_GPIO30_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_INTR3_GPIO30_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_INTR3_GPIO30_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO30_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO30_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_INTR3_GPIO30_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_INTR3_GPIO30_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_INTR3_GPIO30_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO29_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO29_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_INTR3_GPIO29_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_INTR3_GPIO29_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_INTR3_GPIO29_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO29_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO29_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_INTR3_GPIO29_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_INTR3_GPIO29_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_INTR3_GPIO29_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO29_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO29_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_INTR3_GPIO29_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_INTR3_GPIO29_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_INTR3_GPIO29_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO29_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO29_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_INTR3_GPIO29_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_INTR3_GPIO29_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_INTR3_GPIO29_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO28_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO28_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_INTR3_GPIO28_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_INTR3_GPIO28_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_INTR3_GPIO28_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO28_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO28_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_INTR3_GPIO28_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_INTR3_GPIO28_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_INTR3_GPIO28_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO28_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO28_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_INTR3_GPIO28_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_INTR3_GPIO28_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_INTR3_GPIO28_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO28_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO28_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_INTR3_GPIO28_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_INTR3_GPIO28_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_INTR3_GPIO28_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO27_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO27_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_INTR3_GPIO27_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_INTR3_GPIO27_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_INTR3_GPIO27_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO27_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO27_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_INTR3_GPIO27_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_INTR3_GPIO27_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_INTR3_GPIO27_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO27_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO27_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_INTR3_GPIO27_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_INTR3_GPIO27_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_INTR3_GPIO27_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO27_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO27_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_INTR3_GPIO27_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_INTR3_GPIO27_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_INTR3_GPIO27_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO26_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO26_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_INTR3_GPIO26_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_INTR3_GPIO26_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_INTR3_GPIO26_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO26_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO26_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_INTR3_GPIO26_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_INTR3_GPIO26_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_INTR3_GPIO26_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO26_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO26_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_INTR3_GPIO26_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_INTR3_GPIO26_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_INTR3_GPIO26_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO26_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO26_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_INTR3_GPIO26_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_INTR3_GPIO26_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_INTR3_GPIO26_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO25_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO25_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_INTR3_GPIO25_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_INTR3_GPIO25_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_INTR3_GPIO25_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO25_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO25_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_INTR3_GPIO25_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_INTR3_GPIO25_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_INTR3_GPIO25_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO25_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO25_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_INTR3_GPIO25_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_INTR3_GPIO25_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_INTR3_GPIO25_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO25_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO25_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_INTR3_GPIO25_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_INTR3_GPIO25_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_INTR3_GPIO25_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO24_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO24_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_INTR3_GPIO24_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_INTR3_GPIO24_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_INTR3_GPIO24_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO24_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO24_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_INTR3_GPIO24_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_INTR3_GPIO24_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_INTR3_GPIO24_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR3_GPIO24_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO24_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_INTR3_GPIO24_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_INTR3_GPIO24_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_INTR3_GPIO24_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR3_GPIO24_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR3_GPIO24_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_INTR3_GPIO24_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_INTR3_GPIO24_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_INTR3_GPIO24_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR4_OFFSET = _u(@as(c_int, 0x00000240));
pub const IO_BANK0_INTR4_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_INTR4_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_INTR4_GPIO39_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO39_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_INTR4_GPIO39_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_INTR4_GPIO39_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_INTR4_GPIO39_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR4_GPIO39_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO39_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_INTR4_GPIO39_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_INTR4_GPIO39_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_INTR4_GPIO39_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR4_GPIO39_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO39_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_INTR4_GPIO39_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_INTR4_GPIO39_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_INTR4_GPIO39_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR4_GPIO39_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO39_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_INTR4_GPIO39_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_INTR4_GPIO39_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_INTR4_GPIO39_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR4_GPIO38_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO38_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_INTR4_GPIO38_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_INTR4_GPIO38_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_INTR4_GPIO38_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR4_GPIO38_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO38_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_INTR4_GPIO38_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_INTR4_GPIO38_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_INTR4_GPIO38_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR4_GPIO38_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO38_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_INTR4_GPIO38_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_INTR4_GPIO38_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_INTR4_GPIO38_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR4_GPIO38_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO38_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_INTR4_GPIO38_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_INTR4_GPIO38_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_INTR4_GPIO38_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR4_GPIO37_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO37_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_INTR4_GPIO37_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_INTR4_GPIO37_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_INTR4_GPIO37_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR4_GPIO37_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO37_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_INTR4_GPIO37_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_INTR4_GPIO37_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_INTR4_GPIO37_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR4_GPIO37_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO37_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_INTR4_GPIO37_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_INTR4_GPIO37_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_INTR4_GPIO37_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR4_GPIO37_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO37_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_INTR4_GPIO37_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_INTR4_GPIO37_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_INTR4_GPIO37_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR4_GPIO36_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO36_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_INTR4_GPIO36_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_INTR4_GPIO36_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_INTR4_GPIO36_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR4_GPIO36_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO36_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_INTR4_GPIO36_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_INTR4_GPIO36_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_INTR4_GPIO36_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR4_GPIO36_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO36_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_INTR4_GPIO36_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_INTR4_GPIO36_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_INTR4_GPIO36_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR4_GPIO36_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO36_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_INTR4_GPIO36_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_INTR4_GPIO36_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_INTR4_GPIO36_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR4_GPIO35_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO35_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_INTR4_GPIO35_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_INTR4_GPIO35_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_INTR4_GPIO35_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR4_GPIO35_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO35_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_INTR4_GPIO35_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_INTR4_GPIO35_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_INTR4_GPIO35_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR4_GPIO35_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO35_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_INTR4_GPIO35_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_INTR4_GPIO35_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_INTR4_GPIO35_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR4_GPIO35_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO35_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_INTR4_GPIO35_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_INTR4_GPIO35_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_INTR4_GPIO35_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR4_GPIO34_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO34_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_INTR4_GPIO34_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_INTR4_GPIO34_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_INTR4_GPIO34_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR4_GPIO34_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO34_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_INTR4_GPIO34_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_INTR4_GPIO34_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_INTR4_GPIO34_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR4_GPIO34_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO34_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_INTR4_GPIO34_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_INTR4_GPIO34_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_INTR4_GPIO34_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR4_GPIO34_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO34_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_INTR4_GPIO34_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_INTR4_GPIO34_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_INTR4_GPIO34_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR4_GPIO33_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO33_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_INTR4_GPIO33_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_INTR4_GPIO33_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_INTR4_GPIO33_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR4_GPIO33_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO33_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_INTR4_GPIO33_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_INTR4_GPIO33_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_INTR4_GPIO33_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR4_GPIO33_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO33_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_INTR4_GPIO33_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_INTR4_GPIO33_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_INTR4_GPIO33_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR4_GPIO33_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO33_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_INTR4_GPIO33_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_INTR4_GPIO33_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_INTR4_GPIO33_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR4_GPIO32_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO32_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_INTR4_GPIO32_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_INTR4_GPIO32_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_INTR4_GPIO32_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR4_GPIO32_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO32_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_INTR4_GPIO32_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_INTR4_GPIO32_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_INTR4_GPIO32_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR4_GPIO32_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO32_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_INTR4_GPIO32_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_INTR4_GPIO32_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_INTR4_GPIO32_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR4_GPIO32_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR4_GPIO32_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_INTR4_GPIO32_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_INTR4_GPIO32_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_INTR4_GPIO32_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR5_OFFSET = _u(@as(c_int, 0x00000244));
pub const IO_BANK0_INTR5_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_INTR5_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_INTR5_GPIO47_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO47_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_INTR5_GPIO47_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_INTR5_GPIO47_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_INTR5_GPIO47_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR5_GPIO47_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO47_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_INTR5_GPIO47_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_INTR5_GPIO47_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_INTR5_GPIO47_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR5_GPIO47_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO47_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_INTR5_GPIO47_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_INTR5_GPIO47_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_INTR5_GPIO47_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR5_GPIO47_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO47_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_INTR5_GPIO47_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_INTR5_GPIO47_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_INTR5_GPIO47_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR5_GPIO46_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO46_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_INTR5_GPIO46_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_INTR5_GPIO46_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_INTR5_GPIO46_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR5_GPIO46_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO46_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_INTR5_GPIO46_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_INTR5_GPIO46_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_INTR5_GPIO46_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR5_GPIO46_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO46_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_INTR5_GPIO46_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_INTR5_GPIO46_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_INTR5_GPIO46_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR5_GPIO46_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO46_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_INTR5_GPIO46_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_INTR5_GPIO46_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_INTR5_GPIO46_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR5_GPIO45_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO45_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_INTR5_GPIO45_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_INTR5_GPIO45_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_INTR5_GPIO45_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR5_GPIO45_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO45_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_INTR5_GPIO45_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_INTR5_GPIO45_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_INTR5_GPIO45_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR5_GPIO45_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO45_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_INTR5_GPIO45_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_INTR5_GPIO45_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_INTR5_GPIO45_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR5_GPIO45_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO45_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_INTR5_GPIO45_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_INTR5_GPIO45_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_INTR5_GPIO45_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR5_GPIO44_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO44_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_INTR5_GPIO44_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_INTR5_GPIO44_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_INTR5_GPIO44_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR5_GPIO44_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO44_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_INTR5_GPIO44_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_INTR5_GPIO44_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_INTR5_GPIO44_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR5_GPIO44_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO44_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_INTR5_GPIO44_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_INTR5_GPIO44_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_INTR5_GPIO44_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR5_GPIO44_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO44_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_INTR5_GPIO44_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_INTR5_GPIO44_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_INTR5_GPIO44_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR5_GPIO43_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO43_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_INTR5_GPIO43_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_INTR5_GPIO43_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_INTR5_GPIO43_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR5_GPIO43_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO43_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_INTR5_GPIO43_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_INTR5_GPIO43_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_INTR5_GPIO43_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR5_GPIO43_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO43_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_INTR5_GPIO43_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_INTR5_GPIO43_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_INTR5_GPIO43_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR5_GPIO43_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO43_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_INTR5_GPIO43_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_INTR5_GPIO43_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_INTR5_GPIO43_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR5_GPIO42_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO42_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_INTR5_GPIO42_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_INTR5_GPIO42_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_INTR5_GPIO42_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR5_GPIO42_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO42_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_INTR5_GPIO42_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_INTR5_GPIO42_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_INTR5_GPIO42_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR5_GPIO42_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO42_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_INTR5_GPIO42_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_INTR5_GPIO42_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_INTR5_GPIO42_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR5_GPIO42_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO42_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_INTR5_GPIO42_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_INTR5_GPIO42_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_INTR5_GPIO42_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR5_GPIO41_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO41_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_INTR5_GPIO41_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_INTR5_GPIO41_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_INTR5_GPIO41_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR5_GPIO41_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO41_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_INTR5_GPIO41_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_INTR5_GPIO41_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_INTR5_GPIO41_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR5_GPIO41_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO41_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_INTR5_GPIO41_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_INTR5_GPIO41_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_INTR5_GPIO41_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR5_GPIO41_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO41_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_INTR5_GPIO41_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_INTR5_GPIO41_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_INTR5_GPIO41_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_INTR5_GPIO40_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO40_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_INTR5_GPIO40_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_INTR5_GPIO40_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_INTR5_GPIO40_EDGE_HIGH_ACCESS = "WC";
pub const IO_BANK0_INTR5_GPIO40_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO40_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_INTR5_GPIO40_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_INTR5_GPIO40_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_INTR5_GPIO40_EDGE_LOW_ACCESS = "WC";
pub const IO_BANK0_INTR5_GPIO40_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO40_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_INTR5_GPIO40_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_INTR5_GPIO40_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_INTR5_GPIO40_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_INTR5_GPIO40_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_INTR5_GPIO40_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_INTR5_GPIO40_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_INTR5_GPIO40_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_INTR5_GPIO40_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTE0_OFFSET = _u(@as(c_int, 0x00000248));
pub const IO_BANK0_PROC0_INTE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC0_INTE0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_OFFSET = _u(@as(c_int, 0x0000024c));
pub const IO_BANK0_PROC0_INTE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC0_INTE1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_OFFSET = _u(@as(c_int, 0x00000250));
pub const IO_BANK0_PROC0_INTE2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC0_INTE2_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_OFFSET = _u(@as(c_int, 0x00000254));
pub const IO_BANK0_PROC0_INTE3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC0_INTE3_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTE3_GPIO31_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO31_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC0_INTE3_GPIO31_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTE3_GPIO31_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTE3_GPIO31_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO31_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO31_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC0_INTE3_GPIO31_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTE3_GPIO31_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTE3_GPIO31_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO31_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO31_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC0_INTE3_GPIO31_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTE3_GPIO31_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTE3_GPIO31_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO31_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO31_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC0_INTE3_GPIO31_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTE3_GPIO31_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTE3_GPIO31_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO30_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO30_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC0_INTE3_GPIO30_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTE3_GPIO30_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTE3_GPIO30_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO30_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO30_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC0_INTE3_GPIO30_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTE3_GPIO30_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTE3_GPIO30_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO30_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO30_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC0_INTE3_GPIO30_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTE3_GPIO30_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTE3_GPIO30_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO30_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO30_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC0_INTE3_GPIO30_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTE3_GPIO30_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTE3_GPIO30_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_OFFSET = _u(@as(c_int, 0x00000258));
pub const IO_BANK0_PROC0_INTE4_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC0_INTE4_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTE4_GPIO39_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO39_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC0_INTE4_GPIO39_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTE4_GPIO39_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTE4_GPIO39_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO39_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO39_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC0_INTE4_GPIO39_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTE4_GPIO39_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTE4_GPIO39_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO39_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO39_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC0_INTE4_GPIO39_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTE4_GPIO39_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTE4_GPIO39_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO39_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO39_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC0_INTE4_GPIO39_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTE4_GPIO39_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTE4_GPIO39_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO38_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO38_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC0_INTE4_GPIO38_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTE4_GPIO38_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTE4_GPIO38_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO38_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO38_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC0_INTE4_GPIO38_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTE4_GPIO38_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTE4_GPIO38_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO38_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO38_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC0_INTE4_GPIO38_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTE4_GPIO38_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTE4_GPIO38_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO38_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO38_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC0_INTE4_GPIO38_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTE4_GPIO38_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTE4_GPIO38_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO37_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO37_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC0_INTE4_GPIO37_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTE4_GPIO37_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTE4_GPIO37_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO37_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO37_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC0_INTE4_GPIO37_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTE4_GPIO37_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTE4_GPIO37_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO37_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO37_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC0_INTE4_GPIO37_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTE4_GPIO37_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTE4_GPIO37_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO37_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO37_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC0_INTE4_GPIO37_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTE4_GPIO37_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTE4_GPIO37_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO36_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO36_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC0_INTE4_GPIO36_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTE4_GPIO36_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTE4_GPIO36_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO36_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO36_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC0_INTE4_GPIO36_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTE4_GPIO36_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTE4_GPIO36_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO36_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO36_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC0_INTE4_GPIO36_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTE4_GPIO36_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTE4_GPIO36_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO36_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO36_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC0_INTE4_GPIO36_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTE4_GPIO36_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTE4_GPIO36_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO35_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO35_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC0_INTE4_GPIO35_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTE4_GPIO35_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTE4_GPIO35_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO35_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO35_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTE4_GPIO35_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTE4_GPIO35_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTE4_GPIO35_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO35_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO35_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTE4_GPIO35_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTE4_GPIO35_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTE4_GPIO35_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO35_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO35_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTE4_GPIO35_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTE4_GPIO35_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTE4_GPIO35_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO34_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO34_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTE4_GPIO34_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTE4_GPIO34_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTE4_GPIO34_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO34_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO34_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTE4_GPIO34_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTE4_GPIO34_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTE4_GPIO34_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO34_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO34_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTE4_GPIO34_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTE4_GPIO34_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTE4_GPIO34_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO34_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO34_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTE4_GPIO34_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTE4_GPIO34_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTE4_GPIO34_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO33_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO33_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTE4_GPIO33_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTE4_GPIO33_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTE4_GPIO33_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO33_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO33_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTE4_GPIO33_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTE4_GPIO33_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTE4_GPIO33_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO33_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO33_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTE4_GPIO33_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTE4_GPIO33_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTE4_GPIO33_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO33_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO33_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTE4_GPIO33_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTE4_GPIO33_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTE4_GPIO33_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO32_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO32_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTE4_GPIO32_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTE4_GPIO32_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTE4_GPIO32_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO32_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO32_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTE4_GPIO32_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTE4_GPIO32_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTE4_GPIO32_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO32_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO32_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTE4_GPIO32_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTE4_GPIO32_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTE4_GPIO32_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE4_GPIO32_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE4_GPIO32_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTE4_GPIO32_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTE4_GPIO32_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTE4_GPIO32_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_OFFSET = _u(@as(c_int, 0x0000025c));
pub const IO_BANK0_PROC0_INTE5_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC0_INTE5_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTE5_GPIO47_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO47_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC0_INTE5_GPIO47_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTE5_GPIO47_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTE5_GPIO47_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO47_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO47_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC0_INTE5_GPIO47_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTE5_GPIO47_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTE5_GPIO47_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO47_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO47_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC0_INTE5_GPIO47_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTE5_GPIO47_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTE5_GPIO47_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO47_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO47_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC0_INTE5_GPIO47_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTE5_GPIO47_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTE5_GPIO47_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO46_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO46_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC0_INTE5_GPIO46_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTE5_GPIO46_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTE5_GPIO46_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO46_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO46_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC0_INTE5_GPIO46_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTE5_GPIO46_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTE5_GPIO46_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO46_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO46_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC0_INTE5_GPIO46_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTE5_GPIO46_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTE5_GPIO46_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO46_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO46_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC0_INTE5_GPIO46_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTE5_GPIO46_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTE5_GPIO46_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO45_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO45_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC0_INTE5_GPIO45_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTE5_GPIO45_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTE5_GPIO45_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO45_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO45_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC0_INTE5_GPIO45_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTE5_GPIO45_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTE5_GPIO45_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO45_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO45_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC0_INTE5_GPIO45_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTE5_GPIO45_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTE5_GPIO45_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO45_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO45_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC0_INTE5_GPIO45_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTE5_GPIO45_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTE5_GPIO45_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO44_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO44_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC0_INTE5_GPIO44_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTE5_GPIO44_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTE5_GPIO44_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO44_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO44_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC0_INTE5_GPIO44_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTE5_GPIO44_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTE5_GPIO44_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO44_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO44_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC0_INTE5_GPIO44_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTE5_GPIO44_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTE5_GPIO44_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO44_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO44_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC0_INTE5_GPIO44_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTE5_GPIO44_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTE5_GPIO44_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO43_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO43_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC0_INTE5_GPIO43_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTE5_GPIO43_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTE5_GPIO43_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO43_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO43_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTE5_GPIO43_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTE5_GPIO43_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTE5_GPIO43_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO43_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO43_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTE5_GPIO43_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTE5_GPIO43_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTE5_GPIO43_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO43_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO43_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTE5_GPIO43_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTE5_GPIO43_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTE5_GPIO43_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO42_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO42_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTE5_GPIO42_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTE5_GPIO42_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTE5_GPIO42_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO42_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO42_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTE5_GPIO42_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTE5_GPIO42_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTE5_GPIO42_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO42_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO42_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTE5_GPIO42_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTE5_GPIO42_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTE5_GPIO42_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO42_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO42_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTE5_GPIO42_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTE5_GPIO42_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTE5_GPIO42_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO41_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO41_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTE5_GPIO41_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTE5_GPIO41_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTE5_GPIO41_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO41_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO41_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTE5_GPIO41_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTE5_GPIO41_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTE5_GPIO41_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO41_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO41_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTE5_GPIO41_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTE5_GPIO41_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTE5_GPIO41_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO41_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO41_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTE5_GPIO41_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTE5_GPIO41_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTE5_GPIO41_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO40_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO40_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTE5_GPIO40_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTE5_GPIO40_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTE5_GPIO40_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO40_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO40_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTE5_GPIO40_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTE5_GPIO40_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTE5_GPIO40_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO40_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO40_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTE5_GPIO40_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTE5_GPIO40_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTE5_GPIO40_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTE5_GPIO40_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTE5_GPIO40_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTE5_GPIO40_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTE5_GPIO40_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTE5_GPIO40_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_OFFSET = _u(@as(c_int, 0x00000260));
pub const IO_BANK0_PROC0_INTF0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC0_INTF0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_OFFSET = _u(@as(c_int, 0x00000264));
pub const IO_BANK0_PROC0_INTF1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC0_INTF1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_OFFSET = _u(@as(c_int, 0x00000268));
pub const IO_BANK0_PROC0_INTF2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC0_INTF2_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_OFFSET = _u(@as(c_int, 0x0000026c));
pub const IO_BANK0_PROC0_INTF3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC0_INTF3_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTF3_GPIO31_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO31_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC0_INTF3_GPIO31_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTF3_GPIO31_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTF3_GPIO31_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO31_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO31_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC0_INTF3_GPIO31_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTF3_GPIO31_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTF3_GPIO31_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO31_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO31_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC0_INTF3_GPIO31_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTF3_GPIO31_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTF3_GPIO31_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO31_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO31_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC0_INTF3_GPIO31_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTF3_GPIO31_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTF3_GPIO31_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO30_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO30_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC0_INTF3_GPIO30_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTF3_GPIO30_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTF3_GPIO30_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO30_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO30_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC0_INTF3_GPIO30_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTF3_GPIO30_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTF3_GPIO30_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO30_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO30_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC0_INTF3_GPIO30_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTF3_GPIO30_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTF3_GPIO30_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO30_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO30_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC0_INTF3_GPIO30_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTF3_GPIO30_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTF3_GPIO30_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_OFFSET = _u(@as(c_int, 0x00000270));
pub const IO_BANK0_PROC0_INTF4_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC0_INTF4_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTF4_GPIO39_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO39_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC0_INTF4_GPIO39_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTF4_GPIO39_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTF4_GPIO39_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO39_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO39_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC0_INTF4_GPIO39_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTF4_GPIO39_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTF4_GPIO39_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO39_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO39_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC0_INTF4_GPIO39_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTF4_GPIO39_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTF4_GPIO39_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO39_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO39_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC0_INTF4_GPIO39_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTF4_GPIO39_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTF4_GPIO39_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO38_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO38_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC0_INTF4_GPIO38_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTF4_GPIO38_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTF4_GPIO38_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO38_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO38_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC0_INTF4_GPIO38_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTF4_GPIO38_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTF4_GPIO38_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO38_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO38_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC0_INTF4_GPIO38_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTF4_GPIO38_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTF4_GPIO38_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO38_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO38_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC0_INTF4_GPIO38_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTF4_GPIO38_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTF4_GPIO38_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO37_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO37_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC0_INTF4_GPIO37_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTF4_GPIO37_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTF4_GPIO37_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO37_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO37_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC0_INTF4_GPIO37_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTF4_GPIO37_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTF4_GPIO37_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO37_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO37_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC0_INTF4_GPIO37_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTF4_GPIO37_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTF4_GPIO37_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO37_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO37_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC0_INTF4_GPIO37_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTF4_GPIO37_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTF4_GPIO37_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO36_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO36_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC0_INTF4_GPIO36_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTF4_GPIO36_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTF4_GPIO36_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO36_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO36_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC0_INTF4_GPIO36_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTF4_GPIO36_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTF4_GPIO36_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO36_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO36_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC0_INTF4_GPIO36_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTF4_GPIO36_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTF4_GPIO36_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO36_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO36_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC0_INTF4_GPIO36_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTF4_GPIO36_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTF4_GPIO36_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO35_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO35_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC0_INTF4_GPIO35_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTF4_GPIO35_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTF4_GPIO35_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO35_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO35_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTF4_GPIO35_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTF4_GPIO35_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTF4_GPIO35_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO35_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO35_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTF4_GPIO35_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTF4_GPIO35_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTF4_GPIO35_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO35_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO35_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTF4_GPIO35_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTF4_GPIO35_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTF4_GPIO35_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO34_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO34_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTF4_GPIO34_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTF4_GPIO34_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTF4_GPIO34_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO34_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO34_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTF4_GPIO34_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTF4_GPIO34_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTF4_GPIO34_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO34_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO34_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTF4_GPIO34_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTF4_GPIO34_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTF4_GPIO34_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO34_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO34_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTF4_GPIO34_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTF4_GPIO34_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTF4_GPIO34_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO33_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO33_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTF4_GPIO33_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTF4_GPIO33_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTF4_GPIO33_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO33_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO33_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTF4_GPIO33_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTF4_GPIO33_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTF4_GPIO33_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO33_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO33_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTF4_GPIO33_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTF4_GPIO33_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTF4_GPIO33_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO33_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO33_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTF4_GPIO33_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTF4_GPIO33_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTF4_GPIO33_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO32_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO32_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTF4_GPIO32_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTF4_GPIO32_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTF4_GPIO32_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO32_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO32_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTF4_GPIO32_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTF4_GPIO32_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTF4_GPIO32_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO32_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO32_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTF4_GPIO32_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTF4_GPIO32_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTF4_GPIO32_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF4_GPIO32_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF4_GPIO32_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTF4_GPIO32_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTF4_GPIO32_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTF4_GPIO32_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_OFFSET = _u(@as(c_int, 0x00000274));
pub const IO_BANK0_PROC0_INTF5_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC0_INTF5_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTF5_GPIO47_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO47_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC0_INTF5_GPIO47_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTF5_GPIO47_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTF5_GPIO47_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO47_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO47_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC0_INTF5_GPIO47_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTF5_GPIO47_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTF5_GPIO47_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO47_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO47_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC0_INTF5_GPIO47_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTF5_GPIO47_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTF5_GPIO47_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO47_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO47_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC0_INTF5_GPIO47_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTF5_GPIO47_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTF5_GPIO47_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO46_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO46_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC0_INTF5_GPIO46_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTF5_GPIO46_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTF5_GPIO46_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO46_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO46_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC0_INTF5_GPIO46_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTF5_GPIO46_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTF5_GPIO46_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO46_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO46_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC0_INTF5_GPIO46_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTF5_GPIO46_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTF5_GPIO46_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO46_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO46_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC0_INTF5_GPIO46_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTF5_GPIO46_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTF5_GPIO46_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO45_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO45_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC0_INTF5_GPIO45_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTF5_GPIO45_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTF5_GPIO45_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO45_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO45_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC0_INTF5_GPIO45_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTF5_GPIO45_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTF5_GPIO45_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO45_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO45_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC0_INTF5_GPIO45_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTF5_GPIO45_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTF5_GPIO45_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO45_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO45_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC0_INTF5_GPIO45_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTF5_GPIO45_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTF5_GPIO45_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO44_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO44_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC0_INTF5_GPIO44_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTF5_GPIO44_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTF5_GPIO44_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO44_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO44_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC0_INTF5_GPIO44_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTF5_GPIO44_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTF5_GPIO44_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO44_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO44_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC0_INTF5_GPIO44_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTF5_GPIO44_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTF5_GPIO44_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO44_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO44_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC0_INTF5_GPIO44_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTF5_GPIO44_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTF5_GPIO44_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO43_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO43_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC0_INTF5_GPIO43_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTF5_GPIO43_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTF5_GPIO43_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO43_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO43_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTF5_GPIO43_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTF5_GPIO43_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTF5_GPIO43_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO43_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO43_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTF5_GPIO43_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTF5_GPIO43_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTF5_GPIO43_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO43_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO43_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTF5_GPIO43_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTF5_GPIO43_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTF5_GPIO43_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO42_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO42_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTF5_GPIO42_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTF5_GPIO42_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTF5_GPIO42_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO42_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO42_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTF5_GPIO42_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTF5_GPIO42_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTF5_GPIO42_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO42_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO42_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTF5_GPIO42_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTF5_GPIO42_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTF5_GPIO42_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO42_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO42_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTF5_GPIO42_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTF5_GPIO42_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTF5_GPIO42_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO41_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO41_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTF5_GPIO41_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTF5_GPIO41_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTF5_GPIO41_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO41_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO41_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTF5_GPIO41_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTF5_GPIO41_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTF5_GPIO41_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO41_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO41_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTF5_GPIO41_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTF5_GPIO41_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTF5_GPIO41_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO41_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO41_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTF5_GPIO41_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTF5_GPIO41_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTF5_GPIO41_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO40_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO40_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTF5_GPIO40_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTF5_GPIO40_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTF5_GPIO40_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO40_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO40_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTF5_GPIO40_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTF5_GPIO40_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTF5_GPIO40_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO40_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO40_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTF5_GPIO40_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTF5_GPIO40_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTF5_GPIO40_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTF5_GPIO40_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTF5_GPIO40_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTF5_GPIO40_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTF5_GPIO40_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTF5_GPIO40_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC0_INTS0_OFFSET = _u(@as(c_int, 0x00000278));
pub const IO_BANK0_PROC0_INTS0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC0_INTS0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_OFFSET = _u(@as(c_int, 0x0000027c));
pub const IO_BANK0_PROC0_INTS1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC0_INTS1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_OFFSET = _u(@as(c_int, 0x00000280));
pub const IO_BANK0_PROC0_INTS2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC0_INTS2_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_OFFSET = _u(@as(c_int, 0x00000284));
pub const IO_BANK0_PROC0_INTS3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC0_INTS3_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTS3_GPIO31_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO31_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC0_INTS3_GPIO31_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTS3_GPIO31_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTS3_GPIO31_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO31_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO31_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC0_INTS3_GPIO31_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTS3_GPIO31_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTS3_GPIO31_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO31_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO31_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC0_INTS3_GPIO31_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTS3_GPIO31_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTS3_GPIO31_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO31_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO31_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC0_INTS3_GPIO31_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTS3_GPIO31_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTS3_GPIO31_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO30_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO30_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC0_INTS3_GPIO30_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTS3_GPIO30_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTS3_GPIO30_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO30_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO30_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC0_INTS3_GPIO30_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTS3_GPIO30_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTS3_GPIO30_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO30_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO30_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC0_INTS3_GPIO30_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTS3_GPIO30_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTS3_GPIO30_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO30_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO30_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC0_INTS3_GPIO30_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTS3_GPIO30_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTS3_GPIO30_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_OFFSET = _u(@as(c_int, 0x00000288));
pub const IO_BANK0_PROC0_INTS4_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC0_INTS4_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTS4_GPIO39_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO39_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC0_INTS4_GPIO39_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTS4_GPIO39_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTS4_GPIO39_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO39_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO39_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC0_INTS4_GPIO39_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTS4_GPIO39_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTS4_GPIO39_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO39_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO39_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC0_INTS4_GPIO39_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTS4_GPIO39_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTS4_GPIO39_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO39_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO39_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC0_INTS4_GPIO39_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTS4_GPIO39_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTS4_GPIO39_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO38_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO38_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC0_INTS4_GPIO38_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTS4_GPIO38_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTS4_GPIO38_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO38_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO38_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC0_INTS4_GPIO38_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTS4_GPIO38_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTS4_GPIO38_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO38_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO38_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC0_INTS4_GPIO38_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTS4_GPIO38_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTS4_GPIO38_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO38_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO38_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC0_INTS4_GPIO38_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTS4_GPIO38_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTS4_GPIO38_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO37_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO37_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC0_INTS4_GPIO37_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTS4_GPIO37_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTS4_GPIO37_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO37_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO37_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC0_INTS4_GPIO37_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTS4_GPIO37_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTS4_GPIO37_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO37_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO37_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC0_INTS4_GPIO37_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTS4_GPIO37_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTS4_GPIO37_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO37_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO37_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC0_INTS4_GPIO37_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTS4_GPIO37_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTS4_GPIO37_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO36_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO36_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC0_INTS4_GPIO36_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTS4_GPIO36_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTS4_GPIO36_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO36_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO36_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC0_INTS4_GPIO36_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTS4_GPIO36_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTS4_GPIO36_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO36_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO36_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC0_INTS4_GPIO36_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTS4_GPIO36_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTS4_GPIO36_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO36_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO36_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC0_INTS4_GPIO36_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTS4_GPIO36_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTS4_GPIO36_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO35_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO35_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC0_INTS4_GPIO35_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTS4_GPIO35_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTS4_GPIO35_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO35_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO35_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTS4_GPIO35_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTS4_GPIO35_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTS4_GPIO35_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO35_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO35_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTS4_GPIO35_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTS4_GPIO35_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTS4_GPIO35_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO35_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO35_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTS4_GPIO35_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTS4_GPIO35_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTS4_GPIO35_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO34_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO34_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTS4_GPIO34_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTS4_GPIO34_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTS4_GPIO34_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO34_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO34_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTS4_GPIO34_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTS4_GPIO34_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTS4_GPIO34_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO34_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO34_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTS4_GPIO34_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTS4_GPIO34_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTS4_GPIO34_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO34_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO34_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTS4_GPIO34_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTS4_GPIO34_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTS4_GPIO34_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO33_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO33_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTS4_GPIO33_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTS4_GPIO33_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTS4_GPIO33_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO33_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO33_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTS4_GPIO33_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTS4_GPIO33_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTS4_GPIO33_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO33_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO33_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTS4_GPIO33_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTS4_GPIO33_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTS4_GPIO33_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO33_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO33_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTS4_GPIO33_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTS4_GPIO33_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTS4_GPIO33_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO32_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO32_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTS4_GPIO32_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTS4_GPIO32_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTS4_GPIO32_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO32_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO32_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTS4_GPIO32_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTS4_GPIO32_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTS4_GPIO32_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO32_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO32_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTS4_GPIO32_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTS4_GPIO32_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTS4_GPIO32_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS4_GPIO32_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS4_GPIO32_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTS4_GPIO32_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTS4_GPIO32_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTS4_GPIO32_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_OFFSET = _u(@as(c_int, 0x0000028c));
pub const IO_BANK0_PROC0_INTS5_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC0_INTS5_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC0_INTS5_GPIO47_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO47_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC0_INTS5_GPIO47_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTS5_GPIO47_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC0_INTS5_GPIO47_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO47_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO47_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC0_INTS5_GPIO47_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTS5_GPIO47_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC0_INTS5_GPIO47_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO47_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO47_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC0_INTS5_GPIO47_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTS5_GPIO47_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC0_INTS5_GPIO47_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO47_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO47_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC0_INTS5_GPIO47_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTS5_GPIO47_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC0_INTS5_GPIO47_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO46_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO46_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC0_INTS5_GPIO46_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTS5_GPIO46_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC0_INTS5_GPIO46_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO46_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO46_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC0_INTS5_GPIO46_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTS5_GPIO46_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC0_INTS5_GPIO46_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO46_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO46_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC0_INTS5_GPIO46_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTS5_GPIO46_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC0_INTS5_GPIO46_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO46_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO46_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC0_INTS5_GPIO46_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTS5_GPIO46_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC0_INTS5_GPIO46_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO45_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO45_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC0_INTS5_GPIO45_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTS5_GPIO45_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC0_INTS5_GPIO45_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO45_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO45_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC0_INTS5_GPIO45_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTS5_GPIO45_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC0_INTS5_GPIO45_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO45_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO45_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC0_INTS5_GPIO45_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTS5_GPIO45_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC0_INTS5_GPIO45_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO45_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO45_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC0_INTS5_GPIO45_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTS5_GPIO45_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC0_INTS5_GPIO45_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO44_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO44_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC0_INTS5_GPIO44_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTS5_GPIO44_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC0_INTS5_GPIO44_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO44_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO44_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC0_INTS5_GPIO44_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTS5_GPIO44_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC0_INTS5_GPIO44_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO44_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO44_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC0_INTS5_GPIO44_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTS5_GPIO44_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC0_INTS5_GPIO44_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO44_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO44_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC0_INTS5_GPIO44_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTS5_GPIO44_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC0_INTS5_GPIO44_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO43_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO43_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC0_INTS5_GPIO43_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTS5_GPIO43_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC0_INTS5_GPIO43_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO43_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO43_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC0_INTS5_GPIO43_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTS5_GPIO43_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC0_INTS5_GPIO43_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO43_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO43_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC0_INTS5_GPIO43_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTS5_GPIO43_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC0_INTS5_GPIO43_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO43_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO43_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC0_INTS5_GPIO43_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTS5_GPIO43_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC0_INTS5_GPIO43_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO42_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO42_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC0_INTS5_GPIO42_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTS5_GPIO42_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC0_INTS5_GPIO42_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO42_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO42_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC0_INTS5_GPIO42_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTS5_GPIO42_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC0_INTS5_GPIO42_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO42_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO42_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC0_INTS5_GPIO42_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTS5_GPIO42_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC0_INTS5_GPIO42_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO42_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO42_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC0_INTS5_GPIO42_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTS5_GPIO42_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC0_INTS5_GPIO42_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO41_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO41_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC0_INTS5_GPIO41_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTS5_GPIO41_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC0_INTS5_GPIO41_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO41_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO41_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC0_INTS5_GPIO41_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTS5_GPIO41_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC0_INTS5_GPIO41_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO41_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO41_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC0_INTS5_GPIO41_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTS5_GPIO41_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC0_INTS5_GPIO41_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO41_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO41_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC0_INTS5_GPIO41_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTS5_GPIO41_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC0_INTS5_GPIO41_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO40_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO40_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC0_INTS5_GPIO40_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTS5_GPIO40_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC0_INTS5_GPIO40_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO40_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO40_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC0_INTS5_GPIO40_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTS5_GPIO40_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC0_INTS5_GPIO40_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO40_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO40_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC0_INTS5_GPIO40_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTS5_GPIO40_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC0_INTS5_GPIO40_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC0_INTS5_GPIO40_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC0_INTS5_GPIO40_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC0_INTS5_GPIO40_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTS5_GPIO40_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC0_INTS5_GPIO40_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTE0_OFFSET = _u(@as(c_int, 0x00000290));
pub const IO_BANK0_PROC1_INTE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC1_INTE0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_OFFSET = _u(@as(c_int, 0x00000294));
pub const IO_BANK0_PROC1_INTE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC1_INTE1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_OFFSET = _u(@as(c_int, 0x00000298));
pub const IO_BANK0_PROC1_INTE2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC1_INTE2_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_OFFSET = _u(@as(c_int, 0x0000029c));
pub const IO_BANK0_PROC1_INTE3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC1_INTE3_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTE3_GPIO31_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO31_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC1_INTE3_GPIO31_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTE3_GPIO31_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTE3_GPIO31_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO31_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO31_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC1_INTE3_GPIO31_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTE3_GPIO31_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTE3_GPIO31_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO31_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO31_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC1_INTE3_GPIO31_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTE3_GPIO31_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTE3_GPIO31_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO31_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO31_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC1_INTE3_GPIO31_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTE3_GPIO31_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTE3_GPIO31_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO30_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO30_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC1_INTE3_GPIO30_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTE3_GPIO30_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTE3_GPIO30_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO30_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO30_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC1_INTE3_GPIO30_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTE3_GPIO30_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTE3_GPIO30_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO30_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO30_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC1_INTE3_GPIO30_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTE3_GPIO30_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTE3_GPIO30_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO30_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO30_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC1_INTE3_GPIO30_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTE3_GPIO30_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTE3_GPIO30_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_OFFSET = _u(@as(c_int, 0x000002a0));
pub const IO_BANK0_PROC1_INTE4_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC1_INTE4_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTE4_GPIO39_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO39_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC1_INTE4_GPIO39_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTE4_GPIO39_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTE4_GPIO39_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO39_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO39_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC1_INTE4_GPIO39_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTE4_GPIO39_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTE4_GPIO39_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO39_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO39_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC1_INTE4_GPIO39_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTE4_GPIO39_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTE4_GPIO39_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO39_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO39_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC1_INTE4_GPIO39_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTE4_GPIO39_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTE4_GPIO39_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO38_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO38_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC1_INTE4_GPIO38_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTE4_GPIO38_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTE4_GPIO38_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO38_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO38_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC1_INTE4_GPIO38_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTE4_GPIO38_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTE4_GPIO38_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO38_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO38_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC1_INTE4_GPIO38_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTE4_GPIO38_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTE4_GPIO38_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO38_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO38_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC1_INTE4_GPIO38_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTE4_GPIO38_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTE4_GPIO38_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO37_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO37_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC1_INTE4_GPIO37_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTE4_GPIO37_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTE4_GPIO37_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO37_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO37_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC1_INTE4_GPIO37_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTE4_GPIO37_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTE4_GPIO37_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO37_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO37_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC1_INTE4_GPIO37_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTE4_GPIO37_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTE4_GPIO37_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO37_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO37_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC1_INTE4_GPIO37_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTE4_GPIO37_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTE4_GPIO37_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO36_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO36_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC1_INTE4_GPIO36_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTE4_GPIO36_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTE4_GPIO36_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO36_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO36_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC1_INTE4_GPIO36_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTE4_GPIO36_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTE4_GPIO36_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO36_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO36_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC1_INTE4_GPIO36_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTE4_GPIO36_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTE4_GPIO36_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO36_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO36_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC1_INTE4_GPIO36_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTE4_GPIO36_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTE4_GPIO36_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO35_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO35_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC1_INTE4_GPIO35_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTE4_GPIO35_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTE4_GPIO35_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO35_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO35_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTE4_GPIO35_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTE4_GPIO35_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTE4_GPIO35_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO35_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO35_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTE4_GPIO35_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTE4_GPIO35_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTE4_GPIO35_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO35_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO35_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTE4_GPIO35_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTE4_GPIO35_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTE4_GPIO35_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO34_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO34_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTE4_GPIO34_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTE4_GPIO34_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTE4_GPIO34_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO34_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO34_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTE4_GPIO34_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTE4_GPIO34_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTE4_GPIO34_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO34_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO34_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTE4_GPIO34_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTE4_GPIO34_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTE4_GPIO34_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO34_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO34_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTE4_GPIO34_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTE4_GPIO34_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTE4_GPIO34_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO33_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO33_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTE4_GPIO33_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTE4_GPIO33_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTE4_GPIO33_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO33_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO33_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTE4_GPIO33_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTE4_GPIO33_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTE4_GPIO33_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO33_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO33_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTE4_GPIO33_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTE4_GPIO33_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTE4_GPIO33_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO33_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO33_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTE4_GPIO33_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTE4_GPIO33_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTE4_GPIO33_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO32_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO32_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTE4_GPIO32_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTE4_GPIO32_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTE4_GPIO32_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO32_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO32_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTE4_GPIO32_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTE4_GPIO32_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTE4_GPIO32_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO32_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO32_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTE4_GPIO32_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTE4_GPIO32_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTE4_GPIO32_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE4_GPIO32_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE4_GPIO32_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTE4_GPIO32_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTE4_GPIO32_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTE4_GPIO32_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_OFFSET = _u(@as(c_int, 0x000002a4));
pub const IO_BANK0_PROC1_INTE5_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC1_INTE5_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTE5_GPIO47_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO47_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC1_INTE5_GPIO47_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTE5_GPIO47_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTE5_GPIO47_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO47_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO47_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC1_INTE5_GPIO47_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTE5_GPIO47_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTE5_GPIO47_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO47_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO47_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC1_INTE5_GPIO47_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTE5_GPIO47_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTE5_GPIO47_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO47_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO47_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC1_INTE5_GPIO47_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTE5_GPIO47_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTE5_GPIO47_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO46_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO46_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC1_INTE5_GPIO46_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTE5_GPIO46_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTE5_GPIO46_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO46_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO46_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC1_INTE5_GPIO46_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTE5_GPIO46_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTE5_GPIO46_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO46_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO46_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC1_INTE5_GPIO46_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTE5_GPIO46_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTE5_GPIO46_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO46_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO46_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC1_INTE5_GPIO46_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTE5_GPIO46_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTE5_GPIO46_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO45_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO45_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC1_INTE5_GPIO45_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTE5_GPIO45_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTE5_GPIO45_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO45_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO45_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC1_INTE5_GPIO45_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTE5_GPIO45_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTE5_GPIO45_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO45_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO45_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC1_INTE5_GPIO45_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTE5_GPIO45_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTE5_GPIO45_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO45_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO45_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC1_INTE5_GPIO45_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTE5_GPIO45_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTE5_GPIO45_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO44_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO44_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC1_INTE5_GPIO44_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTE5_GPIO44_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTE5_GPIO44_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO44_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO44_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC1_INTE5_GPIO44_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTE5_GPIO44_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTE5_GPIO44_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO44_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO44_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC1_INTE5_GPIO44_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTE5_GPIO44_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTE5_GPIO44_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO44_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO44_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC1_INTE5_GPIO44_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTE5_GPIO44_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTE5_GPIO44_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO43_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO43_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC1_INTE5_GPIO43_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTE5_GPIO43_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTE5_GPIO43_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO43_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO43_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTE5_GPIO43_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTE5_GPIO43_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTE5_GPIO43_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO43_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO43_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTE5_GPIO43_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTE5_GPIO43_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTE5_GPIO43_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO43_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO43_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTE5_GPIO43_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTE5_GPIO43_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTE5_GPIO43_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO42_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO42_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTE5_GPIO42_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTE5_GPIO42_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTE5_GPIO42_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO42_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO42_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTE5_GPIO42_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTE5_GPIO42_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTE5_GPIO42_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO42_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO42_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTE5_GPIO42_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTE5_GPIO42_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTE5_GPIO42_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO42_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO42_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTE5_GPIO42_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTE5_GPIO42_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTE5_GPIO42_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO41_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO41_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTE5_GPIO41_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTE5_GPIO41_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTE5_GPIO41_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO41_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO41_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTE5_GPIO41_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTE5_GPIO41_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTE5_GPIO41_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO41_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO41_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTE5_GPIO41_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTE5_GPIO41_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTE5_GPIO41_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO41_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO41_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTE5_GPIO41_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTE5_GPIO41_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTE5_GPIO41_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO40_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO40_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTE5_GPIO40_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTE5_GPIO40_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTE5_GPIO40_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO40_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO40_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTE5_GPIO40_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTE5_GPIO40_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTE5_GPIO40_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO40_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO40_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTE5_GPIO40_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTE5_GPIO40_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTE5_GPIO40_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTE5_GPIO40_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTE5_GPIO40_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTE5_GPIO40_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTE5_GPIO40_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTE5_GPIO40_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_OFFSET = _u(@as(c_int, 0x000002a8));
pub const IO_BANK0_PROC1_INTF0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC1_INTF0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_OFFSET = _u(@as(c_int, 0x000002ac));
pub const IO_BANK0_PROC1_INTF1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC1_INTF1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_OFFSET = _u(@as(c_int, 0x000002b0));
pub const IO_BANK0_PROC1_INTF2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC1_INTF2_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_OFFSET = _u(@as(c_int, 0x000002b4));
pub const IO_BANK0_PROC1_INTF3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC1_INTF3_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTF3_GPIO31_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO31_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC1_INTF3_GPIO31_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTF3_GPIO31_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTF3_GPIO31_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO31_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO31_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC1_INTF3_GPIO31_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTF3_GPIO31_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTF3_GPIO31_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO31_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO31_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC1_INTF3_GPIO31_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTF3_GPIO31_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTF3_GPIO31_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO31_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO31_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC1_INTF3_GPIO31_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTF3_GPIO31_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTF3_GPIO31_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO30_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO30_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC1_INTF3_GPIO30_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTF3_GPIO30_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTF3_GPIO30_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO30_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO30_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC1_INTF3_GPIO30_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTF3_GPIO30_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTF3_GPIO30_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO30_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO30_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC1_INTF3_GPIO30_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTF3_GPIO30_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTF3_GPIO30_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO30_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO30_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC1_INTF3_GPIO30_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTF3_GPIO30_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTF3_GPIO30_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_OFFSET = _u(@as(c_int, 0x000002b8));
pub const IO_BANK0_PROC1_INTF4_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC1_INTF4_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTF4_GPIO39_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO39_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC1_INTF4_GPIO39_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTF4_GPIO39_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTF4_GPIO39_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO39_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO39_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC1_INTF4_GPIO39_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTF4_GPIO39_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTF4_GPIO39_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO39_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO39_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC1_INTF4_GPIO39_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTF4_GPIO39_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTF4_GPIO39_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO39_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO39_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC1_INTF4_GPIO39_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTF4_GPIO39_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTF4_GPIO39_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO38_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO38_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC1_INTF4_GPIO38_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTF4_GPIO38_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTF4_GPIO38_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO38_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO38_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC1_INTF4_GPIO38_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTF4_GPIO38_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTF4_GPIO38_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO38_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO38_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC1_INTF4_GPIO38_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTF4_GPIO38_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTF4_GPIO38_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO38_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO38_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC1_INTF4_GPIO38_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTF4_GPIO38_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTF4_GPIO38_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO37_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO37_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC1_INTF4_GPIO37_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTF4_GPIO37_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTF4_GPIO37_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO37_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO37_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC1_INTF4_GPIO37_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTF4_GPIO37_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTF4_GPIO37_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO37_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO37_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC1_INTF4_GPIO37_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTF4_GPIO37_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTF4_GPIO37_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO37_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO37_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC1_INTF4_GPIO37_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTF4_GPIO37_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTF4_GPIO37_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO36_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO36_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC1_INTF4_GPIO36_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTF4_GPIO36_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTF4_GPIO36_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO36_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO36_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC1_INTF4_GPIO36_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTF4_GPIO36_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTF4_GPIO36_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO36_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO36_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC1_INTF4_GPIO36_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTF4_GPIO36_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTF4_GPIO36_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO36_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO36_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC1_INTF4_GPIO36_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTF4_GPIO36_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTF4_GPIO36_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO35_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO35_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC1_INTF4_GPIO35_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTF4_GPIO35_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTF4_GPIO35_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO35_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO35_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTF4_GPIO35_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTF4_GPIO35_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTF4_GPIO35_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO35_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO35_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTF4_GPIO35_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTF4_GPIO35_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTF4_GPIO35_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO35_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO35_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTF4_GPIO35_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTF4_GPIO35_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTF4_GPIO35_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO34_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO34_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTF4_GPIO34_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTF4_GPIO34_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTF4_GPIO34_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO34_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO34_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTF4_GPIO34_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTF4_GPIO34_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTF4_GPIO34_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO34_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO34_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTF4_GPIO34_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTF4_GPIO34_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTF4_GPIO34_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO34_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO34_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTF4_GPIO34_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTF4_GPIO34_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTF4_GPIO34_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO33_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO33_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTF4_GPIO33_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTF4_GPIO33_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTF4_GPIO33_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO33_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO33_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTF4_GPIO33_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTF4_GPIO33_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTF4_GPIO33_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO33_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO33_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTF4_GPIO33_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTF4_GPIO33_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTF4_GPIO33_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO33_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO33_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTF4_GPIO33_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTF4_GPIO33_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTF4_GPIO33_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO32_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO32_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTF4_GPIO32_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTF4_GPIO32_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTF4_GPIO32_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO32_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO32_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTF4_GPIO32_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTF4_GPIO32_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTF4_GPIO32_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO32_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO32_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTF4_GPIO32_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTF4_GPIO32_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTF4_GPIO32_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF4_GPIO32_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF4_GPIO32_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTF4_GPIO32_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTF4_GPIO32_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTF4_GPIO32_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_OFFSET = _u(@as(c_int, 0x000002bc));
pub const IO_BANK0_PROC1_INTF5_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC1_INTF5_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTF5_GPIO47_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO47_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC1_INTF5_GPIO47_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTF5_GPIO47_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTF5_GPIO47_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO47_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO47_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC1_INTF5_GPIO47_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTF5_GPIO47_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTF5_GPIO47_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO47_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO47_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC1_INTF5_GPIO47_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTF5_GPIO47_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTF5_GPIO47_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO47_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO47_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC1_INTF5_GPIO47_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTF5_GPIO47_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTF5_GPIO47_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO46_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO46_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC1_INTF5_GPIO46_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTF5_GPIO46_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTF5_GPIO46_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO46_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO46_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC1_INTF5_GPIO46_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTF5_GPIO46_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTF5_GPIO46_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO46_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO46_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC1_INTF5_GPIO46_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTF5_GPIO46_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTF5_GPIO46_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO46_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO46_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC1_INTF5_GPIO46_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTF5_GPIO46_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTF5_GPIO46_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO45_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO45_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC1_INTF5_GPIO45_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTF5_GPIO45_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTF5_GPIO45_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO45_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO45_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC1_INTF5_GPIO45_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTF5_GPIO45_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTF5_GPIO45_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO45_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO45_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC1_INTF5_GPIO45_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTF5_GPIO45_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTF5_GPIO45_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO45_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO45_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC1_INTF5_GPIO45_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTF5_GPIO45_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTF5_GPIO45_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO44_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO44_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC1_INTF5_GPIO44_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTF5_GPIO44_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTF5_GPIO44_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO44_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO44_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC1_INTF5_GPIO44_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTF5_GPIO44_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTF5_GPIO44_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO44_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO44_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC1_INTF5_GPIO44_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTF5_GPIO44_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTF5_GPIO44_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO44_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO44_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC1_INTF5_GPIO44_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTF5_GPIO44_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTF5_GPIO44_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO43_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO43_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC1_INTF5_GPIO43_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTF5_GPIO43_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTF5_GPIO43_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO43_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO43_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTF5_GPIO43_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTF5_GPIO43_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTF5_GPIO43_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO43_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO43_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTF5_GPIO43_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTF5_GPIO43_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTF5_GPIO43_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO43_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO43_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTF5_GPIO43_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTF5_GPIO43_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTF5_GPIO43_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO42_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO42_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTF5_GPIO42_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTF5_GPIO42_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTF5_GPIO42_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO42_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO42_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTF5_GPIO42_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTF5_GPIO42_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTF5_GPIO42_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO42_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO42_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTF5_GPIO42_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTF5_GPIO42_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTF5_GPIO42_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO42_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO42_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTF5_GPIO42_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTF5_GPIO42_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTF5_GPIO42_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO41_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO41_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTF5_GPIO41_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTF5_GPIO41_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTF5_GPIO41_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO41_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO41_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTF5_GPIO41_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTF5_GPIO41_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTF5_GPIO41_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO41_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO41_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTF5_GPIO41_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTF5_GPIO41_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTF5_GPIO41_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO41_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO41_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTF5_GPIO41_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTF5_GPIO41_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTF5_GPIO41_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO40_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO40_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTF5_GPIO40_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTF5_GPIO40_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTF5_GPIO40_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO40_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO40_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTF5_GPIO40_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTF5_GPIO40_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTF5_GPIO40_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO40_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO40_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTF5_GPIO40_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTF5_GPIO40_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTF5_GPIO40_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTF5_GPIO40_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTF5_GPIO40_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTF5_GPIO40_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTF5_GPIO40_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTF5_GPIO40_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_PROC1_INTS0_OFFSET = _u(@as(c_int, 0x000002c0));
pub const IO_BANK0_PROC1_INTS0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC1_INTS0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_OFFSET = _u(@as(c_int, 0x000002c4));
pub const IO_BANK0_PROC1_INTS1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC1_INTS1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_OFFSET = _u(@as(c_int, 0x000002c8));
pub const IO_BANK0_PROC1_INTS2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC1_INTS2_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_OFFSET = _u(@as(c_int, 0x000002cc));
pub const IO_BANK0_PROC1_INTS3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC1_INTS3_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTS3_GPIO31_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO31_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC1_INTS3_GPIO31_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTS3_GPIO31_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTS3_GPIO31_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO31_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO31_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC1_INTS3_GPIO31_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTS3_GPIO31_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTS3_GPIO31_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO31_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO31_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC1_INTS3_GPIO31_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTS3_GPIO31_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTS3_GPIO31_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO31_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO31_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC1_INTS3_GPIO31_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTS3_GPIO31_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTS3_GPIO31_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO30_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO30_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC1_INTS3_GPIO30_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTS3_GPIO30_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTS3_GPIO30_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO30_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO30_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC1_INTS3_GPIO30_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTS3_GPIO30_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTS3_GPIO30_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO30_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO30_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC1_INTS3_GPIO30_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTS3_GPIO30_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTS3_GPIO30_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO30_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO30_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC1_INTS3_GPIO30_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTS3_GPIO30_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTS3_GPIO30_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_OFFSET = _u(@as(c_int, 0x000002d0));
pub const IO_BANK0_PROC1_INTS4_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC1_INTS4_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTS4_GPIO39_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO39_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC1_INTS4_GPIO39_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTS4_GPIO39_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTS4_GPIO39_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO39_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO39_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC1_INTS4_GPIO39_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTS4_GPIO39_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTS4_GPIO39_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO39_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO39_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC1_INTS4_GPIO39_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTS4_GPIO39_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTS4_GPIO39_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO39_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO39_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC1_INTS4_GPIO39_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTS4_GPIO39_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTS4_GPIO39_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO38_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO38_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC1_INTS4_GPIO38_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTS4_GPIO38_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTS4_GPIO38_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO38_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO38_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC1_INTS4_GPIO38_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTS4_GPIO38_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTS4_GPIO38_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO38_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO38_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC1_INTS4_GPIO38_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTS4_GPIO38_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTS4_GPIO38_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO38_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO38_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC1_INTS4_GPIO38_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTS4_GPIO38_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTS4_GPIO38_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO37_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO37_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC1_INTS4_GPIO37_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTS4_GPIO37_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTS4_GPIO37_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO37_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO37_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC1_INTS4_GPIO37_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTS4_GPIO37_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTS4_GPIO37_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO37_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO37_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC1_INTS4_GPIO37_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTS4_GPIO37_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTS4_GPIO37_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO37_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO37_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC1_INTS4_GPIO37_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTS4_GPIO37_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTS4_GPIO37_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO36_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO36_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC1_INTS4_GPIO36_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTS4_GPIO36_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTS4_GPIO36_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO36_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO36_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC1_INTS4_GPIO36_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTS4_GPIO36_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTS4_GPIO36_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO36_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO36_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC1_INTS4_GPIO36_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTS4_GPIO36_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTS4_GPIO36_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO36_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO36_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC1_INTS4_GPIO36_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTS4_GPIO36_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTS4_GPIO36_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO35_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO35_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC1_INTS4_GPIO35_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTS4_GPIO35_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTS4_GPIO35_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO35_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO35_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTS4_GPIO35_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTS4_GPIO35_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTS4_GPIO35_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO35_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO35_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTS4_GPIO35_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTS4_GPIO35_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTS4_GPIO35_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO35_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO35_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTS4_GPIO35_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTS4_GPIO35_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTS4_GPIO35_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO34_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO34_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTS4_GPIO34_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTS4_GPIO34_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTS4_GPIO34_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO34_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO34_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTS4_GPIO34_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTS4_GPIO34_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTS4_GPIO34_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO34_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO34_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTS4_GPIO34_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTS4_GPIO34_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTS4_GPIO34_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO34_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO34_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTS4_GPIO34_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTS4_GPIO34_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTS4_GPIO34_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO33_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO33_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTS4_GPIO33_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTS4_GPIO33_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTS4_GPIO33_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO33_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO33_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTS4_GPIO33_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTS4_GPIO33_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTS4_GPIO33_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO33_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO33_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTS4_GPIO33_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTS4_GPIO33_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTS4_GPIO33_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO33_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO33_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTS4_GPIO33_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTS4_GPIO33_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTS4_GPIO33_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO32_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO32_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTS4_GPIO32_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTS4_GPIO32_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTS4_GPIO32_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO32_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO32_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTS4_GPIO32_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTS4_GPIO32_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTS4_GPIO32_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO32_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO32_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTS4_GPIO32_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTS4_GPIO32_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTS4_GPIO32_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS4_GPIO32_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS4_GPIO32_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTS4_GPIO32_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTS4_GPIO32_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTS4_GPIO32_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_OFFSET = _u(@as(c_int, 0x000002d4));
pub const IO_BANK0_PROC1_INTS5_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_PROC1_INTS5_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_PROC1_INTS5_GPIO47_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO47_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_PROC1_INTS5_GPIO47_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTS5_GPIO47_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_PROC1_INTS5_GPIO47_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO47_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO47_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_PROC1_INTS5_GPIO47_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTS5_GPIO47_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_PROC1_INTS5_GPIO47_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO47_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO47_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_PROC1_INTS5_GPIO47_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTS5_GPIO47_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_PROC1_INTS5_GPIO47_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO47_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO47_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_PROC1_INTS5_GPIO47_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTS5_GPIO47_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_PROC1_INTS5_GPIO47_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO46_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO46_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_PROC1_INTS5_GPIO46_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTS5_GPIO46_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_PROC1_INTS5_GPIO46_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO46_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO46_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_PROC1_INTS5_GPIO46_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTS5_GPIO46_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_PROC1_INTS5_GPIO46_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO46_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO46_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_PROC1_INTS5_GPIO46_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTS5_GPIO46_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_PROC1_INTS5_GPIO46_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO46_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO46_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_PROC1_INTS5_GPIO46_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTS5_GPIO46_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_PROC1_INTS5_GPIO46_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO45_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO45_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_PROC1_INTS5_GPIO45_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTS5_GPIO45_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_PROC1_INTS5_GPIO45_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO45_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO45_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_PROC1_INTS5_GPIO45_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTS5_GPIO45_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_PROC1_INTS5_GPIO45_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO45_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO45_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_PROC1_INTS5_GPIO45_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTS5_GPIO45_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_PROC1_INTS5_GPIO45_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO45_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO45_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_PROC1_INTS5_GPIO45_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTS5_GPIO45_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_PROC1_INTS5_GPIO45_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO44_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO44_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_PROC1_INTS5_GPIO44_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTS5_GPIO44_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_PROC1_INTS5_GPIO44_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO44_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO44_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_PROC1_INTS5_GPIO44_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTS5_GPIO44_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_PROC1_INTS5_GPIO44_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO44_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO44_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_PROC1_INTS5_GPIO44_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTS5_GPIO44_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_PROC1_INTS5_GPIO44_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO44_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO44_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_PROC1_INTS5_GPIO44_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTS5_GPIO44_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_PROC1_INTS5_GPIO44_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO43_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO43_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_PROC1_INTS5_GPIO43_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTS5_GPIO43_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_PROC1_INTS5_GPIO43_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO43_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO43_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_PROC1_INTS5_GPIO43_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTS5_GPIO43_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_PROC1_INTS5_GPIO43_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO43_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO43_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_PROC1_INTS5_GPIO43_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTS5_GPIO43_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_PROC1_INTS5_GPIO43_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO43_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO43_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_PROC1_INTS5_GPIO43_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTS5_GPIO43_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_PROC1_INTS5_GPIO43_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO42_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO42_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_PROC1_INTS5_GPIO42_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTS5_GPIO42_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_PROC1_INTS5_GPIO42_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO42_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO42_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_PROC1_INTS5_GPIO42_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTS5_GPIO42_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_PROC1_INTS5_GPIO42_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO42_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO42_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_PROC1_INTS5_GPIO42_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTS5_GPIO42_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_PROC1_INTS5_GPIO42_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO42_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO42_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_PROC1_INTS5_GPIO42_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTS5_GPIO42_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_PROC1_INTS5_GPIO42_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO41_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO41_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_PROC1_INTS5_GPIO41_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTS5_GPIO41_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_PROC1_INTS5_GPIO41_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO41_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO41_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_PROC1_INTS5_GPIO41_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTS5_GPIO41_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_PROC1_INTS5_GPIO41_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO41_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO41_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_PROC1_INTS5_GPIO41_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTS5_GPIO41_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_PROC1_INTS5_GPIO41_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO41_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO41_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_PROC1_INTS5_GPIO41_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTS5_GPIO41_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_PROC1_INTS5_GPIO41_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO40_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO40_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_PROC1_INTS5_GPIO40_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTS5_GPIO40_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_PROC1_INTS5_GPIO40_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO40_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO40_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_PROC1_INTS5_GPIO40_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTS5_GPIO40_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_PROC1_INTS5_GPIO40_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO40_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO40_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_PROC1_INTS5_GPIO40_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTS5_GPIO40_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_PROC1_INTS5_GPIO40_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_PROC1_INTS5_GPIO40_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_PROC1_INTS5_GPIO40_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_PROC1_INTS5_GPIO40_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTS5_GPIO40_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_PROC1_INTS5_GPIO40_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTE0_OFFSET = _u(@as(c_int, 0x000002d8));
pub const IO_BANK0_DORMANT_WAKE_INTE0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_OFFSET = _u(@as(c_int, 0x000002dc));
pub const IO_BANK0_DORMANT_WAKE_INTE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_OFFSET = _u(@as(c_int, 0x000002e0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE2_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_OFFSET = _u(@as(c_int, 0x000002e4));
pub const IO_BANK0_DORMANT_WAKE_INTE3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE3_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO31_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO31_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO31_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO31_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO31_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO31_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO31_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO31_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO31_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO31_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO31_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO31_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO31_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO31_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO31_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO31_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO31_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO31_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO31_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO31_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO30_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO30_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO30_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO30_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO30_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO30_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO30_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO30_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO30_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO30_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO30_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO30_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO30_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO30_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO30_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO30_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO30_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO30_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO30_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO30_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_OFFSET = _u(@as(c_int, 0x000002e8));
pub const IO_BANK0_DORMANT_WAKE_INTE4_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE4_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO39_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO39_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO39_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO39_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO39_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO39_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO39_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO39_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO39_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO39_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO39_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO39_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO39_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO39_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO39_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO39_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO39_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO39_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO39_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO39_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO38_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO38_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO38_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO38_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO38_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO38_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO38_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO38_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO38_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO38_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO38_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO38_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO38_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO38_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO38_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO38_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO38_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO38_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO38_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO38_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO37_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO37_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO37_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO37_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO37_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO37_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO37_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO37_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO37_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO37_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO37_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO37_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO37_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO37_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO37_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO37_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO37_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO37_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO37_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO37_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO36_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO36_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO36_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO36_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO36_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO36_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO36_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO36_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO36_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO36_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO36_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO36_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO36_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO36_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO36_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO36_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO36_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO36_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO36_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO36_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO35_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO35_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO35_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO35_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO35_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO35_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO35_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO35_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO35_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO35_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO35_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO35_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO35_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO35_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO35_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO35_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO35_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO35_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO35_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO35_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO34_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO34_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO34_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO34_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO34_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO34_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO34_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO34_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO34_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO34_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO34_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO34_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO34_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO34_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO34_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO34_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO34_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO34_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO34_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO34_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO33_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO33_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO33_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO33_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO33_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO33_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO33_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO33_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO33_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO33_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO33_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO33_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO33_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO33_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO33_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO33_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO33_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO33_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO33_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO33_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO32_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO32_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO32_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO32_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO32_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO32_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO32_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO32_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO32_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO32_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO32_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO32_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO32_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO32_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO32_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO32_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO32_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO32_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO32_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTE4_GPIO32_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_OFFSET = _u(@as(c_int, 0x000002ec));
pub const IO_BANK0_DORMANT_WAKE_INTE5_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE5_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO47_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO47_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO47_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO47_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO47_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO47_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO47_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO47_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO47_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO47_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO47_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO47_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO47_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO47_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO47_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO47_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO47_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO47_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO47_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO47_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO46_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO46_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO46_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO46_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO46_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO46_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO46_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO46_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO46_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO46_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO46_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO46_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO46_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO46_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO46_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO46_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO46_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO46_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO46_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO46_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO45_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO45_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO45_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO45_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO45_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO45_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO45_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO45_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO45_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO45_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO45_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO45_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO45_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO45_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO45_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO45_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO45_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO45_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO45_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO45_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO44_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO44_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO44_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO44_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO44_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO44_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO44_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO44_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO44_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO44_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO44_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO44_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO44_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO44_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO44_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO44_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO44_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO44_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO44_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO44_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO43_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO43_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO43_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO43_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO43_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO43_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO43_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO43_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO43_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO43_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO43_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO43_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO43_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO43_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO43_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO43_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO43_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO43_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO43_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO43_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO42_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO42_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO42_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO42_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO42_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO42_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO42_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO42_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO42_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO42_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO42_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO42_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO42_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO42_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO42_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO42_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO42_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO42_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO42_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO42_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO41_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO41_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO41_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO41_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO41_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO41_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO41_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO41_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO41_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO41_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO41_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO41_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO41_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO41_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO41_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO41_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO41_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO41_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO41_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO41_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO40_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO40_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO40_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO40_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO40_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO40_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO40_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO40_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO40_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO40_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO40_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO40_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO40_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO40_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO40_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO40_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO40_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO40_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO40_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTE5_GPIO40_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_OFFSET = _u(@as(c_int, 0x000002f0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_OFFSET = _u(@as(c_int, 0x000002f4));
pub const IO_BANK0_DORMANT_WAKE_INTF1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_OFFSET = _u(@as(c_int, 0x000002f8));
pub const IO_BANK0_DORMANT_WAKE_INTF2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF2_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_OFFSET = _u(@as(c_int, 0x000002fc));
pub const IO_BANK0_DORMANT_WAKE_INTF3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF3_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO31_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO31_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO31_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO31_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO31_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO31_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO31_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO31_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO31_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO31_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO31_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO31_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO31_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO31_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO31_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO31_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO31_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO31_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO31_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO31_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO30_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO30_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO30_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO30_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO30_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO30_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO30_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO30_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO30_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO30_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO30_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO30_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO30_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO30_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO30_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO30_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO30_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO30_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO30_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO30_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_OFFSET = _u(@as(c_int, 0x00000300));
pub const IO_BANK0_DORMANT_WAKE_INTF4_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF4_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO39_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO39_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO39_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO39_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO39_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO39_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO39_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO39_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO39_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO39_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO39_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO39_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO39_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO39_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO39_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO39_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO39_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO39_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO39_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO39_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO38_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO38_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO38_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO38_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO38_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO38_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO38_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO38_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO38_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO38_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO38_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO38_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO38_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO38_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO38_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO38_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO38_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO38_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO38_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO38_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO37_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO37_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO37_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO37_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO37_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO37_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO37_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO37_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO37_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO37_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO37_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO37_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO37_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO37_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO37_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO37_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO37_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO37_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO37_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO37_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO36_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO36_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO36_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO36_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO36_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO36_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO36_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO36_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO36_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO36_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO36_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO36_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO36_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO36_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO36_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO36_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO36_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO36_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO36_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO36_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO35_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO35_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO35_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO35_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO35_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO35_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO35_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO35_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO35_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO35_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO35_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO35_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO35_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO35_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO35_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO35_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO35_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO35_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO35_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO35_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO34_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO34_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO34_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO34_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO34_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO34_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO34_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO34_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO34_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO34_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO34_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO34_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO34_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO34_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO34_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO34_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO34_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO34_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO34_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO34_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO33_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO33_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO33_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO33_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO33_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO33_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO33_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO33_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO33_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO33_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO33_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO33_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO33_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO33_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO33_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO33_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO33_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO33_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO33_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO33_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO32_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO32_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO32_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO32_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO32_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO32_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO32_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO32_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO32_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO32_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO32_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO32_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO32_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO32_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO32_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO32_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO32_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO32_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO32_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTF4_GPIO32_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_OFFSET = _u(@as(c_int, 0x00000304));
pub const IO_BANK0_DORMANT_WAKE_INTF5_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF5_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO47_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO47_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO47_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO47_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO47_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO47_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO47_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO47_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO47_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO47_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO47_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO47_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO47_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO47_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO47_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO47_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO47_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO47_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO47_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO47_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO46_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO46_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO46_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO46_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO46_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO46_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO46_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO46_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO46_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO46_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO46_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO46_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO46_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO46_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO46_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO46_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO46_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO46_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO46_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO46_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO45_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO45_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO45_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO45_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO45_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO45_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO45_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO45_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO45_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO45_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO45_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO45_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO45_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO45_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO45_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO45_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO45_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO45_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO45_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO45_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO44_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO44_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO44_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO44_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO44_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO44_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO44_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO44_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO44_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO44_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO44_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO44_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO44_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO44_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO44_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO44_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO44_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO44_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO44_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO44_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO43_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO43_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO43_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO43_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO43_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO43_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO43_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO43_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO43_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO43_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO43_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO43_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO43_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO43_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO43_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO43_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO43_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO43_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO43_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO43_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO42_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO42_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO42_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO42_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO42_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO42_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO42_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO42_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO42_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO42_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO42_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO42_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO42_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO42_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO42_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO42_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO42_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO42_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO42_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO42_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO41_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO41_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO41_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO41_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO41_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO41_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO41_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO41_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO41_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO41_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO41_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO41_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO41_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO41_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO41_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO41_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO41_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO41_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO41_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO41_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO40_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO40_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO40_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO40_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO40_EDGE_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO40_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO40_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO40_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO40_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO40_EDGE_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO40_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO40_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO40_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO40_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO40_LEVEL_HIGH_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO40_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO40_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO40_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO40_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTF5_GPIO40_LEVEL_LOW_ACCESS = "RW";
pub const IO_BANK0_DORMANT_WAKE_INTS0_OFFSET = _u(@as(c_int, 0x00000308));
pub const IO_BANK0_DORMANT_WAKE_INTS0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS0_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_OFFSET = _u(@as(c_int, 0x0000030c));
pub const IO_BANK0_DORMANT_WAKE_INTS1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS1_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_OFFSET = _u(@as(c_int, 0x00000310));
pub const IO_BANK0_DORMANT_WAKE_INTS2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS2_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_OFFSET = _u(@as(c_int, 0x00000314));
pub const IO_BANK0_DORMANT_WAKE_INTS3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS3_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO31_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO31_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO31_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO31_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO31_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO31_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO31_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO31_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO31_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO31_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO31_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO31_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO31_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO31_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO31_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO31_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO31_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO31_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO31_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO31_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO30_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO30_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO30_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO30_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO30_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO30_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO30_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO30_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO30_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO30_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO30_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO30_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO30_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO30_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO30_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO30_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO30_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO30_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO30_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO30_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_OFFSET = _u(@as(c_int, 0x00000318));
pub const IO_BANK0_DORMANT_WAKE_INTS4_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS4_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO39_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO39_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO39_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO39_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO39_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO39_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO39_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO39_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO39_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO39_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO39_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO39_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO39_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO39_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO39_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO39_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO39_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO39_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO39_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO39_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO38_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO38_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO38_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO38_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO38_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO38_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO38_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO38_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO38_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO38_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO38_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO38_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO38_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO38_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO38_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO38_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO38_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO38_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO38_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO38_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO37_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO37_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO37_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO37_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO37_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO37_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO37_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO37_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO37_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO37_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO37_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO37_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO37_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO37_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO37_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO37_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO37_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO37_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO37_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO37_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO36_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO36_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO36_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO36_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO36_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO36_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO36_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO36_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO36_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO36_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO36_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO36_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO36_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO36_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO36_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO36_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO36_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO36_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO36_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO36_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO35_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO35_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO35_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO35_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO35_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO35_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO35_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO35_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO35_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO35_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO35_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO35_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO35_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO35_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO35_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO35_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO35_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO35_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO35_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO35_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO34_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO34_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO34_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO34_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO34_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO34_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO34_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO34_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO34_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO34_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO34_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO34_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO34_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO34_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO34_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO34_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO34_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO34_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO34_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO34_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO33_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO33_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO33_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO33_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO33_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO33_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO33_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO33_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO33_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO33_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO33_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO33_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO33_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO33_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO33_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO33_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO33_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO33_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO33_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO33_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO32_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO32_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO32_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO32_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO32_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO32_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO32_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO32_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO32_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO32_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO32_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO32_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO32_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO32_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO32_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO32_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO32_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO32_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO32_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTS4_GPIO32_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_OFFSET = _u(@as(c_int, 0x0000031c));
pub const IO_BANK0_DORMANT_WAKE_INTS5_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS5_RESET = _u(@as(c_int, 0x00000000));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO47_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO47_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO47_EDGE_HIGH_MSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO47_EDGE_HIGH_LSB = _u(@as(c_int, 31));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO47_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO47_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO47_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO47_EDGE_LOW_MSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO47_EDGE_LOW_LSB = _u(@as(c_int, 30));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO47_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO47_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO47_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO47_LEVEL_HIGH_MSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO47_LEVEL_HIGH_LSB = _u(@as(c_int, 29));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO47_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO47_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO47_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO47_LEVEL_LOW_MSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO47_LEVEL_LOW_LSB = _u(@as(c_int, 28));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO47_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO46_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO46_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO46_EDGE_HIGH_MSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO46_EDGE_HIGH_LSB = _u(@as(c_int, 27));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO46_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO46_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO46_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO46_EDGE_LOW_MSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO46_EDGE_LOW_LSB = _u(@as(c_int, 26));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO46_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO46_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO46_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO46_LEVEL_HIGH_MSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO46_LEVEL_HIGH_LSB = _u(@as(c_int, 25));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO46_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO46_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO46_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO46_LEVEL_LOW_MSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO46_LEVEL_LOW_LSB = _u(@as(c_int, 24));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO46_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO45_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO45_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO45_EDGE_HIGH_MSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO45_EDGE_HIGH_LSB = _u(@as(c_int, 23));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO45_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO45_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO45_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO45_EDGE_LOW_MSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO45_EDGE_LOW_LSB = _u(@as(c_int, 22));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO45_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO45_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO45_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO45_LEVEL_HIGH_MSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO45_LEVEL_HIGH_LSB = _u(@as(c_int, 21));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO45_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO45_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO45_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO45_LEVEL_LOW_MSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO45_LEVEL_LOW_LSB = _u(@as(c_int, 20));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO45_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO44_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO44_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO44_EDGE_HIGH_MSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO44_EDGE_HIGH_LSB = _u(@as(c_int, 19));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO44_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO44_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO44_EDGE_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO44_EDGE_LOW_MSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO44_EDGE_LOW_LSB = _u(@as(c_int, 18));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO44_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO44_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO44_LEVEL_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO44_LEVEL_HIGH_MSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO44_LEVEL_HIGH_LSB = _u(@as(c_int, 17));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO44_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO44_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO44_LEVEL_LOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO44_LEVEL_LOW_MSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO44_LEVEL_LOW_LSB = _u(@as(c_int, 16));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO44_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO43_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO43_EDGE_HIGH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO43_EDGE_HIGH_MSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO43_EDGE_HIGH_LSB = _u(@as(c_int, 15));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO43_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO43_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO43_EDGE_LOW_BITS = _u(@as(c_int, 0x00004000));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO43_EDGE_LOW_MSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO43_EDGE_LOW_LSB = _u(@as(c_int, 14));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO43_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO43_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO43_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00002000));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO43_LEVEL_HIGH_MSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO43_LEVEL_HIGH_LSB = _u(@as(c_int, 13));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO43_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO43_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO43_LEVEL_LOW_BITS = _u(@as(c_int, 0x00001000));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO43_LEVEL_LOW_MSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO43_LEVEL_LOW_LSB = _u(@as(c_int, 12));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO43_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO42_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO42_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000800));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO42_EDGE_HIGH_MSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO42_EDGE_HIGH_LSB = _u(@as(c_int, 11));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO42_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO42_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO42_EDGE_LOW_BITS = _u(@as(c_int, 0x00000400));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO42_EDGE_LOW_MSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO42_EDGE_LOW_LSB = _u(@as(c_int, 10));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO42_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO42_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO42_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000200));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO42_LEVEL_HIGH_MSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO42_LEVEL_HIGH_LSB = _u(@as(c_int, 9));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO42_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO42_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO42_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000100));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO42_LEVEL_LOW_MSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO42_LEVEL_LOW_LSB = _u(@as(c_int, 8));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO42_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO41_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO41_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000080));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO41_EDGE_HIGH_MSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO41_EDGE_HIGH_LSB = _u(@as(c_int, 7));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO41_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO41_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO41_EDGE_LOW_BITS = _u(@as(c_int, 0x00000040));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO41_EDGE_LOW_MSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO41_EDGE_LOW_LSB = _u(@as(c_int, 6));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO41_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO41_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO41_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000020));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO41_LEVEL_HIGH_MSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO41_LEVEL_HIGH_LSB = _u(@as(c_int, 5));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO41_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO41_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO41_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000010));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO41_LEVEL_LOW_MSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO41_LEVEL_LOW_LSB = _u(@as(c_int, 4));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO41_LEVEL_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO40_EDGE_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO40_EDGE_HIGH_BITS = _u(@as(c_int, 0x00000008));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO40_EDGE_HIGH_MSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO40_EDGE_HIGH_LSB = _u(@as(c_int, 3));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO40_EDGE_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO40_EDGE_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO40_EDGE_LOW_BITS = _u(@as(c_int, 0x00000004));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO40_EDGE_LOW_MSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO40_EDGE_LOW_LSB = _u(@as(c_int, 2));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO40_EDGE_LOW_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO40_LEVEL_HIGH_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO40_LEVEL_HIGH_BITS = _u(@as(c_int, 0x00000002));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO40_LEVEL_HIGH_MSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO40_LEVEL_HIGH_LSB = _u(@as(c_int, 1));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO40_LEVEL_HIGH_ACCESS = "RO";
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO40_LEVEL_LOW_RESET = _u(@as(c_int, 0x0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO40_LEVEL_LOW_BITS = _u(@as(c_int, 0x00000001));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO40_LEVEL_LOW_MSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO40_LEVEL_LOW_LSB = _u(@as(c_int, 0));
pub const IO_BANK0_DORMANT_WAKE_INTS5_GPIO40_LEVEL_LOW_ACCESS = "RO";
pub const io_bank0_hw = @import("std").zig.c_translation.cast([*c]io_bank0_hw_t, IO_BANK0_BASE);
pub const _HARDWARE_IRQ_H = "";
pub const PICO_MAX_SHARED_IRQ_HANDLERS = @as(c_int, 4);
pub const PICO_DISABLE_SHARED_IRQ_HANDLERS = @as(c_int, 0);
pub const PICO_VTABLE_PER_CORE = @as(c_int, 0);
pub const _INTCTRL_H = "";
pub const isr_timer0_0 = @compileError("unable to translate macro: undefined identifier `isr_irq0`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:130:9
pub const isr_timer0_1 = @compileError("unable to translate macro: undefined identifier `isr_irq1`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:131:9
pub const isr_timer0_2 = @compileError("unable to translate macro: undefined identifier `isr_irq2`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:132:9
pub const isr_timer0_3 = @compileError("unable to translate macro: undefined identifier `isr_irq3`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:133:9
pub const isr_timer1_0 = @compileError("unable to translate macro: undefined identifier `isr_irq4`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:134:9
pub const isr_timer1_1 = @compileError("unable to translate macro: undefined identifier `isr_irq5`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:135:9
pub const isr_timer1_2 = @compileError("unable to translate macro: undefined identifier `isr_irq6`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:136:9
pub const isr_timer1_3 = @compileError("unable to translate macro: undefined identifier `isr_irq7`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:137:9
pub const isr_pwm_wrap_0 = @compileError("unable to translate macro: undefined identifier `isr_irq8`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:138:9
pub const isr_pwm_wrap_1 = @compileError("unable to translate macro: undefined identifier `isr_irq9`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:139:9
pub const isr_dma_0 = @compileError("unable to translate macro: undefined identifier `isr_irq10`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:140:9
pub const isr_dma_1 = @compileError("unable to translate macro: undefined identifier `isr_irq11`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:141:9
pub const isr_dma_2 = @compileError("unable to translate macro: undefined identifier `isr_irq12`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:142:9
pub const isr_dma_3 = @compileError("unable to translate macro: undefined identifier `isr_irq13`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:143:9
pub const isr_usbctrl = @compileError("unable to translate macro: undefined identifier `isr_irq14`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:144:9
pub const isr_pio0_0 = @compileError("unable to translate macro: undefined identifier `isr_irq15`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:145:9
pub const isr_pio0_1 = @compileError("unable to translate macro: undefined identifier `isr_irq16`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:146:9
pub const isr_pio1_0 = @compileError("unable to translate macro: undefined identifier `isr_irq17`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:147:9
pub const isr_pio1_1 = @compileError("unable to translate macro: undefined identifier `isr_irq18`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:148:9
pub const isr_pio2_0 = @compileError("unable to translate macro: undefined identifier `isr_irq19`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:149:9
pub const isr_pio2_1 = @compileError("unable to translate macro: undefined identifier `isr_irq20`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:150:9
pub const isr_io_bank0 = @compileError("unable to translate macro: undefined identifier `isr_irq21`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:151:9
pub const isr_io_bank0_ns = @compileError("unable to translate macro: undefined identifier `isr_irq22`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:152:9
pub const isr_io_qspi = @compileError("unable to translate macro: undefined identifier `isr_irq23`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:153:9
pub const isr_io_qspi_ns = @compileError("unable to translate macro: undefined identifier `isr_irq24`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:154:9
pub const isr_sio_fifo = @compileError("unable to translate macro: undefined identifier `isr_irq25`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:155:9
pub const isr_sio_bell = @compileError("unable to translate macro: undefined identifier `isr_irq26`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:156:9
pub const isr_sio_fifo_ns = @compileError("unable to translate macro: undefined identifier `isr_irq27`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:157:9
pub const isr_sio_bell_ns = @compileError("unable to translate macro: undefined identifier `isr_irq28`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:158:9
pub const isr_sio_mtimecmp = @compileError("unable to translate macro: undefined identifier `isr_irq29`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:159:9
pub const isr_clocks = @compileError("unable to translate macro: undefined identifier `isr_irq30`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:160:9
pub const isr_spi0 = @compileError("unable to translate macro: undefined identifier `isr_irq31`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:161:9
pub const isr_spi1 = @compileError("unable to translate macro: undefined identifier `isr_irq32`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:162:9
pub const isr_uart0 = @compileError("unable to translate macro: undefined identifier `isr_irq33`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:163:9
pub const isr_uart1 = @compileError("unable to translate macro: undefined identifier `isr_irq34`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:164:9
pub const isr_adc_fifo = @compileError("unable to translate macro: undefined identifier `isr_irq35`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:165:9
pub const isr_i2c0 = @compileError("unable to translate macro: undefined identifier `isr_irq36`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:166:9
pub const isr_i2c1 = @compileError("unable to translate macro: undefined identifier `isr_irq37`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:167:9
pub const isr_otp = @compileError("unable to translate macro: undefined identifier `isr_irq38`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:168:9
pub const isr_trng = @compileError("unable to translate macro: undefined identifier `isr_irq39`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:169:9
pub const isr_proc0_cti = @compileError("unable to translate macro: undefined identifier `isr_irq40`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:170:9
pub const isr_proc1_cti = @compileError("unable to translate macro: undefined identifier `isr_irq41`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:171:9
pub const isr_pll_sys = @compileError("unable to translate macro: undefined identifier `isr_irq42`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:172:9
pub const isr_pll_usb = @compileError("unable to translate macro: undefined identifier `isr_irq43`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:173:9
pub const isr_powman_pow = @compileError("unable to translate macro: undefined identifier `isr_irq44`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:174:9
pub const isr_powman_timer = @compileError("unable to translate macro: undefined identifier `isr_irq45`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:175:9
pub const isr_spare_0 = @compileError("unable to translate macro: undefined identifier `isr_irq46`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:176:9
pub const isr_spare_1 = @compileError("unable to translate macro: undefined identifier `isr_irq47`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:177:9
pub const isr_spare_2 = @compileError("unable to translate macro: undefined identifier `isr_irq48`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:178:9
pub const isr_spare_3 = @compileError("unable to translate macro: undefined identifier `isr_irq49`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:179:9
pub const isr_spare_4 = @compileError("unable to translate macro: undefined identifier `isr_irq50`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:180:9
pub const isr_spare_5 = @compileError("unable to translate macro: undefined identifier `isr_irq51`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/hardware_regs/include/hardware/regs/intctrl.h:181:9
pub const _PICO_PLATFORM_CPU_REGS_H = "";
pub const _HARDWARE_REGS_M33_H = "";
pub const M33_ITM_STIM0_OFFSET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM0_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM0_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM0_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM0_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM0_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM0_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM1_OFFSET = _u(@as(c_int, 0x00000004));
pub const M33_ITM_STIM1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM1_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM1_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM1_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM1_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM1_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM1_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM2_OFFSET = _u(@as(c_int, 0x00000008));
pub const M33_ITM_STIM2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM2_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM2_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM2_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM2_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM2_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM2_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM3_OFFSET = _u(@as(c_int, 0x0000000c));
pub const M33_ITM_STIM3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM3_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM3_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM3_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM3_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM3_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM3_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM4_OFFSET = _u(@as(c_int, 0x00000010));
pub const M33_ITM_STIM4_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM4_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM4_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM4_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM4_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM4_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM4_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM5_OFFSET = _u(@as(c_int, 0x00000014));
pub const M33_ITM_STIM5_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM5_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM5_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM5_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM5_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM5_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM5_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM6_OFFSET = _u(@as(c_int, 0x00000018));
pub const M33_ITM_STIM6_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM6_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM6_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM6_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM6_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM6_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM6_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM7_OFFSET = _u(@as(c_int, 0x0000001c));
pub const M33_ITM_STIM7_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM7_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM7_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM7_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM7_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM7_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM7_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM8_OFFSET = _u(@as(c_int, 0x00000020));
pub const M33_ITM_STIM8_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM8_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM8_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM8_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM8_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM8_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM8_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM9_OFFSET = _u(@as(c_int, 0x00000024));
pub const M33_ITM_STIM9_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM9_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM9_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM9_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM9_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM9_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM9_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM10_OFFSET = _u(@as(c_int, 0x00000028));
pub const M33_ITM_STIM10_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM10_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM10_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM10_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM10_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM10_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM10_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM11_OFFSET = _u(@as(c_int, 0x0000002c));
pub const M33_ITM_STIM11_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM11_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM11_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM11_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM11_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM11_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM11_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM12_OFFSET = _u(@as(c_int, 0x00000030));
pub const M33_ITM_STIM12_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM12_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM12_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM12_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM12_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM12_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM12_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM13_OFFSET = _u(@as(c_int, 0x00000034));
pub const M33_ITM_STIM13_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM13_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM13_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM13_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM13_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM13_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM13_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM14_OFFSET = _u(@as(c_int, 0x00000038));
pub const M33_ITM_STIM14_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM14_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM14_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM14_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM14_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM14_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM14_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM15_OFFSET = _u(@as(c_int, 0x0000003c));
pub const M33_ITM_STIM15_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM15_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM15_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM15_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM15_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM15_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM15_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM16_OFFSET = _u(@as(c_int, 0x00000040));
pub const M33_ITM_STIM16_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM16_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM16_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM16_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM16_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM16_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM16_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM17_OFFSET = _u(@as(c_int, 0x00000044));
pub const M33_ITM_STIM17_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM17_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM17_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM17_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM17_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM17_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM17_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM18_OFFSET = _u(@as(c_int, 0x00000048));
pub const M33_ITM_STIM18_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM18_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM18_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM18_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM18_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM18_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM18_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM19_OFFSET = _u(@as(c_int, 0x0000004c));
pub const M33_ITM_STIM19_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM19_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM19_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM19_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM19_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM19_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM19_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM20_OFFSET = _u(@as(c_int, 0x00000050));
pub const M33_ITM_STIM20_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM20_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM20_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM20_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM20_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM20_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM20_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM21_OFFSET = _u(@as(c_int, 0x00000054));
pub const M33_ITM_STIM21_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM21_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM21_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM21_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM21_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM21_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM21_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM22_OFFSET = _u(@as(c_int, 0x00000058));
pub const M33_ITM_STIM22_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM22_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM22_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM22_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM22_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM22_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM22_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM23_OFFSET = _u(@as(c_int, 0x0000005c));
pub const M33_ITM_STIM23_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM23_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM23_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM23_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM23_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM23_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM23_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM24_OFFSET = _u(@as(c_int, 0x00000060));
pub const M33_ITM_STIM24_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM24_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM24_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM24_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM24_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM24_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM24_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM25_OFFSET = _u(@as(c_int, 0x00000064));
pub const M33_ITM_STIM25_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM25_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM25_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM25_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM25_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM25_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM25_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM26_OFFSET = _u(@as(c_int, 0x00000068));
pub const M33_ITM_STIM26_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM26_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM26_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM26_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM26_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM26_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM26_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM27_OFFSET = _u(@as(c_int, 0x0000006c));
pub const M33_ITM_STIM27_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM27_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM27_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM27_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM27_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM27_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM27_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM28_OFFSET = _u(@as(c_int, 0x00000070));
pub const M33_ITM_STIM28_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM28_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM28_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM28_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM28_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM28_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM28_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM29_OFFSET = _u(@as(c_int, 0x00000074));
pub const M33_ITM_STIM29_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM29_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM29_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM29_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM29_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM29_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM29_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM30_OFFSET = _u(@as(c_int, 0x00000078));
pub const M33_ITM_STIM30_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM30_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM30_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM30_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM30_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM30_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM30_STIMULUS_ACCESS = "RW";
pub const M33_ITM_STIM31_OFFSET = _u(@as(c_int, 0x0000007c));
pub const M33_ITM_STIM31_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM31_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM31_STIMULUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_STIM31_STIMULUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_STIM31_STIMULUS_MSB = _u(@as(c_int, 31));
pub const M33_ITM_STIM31_STIMULUS_LSB = _u(@as(c_int, 0));
pub const M33_ITM_STIM31_STIMULUS_ACCESS = "RW";
pub const M33_ITM_TER0_OFFSET = _u(@as(c_int, 0x00000e00));
pub const M33_ITM_TER0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_TER0_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_TER0_STIMENA_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_TER0_STIMENA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_TER0_STIMENA_MSB = _u(@as(c_int, 31));
pub const M33_ITM_TER0_STIMENA_LSB = _u(@as(c_int, 0));
pub const M33_ITM_TER0_STIMENA_ACCESS = "RW";
pub const M33_ITM_TPR_OFFSET = _u(@as(c_int, 0x00000e40));
pub const M33_ITM_TPR_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_ITM_TPR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_TPR_PRIVMASK_RESET = _u(@as(c_int, 0x0));
pub const M33_ITM_TPR_PRIVMASK_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_ITM_TPR_PRIVMASK_MSB = _u(@as(c_int, 3));
pub const M33_ITM_TPR_PRIVMASK_LSB = _u(@as(c_int, 0));
pub const M33_ITM_TPR_PRIVMASK_ACCESS = "RW";
pub const M33_ITM_TCR_OFFSET = _u(@as(c_int, 0x00000e80));
pub const M33_ITM_TCR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ff0f3f, .hex));
pub const M33_ITM_TCR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_TCR_BUSY_RESET = _u(@as(c_int, 0x0));
pub const M33_ITM_TCR_BUSY_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const M33_ITM_TCR_BUSY_MSB = _u(@as(c_int, 23));
pub const M33_ITM_TCR_BUSY_LSB = _u(@as(c_int, 23));
pub const M33_ITM_TCR_BUSY_ACCESS = "RO";
pub const M33_ITM_TCR_TRACEBUSID_RESET = _u(@as(c_int, 0x00));
pub const M33_ITM_TCR_TRACEBUSID_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x007f0000, .hex));
pub const M33_ITM_TCR_TRACEBUSID_MSB = _u(@as(c_int, 22));
pub const M33_ITM_TCR_TRACEBUSID_LSB = _u(@as(c_int, 16));
pub const M33_ITM_TCR_TRACEBUSID_ACCESS = "RW";
pub const M33_ITM_TCR_GTSFREQ_RESET = _u(@as(c_int, 0x0));
pub const M33_ITM_TCR_GTSFREQ_BITS = _u(@as(c_int, 0x00000c00));
pub const M33_ITM_TCR_GTSFREQ_MSB = _u(@as(c_int, 11));
pub const M33_ITM_TCR_GTSFREQ_LSB = _u(@as(c_int, 10));
pub const M33_ITM_TCR_GTSFREQ_ACCESS = "RW";
pub const M33_ITM_TCR_TSPRESCALE_RESET = _u(@as(c_int, 0x0));
pub const M33_ITM_TCR_TSPRESCALE_BITS = _u(@as(c_int, 0x00000300));
pub const M33_ITM_TCR_TSPRESCALE_MSB = _u(@as(c_int, 9));
pub const M33_ITM_TCR_TSPRESCALE_LSB = _u(@as(c_int, 8));
pub const M33_ITM_TCR_TSPRESCALE_ACCESS = "RW";
pub const M33_ITM_TCR_STALLENA_RESET = _u(@as(c_int, 0x0));
pub const M33_ITM_TCR_STALLENA_BITS = _u(@as(c_int, 0x00000020));
pub const M33_ITM_TCR_STALLENA_MSB = _u(@as(c_int, 5));
pub const M33_ITM_TCR_STALLENA_LSB = _u(@as(c_int, 5));
pub const M33_ITM_TCR_STALLENA_ACCESS = "RW";
pub const M33_ITM_TCR_SWOENA_RESET = _u(@as(c_int, 0x0));
pub const M33_ITM_TCR_SWOENA_BITS = _u(@as(c_int, 0x00000010));
pub const M33_ITM_TCR_SWOENA_MSB = _u(@as(c_int, 4));
pub const M33_ITM_TCR_SWOENA_LSB = _u(@as(c_int, 4));
pub const M33_ITM_TCR_SWOENA_ACCESS = "RW";
pub const M33_ITM_TCR_TXENA_RESET = _u(@as(c_int, 0x0));
pub const M33_ITM_TCR_TXENA_BITS = _u(@as(c_int, 0x00000008));
pub const M33_ITM_TCR_TXENA_MSB = _u(@as(c_int, 3));
pub const M33_ITM_TCR_TXENA_LSB = _u(@as(c_int, 3));
pub const M33_ITM_TCR_TXENA_ACCESS = "RW";
pub const M33_ITM_TCR_SYNCENA_RESET = _u(@as(c_int, 0x0));
pub const M33_ITM_TCR_SYNCENA_BITS = _u(@as(c_int, 0x00000004));
pub const M33_ITM_TCR_SYNCENA_MSB = _u(@as(c_int, 2));
pub const M33_ITM_TCR_SYNCENA_LSB = _u(@as(c_int, 2));
pub const M33_ITM_TCR_SYNCENA_ACCESS = "RW";
pub const M33_ITM_TCR_TSENA_RESET = _u(@as(c_int, 0x0));
pub const M33_ITM_TCR_TSENA_BITS = _u(@as(c_int, 0x00000002));
pub const M33_ITM_TCR_TSENA_MSB = _u(@as(c_int, 1));
pub const M33_ITM_TCR_TSENA_LSB = _u(@as(c_int, 1));
pub const M33_ITM_TCR_TSENA_ACCESS = "RW";
pub const M33_ITM_TCR_ITMENA_RESET = _u(@as(c_int, 0x0));
pub const M33_ITM_TCR_ITMENA_BITS = _u(@as(c_int, 0x00000001));
pub const M33_ITM_TCR_ITMENA_MSB = _u(@as(c_int, 0));
pub const M33_ITM_TCR_ITMENA_LSB = _u(@as(c_int, 0));
pub const M33_ITM_TCR_ITMENA_ACCESS = "RW";
pub const M33_INT_ATREADY_OFFSET = _u(@as(c_int, 0x00000ef0));
pub const M33_INT_ATREADY_BITS = _u(@as(c_int, 0x00000003));
pub const M33_INT_ATREADY_RESET = _u(@as(c_int, 0x00000000));
pub const M33_INT_ATREADY_AFVALID_RESET = _u(@as(c_int, 0x0));
pub const M33_INT_ATREADY_AFVALID_BITS = _u(@as(c_int, 0x00000002));
pub const M33_INT_ATREADY_AFVALID_MSB = _u(@as(c_int, 1));
pub const M33_INT_ATREADY_AFVALID_LSB = _u(@as(c_int, 1));
pub const M33_INT_ATREADY_AFVALID_ACCESS = "RO";
pub const M33_INT_ATREADY_ATREADY_RESET = _u(@as(c_int, 0x0));
pub const M33_INT_ATREADY_ATREADY_BITS = _u(@as(c_int, 0x00000001));
pub const M33_INT_ATREADY_ATREADY_MSB = _u(@as(c_int, 0));
pub const M33_INT_ATREADY_ATREADY_LSB = _u(@as(c_int, 0));
pub const M33_INT_ATREADY_ATREADY_ACCESS = "RO";
pub const M33_INT_ATVALID_OFFSET = _u(@as(c_int, 0x00000ef8));
pub const M33_INT_ATVALID_BITS = _u(@as(c_int, 0x00000003));
pub const M33_INT_ATVALID_RESET = _u(@as(c_int, 0x00000000));
pub const M33_INT_ATVALID_AFREADY_RESET = _u(@as(c_int, 0x0));
pub const M33_INT_ATVALID_AFREADY_BITS = _u(@as(c_int, 0x00000002));
pub const M33_INT_ATVALID_AFREADY_MSB = _u(@as(c_int, 1));
pub const M33_INT_ATVALID_AFREADY_LSB = _u(@as(c_int, 1));
pub const M33_INT_ATVALID_AFREADY_ACCESS = "RW";
pub const M33_INT_ATVALID_ATREADY_RESET = _u(@as(c_int, 0x0));
pub const M33_INT_ATVALID_ATREADY_BITS = _u(@as(c_int, 0x00000001));
pub const M33_INT_ATVALID_ATREADY_MSB = _u(@as(c_int, 0));
pub const M33_INT_ATVALID_ATREADY_LSB = _u(@as(c_int, 0));
pub const M33_INT_ATVALID_ATREADY_ACCESS = "RW";
pub const M33_ITM_ITCTRL_OFFSET = _u(@as(c_int, 0x00000f00));
pub const M33_ITM_ITCTRL_BITS = _u(@as(c_int, 0x00000001));
pub const M33_ITM_ITCTRL_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_ITCTRL_IME_RESET = _u(@as(c_int, 0x0));
pub const M33_ITM_ITCTRL_IME_BITS = _u(@as(c_int, 0x00000001));
pub const M33_ITM_ITCTRL_IME_MSB = _u(@as(c_int, 0));
pub const M33_ITM_ITCTRL_IME_LSB = _u(@as(c_int, 0));
pub const M33_ITM_ITCTRL_IME_ACCESS = "RW";
pub const M33_ITM_DEVARCH_OFFSET = _u(@as(c_int, 0x00000fbc));
pub const M33_ITM_DEVARCH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_ITM_DEVARCH_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x47701a01, .hex));
pub const M33_ITM_DEVARCH_ARCHITECT_RESET = _u(@as(c_int, 0x23b));
pub const M33_ITM_DEVARCH_ARCHITECT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffe00000, .hex));
pub const M33_ITM_DEVARCH_ARCHITECT_MSB = _u(@as(c_int, 31));
pub const M33_ITM_DEVARCH_ARCHITECT_LSB = _u(@as(c_int, 21));
pub const M33_ITM_DEVARCH_ARCHITECT_ACCESS = "RO";
pub const M33_ITM_DEVARCH_PRESENT_RESET = _u(@as(c_int, 0x1));
pub const M33_ITM_DEVARCH_PRESENT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const M33_ITM_DEVARCH_PRESENT_MSB = _u(@as(c_int, 20));
pub const M33_ITM_DEVARCH_PRESENT_LSB = _u(@as(c_int, 20));
pub const M33_ITM_DEVARCH_PRESENT_ACCESS = "RO";
pub const M33_ITM_DEVARCH_REVISION_RESET = _u(@as(c_int, 0x0));
pub const M33_ITM_DEVARCH_REVISION_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hex));
pub const M33_ITM_DEVARCH_REVISION_MSB = _u(@as(c_int, 19));
pub const M33_ITM_DEVARCH_REVISION_LSB = _u(@as(c_int, 16));
pub const M33_ITM_DEVARCH_REVISION_ACCESS = "RO";
pub const M33_ITM_DEVARCH_ARCHVER_RESET = _u(@as(c_int, 0x1));
pub const M33_ITM_DEVARCH_ARCHVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_ITM_DEVARCH_ARCHVER_MSB = _u(@as(c_int, 15));
pub const M33_ITM_DEVARCH_ARCHVER_LSB = _u(@as(c_int, 12));
pub const M33_ITM_DEVARCH_ARCHVER_ACCESS = "RO";
pub const M33_ITM_DEVARCH_ARCHPART_RESET = _u(@as(c_int, 0xa01));
pub const M33_ITM_DEVARCH_ARCHPART_BITS = _u(@as(c_int, 0x00000fff));
pub const M33_ITM_DEVARCH_ARCHPART_MSB = _u(@as(c_int, 11));
pub const M33_ITM_DEVARCH_ARCHPART_LSB = _u(@as(c_int, 0));
pub const M33_ITM_DEVARCH_ARCHPART_ACCESS = "RO";
pub const M33_ITM_DEVTYPE_OFFSET = _u(@as(c_int, 0x00000fcc));
pub const M33_ITM_DEVTYPE_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_ITM_DEVTYPE_RESET = _u(@as(c_int, 0x00000043));
pub const M33_ITM_DEVTYPE_SUB_RESET = _u(@as(c_int, 0x4));
pub const M33_ITM_DEVTYPE_SUB_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_ITM_DEVTYPE_SUB_MSB = _u(@as(c_int, 7));
pub const M33_ITM_DEVTYPE_SUB_LSB = _u(@as(c_int, 4));
pub const M33_ITM_DEVTYPE_SUB_ACCESS = "RO";
pub const M33_ITM_DEVTYPE_MAJOR_RESET = _u(@as(c_int, 0x3));
pub const M33_ITM_DEVTYPE_MAJOR_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_ITM_DEVTYPE_MAJOR_MSB = _u(@as(c_int, 3));
pub const M33_ITM_DEVTYPE_MAJOR_LSB = _u(@as(c_int, 0));
pub const M33_ITM_DEVTYPE_MAJOR_ACCESS = "RO";
pub const M33_ITM_PIDR4_OFFSET = _u(@as(c_int, 0x00000fd0));
pub const M33_ITM_PIDR4_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_ITM_PIDR4_RESET = _u(@as(c_int, 0x00000004));
pub const M33_ITM_PIDR4_SIZE_RESET = _u(@as(c_int, 0x0));
pub const M33_ITM_PIDR4_SIZE_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_ITM_PIDR4_SIZE_MSB = _u(@as(c_int, 7));
pub const M33_ITM_PIDR4_SIZE_LSB = _u(@as(c_int, 4));
pub const M33_ITM_PIDR4_SIZE_ACCESS = "RO";
pub const M33_ITM_PIDR4_DES_2_RESET = _u(@as(c_int, 0x4));
pub const M33_ITM_PIDR4_DES_2_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_ITM_PIDR4_DES_2_MSB = _u(@as(c_int, 3));
pub const M33_ITM_PIDR4_DES_2_LSB = _u(@as(c_int, 0));
pub const M33_ITM_PIDR4_DES_2_ACCESS = "RO";
pub const M33_ITM_PIDR5_OFFSET = _u(@as(c_int, 0x00000fd4));
pub const M33_ITM_PIDR5_BITS = _u(@as(c_int, 0x00000000));
pub const M33_ITM_PIDR5_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_PIDR5_MSB = _u(@as(c_int, 31));
pub const M33_ITM_PIDR5_LSB = _u(@as(c_int, 0));
pub const M33_ITM_PIDR5_ACCESS = "RW";
pub const M33_ITM_PIDR6_OFFSET = _u(@as(c_int, 0x00000fd8));
pub const M33_ITM_PIDR6_BITS = _u(@as(c_int, 0x00000000));
pub const M33_ITM_PIDR6_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_PIDR6_MSB = _u(@as(c_int, 31));
pub const M33_ITM_PIDR6_LSB = _u(@as(c_int, 0));
pub const M33_ITM_PIDR6_ACCESS = "RW";
pub const M33_ITM_PIDR7_OFFSET = _u(@as(c_int, 0x00000fdc));
pub const M33_ITM_PIDR7_BITS = _u(@as(c_int, 0x00000000));
pub const M33_ITM_PIDR7_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_PIDR7_MSB = _u(@as(c_int, 31));
pub const M33_ITM_PIDR7_LSB = _u(@as(c_int, 0));
pub const M33_ITM_PIDR7_ACCESS = "RW";
pub const M33_ITM_PIDR0_OFFSET = _u(@as(c_int, 0x00000fe0));
pub const M33_ITM_PIDR0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_ITM_PIDR0_RESET = _u(@as(c_int, 0x00000021));
pub const M33_ITM_PIDR0_PART_0_RESET = _u(@as(c_int, 0x21));
pub const M33_ITM_PIDR0_PART_0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_ITM_PIDR0_PART_0_MSB = _u(@as(c_int, 7));
pub const M33_ITM_PIDR0_PART_0_LSB = _u(@as(c_int, 0));
pub const M33_ITM_PIDR0_PART_0_ACCESS = "RO";
pub const M33_ITM_PIDR1_OFFSET = _u(@as(c_int, 0x00000fe4));
pub const M33_ITM_PIDR1_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_ITM_PIDR1_RESET = _u(@as(c_int, 0x000000bd));
pub const M33_ITM_PIDR1_DES_0_RESET = _u(@as(c_int, 0xb));
pub const M33_ITM_PIDR1_DES_0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_ITM_PIDR1_DES_0_MSB = _u(@as(c_int, 7));
pub const M33_ITM_PIDR1_DES_0_LSB = _u(@as(c_int, 4));
pub const M33_ITM_PIDR1_DES_0_ACCESS = "RO";
pub const M33_ITM_PIDR1_PART_1_RESET = _u(@as(c_int, 0xd));
pub const M33_ITM_PIDR1_PART_1_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_ITM_PIDR1_PART_1_MSB = _u(@as(c_int, 3));
pub const M33_ITM_PIDR1_PART_1_LSB = _u(@as(c_int, 0));
pub const M33_ITM_PIDR1_PART_1_ACCESS = "RO";
pub const M33_ITM_PIDR2_OFFSET = _u(@as(c_int, 0x00000fe8));
pub const M33_ITM_PIDR2_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_ITM_PIDR2_RESET = _u(@as(c_int, 0x0000000b));
pub const M33_ITM_PIDR2_REVISION_RESET = _u(@as(c_int, 0x0));
pub const M33_ITM_PIDR2_REVISION_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_ITM_PIDR2_REVISION_MSB = _u(@as(c_int, 7));
pub const M33_ITM_PIDR2_REVISION_LSB = _u(@as(c_int, 4));
pub const M33_ITM_PIDR2_REVISION_ACCESS = "RO";
pub const M33_ITM_PIDR2_JEDEC_RESET = _u(@as(c_int, 0x1));
pub const M33_ITM_PIDR2_JEDEC_BITS = _u(@as(c_int, 0x00000008));
pub const M33_ITM_PIDR2_JEDEC_MSB = _u(@as(c_int, 3));
pub const M33_ITM_PIDR2_JEDEC_LSB = _u(@as(c_int, 3));
pub const M33_ITM_PIDR2_JEDEC_ACCESS = "RO";
pub const M33_ITM_PIDR2_DES_1_RESET = _u(@as(c_int, 0x3));
pub const M33_ITM_PIDR2_DES_1_BITS = _u(@as(c_int, 0x00000007));
pub const M33_ITM_PIDR2_DES_1_MSB = _u(@as(c_int, 2));
pub const M33_ITM_PIDR2_DES_1_LSB = _u(@as(c_int, 0));
pub const M33_ITM_PIDR2_DES_1_ACCESS = "RO";
pub const M33_ITM_PIDR3_OFFSET = _u(@as(c_int, 0x00000fec));
pub const M33_ITM_PIDR3_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_ITM_PIDR3_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITM_PIDR3_REVAND_RESET = _u(@as(c_int, 0x0));
pub const M33_ITM_PIDR3_REVAND_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_ITM_PIDR3_REVAND_MSB = _u(@as(c_int, 7));
pub const M33_ITM_PIDR3_REVAND_LSB = _u(@as(c_int, 4));
pub const M33_ITM_PIDR3_REVAND_ACCESS = "RO";
pub const M33_ITM_PIDR3_CMOD_RESET = _u(@as(c_int, 0x0));
pub const M33_ITM_PIDR3_CMOD_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_ITM_PIDR3_CMOD_MSB = _u(@as(c_int, 3));
pub const M33_ITM_PIDR3_CMOD_LSB = _u(@as(c_int, 0));
pub const M33_ITM_PIDR3_CMOD_ACCESS = "RO";
pub const M33_ITM_CIDR0_OFFSET = _u(@as(c_int, 0x00000ff0));
pub const M33_ITM_CIDR0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_ITM_CIDR0_RESET = _u(@as(c_int, 0x0000000d));
pub const M33_ITM_CIDR0_PRMBL_0_RESET = _u(@as(c_int, 0x0d));
pub const M33_ITM_CIDR0_PRMBL_0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_ITM_CIDR0_PRMBL_0_MSB = _u(@as(c_int, 7));
pub const M33_ITM_CIDR0_PRMBL_0_LSB = _u(@as(c_int, 0));
pub const M33_ITM_CIDR0_PRMBL_0_ACCESS = "RO";
pub const M33_ITM_CIDR1_OFFSET = _u(@as(c_int, 0x00000ff4));
pub const M33_ITM_CIDR1_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_ITM_CIDR1_RESET = _u(@as(c_int, 0x00000090));
pub const M33_ITM_CIDR1_CLASS_RESET = _u(@as(c_int, 0x9));
pub const M33_ITM_CIDR1_CLASS_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_ITM_CIDR1_CLASS_MSB = _u(@as(c_int, 7));
pub const M33_ITM_CIDR1_CLASS_LSB = _u(@as(c_int, 4));
pub const M33_ITM_CIDR1_CLASS_ACCESS = "RO";
pub const M33_ITM_CIDR1_PRMBL_1_RESET = _u(@as(c_int, 0x0));
pub const M33_ITM_CIDR1_PRMBL_1_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_ITM_CIDR1_PRMBL_1_MSB = _u(@as(c_int, 3));
pub const M33_ITM_CIDR1_PRMBL_1_LSB = _u(@as(c_int, 0));
pub const M33_ITM_CIDR1_PRMBL_1_ACCESS = "RO";
pub const M33_ITM_CIDR2_OFFSET = _u(@as(c_int, 0x00000ff8));
pub const M33_ITM_CIDR2_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_ITM_CIDR2_RESET = _u(@as(c_int, 0x00000005));
pub const M33_ITM_CIDR2_PRMBL_2_RESET = _u(@as(c_int, 0x05));
pub const M33_ITM_CIDR2_PRMBL_2_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_ITM_CIDR2_PRMBL_2_MSB = _u(@as(c_int, 7));
pub const M33_ITM_CIDR2_PRMBL_2_LSB = _u(@as(c_int, 0));
pub const M33_ITM_CIDR2_PRMBL_2_ACCESS = "RO";
pub const M33_ITM_CIDR3_OFFSET = _u(@as(c_int, 0x00000ffc));
pub const M33_ITM_CIDR3_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_ITM_CIDR3_RESET = _u(@as(c_int, 0x000000b1));
pub const M33_ITM_CIDR3_PRMBL_3_RESET = _u(@as(c_int, 0xb1));
pub const M33_ITM_CIDR3_PRMBL_3_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_ITM_CIDR3_PRMBL_3_MSB = _u(@as(c_int, 7));
pub const M33_ITM_CIDR3_PRMBL_3_LSB = _u(@as(c_int, 0));
pub const M33_ITM_CIDR3_PRMBL_3_ACCESS = "RO";
pub const M33_DWT_CTRL_OFFSET = _u(@as(c_int, 0x00001000));
pub const M33_DWT_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff1fff, .hex));
pub const M33_DWT_CTRL_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x73741824, .hex));
pub const M33_DWT_CTRL_NUMCOMP_RESET = _u(@as(c_int, 0x7));
pub const M33_DWT_CTRL_NUMCOMP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_DWT_CTRL_NUMCOMP_MSB = _u(@as(c_int, 31));
pub const M33_DWT_CTRL_NUMCOMP_LSB = _u(@as(c_int, 28));
pub const M33_DWT_CTRL_NUMCOMP_ACCESS = "RO";
pub const M33_DWT_CTRL_NOTRCPKT_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_CTRL_NOTRCPKT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const M33_DWT_CTRL_NOTRCPKT_MSB = _u(@as(c_int, 27));
pub const M33_DWT_CTRL_NOTRCPKT_LSB = _u(@as(c_int, 27));
pub const M33_DWT_CTRL_NOTRCPKT_ACCESS = "RO";
pub const M33_DWT_CTRL_NOEXTTRIG_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_CTRL_NOEXTTRIG_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const M33_DWT_CTRL_NOEXTTRIG_MSB = _u(@as(c_int, 26));
pub const M33_DWT_CTRL_NOEXTTRIG_LSB = _u(@as(c_int, 26));
pub const M33_DWT_CTRL_NOEXTTRIG_ACCESS = "RO";
pub const M33_DWT_CTRL_NOCYCCNT_RESET = _u(@as(c_int, 0x1));
pub const M33_DWT_CTRL_NOCYCCNT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const M33_DWT_CTRL_NOCYCCNT_MSB = _u(@as(c_int, 25));
pub const M33_DWT_CTRL_NOCYCCNT_LSB = _u(@as(c_int, 25));
pub const M33_DWT_CTRL_NOCYCCNT_ACCESS = "RO";
pub const M33_DWT_CTRL_NOPRFCNT_RESET = _u(@as(c_int, 0x1));
pub const M33_DWT_CTRL_NOPRFCNT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const M33_DWT_CTRL_NOPRFCNT_MSB = _u(@as(c_int, 24));
pub const M33_DWT_CTRL_NOPRFCNT_LSB = _u(@as(c_int, 24));
pub const M33_DWT_CTRL_NOPRFCNT_ACCESS = "RO";
pub const M33_DWT_CTRL_CYCDISS_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_CTRL_CYCDISS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const M33_DWT_CTRL_CYCDISS_MSB = _u(@as(c_int, 23));
pub const M33_DWT_CTRL_CYCDISS_LSB = _u(@as(c_int, 23));
pub const M33_DWT_CTRL_CYCDISS_ACCESS = "RW";
pub const M33_DWT_CTRL_CYCEVTENA_RESET = _u(@as(c_int, 0x1));
pub const M33_DWT_CTRL_CYCEVTENA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const M33_DWT_CTRL_CYCEVTENA_MSB = _u(@as(c_int, 22));
pub const M33_DWT_CTRL_CYCEVTENA_LSB = _u(@as(c_int, 22));
pub const M33_DWT_CTRL_CYCEVTENA_ACCESS = "RW";
pub const M33_DWT_CTRL_FOLDEVTENA_RESET = _u(@as(c_int, 0x1));
pub const M33_DWT_CTRL_FOLDEVTENA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const M33_DWT_CTRL_FOLDEVTENA_MSB = _u(@as(c_int, 21));
pub const M33_DWT_CTRL_FOLDEVTENA_LSB = _u(@as(c_int, 21));
pub const M33_DWT_CTRL_FOLDEVTENA_ACCESS = "RW";
pub const M33_DWT_CTRL_LSUEVTENA_RESET = _u(@as(c_int, 0x1));
pub const M33_DWT_CTRL_LSUEVTENA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const M33_DWT_CTRL_LSUEVTENA_MSB = _u(@as(c_int, 20));
pub const M33_DWT_CTRL_LSUEVTENA_LSB = _u(@as(c_int, 20));
pub const M33_DWT_CTRL_LSUEVTENA_ACCESS = "RW";
pub const M33_DWT_CTRL_SLEEPEVTENA_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_CTRL_SLEEPEVTENA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const M33_DWT_CTRL_SLEEPEVTENA_MSB = _u(@as(c_int, 19));
pub const M33_DWT_CTRL_SLEEPEVTENA_LSB = _u(@as(c_int, 19));
pub const M33_DWT_CTRL_SLEEPEVTENA_ACCESS = "RW";
pub const M33_DWT_CTRL_EXCEVTENA_RESET = _u(@as(c_int, 0x1));
pub const M33_DWT_CTRL_EXCEVTENA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const M33_DWT_CTRL_EXCEVTENA_MSB = _u(@as(c_int, 18));
pub const M33_DWT_CTRL_EXCEVTENA_LSB = _u(@as(c_int, 18));
pub const M33_DWT_CTRL_EXCEVTENA_ACCESS = "RW";
pub const M33_DWT_CTRL_CPIEVTENA_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_CTRL_CPIEVTENA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const M33_DWT_CTRL_CPIEVTENA_MSB = _u(@as(c_int, 17));
pub const M33_DWT_CTRL_CPIEVTENA_LSB = _u(@as(c_int, 17));
pub const M33_DWT_CTRL_CPIEVTENA_ACCESS = "RW";
pub const M33_DWT_CTRL_EXTTRCENA_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_CTRL_EXTTRCENA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const M33_DWT_CTRL_EXTTRCENA_MSB = _u(@as(c_int, 16));
pub const M33_DWT_CTRL_EXTTRCENA_LSB = _u(@as(c_int, 16));
pub const M33_DWT_CTRL_EXTTRCENA_ACCESS = "RW";
pub const M33_DWT_CTRL_PCSAMPLENA_RESET = _u(@as(c_int, 0x1));
pub const M33_DWT_CTRL_PCSAMPLENA_BITS = _u(@as(c_int, 0x00001000));
pub const M33_DWT_CTRL_PCSAMPLENA_MSB = _u(@as(c_int, 12));
pub const M33_DWT_CTRL_PCSAMPLENA_LSB = _u(@as(c_int, 12));
pub const M33_DWT_CTRL_PCSAMPLENA_ACCESS = "RW";
pub const M33_DWT_CTRL_SYNCTAP_RESET = _u(@as(c_int, 0x2));
pub const M33_DWT_CTRL_SYNCTAP_BITS = _u(@as(c_int, 0x00000c00));
pub const M33_DWT_CTRL_SYNCTAP_MSB = _u(@as(c_int, 11));
pub const M33_DWT_CTRL_SYNCTAP_LSB = _u(@as(c_int, 10));
pub const M33_DWT_CTRL_SYNCTAP_ACCESS = "RW";
pub const M33_DWT_CTRL_CYCTAP_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_CTRL_CYCTAP_BITS = _u(@as(c_int, 0x00000200));
pub const M33_DWT_CTRL_CYCTAP_MSB = _u(@as(c_int, 9));
pub const M33_DWT_CTRL_CYCTAP_LSB = _u(@as(c_int, 9));
pub const M33_DWT_CTRL_CYCTAP_ACCESS = "RW";
pub const M33_DWT_CTRL_POSTINIT_RESET = _u(@as(c_int, 0x1));
pub const M33_DWT_CTRL_POSTINIT_BITS = _u(@as(c_int, 0x000001e0));
pub const M33_DWT_CTRL_POSTINIT_MSB = _u(@as(c_int, 8));
pub const M33_DWT_CTRL_POSTINIT_LSB = _u(@as(c_int, 5));
pub const M33_DWT_CTRL_POSTINIT_ACCESS = "RW";
pub const M33_DWT_CTRL_POSTPRESET_RESET = _u(@as(c_int, 0x2));
pub const M33_DWT_CTRL_POSTPRESET_BITS = _u(@as(c_int, 0x0000001e));
pub const M33_DWT_CTRL_POSTPRESET_MSB = _u(@as(c_int, 4));
pub const M33_DWT_CTRL_POSTPRESET_LSB = _u(@as(c_int, 1));
pub const M33_DWT_CTRL_POSTPRESET_ACCESS = "RW";
pub const M33_DWT_CTRL_CYCCNTENA_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_CTRL_CYCCNTENA_BITS = _u(@as(c_int, 0x00000001));
pub const M33_DWT_CTRL_CYCCNTENA_MSB = _u(@as(c_int, 0));
pub const M33_DWT_CTRL_CYCCNTENA_LSB = _u(@as(c_int, 0));
pub const M33_DWT_CTRL_CYCCNTENA_ACCESS = "RW";
pub const M33_DWT_CYCCNT_OFFSET = _u(@as(c_int, 0x00001004));
pub const M33_DWT_CYCCNT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_DWT_CYCCNT_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DWT_CYCCNT_CYCCNT_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DWT_CYCCNT_CYCCNT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_DWT_CYCCNT_CYCCNT_MSB = _u(@as(c_int, 31));
pub const M33_DWT_CYCCNT_CYCCNT_LSB = _u(@as(c_int, 0));
pub const M33_DWT_CYCCNT_CYCCNT_ACCESS = "RW";
pub const M33_DWT_EXCCNT_OFFSET = _u(@as(c_int, 0x0000100c));
pub const M33_DWT_EXCCNT_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DWT_EXCCNT_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DWT_EXCCNT_EXCCNT_RESET = _u(@as(c_int, 0x00));
pub const M33_DWT_EXCCNT_EXCCNT_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DWT_EXCCNT_EXCCNT_MSB = _u(@as(c_int, 7));
pub const M33_DWT_EXCCNT_EXCCNT_LSB = _u(@as(c_int, 0));
pub const M33_DWT_EXCCNT_EXCCNT_ACCESS = "RW";
pub const M33_DWT_LSUCNT_OFFSET = _u(@as(c_int, 0x00001014));
pub const M33_DWT_LSUCNT_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DWT_LSUCNT_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DWT_LSUCNT_LSUCNT_RESET = _u(@as(c_int, 0x00));
pub const M33_DWT_LSUCNT_LSUCNT_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DWT_LSUCNT_LSUCNT_MSB = _u(@as(c_int, 7));
pub const M33_DWT_LSUCNT_LSUCNT_LSB = _u(@as(c_int, 0));
pub const M33_DWT_LSUCNT_LSUCNT_ACCESS = "RW";
pub const M33_DWT_FOLDCNT_OFFSET = _u(@as(c_int, 0x00001018));
pub const M33_DWT_FOLDCNT_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DWT_FOLDCNT_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DWT_FOLDCNT_FOLDCNT_RESET = _u(@as(c_int, 0x00));
pub const M33_DWT_FOLDCNT_FOLDCNT_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DWT_FOLDCNT_FOLDCNT_MSB = _u(@as(c_int, 7));
pub const M33_DWT_FOLDCNT_FOLDCNT_LSB = _u(@as(c_int, 0));
pub const M33_DWT_FOLDCNT_FOLDCNT_ACCESS = "RW";
pub const M33_DWT_COMP0_OFFSET = _u(@as(c_int, 0x00001020));
pub const M33_DWT_COMP0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_DWT_COMP0_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DWT_COMP0_MSB = _u(@as(c_int, 31));
pub const M33_DWT_COMP0_LSB = _u(@as(c_int, 0));
pub const M33_DWT_COMP0_ACCESS = "RW";
pub const M33_DWT_FUNCTION0_OFFSET = _u(@as(c_int, 0x00001028));
pub const M33_DWT_FUNCTION0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf9000c3f, .hex));
pub const M33_DWT_FUNCTION0_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x58000000, .hex));
pub const M33_DWT_FUNCTION0_ID_RESET = _u(@as(c_int, 0x0b));
pub const M33_DWT_FUNCTION0_ID_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf8000000, .hex));
pub const M33_DWT_FUNCTION0_ID_MSB = _u(@as(c_int, 31));
pub const M33_DWT_FUNCTION0_ID_LSB = _u(@as(c_int, 27));
pub const M33_DWT_FUNCTION0_ID_ACCESS = "RO";
pub const M33_DWT_FUNCTION0_MATCHED_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_FUNCTION0_MATCHED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const M33_DWT_FUNCTION0_MATCHED_MSB = _u(@as(c_int, 24));
pub const M33_DWT_FUNCTION0_MATCHED_LSB = _u(@as(c_int, 24));
pub const M33_DWT_FUNCTION0_MATCHED_ACCESS = "RO";
pub const M33_DWT_FUNCTION0_DATAVSIZE_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_FUNCTION0_DATAVSIZE_BITS = _u(@as(c_int, 0x00000c00));
pub const M33_DWT_FUNCTION0_DATAVSIZE_MSB = _u(@as(c_int, 11));
pub const M33_DWT_FUNCTION0_DATAVSIZE_LSB = _u(@as(c_int, 10));
pub const M33_DWT_FUNCTION0_DATAVSIZE_ACCESS = "RW";
pub const M33_DWT_FUNCTION0_ACTION_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_FUNCTION0_ACTION_BITS = _u(@as(c_int, 0x00000030));
pub const M33_DWT_FUNCTION0_ACTION_MSB = _u(@as(c_int, 5));
pub const M33_DWT_FUNCTION0_ACTION_LSB = _u(@as(c_int, 4));
pub const M33_DWT_FUNCTION0_ACTION_ACCESS = "RW";
pub const M33_DWT_FUNCTION0_MATCH_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_FUNCTION0_MATCH_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_DWT_FUNCTION0_MATCH_MSB = _u(@as(c_int, 3));
pub const M33_DWT_FUNCTION0_MATCH_LSB = _u(@as(c_int, 0));
pub const M33_DWT_FUNCTION0_MATCH_ACCESS = "RW";
pub const M33_DWT_COMP1_OFFSET = _u(@as(c_int, 0x00001030));
pub const M33_DWT_COMP1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_DWT_COMP1_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DWT_COMP1_MSB = _u(@as(c_int, 31));
pub const M33_DWT_COMP1_LSB = _u(@as(c_int, 0));
pub const M33_DWT_COMP1_ACCESS = "RW";
pub const M33_DWT_FUNCTION1_OFFSET = _u(@as(c_int, 0x00001038));
pub const M33_DWT_FUNCTION1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf9000c3f, .hex));
pub const M33_DWT_FUNCTION1_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x89000828, .hex));
pub const M33_DWT_FUNCTION1_ID_RESET = _u(@as(c_int, 0x11));
pub const M33_DWT_FUNCTION1_ID_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf8000000, .hex));
pub const M33_DWT_FUNCTION1_ID_MSB = _u(@as(c_int, 31));
pub const M33_DWT_FUNCTION1_ID_LSB = _u(@as(c_int, 27));
pub const M33_DWT_FUNCTION1_ID_ACCESS = "RO";
pub const M33_DWT_FUNCTION1_MATCHED_RESET = _u(@as(c_int, 0x1));
pub const M33_DWT_FUNCTION1_MATCHED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const M33_DWT_FUNCTION1_MATCHED_MSB = _u(@as(c_int, 24));
pub const M33_DWT_FUNCTION1_MATCHED_LSB = _u(@as(c_int, 24));
pub const M33_DWT_FUNCTION1_MATCHED_ACCESS = "RO";
pub const M33_DWT_FUNCTION1_DATAVSIZE_RESET = _u(@as(c_int, 0x2));
pub const M33_DWT_FUNCTION1_DATAVSIZE_BITS = _u(@as(c_int, 0x00000c00));
pub const M33_DWT_FUNCTION1_DATAVSIZE_MSB = _u(@as(c_int, 11));
pub const M33_DWT_FUNCTION1_DATAVSIZE_LSB = _u(@as(c_int, 10));
pub const M33_DWT_FUNCTION1_DATAVSIZE_ACCESS = "RW";
pub const M33_DWT_FUNCTION1_ACTION_RESET = _u(@as(c_int, 0x2));
pub const M33_DWT_FUNCTION1_ACTION_BITS = _u(@as(c_int, 0x00000030));
pub const M33_DWT_FUNCTION1_ACTION_MSB = _u(@as(c_int, 5));
pub const M33_DWT_FUNCTION1_ACTION_LSB = _u(@as(c_int, 4));
pub const M33_DWT_FUNCTION1_ACTION_ACCESS = "RW";
pub const M33_DWT_FUNCTION1_MATCH_RESET = _u(@as(c_int, 0x8));
pub const M33_DWT_FUNCTION1_MATCH_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_DWT_FUNCTION1_MATCH_MSB = _u(@as(c_int, 3));
pub const M33_DWT_FUNCTION1_MATCH_LSB = _u(@as(c_int, 0));
pub const M33_DWT_FUNCTION1_MATCH_ACCESS = "RW";
pub const M33_DWT_COMP2_OFFSET = _u(@as(c_int, 0x00001040));
pub const M33_DWT_COMP2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_DWT_COMP2_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DWT_COMP2_MSB = _u(@as(c_int, 31));
pub const M33_DWT_COMP2_LSB = _u(@as(c_int, 0));
pub const M33_DWT_COMP2_ACCESS = "RW";
pub const M33_DWT_FUNCTION2_OFFSET = _u(@as(c_int, 0x00001048));
pub const M33_DWT_FUNCTION2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf9000c3f, .hex));
pub const M33_DWT_FUNCTION2_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x50000000, .hex));
pub const M33_DWT_FUNCTION2_ID_RESET = _u(@as(c_int, 0x0a));
pub const M33_DWT_FUNCTION2_ID_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf8000000, .hex));
pub const M33_DWT_FUNCTION2_ID_MSB = _u(@as(c_int, 31));
pub const M33_DWT_FUNCTION2_ID_LSB = _u(@as(c_int, 27));
pub const M33_DWT_FUNCTION2_ID_ACCESS = "RO";
pub const M33_DWT_FUNCTION2_MATCHED_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_FUNCTION2_MATCHED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const M33_DWT_FUNCTION2_MATCHED_MSB = _u(@as(c_int, 24));
pub const M33_DWT_FUNCTION2_MATCHED_LSB = _u(@as(c_int, 24));
pub const M33_DWT_FUNCTION2_MATCHED_ACCESS = "RO";
pub const M33_DWT_FUNCTION2_DATAVSIZE_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_FUNCTION2_DATAVSIZE_BITS = _u(@as(c_int, 0x00000c00));
pub const M33_DWT_FUNCTION2_DATAVSIZE_MSB = _u(@as(c_int, 11));
pub const M33_DWT_FUNCTION2_DATAVSIZE_LSB = _u(@as(c_int, 10));
pub const M33_DWT_FUNCTION2_DATAVSIZE_ACCESS = "RW";
pub const M33_DWT_FUNCTION2_ACTION_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_FUNCTION2_ACTION_BITS = _u(@as(c_int, 0x00000030));
pub const M33_DWT_FUNCTION2_ACTION_MSB = _u(@as(c_int, 5));
pub const M33_DWT_FUNCTION2_ACTION_LSB = _u(@as(c_int, 4));
pub const M33_DWT_FUNCTION2_ACTION_ACCESS = "RW";
pub const M33_DWT_FUNCTION2_MATCH_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_FUNCTION2_MATCH_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_DWT_FUNCTION2_MATCH_MSB = _u(@as(c_int, 3));
pub const M33_DWT_FUNCTION2_MATCH_LSB = _u(@as(c_int, 0));
pub const M33_DWT_FUNCTION2_MATCH_ACCESS = "RW";
pub const M33_DWT_COMP3_OFFSET = _u(@as(c_int, 0x00001050));
pub const M33_DWT_COMP3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_DWT_COMP3_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DWT_COMP3_MSB = _u(@as(c_int, 31));
pub const M33_DWT_COMP3_LSB = _u(@as(c_int, 0));
pub const M33_DWT_COMP3_ACCESS = "RW";
pub const M33_DWT_FUNCTION3_OFFSET = _u(@as(c_int, 0x00001058));
pub const M33_DWT_FUNCTION3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf9000c3f, .hex));
pub const M33_DWT_FUNCTION3_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000800, .hex));
pub const M33_DWT_FUNCTION3_ID_RESET = _u(@as(c_int, 0x04));
pub const M33_DWT_FUNCTION3_ID_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf8000000, .hex));
pub const M33_DWT_FUNCTION3_ID_MSB = _u(@as(c_int, 31));
pub const M33_DWT_FUNCTION3_ID_LSB = _u(@as(c_int, 27));
pub const M33_DWT_FUNCTION3_ID_ACCESS = "RO";
pub const M33_DWT_FUNCTION3_MATCHED_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_FUNCTION3_MATCHED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const M33_DWT_FUNCTION3_MATCHED_MSB = _u(@as(c_int, 24));
pub const M33_DWT_FUNCTION3_MATCHED_LSB = _u(@as(c_int, 24));
pub const M33_DWT_FUNCTION3_MATCHED_ACCESS = "RO";
pub const M33_DWT_FUNCTION3_DATAVSIZE_RESET = _u(@as(c_int, 0x2));
pub const M33_DWT_FUNCTION3_DATAVSIZE_BITS = _u(@as(c_int, 0x00000c00));
pub const M33_DWT_FUNCTION3_DATAVSIZE_MSB = _u(@as(c_int, 11));
pub const M33_DWT_FUNCTION3_DATAVSIZE_LSB = _u(@as(c_int, 10));
pub const M33_DWT_FUNCTION3_DATAVSIZE_ACCESS = "RW";
pub const M33_DWT_FUNCTION3_ACTION_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_FUNCTION3_ACTION_BITS = _u(@as(c_int, 0x00000030));
pub const M33_DWT_FUNCTION3_ACTION_MSB = _u(@as(c_int, 5));
pub const M33_DWT_FUNCTION3_ACTION_LSB = _u(@as(c_int, 4));
pub const M33_DWT_FUNCTION3_ACTION_ACCESS = "RW";
pub const M33_DWT_FUNCTION3_MATCH_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_FUNCTION3_MATCH_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_DWT_FUNCTION3_MATCH_MSB = _u(@as(c_int, 3));
pub const M33_DWT_FUNCTION3_MATCH_LSB = _u(@as(c_int, 0));
pub const M33_DWT_FUNCTION3_MATCH_ACCESS = "RW";
pub const M33_DWT_DEVARCH_OFFSET = _u(@as(c_int, 0x00001fbc));
pub const M33_DWT_DEVARCH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_DWT_DEVARCH_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x47701a02, .hex));
pub const M33_DWT_DEVARCH_ARCHITECT_RESET = _u(@as(c_int, 0x23b));
pub const M33_DWT_DEVARCH_ARCHITECT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffe00000, .hex));
pub const M33_DWT_DEVARCH_ARCHITECT_MSB = _u(@as(c_int, 31));
pub const M33_DWT_DEVARCH_ARCHITECT_LSB = _u(@as(c_int, 21));
pub const M33_DWT_DEVARCH_ARCHITECT_ACCESS = "RO";
pub const M33_DWT_DEVARCH_PRESENT_RESET = _u(@as(c_int, 0x1));
pub const M33_DWT_DEVARCH_PRESENT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const M33_DWT_DEVARCH_PRESENT_MSB = _u(@as(c_int, 20));
pub const M33_DWT_DEVARCH_PRESENT_LSB = _u(@as(c_int, 20));
pub const M33_DWT_DEVARCH_PRESENT_ACCESS = "RO";
pub const M33_DWT_DEVARCH_REVISION_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_DEVARCH_REVISION_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hex));
pub const M33_DWT_DEVARCH_REVISION_MSB = _u(@as(c_int, 19));
pub const M33_DWT_DEVARCH_REVISION_LSB = _u(@as(c_int, 16));
pub const M33_DWT_DEVARCH_REVISION_ACCESS = "RO";
pub const M33_DWT_DEVARCH_ARCHVER_RESET = _u(@as(c_int, 0x1));
pub const M33_DWT_DEVARCH_ARCHVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_DWT_DEVARCH_ARCHVER_MSB = _u(@as(c_int, 15));
pub const M33_DWT_DEVARCH_ARCHVER_LSB = _u(@as(c_int, 12));
pub const M33_DWT_DEVARCH_ARCHVER_ACCESS = "RO";
pub const M33_DWT_DEVARCH_ARCHPART_RESET = _u(@as(c_int, 0xa02));
pub const M33_DWT_DEVARCH_ARCHPART_BITS = _u(@as(c_int, 0x00000fff));
pub const M33_DWT_DEVARCH_ARCHPART_MSB = _u(@as(c_int, 11));
pub const M33_DWT_DEVARCH_ARCHPART_LSB = _u(@as(c_int, 0));
pub const M33_DWT_DEVARCH_ARCHPART_ACCESS = "RO";
pub const M33_DWT_DEVTYPE_OFFSET = _u(@as(c_int, 0x00001fcc));
pub const M33_DWT_DEVTYPE_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DWT_DEVTYPE_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DWT_DEVTYPE_SUB_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_DEVTYPE_SUB_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_DWT_DEVTYPE_SUB_MSB = _u(@as(c_int, 7));
pub const M33_DWT_DEVTYPE_SUB_LSB = _u(@as(c_int, 4));
pub const M33_DWT_DEVTYPE_SUB_ACCESS = "RO";
pub const M33_DWT_DEVTYPE_MAJOR_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_DEVTYPE_MAJOR_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_DWT_DEVTYPE_MAJOR_MSB = _u(@as(c_int, 3));
pub const M33_DWT_DEVTYPE_MAJOR_LSB = _u(@as(c_int, 0));
pub const M33_DWT_DEVTYPE_MAJOR_ACCESS = "RO";
pub const M33_DWT_PIDR4_OFFSET = _u(@as(c_int, 0x00001fd0));
pub const M33_DWT_PIDR4_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DWT_PIDR4_RESET = _u(@as(c_int, 0x00000004));
pub const M33_DWT_PIDR4_SIZE_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_PIDR4_SIZE_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_DWT_PIDR4_SIZE_MSB = _u(@as(c_int, 7));
pub const M33_DWT_PIDR4_SIZE_LSB = _u(@as(c_int, 4));
pub const M33_DWT_PIDR4_SIZE_ACCESS = "RO";
pub const M33_DWT_PIDR4_DES_2_RESET = _u(@as(c_int, 0x4));
pub const M33_DWT_PIDR4_DES_2_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_DWT_PIDR4_DES_2_MSB = _u(@as(c_int, 3));
pub const M33_DWT_PIDR4_DES_2_LSB = _u(@as(c_int, 0));
pub const M33_DWT_PIDR4_DES_2_ACCESS = "RO";
pub const M33_DWT_PIDR5_OFFSET = _u(@as(c_int, 0x00001fd4));
pub const M33_DWT_PIDR5_BITS = _u(@as(c_int, 0x00000000));
pub const M33_DWT_PIDR5_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DWT_PIDR5_MSB = _u(@as(c_int, 31));
pub const M33_DWT_PIDR5_LSB = _u(@as(c_int, 0));
pub const M33_DWT_PIDR5_ACCESS = "RW";
pub const M33_DWT_PIDR6_OFFSET = _u(@as(c_int, 0x00001fd8));
pub const M33_DWT_PIDR6_BITS = _u(@as(c_int, 0x00000000));
pub const M33_DWT_PIDR6_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DWT_PIDR6_MSB = _u(@as(c_int, 31));
pub const M33_DWT_PIDR6_LSB = _u(@as(c_int, 0));
pub const M33_DWT_PIDR6_ACCESS = "RW";
pub const M33_DWT_PIDR7_OFFSET = _u(@as(c_int, 0x00001fdc));
pub const M33_DWT_PIDR7_BITS = _u(@as(c_int, 0x00000000));
pub const M33_DWT_PIDR7_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DWT_PIDR7_MSB = _u(@as(c_int, 31));
pub const M33_DWT_PIDR7_LSB = _u(@as(c_int, 0));
pub const M33_DWT_PIDR7_ACCESS = "RW";
pub const M33_DWT_PIDR0_OFFSET = _u(@as(c_int, 0x00001fe0));
pub const M33_DWT_PIDR0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DWT_PIDR0_RESET = _u(@as(c_int, 0x00000021));
pub const M33_DWT_PIDR0_PART_0_RESET = _u(@as(c_int, 0x21));
pub const M33_DWT_PIDR0_PART_0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DWT_PIDR0_PART_0_MSB = _u(@as(c_int, 7));
pub const M33_DWT_PIDR0_PART_0_LSB = _u(@as(c_int, 0));
pub const M33_DWT_PIDR0_PART_0_ACCESS = "RO";
pub const M33_DWT_PIDR1_OFFSET = _u(@as(c_int, 0x00001fe4));
pub const M33_DWT_PIDR1_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DWT_PIDR1_RESET = _u(@as(c_int, 0x000000bd));
pub const M33_DWT_PIDR1_DES_0_RESET = _u(@as(c_int, 0xb));
pub const M33_DWT_PIDR1_DES_0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_DWT_PIDR1_DES_0_MSB = _u(@as(c_int, 7));
pub const M33_DWT_PIDR1_DES_0_LSB = _u(@as(c_int, 4));
pub const M33_DWT_PIDR1_DES_0_ACCESS = "RO";
pub const M33_DWT_PIDR1_PART_1_RESET = _u(@as(c_int, 0xd));
pub const M33_DWT_PIDR1_PART_1_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_DWT_PIDR1_PART_1_MSB = _u(@as(c_int, 3));
pub const M33_DWT_PIDR1_PART_1_LSB = _u(@as(c_int, 0));
pub const M33_DWT_PIDR1_PART_1_ACCESS = "RO";
pub const M33_DWT_PIDR2_OFFSET = _u(@as(c_int, 0x00001fe8));
pub const M33_DWT_PIDR2_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DWT_PIDR2_RESET = _u(@as(c_int, 0x0000000b));
pub const M33_DWT_PIDR2_REVISION_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_PIDR2_REVISION_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_DWT_PIDR2_REVISION_MSB = _u(@as(c_int, 7));
pub const M33_DWT_PIDR2_REVISION_LSB = _u(@as(c_int, 4));
pub const M33_DWT_PIDR2_REVISION_ACCESS = "RO";
pub const M33_DWT_PIDR2_JEDEC_RESET = _u(@as(c_int, 0x1));
pub const M33_DWT_PIDR2_JEDEC_BITS = _u(@as(c_int, 0x00000008));
pub const M33_DWT_PIDR2_JEDEC_MSB = _u(@as(c_int, 3));
pub const M33_DWT_PIDR2_JEDEC_LSB = _u(@as(c_int, 3));
pub const M33_DWT_PIDR2_JEDEC_ACCESS = "RO";
pub const M33_DWT_PIDR2_DES_1_RESET = _u(@as(c_int, 0x3));
pub const M33_DWT_PIDR2_DES_1_BITS = _u(@as(c_int, 0x00000007));
pub const M33_DWT_PIDR2_DES_1_MSB = _u(@as(c_int, 2));
pub const M33_DWT_PIDR2_DES_1_LSB = _u(@as(c_int, 0));
pub const M33_DWT_PIDR2_DES_1_ACCESS = "RO";
pub const M33_DWT_PIDR3_OFFSET = _u(@as(c_int, 0x00001fec));
pub const M33_DWT_PIDR3_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DWT_PIDR3_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DWT_PIDR3_REVAND_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_PIDR3_REVAND_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_DWT_PIDR3_REVAND_MSB = _u(@as(c_int, 7));
pub const M33_DWT_PIDR3_REVAND_LSB = _u(@as(c_int, 4));
pub const M33_DWT_PIDR3_REVAND_ACCESS = "RO";
pub const M33_DWT_PIDR3_CMOD_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_PIDR3_CMOD_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_DWT_PIDR3_CMOD_MSB = _u(@as(c_int, 3));
pub const M33_DWT_PIDR3_CMOD_LSB = _u(@as(c_int, 0));
pub const M33_DWT_PIDR3_CMOD_ACCESS = "RO";
pub const M33_DWT_CIDR0_OFFSET = _u(@as(c_int, 0x00001ff0));
pub const M33_DWT_CIDR0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DWT_CIDR0_RESET = _u(@as(c_int, 0x0000000d));
pub const M33_DWT_CIDR0_PRMBL_0_RESET = _u(@as(c_int, 0x0d));
pub const M33_DWT_CIDR0_PRMBL_0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DWT_CIDR0_PRMBL_0_MSB = _u(@as(c_int, 7));
pub const M33_DWT_CIDR0_PRMBL_0_LSB = _u(@as(c_int, 0));
pub const M33_DWT_CIDR0_PRMBL_0_ACCESS = "RO";
pub const M33_DWT_CIDR1_OFFSET = _u(@as(c_int, 0x00001ff4));
pub const M33_DWT_CIDR1_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DWT_CIDR1_RESET = _u(@as(c_int, 0x00000090));
pub const M33_DWT_CIDR1_CLASS_RESET = _u(@as(c_int, 0x9));
pub const M33_DWT_CIDR1_CLASS_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_DWT_CIDR1_CLASS_MSB = _u(@as(c_int, 7));
pub const M33_DWT_CIDR1_CLASS_LSB = _u(@as(c_int, 4));
pub const M33_DWT_CIDR1_CLASS_ACCESS = "RO";
pub const M33_DWT_CIDR1_PRMBL_1_RESET = _u(@as(c_int, 0x0));
pub const M33_DWT_CIDR1_PRMBL_1_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_DWT_CIDR1_PRMBL_1_MSB = _u(@as(c_int, 3));
pub const M33_DWT_CIDR1_PRMBL_1_LSB = _u(@as(c_int, 0));
pub const M33_DWT_CIDR1_PRMBL_1_ACCESS = "RO";
pub const M33_DWT_CIDR2_OFFSET = _u(@as(c_int, 0x00001ff8));
pub const M33_DWT_CIDR2_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DWT_CIDR2_RESET = _u(@as(c_int, 0x00000005));
pub const M33_DWT_CIDR2_PRMBL_2_RESET = _u(@as(c_int, 0x05));
pub const M33_DWT_CIDR2_PRMBL_2_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DWT_CIDR2_PRMBL_2_MSB = _u(@as(c_int, 7));
pub const M33_DWT_CIDR2_PRMBL_2_LSB = _u(@as(c_int, 0));
pub const M33_DWT_CIDR2_PRMBL_2_ACCESS = "RO";
pub const M33_DWT_CIDR3_OFFSET = _u(@as(c_int, 0x00001ffc));
pub const M33_DWT_CIDR3_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DWT_CIDR3_RESET = _u(@as(c_int, 0x000000b1));
pub const M33_DWT_CIDR3_PRMBL_3_RESET = _u(@as(c_int, 0xb1));
pub const M33_DWT_CIDR3_PRMBL_3_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DWT_CIDR3_PRMBL_3_MSB = _u(@as(c_int, 7));
pub const M33_DWT_CIDR3_PRMBL_3_LSB = _u(@as(c_int, 0));
pub const M33_DWT_CIDR3_PRMBL_3_ACCESS = "RO";
pub const M33_FP_CTRL_OFFSET = _u(@as(c_int, 0x00002000));
pub const M33_FP_CTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0007ff3, .hex));
pub const M33_FP_CTRL_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x60005580, .hex));
pub const M33_FP_CTRL_REV_RESET = _u(@as(c_int, 0x6));
pub const M33_FP_CTRL_REV_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_FP_CTRL_REV_MSB = _u(@as(c_int, 31));
pub const M33_FP_CTRL_REV_LSB = _u(@as(c_int, 28));
pub const M33_FP_CTRL_REV_ACCESS = "RO";
pub const M33_FP_CTRL_NUM_CODE_14_12__RESET = _u(@as(c_int, 0x5));
pub const M33_FP_CTRL_NUM_CODE_14_12__BITS = _u(@as(c_int, 0x00007000));
pub const M33_FP_CTRL_NUM_CODE_14_12__MSB = _u(@as(c_int, 14));
pub const M33_FP_CTRL_NUM_CODE_14_12__LSB = _u(@as(c_int, 12));
pub const M33_FP_CTRL_NUM_CODE_14_12__ACCESS = "RO";
pub const M33_FP_CTRL_NUM_LIT_RESET = _u(@as(c_int, 0x5));
pub const M33_FP_CTRL_NUM_LIT_BITS = _u(@as(c_int, 0x00000f00));
pub const M33_FP_CTRL_NUM_LIT_MSB = _u(@as(c_int, 11));
pub const M33_FP_CTRL_NUM_LIT_LSB = _u(@as(c_int, 8));
pub const M33_FP_CTRL_NUM_LIT_ACCESS = "RO";
pub const M33_FP_CTRL_NUM_CODE_7_4__RESET = _u(@as(c_int, 0x8));
pub const M33_FP_CTRL_NUM_CODE_7_4__BITS = _u(@as(c_int, 0x000000f0));
pub const M33_FP_CTRL_NUM_CODE_7_4__MSB = _u(@as(c_int, 7));
pub const M33_FP_CTRL_NUM_CODE_7_4__LSB = _u(@as(c_int, 4));
pub const M33_FP_CTRL_NUM_CODE_7_4__ACCESS = "RO";
pub const M33_FP_CTRL_KEY_RESET = _u(@as(c_int, 0x0));
pub const M33_FP_CTRL_KEY_BITS = _u(@as(c_int, 0x00000002));
pub const M33_FP_CTRL_KEY_MSB = _u(@as(c_int, 1));
pub const M33_FP_CTRL_KEY_LSB = _u(@as(c_int, 1));
pub const M33_FP_CTRL_KEY_ACCESS = "RW";
pub const M33_FP_CTRL_ENABLE_RESET = _u(@as(c_int, 0x0));
pub const M33_FP_CTRL_ENABLE_BITS = _u(@as(c_int, 0x00000001));
pub const M33_FP_CTRL_ENABLE_MSB = _u(@as(c_int, 0));
pub const M33_FP_CTRL_ENABLE_LSB = _u(@as(c_int, 0));
pub const M33_FP_CTRL_ENABLE_ACCESS = "RW";
pub const M33_FP_REMAP_OFFSET = _u(@as(c_int, 0x00002004));
pub const M33_FP_REMAP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3fffffe0, .hex));
pub const M33_FP_REMAP_RESET = _u(@as(c_int, 0x00000000));
pub const M33_FP_REMAP_RMPSPT_RESET = _u(@as(c_int, 0x0));
pub const M33_FP_REMAP_RMPSPT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const M33_FP_REMAP_RMPSPT_MSB = _u(@as(c_int, 29));
pub const M33_FP_REMAP_RMPSPT_LSB = _u(@as(c_int, 29));
pub const M33_FP_REMAP_RMPSPT_ACCESS = "RO";
pub const M33_FP_REMAP_REMAP_RESET = _u(@as(c_int, 0x000000));
pub const M33_FP_REMAP_REMAP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1fffffe0, .hex));
pub const M33_FP_REMAP_REMAP_MSB = _u(@as(c_int, 28));
pub const M33_FP_REMAP_REMAP_LSB = _u(@as(c_int, 5));
pub const M33_FP_REMAP_REMAP_ACCESS = "RO";
pub const M33_FP_COMP0_OFFSET = _u(@as(c_int, 0x00002008));
pub const M33_FP_COMP0_BITS = _u(@as(c_int, 0x00000001));
pub const M33_FP_COMP0_RESET = _u(@as(c_int, 0x00000000));
pub const M33_FP_COMP0_BE_RESET = _u(@as(c_int, 0x0));
pub const M33_FP_COMP0_BE_BITS = _u(@as(c_int, 0x00000001));
pub const M33_FP_COMP0_BE_MSB = _u(@as(c_int, 0));
pub const M33_FP_COMP0_BE_LSB = _u(@as(c_int, 0));
pub const M33_FP_COMP0_BE_ACCESS = "RW";
pub const M33_FP_COMP1_OFFSET = _u(@as(c_int, 0x0000200c));
pub const M33_FP_COMP1_BITS = _u(@as(c_int, 0x00000001));
pub const M33_FP_COMP1_RESET = _u(@as(c_int, 0x00000000));
pub const M33_FP_COMP1_BE_RESET = _u(@as(c_int, 0x0));
pub const M33_FP_COMP1_BE_BITS = _u(@as(c_int, 0x00000001));
pub const M33_FP_COMP1_BE_MSB = _u(@as(c_int, 0));
pub const M33_FP_COMP1_BE_LSB = _u(@as(c_int, 0));
pub const M33_FP_COMP1_BE_ACCESS = "RW";
pub const M33_FP_COMP2_OFFSET = _u(@as(c_int, 0x00002010));
pub const M33_FP_COMP2_BITS = _u(@as(c_int, 0x00000001));
pub const M33_FP_COMP2_RESET = _u(@as(c_int, 0x00000000));
pub const M33_FP_COMP2_BE_RESET = _u(@as(c_int, 0x0));
pub const M33_FP_COMP2_BE_BITS = _u(@as(c_int, 0x00000001));
pub const M33_FP_COMP2_BE_MSB = _u(@as(c_int, 0));
pub const M33_FP_COMP2_BE_LSB = _u(@as(c_int, 0));
pub const M33_FP_COMP2_BE_ACCESS = "RW";
pub const M33_FP_COMP3_OFFSET = _u(@as(c_int, 0x00002014));
pub const M33_FP_COMP3_BITS = _u(@as(c_int, 0x00000001));
pub const M33_FP_COMP3_RESET = _u(@as(c_int, 0x00000000));
pub const M33_FP_COMP3_BE_RESET = _u(@as(c_int, 0x0));
pub const M33_FP_COMP3_BE_BITS = _u(@as(c_int, 0x00000001));
pub const M33_FP_COMP3_BE_MSB = _u(@as(c_int, 0));
pub const M33_FP_COMP3_BE_LSB = _u(@as(c_int, 0));
pub const M33_FP_COMP3_BE_ACCESS = "RW";
pub const M33_FP_COMP4_OFFSET = _u(@as(c_int, 0x00002018));
pub const M33_FP_COMP4_BITS = _u(@as(c_int, 0x00000001));
pub const M33_FP_COMP4_RESET = _u(@as(c_int, 0x00000000));
pub const M33_FP_COMP4_BE_RESET = _u(@as(c_int, 0x0));
pub const M33_FP_COMP4_BE_BITS = _u(@as(c_int, 0x00000001));
pub const M33_FP_COMP4_BE_MSB = _u(@as(c_int, 0));
pub const M33_FP_COMP4_BE_LSB = _u(@as(c_int, 0));
pub const M33_FP_COMP4_BE_ACCESS = "RW";
pub const M33_FP_COMP5_OFFSET = _u(@as(c_int, 0x0000201c));
pub const M33_FP_COMP5_BITS = _u(@as(c_int, 0x00000001));
pub const M33_FP_COMP5_RESET = _u(@as(c_int, 0x00000000));
pub const M33_FP_COMP5_BE_RESET = _u(@as(c_int, 0x0));
pub const M33_FP_COMP5_BE_BITS = _u(@as(c_int, 0x00000001));
pub const M33_FP_COMP5_BE_MSB = _u(@as(c_int, 0));
pub const M33_FP_COMP5_BE_LSB = _u(@as(c_int, 0));
pub const M33_FP_COMP5_BE_ACCESS = "RW";
pub const M33_FP_COMP6_OFFSET = _u(@as(c_int, 0x00002020));
pub const M33_FP_COMP6_BITS = _u(@as(c_int, 0x00000001));
pub const M33_FP_COMP6_RESET = _u(@as(c_int, 0x00000000));
pub const M33_FP_COMP6_BE_RESET = _u(@as(c_int, 0x0));
pub const M33_FP_COMP6_BE_BITS = _u(@as(c_int, 0x00000001));
pub const M33_FP_COMP6_BE_MSB = _u(@as(c_int, 0));
pub const M33_FP_COMP6_BE_LSB = _u(@as(c_int, 0));
pub const M33_FP_COMP6_BE_ACCESS = "RW";
pub const M33_FP_COMP7_OFFSET = _u(@as(c_int, 0x00002024));
pub const M33_FP_COMP7_BITS = _u(@as(c_int, 0x00000001));
pub const M33_FP_COMP7_RESET = _u(@as(c_int, 0x00000000));
pub const M33_FP_COMP7_BE_RESET = _u(@as(c_int, 0x0));
pub const M33_FP_COMP7_BE_BITS = _u(@as(c_int, 0x00000001));
pub const M33_FP_COMP7_BE_MSB = _u(@as(c_int, 0));
pub const M33_FP_COMP7_BE_LSB = _u(@as(c_int, 0));
pub const M33_FP_COMP7_BE_ACCESS = "RW";
pub const M33_FP_DEVARCH_OFFSET = _u(@as(c_int, 0x00002fbc));
pub const M33_FP_DEVARCH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_FP_DEVARCH_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x47701a03, .hex));
pub const M33_FP_DEVARCH_ARCHITECT_RESET = _u(@as(c_int, 0x23b));
pub const M33_FP_DEVARCH_ARCHITECT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffe00000, .hex));
pub const M33_FP_DEVARCH_ARCHITECT_MSB = _u(@as(c_int, 31));
pub const M33_FP_DEVARCH_ARCHITECT_LSB = _u(@as(c_int, 21));
pub const M33_FP_DEVARCH_ARCHITECT_ACCESS = "RO";
pub const M33_FP_DEVARCH_PRESENT_RESET = _u(@as(c_int, 0x1));
pub const M33_FP_DEVARCH_PRESENT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const M33_FP_DEVARCH_PRESENT_MSB = _u(@as(c_int, 20));
pub const M33_FP_DEVARCH_PRESENT_LSB = _u(@as(c_int, 20));
pub const M33_FP_DEVARCH_PRESENT_ACCESS = "RO";
pub const M33_FP_DEVARCH_REVISION_RESET = _u(@as(c_int, 0x0));
pub const M33_FP_DEVARCH_REVISION_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hex));
pub const M33_FP_DEVARCH_REVISION_MSB = _u(@as(c_int, 19));
pub const M33_FP_DEVARCH_REVISION_LSB = _u(@as(c_int, 16));
pub const M33_FP_DEVARCH_REVISION_ACCESS = "RO";
pub const M33_FP_DEVARCH_ARCHVER_RESET = _u(@as(c_int, 0x1));
pub const M33_FP_DEVARCH_ARCHVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_FP_DEVARCH_ARCHVER_MSB = _u(@as(c_int, 15));
pub const M33_FP_DEVARCH_ARCHVER_LSB = _u(@as(c_int, 12));
pub const M33_FP_DEVARCH_ARCHVER_ACCESS = "RO";
pub const M33_FP_DEVARCH_ARCHPART_RESET = _u(@as(c_int, 0xa03));
pub const M33_FP_DEVARCH_ARCHPART_BITS = _u(@as(c_int, 0x00000fff));
pub const M33_FP_DEVARCH_ARCHPART_MSB = _u(@as(c_int, 11));
pub const M33_FP_DEVARCH_ARCHPART_LSB = _u(@as(c_int, 0));
pub const M33_FP_DEVARCH_ARCHPART_ACCESS = "RO";
pub const M33_FP_DEVTYPE_OFFSET = _u(@as(c_int, 0x00002fcc));
pub const M33_FP_DEVTYPE_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_FP_DEVTYPE_RESET = _u(@as(c_int, 0x00000000));
pub const M33_FP_DEVTYPE_SUB_RESET = _u(@as(c_int, 0x0));
pub const M33_FP_DEVTYPE_SUB_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_FP_DEVTYPE_SUB_MSB = _u(@as(c_int, 7));
pub const M33_FP_DEVTYPE_SUB_LSB = _u(@as(c_int, 4));
pub const M33_FP_DEVTYPE_SUB_ACCESS = "RO";
pub const M33_FP_DEVTYPE_MAJOR_RESET = _u(@as(c_int, 0x0));
pub const M33_FP_DEVTYPE_MAJOR_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_FP_DEVTYPE_MAJOR_MSB = _u(@as(c_int, 3));
pub const M33_FP_DEVTYPE_MAJOR_LSB = _u(@as(c_int, 0));
pub const M33_FP_DEVTYPE_MAJOR_ACCESS = "RO";
pub const M33_FP_PIDR4_OFFSET = _u(@as(c_int, 0x00002fd0));
pub const M33_FP_PIDR4_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_FP_PIDR4_RESET = _u(@as(c_int, 0x00000004));
pub const M33_FP_PIDR4_SIZE_RESET = _u(@as(c_int, 0x0));
pub const M33_FP_PIDR4_SIZE_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_FP_PIDR4_SIZE_MSB = _u(@as(c_int, 7));
pub const M33_FP_PIDR4_SIZE_LSB = _u(@as(c_int, 4));
pub const M33_FP_PIDR4_SIZE_ACCESS = "RO";
pub const M33_FP_PIDR4_DES_2_RESET = _u(@as(c_int, 0x4));
pub const M33_FP_PIDR4_DES_2_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_FP_PIDR4_DES_2_MSB = _u(@as(c_int, 3));
pub const M33_FP_PIDR4_DES_2_LSB = _u(@as(c_int, 0));
pub const M33_FP_PIDR4_DES_2_ACCESS = "RO";
pub const M33_FP_PIDR5_OFFSET = _u(@as(c_int, 0x00002fd4));
pub const M33_FP_PIDR5_BITS = _u(@as(c_int, 0x00000000));
pub const M33_FP_PIDR5_RESET = _u(@as(c_int, 0x00000000));
pub const M33_FP_PIDR5_MSB = _u(@as(c_int, 31));
pub const M33_FP_PIDR5_LSB = _u(@as(c_int, 0));
pub const M33_FP_PIDR5_ACCESS = "RW";
pub const M33_FP_PIDR6_OFFSET = _u(@as(c_int, 0x00002fd8));
pub const M33_FP_PIDR6_BITS = _u(@as(c_int, 0x00000000));
pub const M33_FP_PIDR6_RESET = _u(@as(c_int, 0x00000000));
pub const M33_FP_PIDR6_MSB = _u(@as(c_int, 31));
pub const M33_FP_PIDR6_LSB = _u(@as(c_int, 0));
pub const M33_FP_PIDR6_ACCESS = "RW";
pub const M33_FP_PIDR7_OFFSET = _u(@as(c_int, 0x00002fdc));
pub const M33_FP_PIDR7_BITS = _u(@as(c_int, 0x00000000));
pub const M33_FP_PIDR7_RESET = _u(@as(c_int, 0x00000000));
pub const M33_FP_PIDR7_MSB = _u(@as(c_int, 31));
pub const M33_FP_PIDR7_LSB = _u(@as(c_int, 0));
pub const M33_FP_PIDR7_ACCESS = "RW";
pub const M33_FP_PIDR0_OFFSET = _u(@as(c_int, 0x00002fe0));
pub const M33_FP_PIDR0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_FP_PIDR0_RESET = _u(@as(c_int, 0x00000021));
pub const M33_FP_PIDR0_PART_0_RESET = _u(@as(c_int, 0x21));
pub const M33_FP_PIDR0_PART_0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_FP_PIDR0_PART_0_MSB = _u(@as(c_int, 7));
pub const M33_FP_PIDR0_PART_0_LSB = _u(@as(c_int, 0));
pub const M33_FP_PIDR0_PART_0_ACCESS = "RO";
pub const M33_FP_PIDR1_OFFSET = _u(@as(c_int, 0x00002fe4));
pub const M33_FP_PIDR1_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_FP_PIDR1_RESET = _u(@as(c_int, 0x000000bd));
pub const M33_FP_PIDR1_DES_0_RESET = _u(@as(c_int, 0xb));
pub const M33_FP_PIDR1_DES_0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_FP_PIDR1_DES_0_MSB = _u(@as(c_int, 7));
pub const M33_FP_PIDR1_DES_0_LSB = _u(@as(c_int, 4));
pub const M33_FP_PIDR1_DES_0_ACCESS = "RO";
pub const M33_FP_PIDR1_PART_1_RESET = _u(@as(c_int, 0xd));
pub const M33_FP_PIDR1_PART_1_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_FP_PIDR1_PART_1_MSB = _u(@as(c_int, 3));
pub const M33_FP_PIDR1_PART_1_LSB = _u(@as(c_int, 0));
pub const M33_FP_PIDR1_PART_1_ACCESS = "RO";
pub const M33_FP_PIDR2_OFFSET = _u(@as(c_int, 0x00002fe8));
pub const M33_FP_PIDR2_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_FP_PIDR2_RESET = _u(@as(c_int, 0x0000000b));
pub const M33_FP_PIDR2_REVISION_RESET = _u(@as(c_int, 0x0));
pub const M33_FP_PIDR2_REVISION_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_FP_PIDR2_REVISION_MSB = _u(@as(c_int, 7));
pub const M33_FP_PIDR2_REVISION_LSB = _u(@as(c_int, 4));
pub const M33_FP_PIDR2_REVISION_ACCESS = "RO";
pub const M33_FP_PIDR2_JEDEC_RESET = _u(@as(c_int, 0x1));
pub const M33_FP_PIDR2_JEDEC_BITS = _u(@as(c_int, 0x00000008));
pub const M33_FP_PIDR2_JEDEC_MSB = _u(@as(c_int, 3));
pub const M33_FP_PIDR2_JEDEC_LSB = _u(@as(c_int, 3));
pub const M33_FP_PIDR2_JEDEC_ACCESS = "RO";
pub const M33_FP_PIDR2_DES_1_RESET = _u(@as(c_int, 0x3));
pub const M33_FP_PIDR2_DES_1_BITS = _u(@as(c_int, 0x00000007));
pub const M33_FP_PIDR2_DES_1_MSB = _u(@as(c_int, 2));
pub const M33_FP_PIDR2_DES_1_LSB = _u(@as(c_int, 0));
pub const M33_FP_PIDR2_DES_1_ACCESS = "RO";
pub const M33_FP_PIDR3_OFFSET = _u(@as(c_int, 0x00002fec));
pub const M33_FP_PIDR3_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_FP_PIDR3_RESET = _u(@as(c_int, 0x00000000));
pub const M33_FP_PIDR3_REVAND_RESET = _u(@as(c_int, 0x0));
pub const M33_FP_PIDR3_REVAND_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_FP_PIDR3_REVAND_MSB = _u(@as(c_int, 7));
pub const M33_FP_PIDR3_REVAND_LSB = _u(@as(c_int, 4));
pub const M33_FP_PIDR3_REVAND_ACCESS = "RO";
pub const M33_FP_PIDR3_CMOD_RESET = _u(@as(c_int, 0x0));
pub const M33_FP_PIDR3_CMOD_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_FP_PIDR3_CMOD_MSB = _u(@as(c_int, 3));
pub const M33_FP_PIDR3_CMOD_LSB = _u(@as(c_int, 0));
pub const M33_FP_PIDR3_CMOD_ACCESS = "RO";
pub const M33_FP_CIDR0_OFFSET = _u(@as(c_int, 0x00002ff0));
pub const M33_FP_CIDR0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_FP_CIDR0_RESET = _u(@as(c_int, 0x0000000d));
pub const M33_FP_CIDR0_PRMBL_0_RESET = _u(@as(c_int, 0x0d));
pub const M33_FP_CIDR0_PRMBL_0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_FP_CIDR0_PRMBL_0_MSB = _u(@as(c_int, 7));
pub const M33_FP_CIDR0_PRMBL_0_LSB = _u(@as(c_int, 0));
pub const M33_FP_CIDR0_PRMBL_0_ACCESS = "RO";
pub const M33_FP_CIDR1_OFFSET = _u(@as(c_int, 0x00002ff4));
pub const M33_FP_CIDR1_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_FP_CIDR1_RESET = _u(@as(c_int, 0x00000090));
pub const M33_FP_CIDR1_CLASS_RESET = _u(@as(c_int, 0x9));
pub const M33_FP_CIDR1_CLASS_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_FP_CIDR1_CLASS_MSB = _u(@as(c_int, 7));
pub const M33_FP_CIDR1_CLASS_LSB = _u(@as(c_int, 4));
pub const M33_FP_CIDR1_CLASS_ACCESS = "RO";
pub const M33_FP_CIDR1_PRMBL_1_RESET = _u(@as(c_int, 0x0));
pub const M33_FP_CIDR1_PRMBL_1_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_FP_CIDR1_PRMBL_1_MSB = _u(@as(c_int, 3));
pub const M33_FP_CIDR1_PRMBL_1_LSB = _u(@as(c_int, 0));
pub const M33_FP_CIDR1_PRMBL_1_ACCESS = "RO";
pub const M33_FP_CIDR2_OFFSET = _u(@as(c_int, 0x00002ff8));
pub const M33_FP_CIDR2_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_FP_CIDR2_RESET = _u(@as(c_int, 0x00000005));
pub const M33_FP_CIDR2_PRMBL_2_RESET = _u(@as(c_int, 0x05));
pub const M33_FP_CIDR2_PRMBL_2_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_FP_CIDR2_PRMBL_2_MSB = _u(@as(c_int, 7));
pub const M33_FP_CIDR2_PRMBL_2_LSB = _u(@as(c_int, 0));
pub const M33_FP_CIDR2_PRMBL_2_ACCESS = "RO";
pub const M33_FP_CIDR3_OFFSET = _u(@as(c_int, 0x00002ffc));
pub const M33_FP_CIDR3_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_FP_CIDR3_RESET = _u(@as(c_int, 0x000000b1));
pub const M33_FP_CIDR3_PRMBL_3_RESET = _u(@as(c_int, 0xb1));
pub const M33_FP_CIDR3_PRMBL_3_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_FP_CIDR3_PRMBL_3_MSB = _u(@as(c_int, 7));
pub const M33_FP_CIDR3_PRMBL_3_LSB = _u(@as(c_int, 0));
pub const M33_FP_CIDR3_PRMBL_3_ACCESS = "RO";
pub const M33_ICTR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e004, .hex));
pub const M33_ICTR_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_ICTR_RESET = _u(@as(c_int, 0x00000001));
pub const M33_ICTR_INTLINESNUM_RESET = _u(@as(c_int, 0x1));
pub const M33_ICTR_INTLINESNUM_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_ICTR_INTLINESNUM_MSB = _u(@as(c_int, 3));
pub const M33_ICTR_INTLINESNUM_LSB = _u(@as(c_int, 0));
pub const M33_ICTR_INTLINESNUM_ACCESS = "RO";
pub const M33_ACTLR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e008, .hex));
pub const M33_ACTLR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20001605, .hex));
pub const M33_ACTLR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ACTLR_EXTEXCLALL_RESET = _u(@as(c_int, 0x0));
pub const M33_ACTLR_EXTEXCLALL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const M33_ACTLR_EXTEXCLALL_MSB = _u(@as(c_int, 29));
pub const M33_ACTLR_EXTEXCLALL_LSB = _u(@as(c_int, 29));
pub const M33_ACTLR_EXTEXCLALL_ACCESS = "RW";
pub const M33_ACTLR_DISITMATBFLUSH_RESET = _u(@as(c_int, 0x0));
pub const M33_ACTLR_DISITMATBFLUSH_BITS = _u(@as(c_int, 0x00001000));
pub const M33_ACTLR_DISITMATBFLUSH_MSB = _u(@as(c_int, 12));
pub const M33_ACTLR_DISITMATBFLUSH_LSB = _u(@as(c_int, 12));
pub const M33_ACTLR_DISITMATBFLUSH_ACCESS = "RW";
pub const M33_ACTLR_FPEXCODIS_RESET = _u(@as(c_int, 0x0));
pub const M33_ACTLR_FPEXCODIS_BITS = _u(@as(c_int, 0x00000400));
pub const M33_ACTLR_FPEXCODIS_MSB = _u(@as(c_int, 10));
pub const M33_ACTLR_FPEXCODIS_LSB = _u(@as(c_int, 10));
pub const M33_ACTLR_FPEXCODIS_ACCESS = "RW";
pub const M33_ACTLR_DISOOFP_RESET = _u(@as(c_int, 0x0));
pub const M33_ACTLR_DISOOFP_BITS = _u(@as(c_int, 0x00000200));
pub const M33_ACTLR_DISOOFP_MSB = _u(@as(c_int, 9));
pub const M33_ACTLR_DISOOFP_LSB = _u(@as(c_int, 9));
pub const M33_ACTLR_DISOOFP_ACCESS = "RW";
pub const M33_ACTLR_DISFOLD_RESET = _u(@as(c_int, 0x0));
pub const M33_ACTLR_DISFOLD_BITS = _u(@as(c_int, 0x00000004));
pub const M33_ACTLR_DISFOLD_MSB = _u(@as(c_int, 2));
pub const M33_ACTLR_DISFOLD_LSB = _u(@as(c_int, 2));
pub const M33_ACTLR_DISFOLD_ACCESS = "RW";
pub const M33_ACTLR_DISMCYCINT_RESET = _u(@as(c_int, 0x0));
pub const M33_ACTLR_DISMCYCINT_BITS = _u(@as(c_int, 0x00000001));
pub const M33_ACTLR_DISMCYCINT_MSB = _u(@as(c_int, 0));
pub const M33_ACTLR_DISMCYCINT_LSB = _u(@as(c_int, 0));
pub const M33_ACTLR_DISMCYCINT_ACCESS = "RW";
pub const M33_SYST_CSR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e010, .hex));
pub const M33_SYST_CSR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010007, .hex));
pub const M33_SYST_CSR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_SYST_CSR_COUNTFLAG_RESET = _u(@as(c_int, 0x0));
pub const M33_SYST_CSR_COUNTFLAG_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const M33_SYST_CSR_COUNTFLAG_MSB = _u(@as(c_int, 16));
pub const M33_SYST_CSR_COUNTFLAG_LSB = _u(@as(c_int, 16));
pub const M33_SYST_CSR_COUNTFLAG_ACCESS = "RO";
pub const M33_SYST_CSR_CLKSOURCE_RESET = _u(@as(c_int, 0x0));
pub const M33_SYST_CSR_CLKSOURCE_BITS = _u(@as(c_int, 0x00000004));
pub const M33_SYST_CSR_CLKSOURCE_MSB = _u(@as(c_int, 2));
pub const M33_SYST_CSR_CLKSOURCE_LSB = _u(@as(c_int, 2));
pub const M33_SYST_CSR_CLKSOURCE_ACCESS = "RW";
pub const M33_SYST_CSR_TICKINT_RESET = _u(@as(c_int, 0x0));
pub const M33_SYST_CSR_TICKINT_BITS = _u(@as(c_int, 0x00000002));
pub const M33_SYST_CSR_TICKINT_MSB = _u(@as(c_int, 1));
pub const M33_SYST_CSR_TICKINT_LSB = _u(@as(c_int, 1));
pub const M33_SYST_CSR_TICKINT_ACCESS = "RW";
pub const M33_SYST_CSR_ENABLE_RESET = _u(@as(c_int, 0x0));
pub const M33_SYST_CSR_ENABLE_BITS = _u(@as(c_int, 0x00000001));
pub const M33_SYST_CSR_ENABLE_MSB = _u(@as(c_int, 0));
pub const M33_SYST_CSR_ENABLE_LSB = _u(@as(c_int, 0));
pub const M33_SYST_CSR_ENABLE_ACCESS = "RW";
pub const M33_SYST_RVR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e014, .hex));
pub const M33_SYST_RVR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hex));
pub const M33_SYST_RVR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_SYST_RVR_RELOAD_RESET = _u(@as(c_int, 0x000000));
pub const M33_SYST_RVR_RELOAD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hex));
pub const M33_SYST_RVR_RELOAD_MSB = _u(@as(c_int, 23));
pub const M33_SYST_RVR_RELOAD_LSB = _u(@as(c_int, 0));
pub const M33_SYST_RVR_RELOAD_ACCESS = "RW";
pub const M33_SYST_CVR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e018, .hex));
pub const M33_SYST_CVR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hex));
pub const M33_SYST_CVR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_SYST_CVR_CURRENT_RESET = _u(@as(c_int, 0x000000));
pub const M33_SYST_CVR_CURRENT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hex));
pub const M33_SYST_CVR_CURRENT_MSB = _u(@as(c_int, 23));
pub const M33_SYST_CVR_CURRENT_LSB = _u(@as(c_int, 0));
pub const M33_SYST_CVR_CURRENT_ACCESS = "RW";
pub const M33_SYST_CALIB_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e01c, .hex));
pub const M33_SYST_CALIB_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0ffffff, .hex));
pub const M33_SYST_CALIB_RESET = _u(@as(c_int, 0x00000000));
pub const M33_SYST_CALIB_NOREF_RESET = _u(@as(c_int, 0x0));
pub const M33_SYST_CALIB_NOREF_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const M33_SYST_CALIB_NOREF_MSB = _u(@as(c_int, 31));
pub const M33_SYST_CALIB_NOREF_LSB = _u(@as(c_int, 31));
pub const M33_SYST_CALIB_NOREF_ACCESS = "RO";
pub const M33_SYST_CALIB_SKEW_RESET = _u(@as(c_int, 0x0));
pub const M33_SYST_CALIB_SKEW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const M33_SYST_CALIB_SKEW_MSB = _u(@as(c_int, 30));
pub const M33_SYST_CALIB_SKEW_LSB = _u(@as(c_int, 30));
pub const M33_SYST_CALIB_SKEW_ACCESS = "RO";
pub const M33_SYST_CALIB_TENMS_RESET = _u(@as(c_int, 0x000000));
pub const M33_SYST_CALIB_TENMS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ffffff, .hex));
pub const M33_SYST_CALIB_TENMS_MSB = _u(@as(c_int, 23));
pub const M33_SYST_CALIB_TENMS_LSB = _u(@as(c_int, 0));
pub const M33_SYST_CALIB_TENMS_ACCESS = "RO";
pub const M33_NVIC_ISER0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e100, .hex));
pub const M33_NVIC_ISER0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_ISER0_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_ISER0_SETENA_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_ISER0_SETENA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_ISER0_SETENA_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_ISER0_SETENA_LSB = _u(@as(c_int, 0));
pub const M33_NVIC_ISER0_SETENA_ACCESS = "RW";
pub const M33_NVIC_ISER1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e104, .hex));
pub const M33_NVIC_ISER1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_ISER1_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_ISER1_SETENA_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_ISER1_SETENA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_ISER1_SETENA_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_ISER1_SETENA_LSB = _u(@as(c_int, 0));
pub const M33_NVIC_ISER1_SETENA_ACCESS = "RW";
pub const M33_NVIC_ICER0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e180, .hex));
pub const M33_NVIC_ICER0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_ICER0_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_ICER0_CLRENA_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_ICER0_CLRENA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_ICER0_CLRENA_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_ICER0_CLRENA_LSB = _u(@as(c_int, 0));
pub const M33_NVIC_ICER0_CLRENA_ACCESS = "RW";
pub const M33_NVIC_ICER1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e184, .hex));
pub const M33_NVIC_ICER1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_ICER1_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_ICER1_CLRENA_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_ICER1_CLRENA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_ICER1_CLRENA_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_ICER1_CLRENA_LSB = _u(@as(c_int, 0));
pub const M33_NVIC_ICER1_CLRENA_ACCESS = "RW";
pub const M33_NVIC_ISPR0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e200, .hex));
pub const M33_NVIC_ISPR0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_ISPR0_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_ISPR0_SETPEND_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_ISPR0_SETPEND_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_ISPR0_SETPEND_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_ISPR0_SETPEND_LSB = _u(@as(c_int, 0));
pub const M33_NVIC_ISPR0_SETPEND_ACCESS = "RW";
pub const M33_NVIC_ISPR1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e204, .hex));
pub const M33_NVIC_ISPR1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_ISPR1_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_ISPR1_SETPEND_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_ISPR1_SETPEND_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_ISPR1_SETPEND_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_ISPR1_SETPEND_LSB = _u(@as(c_int, 0));
pub const M33_NVIC_ISPR1_SETPEND_ACCESS = "RW";
pub const M33_NVIC_ICPR0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e280, .hex));
pub const M33_NVIC_ICPR0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_ICPR0_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_ICPR0_CLRPEND_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_ICPR0_CLRPEND_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_ICPR0_CLRPEND_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_ICPR0_CLRPEND_LSB = _u(@as(c_int, 0));
pub const M33_NVIC_ICPR0_CLRPEND_ACCESS = "RW";
pub const M33_NVIC_ICPR1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e284, .hex));
pub const M33_NVIC_ICPR1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_ICPR1_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_ICPR1_CLRPEND_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_ICPR1_CLRPEND_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_ICPR1_CLRPEND_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_ICPR1_CLRPEND_LSB = _u(@as(c_int, 0));
pub const M33_NVIC_ICPR1_CLRPEND_ACCESS = "RW";
pub const M33_NVIC_IABR0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e300, .hex));
pub const M33_NVIC_IABR0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_IABR0_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_IABR0_ACTIVE_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_IABR0_ACTIVE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_IABR0_ACTIVE_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_IABR0_ACTIVE_LSB = _u(@as(c_int, 0));
pub const M33_NVIC_IABR0_ACTIVE_ACCESS = "RW";
pub const M33_NVIC_IABR1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e304, .hex));
pub const M33_NVIC_IABR1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_IABR1_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_IABR1_ACTIVE_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_IABR1_ACTIVE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_IABR1_ACTIVE_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_IABR1_ACTIVE_LSB = _u(@as(c_int, 0));
pub const M33_NVIC_IABR1_ACTIVE_ACCESS = "RW";
pub const M33_NVIC_ITNS0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e380, .hex));
pub const M33_NVIC_ITNS0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_ITNS0_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_ITNS0_ITNS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_ITNS0_ITNS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_ITNS0_ITNS_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_ITNS0_ITNS_LSB = _u(@as(c_int, 0));
pub const M33_NVIC_ITNS0_ITNS_ACCESS = "RW";
pub const M33_NVIC_ITNS1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e384, .hex));
pub const M33_NVIC_ITNS1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_ITNS1_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_ITNS1_ITNS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_ITNS1_ITNS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_NVIC_ITNS1_ITNS_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_ITNS1_ITNS_LSB = _u(@as(c_int, 0));
pub const M33_NVIC_ITNS1_ITNS_ACCESS = "RW";
pub const M33_NVIC_IPR0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e400, .hex));
pub const M33_NVIC_IPR0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0f0f0f0, .hex));
pub const M33_NVIC_IPR0_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_IPR0_PRI_N3_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR0_PRI_N3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_NVIC_IPR0_PRI_N3_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_IPR0_PRI_N3_LSB = _u(@as(c_int, 28));
pub const M33_NVIC_IPR0_PRI_N3_ACCESS = "RW";
pub const M33_NVIC_IPR0_PRI_N2_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR0_PRI_N2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_NVIC_IPR0_PRI_N2_MSB = _u(@as(c_int, 23));
pub const M33_NVIC_IPR0_PRI_N2_LSB = _u(@as(c_int, 20));
pub const M33_NVIC_IPR0_PRI_N2_ACCESS = "RW";
pub const M33_NVIC_IPR0_PRI_N1_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR0_PRI_N1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_NVIC_IPR0_PRI_N1_MSB = _u(@as(c_int, 15));
pub const M33_NVIC_IPR0_PRI_N1_LSB = _u(@as(c_int, 12));
pub const M33_NVIC_IPR0_PRI_N1_ACCESS = "RW";
pub const M33_NVIC_IPR0_PRI_N0_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR0_PRI_N0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_NVIC_IPR0_PRI_N0_MSB = _u(@as(c_int, 7));
pub const M33_NVIC_IPR0_PRI_N0_LSB = _u(@as(c_int, 4));
pub const M33_NVIC_IPR0_PRI_N0_ACCESS = "RW";
pub const M33_NVIC_IPR1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e404, .hex));
pub const M33_NVIC_IPR1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0f0f0f0, .hex));
pub const M33_NVIC_IPR1_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_IPR1_PRI_N3_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR1_PRI_N3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_NVIC_IPR1_PRI_N3_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_IPR1_PRI_N3_LSB = _u(@as(c_int, 28));
pub const M33_NVIC_IPR1_PRI_N3_ACCESS = "RW";
pub const M33_NVIC_IPR1_PRI_N2_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR1_PRI_N2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_NVIC_IPR1_PRI_N2_MSB = _u(@as(c_int, 23));
pub const M33_NVIC_IPR1_PRI_N2_LSB = _u(@as(c_int, 20));
pub const M33_NVIC_IPR1_PRI_N2_ACCESS = "RW";
pub const M33_NVIC_IPR1_PRI_N1_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR1_PRI_N1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_NVIC_IPR1_PRI_N1_MSB = _u(@as(c_int, 15));
pub const M33_NVIC_IPR1_PRI_N1_LSB = _u(@as(c_int, 12));
pub const M33_NVIC_IPR1_PRI_N1_ACCESS = "RW";
pub const M33_NVIC_IPR1_PRI_N0_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR1_PRI_N0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_NVIC_IPR1_PRI_N0_MSB = _u(@as(c_int, 7));
pub const M33_NVIC_IPR1_PRI_N0_LSB = _u(@as(c_int, 4));
pub const M33_NVIC_IPR1_PRI_N0_ACCESS = "RW";
pub const M33_NVIC_IPR2_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e408, .hex));
pub const M33_NVIC_IPR2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0f0f0f0, .hex));
pub const M33_NVIC_IPR2_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_IPR2_PRI_N3_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR2_PRI_N3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_NVIC_IPR2_PRI_N3_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_IPR2_PRI_N3_LSB = _u(@as(c_int, 28));
pub const M33_NVIC_IPR2_PRI_N3_ACCESS = "RW";
pub const M33_NVIC_IPR2_PRI_N2_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR2_PRI_N2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_NVIC_IPR2_PRI_N2_MSB = _u(@as(c_int, 23));
pub const M33_NVIC_IPR2_PRI_N2_LSB = _u(@as(c_int, 20));
pub const M33_NVIC_IPR2_PRI_N2_ACCESS = "RW";
pub const M33_NVIC_IPR2_PRI_N1_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR2_PRI_N1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_NVIC_IPR2_PRI_N1_MSB = _u(@as(c_int, 15));
pub const M33_NVIC_IPR2_PRI_N1_LSB = _u(@as(c_int, 12));
pub const M33_NVIC_IPR2_PRI_N1_ACCESS = "RW";
pub const M33_NVIC_IPR2_PRI_N0_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR2_PRI_N0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_NVIC_IPR2_PRI_N0_MSB = _u(@as(c_int, 7));
pub const M33_NVIC_IPR2_PRI_N0_LSB = _u(@as(c_int, 4));
pub const M33_NVIC_IPR2_PRI_N0_ACCESS = "RW";
pub const M33_NVIC_IPR3_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e40c, .hex));
pub const M33_NVIC_IPR3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0f0f0f0, .hex));
pub const M33_NVIC_IPR3_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_IPR3_PRI_N3_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR3_PRI_N3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_NVIC_IPR3_PRI_N3_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_IPR3_PRI_N3_LSB = _u(@as(c_int, 28));
pub const M33_NVIC_IPR3_PRI_N3_ACCESS = "RW";
pub const M33_NVIC_IPR3_PRI_N2_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR3_PRI_N2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_NVIC_IPR3_PRI_N2_MSB = _u(@as(c_int, 23));
pub const M33_NVIC_IPR3_PRI_N2_LSB = _u(@as(c_int, 20));
pub const M33_NVIC_IPR3_PRI_N2_ACCESS = "RW";
pub const M33_NVIC_IPR3_PRI_N1_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR3_PRI_N1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_NVIC_IPR3_PRI_N1_MSB = _u(@as(c_int, 15));
pub const M33_NVIC_IPR3_PRI_N1_LSB = _u(@as(c_int, 12));
pub const M33_NVIC_IPR3_PRI_N1_ACCESS = "RW";
pub const M33_NVIC_IPR3_PRI_N0_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR3_PRI_N0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_NVIC_IPR3_PRI_N0_MSB = _u(@as(c_int, 7));
pub const M33_NVIC_IPR3_PRI_N0_LSB = _u(@as(c_int, 4));
pub const M33_NVIC_IPR3_PRI_N0_ACCESS = "RW";
pub const M33_NVIC_IPR4_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e410, .hex));
pub const M33_NVIC_IPR4_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0f0f0f0, .hex));
pub const M33_NVIC_IPR4_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_IPR4_PRI_N3_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR4_PRI_N3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_NVIC_IPR4_PRI_N3_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_IPR4_PRI_N3_LSB = _u(@as(c_int, 28));
pub const M33_NVIC_IPR4_PRI_N3_ACCESS = "RW";
pub const M33_NVIC_IPR4_PRI_N2_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR4_PRI_N2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_NVIC_IPR4_PRI_N2_MSB = _u(@as(c_int, 23));
pub const M33_NVIC_IPR4_PRI_N2_LSB = _u(@as(c_int, 20));
pub const M33_NVIC_IPR4_PRI_N2_ACCESS = "RW";
pub const M33_NVIC_IPR4_PRI_N1_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR4_PRI_N1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_NVIC_IPR4_PRI_N1_MSB = _u(@as(c_int, 15));
pub const M33_NVIC_IPR4_PRI_N1_LSB = _u(@as(c_int, 12));
pub const M33_NVIC_IPR4_PRI_N1_ACCESS = "RW";
pub const M33_NVIC_IPR4_PRI_N0_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR4_PRI_N0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_NVIC_IPR4_PRI_N0_MSB = _u(@as(c_int, 7));
pub const M33_NVIC_IPR4_PRI_N0_LSB = _u(@as(c_int, 4));
pub const M33_NVIC_IPR4_PRI_N0_ACCESS = "RW";
pub const M33_NVIC_IPR5_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e414, .hex));
pub const M33_NVIC_IPR5_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0f0f0f0, .hex));
pub const M33_NVIC_IPR5_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_IPR5_PRI_N3_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR5_PRI_N3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_NVIC_IPR5_PRI_N3_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_IPR5_PRI_N3_LSB = _u(@as(c_int, 28));
pub const M33_NVIC_IPR5_PRI_N3_ACCESS = "RW";
pub const M33_NVIC_IPR5_PRI_N2_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR5_PRI_N2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_NVIC_IPR5_PRI_N2_MSB = _u(@as(c_int, 23));
pub const M33_NVIC_IPR5_PRI_N2_LSB = _u(@as(c_int, 20));
pub const M33_NVIC_IPR5_PRI_N2_ACCESS = "RW";
pub const M33_NVIC_IPR5_PRI_N1_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR5_PRI_N1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_NVIC_IPR5_PRI_N1_MSB = _u(@as(c_int, 15));
pub const M33_NVIC_IPR5_PRI_N1_LSB = _u(@as(c_int, 12));
pub const M33_NVIC_IPR5_PRI_N1_ACCESS = "RW";
pub const M33_NVIC_IPR5_PRI_N0_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR5_PRI_N0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_NVIC_IPR5_PRI_N0_MSB = _u(@as(c_int, 7));
pub const M33_NVIC_IPR5_PRI_N0_LSB = _u(@as(c_int, 4));
pub const M33_NVIC_IPR5_PRI_N0_ACCESS = "RW";
pub const M33_NVIC_IPR6_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e418, .hex));
pub const M33_NVIC_IPR6_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0f0f0f0, .hex));
pub const M33_NVIC_IPR6_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_IPR6_PRI_N3_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR6_PRI_N3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_NVIC_IPR6_PRI_N3_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_IPR6_PRI_N3_LSB = _u(@as(c_int, 28));
pub const M33_NVIC_IPR6_PRI_N3_ACCESS = "RW";
pub const M33_NVIC_IPR6_PRI_N2_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR6_PRI_N2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_NVIC_IPR6_PRI_N2_MSB = _u(@as(c_int, 23));
pub const M33_NVIC_IPR6_PRI_N2_LSB = _u(@as(c_int, 20));
pub const M33_NVIC_IPR6_PRI_N2_ACCESS = "RW";
pub const M33_NVIC_IPR6_PRI_N1_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR6_PRI_N1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_NVIC_IPR6_PRI_N1_MSB = _u(@as(c_int, 15));
pub const M33_NVIC_IPR6_PRI_N1_LSB = _u(@as(c_int, 12));
pub const M33_NVIC_IPR6_PRI_N1_ACCESS = "RW";
pub const M33_NVIC_IPR6_PRI_N0_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR6_PRI_N0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_NVIC_IPR6_PRI_N0_MSB = _u(@as(c_int, 7));
pub const M33_NVIC_IPR6_PRI_N0_LSB = _u(@as(c_int, 4));
pub const M33_NVIC_IPR6_PRI_N0_ACCESS = "RW";
pub const M33_NVIC_IPR7_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e41c, .hex));
pub const M33_NVIC_IPR7_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0f0f0f0, .hex));
pub const M33_NVIC_IPR7_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_IPR7_PRI_N3_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR7_PRI_N3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_NVIC_IPR7_PRI_N3_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_IPR7_PRI_N3_LSB = _u(@as(c_int, 28));
pub const M33_NVIC_IPR7_PRI_N3_ACCESS = "RW";
pub const M33_NVIC_IPR7_PRI_N2_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR7_PRI_N2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_NVIC_IPR7_PRI_N2_MSB = _u(@as(c_int, 23));
pub const M33_NVIC_IPR7_PRI_N2_LSB = _u(@as(c_int, 20));
pub const M33_NVIC_IPR7_PRI_N2_ACCESS = "RW";
pub const M33_NVIC_IPR7_PRI_N1_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR7_PRI_N1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_NVIC_IPR7_PRI_N1_MSB = _u(@as(c_int, 15));
pub const M33_NVIC_IPR7_PRI_N1_LSB = _u(@as(c_int, 12));
pub const M33_NVIC_IPR7_PRI_N1_ACCESS = "RW";
pub const M33_NVIC_IPR7_PRI_N0_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR7_PRI_N0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_NVIC_IPR7_PRI_N0_MSB = _u(@as(c_int, 7));
pub const M33_NVIC_IPR7_PRI_N0_LSB = _u(@as(c_int, 4));
pub const M33_NVIC_IPR7_PRI_N0_ACCESS = "RW";
pub const M33_NVIC_IPR8_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e420, .hex));
pub const M33_NVIC_IPR8_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0f0f0f0, .hex));
pub const M33_NVIC_IPR8_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_IPR8_PRI_N3_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR8_PRI_N3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_NVIC_IPR8_PRI_N3_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_IPR8_PRI_N3_LSB = _u(@as(c_int, 28));
pub const M33_NVIC_IPR8_PRI_N3_ACCESS = "RW";
pub const M33_NVIC_IPR8_PRI_N2_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR8_PRI_N2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_NVIC_IPR8_PRI_N2_MSB = _u(@as(c_int, 23));
pub const M33_NVIC_IPR8_PRI_N2_LSB = _u(@as(c_int, 20));
pub const M33_NVIC_IPR8_PRI_N2_ACCESS = "RW";
pub const M33_NVIC_IPR8_PRI_N1_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR8_PRI_N1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_NVIC_IPR8_PRI_N1_MSB = _u(@as(c_int, 15));
pub const M33_NVIC_IPR8_PRI_N1_LSB = _u(@as(c_int, 12));
pub const M33_NVIC_IPR8_PRI_N1_ACCESS = "RW";
pub const M33_NVIC_IPR8_PRI_N0_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR8_PRI_N0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_NVIC_IPR8_PRI_N0_MSB = _u(@as(c_int, 7));
pub const M33_NVIC_IPR8_PRI_N0_LSB = _u(@as(c_int, 4));
pub const M33_NVIC_IPR8_PRI_N0_ACCESS = "RW";
pub const M33_NVIC_IPR9_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e424, .hex));
pub const M33_NVIC_IPR9_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0f0f0f0, .hex));
pub const M33_NVIC_IPR9_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_IPR9_PRI_N3_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR9_PRI_N3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_NVIC_IPR9_PRI_N3_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_IPR9_PRI_N3_LSB = _u(@as(c_int, 28));
pub const M33_NVIC_IPR9_PRI_N3_ACCESS = "RW";
pub const M33_NVIC_IPR9_PRI_N2_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR9_PRI_N2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_NVIC_IPR9_PRI_N2_MSB = _u(@as(c_int, 23));
pub const M33_NVIC_IPR9_PRI_N2_LSB = _u(@as(c_int, 20));
pub const M33_NVIC_IPR9_PRI_N2_ACCESS = "RW";
pub const M33_NVIC_IPR9_PRI_N1_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR9_PRI_N1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_NVIC_IPR9_PRI_N1_MSB = _u(@as(c_int, 15));
pub const M33_NVIC_IPR9_PRI_N1_LSB = _u(@as(c_int, 12));
pub const M33_NVIC_IPR9_PRI_N1_ACCESS = "RW";
pub const M33_NVIC_IPR9_PRI_N0_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR9_PRI_N0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_NVIC_IPR9_PRI_N0_MSB = _u(@as(c_int, 7));
pub const M33_NVIC_IPR9_PRI_N0_LSB = _u(@as(c_int, 4));
pub const M33_NVIC_IPR9_PRI_N0_ACCESS = "RW";
pub const M33_NVIC_IPR10_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e428, .hex));
pub const M33_NVIC_IPR10_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0f0f0f0, .hex));
pub const M33_NVIC_IPR10_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_IPR10_PRI_N3_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR10_PRI_N3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_NVIC_IPR10_PRI_N3_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_IPR10_PRI_N3_LSB = _u(@as(c_int, 28));
pub const M33_NVIC_IPR10_PRI_N3_ACCESS = "RW";
pub const M33_NVIC_IPR10_PRI_N2_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR10_PRI_N2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_NVIC_IPR10_PRI_N2_MSB = _u(@as(c_int, 23));
pub const M33_NVIC_IPR10_PRI_N2_LSB = _u(@as(c_int, 20));
pub const M33_NVIC_IPR10_PRI_N2_ACCESS = "RW";
pub const M33_NVIC_IPR10_PRI_N1_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR10_PRI_N1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_NVIC_IPR10_PRI_N1_MSB = _u(@as(c_int, 15));
pub const M33_NVIC_IPR10_PRI_N1_LSB = _u(@as(c_int, 12));
pub const M33_NVIC_IPR10_PRI_N1_ACCESS = "RW";
pub const M33_NVIC_IPR10_PRI_N0_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR10_PRI_N0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_NVIC_IPR10_PRI_N0_MSB = _u(@as(c_int, 7));
pub const M33_NVIC_IPR10_PRI_N0_LSB = _u(@as(c_int, 4));
pub const M33_NVIC_IPR10_PRI_N0_ACCESS = "RW";
pub const M33_NVIC_IPR11_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e42c, .hex));
pub const M33_NVIC_IPR11_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0f0f0f0, .hex));
pub const M33_NVIC_IPR11_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_IPR11_PRI_N3_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR11_PRI_N3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_NVIC_IPR11_PRI_N3_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_IPR11_PRI_N3_LSB = _u(@as(c_int, 28));
pub const M33_NVIC_IPR11_PRI_N3_ACCESS = "RW";
pub const M33_NVIC_IPR11_PRI_N2_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR11_PRI_N2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_NVIC_IPR11_PRI_N2_MSB = _u(@as(c_int, 23));
pub const M33_NVIC_IPR11_PRI_N2_LSB = _u(@as(c_int, 20));
pub const M33_NVIC_IPR11_PRI_N2_ACCESS = "RW";
pub const M33_NVIC_IPR11_PRI_N1_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR11_PRI_N1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_NVIC_IPR11_PRI_N1_MSB = _u(@as(c_int, 15));
pub const M33_NVIC_IPR11_PRI_N1_LSB = _u(@as(c_int, 12));
pub const M33_NVIC_IPR11_PRI_N1_ACCESS = "RW";
pub const M33_NVIC_IPR11_PRI_N0_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR11_PRI_N0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_NVIC_IPR11_PRI_N0_MSB = _u(@as(c_int, 7));
pub const M33_NVIC_IPR11_PRI_N0_LSB = _u(@as(c_int, 4));
pub const M33_NVIC_IPR11_PRI_N0_ACCESS = "RW";
pub const M33_NVIC_IPR12_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e430, .hex));
pub const M33_NVIC_IPR12_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0f0f0f0, .hex));
pub const M33_NVIC_IPR12_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_IPR12_PRI_N3_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR12_PRI_N3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_NVIC_IPR12_PRI_N3_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_IPR12_PRI_N3_LSB = _u(@as(c_int, 28));
pub const M33_NVIC_IPR12_PRI_N3_ACCESS = "RW";
pub const M33_NVIC_IPR12_PRI_N2_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR12_PRI_N2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_NVIC_IPR12_PRI_N2_MSB = _u(@as(c_int, 23));
pub const M33_NVIC_IPR12_PRI_N2_LSB = _u(@as(c_int, 20));
pub const M33_NVIC_IPR12_PRI_N2_ACCESS = "RW";
pub const M33_NVIC_IPR12_PRI_N1_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR12_PRI_N1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_NVIC_IPR12_PRI_N1_MSB = _u(@as(c_int, 15));
pub const M33_NVIC_IPR12_PRI_N1_LSB = _u(@as(c_int, 12));
pub const M33_NVIC_IPR12_PRI_N1_ACCESS = "RW";
pub const M33_NVIC_IPR12_PRI_N0_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR12_PRI_N0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_NVIC_IPR12_PRI_N0_MSB = _u(@as(c_int, 7));
pub const M33_NVIC_IPR12_PRI_N0_LSB = _u(@as(c_int, 4));
pub const M33_NVIC_IPR12_PRI_N0_ACCESS = "RW";
pub const M33_NVIC_IPR13_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e434, .hex));
pub const M33_NVIC_IPR13_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0f0f0f0, .hex));
pub const M33_NVIC_IPR13_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_IPR13_PRI_N3_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR13_PRI_N3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_NVIC_IPR13_PRI_N3_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_IPR13_PRI_N3_LSB = _u(@as(c_int, 28));
pub const M33_NVIC_IPR13_PRI_N3_ACCESS = "RW";
pub const M33_NVIC_IPR13_PRI_N2_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR13_PRI_N2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_NVIC_IPR13_PRI_N2_MSB = _u(@as(c_int, 23));
pub const M33_NVIC_IPR13_PRI_N2_LSB = _u(@as(c_int, 20));
pub const M33_NVIC_IPR13_PRI_N2_ACCESS = "RW";
pub const M33_NVIC_IPR13_PRI_N1_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR13_PRI_N1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_NVIC_IPR13_PRI_N1_MSB = _u(@as(c_int, 15));
pub const M33_NVIC_IPR13_PRI_N1_LSB = _u(@as(c_int, 12));
pub const M33_NVIC_IPR13_PRI_N1_ACCESS = "RW";
pub const M33_NVIC_IPR13_PRI_N0_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR13_PRI_N0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_NVIC_IPR13_PRI_N0_MSB = _u(@as(c_int, 7));
pub const M33_NVIC_IPR13_PRI_N0_LSB = _u(@as(c_int, 4));
pub const M33_NVIC_IPR13_PRI_N0_ACCESS = "RW";
pub const M33_NVIC_IPR14_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e438, .hex));
pub const M33_NVIC_IPR14_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0f0f0f0, .hex));
pub const M33_NVIC_IPR14_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_IPR14_PRI_N3_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR14_PRI_N3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_NVIC_IPR14_PRI_N3_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_IPR14_PRI_N3_LSB = _u(@as(c_int, 28));
pub const M33_NVIC_IPR14_PRI_N3_ACCESS = "RW";
pub const M33_NVIC_IPR14_PRI_N2_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR14_PRI_N2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_NVIC_IPR14_PRI_N2_MSB = _u(@as(c_int, 23));
pub const M33_NVIC_IPR14_PRI_N2_LSB = _u(@as(c_int, 20));
pub const M33_NVIC_IPR14_PRI_N2_ACCESS = "RW";
pub const M33_NVIC_IPR14_PRI_N1_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR14_PRI_N1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_NVIC_IPR14_PRI_N1_MSB = _u(@as(c_int, 15));
pub const M33_NVIC_IPR14_PRI_N1_LSB = _u(@as(c_int, 12));
pub const M33_NVIC_IPR14_PRI_N1_ACCESS = "RW";
pub const M33_NVIC_IPR14_PRI_N0_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR14_PRI_N0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_NVIC_IPR14_PRI_N0_MSB = _u(@as(c_int, 7));
pub const M33_NVIC_IPR14_PRI_N0_LSB = _u(@as(c_int, 4));
pub const M33_NVIC_IPR14_PRI_N0_ACCESS = "RW";
pub const M33_NVIC_IPR15_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e43c, .hex));
pub const M33_NVIC_IPR15_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0f0f0f0, .hex));
pub const M33_NVIC_IPR15_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NVIC_IPR15_PRI_N3_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR15_PRI_N3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_NVIC_IPR15_PRI_N3_MSB = _u(@as(c_int, 31));
pub const M33_NVIC_IPR15_PRI_N3_LSB = _u(@as(c_int, 28));
pub const M33_NVIC_IPR15_PRI_N3_ACCESS = "RW";
pub const M33_NVIC_IPR15_PRI_N2_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR15_PRI_N2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_NVIC_IPR15_PRI_N2_MSB = _u(@as(c_int, 23));
pub const M33_NVIC_IPR15_PRI_N2_LSB = _u(@as(c_int, 20));
pub const M33_NVIC_IPR15_PRI_N2_ACCESS = "RW";
pub const M33_NVIC_IPR15_PRI_N1_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR15_PRI_N1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_NVIC_IPR15_PRI_N1_MSB = _u(@as(c_int, 15));
pub const M33_NVIC_IPR15_PRI_N1_LSB = _u(@as(c_int, 12));
pub const M33_NVIC_IPR15_PRI_N1_ACCESS = "RW";
pub const M33_NVIC_IPR15_PRI_N0_RESET = _u(@as(c_int, 0x0));
pub const M33_NVIC_IPR15_PRI_N0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_NVIC_IPR15_PRI_N0_MSB = _u(@as(c_int, 7));
pub const M33_NVIC_IPR15_PRI_N0_LSB = _u(@as(c_int, 4));
pub const M33_NVIC_IPR15_PRI_N0_ACCESS = "RW";
pub const M33_CPUID_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed00, .hex));
pub const M33_CPUID_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_CPUID_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x411fd210, .hex));
pub const M33_CPUID_IMPLEMENTER_RESET = _u(@as(c_int, 0x41));
pub const M33_CPUID_IMPLEMENTER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff000000, .hex));
pub const M33_CPUID_IMPLEMENTER_MSB = _u(@as(c_int, 31));
pub const M33_CPUID_IMPLEMENTER_LSB = _u(@as(c_int, 24));
pub const M33_CPUID_IMPLEMENTER_ACCESS = "RO";
pub const M33_CPUID_VARIANT_RESET = _u(@as(c_int, 0x1));
pub const M33_CPUID_VARIANT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_CPUID_VARIANT_MSB = _u(@as(c_int, 23));
pub const M33_CPUID_VARIANT_LSB = _u(@as(c_int, 20));
pub const M33_CPUID_VARIANT_ACCESS = "RO";
pub const M33_CPUID_ARCHITECTURE_RESET = _u(@as(c_int, 0xf));
pub const M33_CPUID_ARCHITECTURE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hex));
pub const M33_CPUID_ARCHITECTURE_MSB = _u(@as(c_int, 19));
pub const M33_CPUID_ARCHITECTURE_LSB = _u(@as(c_int, 16));
pub const M33_CPUID_ARCHITECTURE_ACCESS = "RO";
pub const M33_CPUID_PARTNO_RESET = _u(@as(c_int, 0xd21));
pub const M33_CPUID_PARTNO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000fff0, .hex));
pub const M33_CPUID_PARTNO_MSB = _u(@as(c_int, 15));
pub const M33_CPUID_PARTNO_LSB = _u(@as(c_int, 4));
pub const M33_CPUID_PARTNO_ACCESS = "RO";
pub const M33_CPUID_REVISION_RESET = _u(@as(c_int, 0x0));
pub const M33_CPUID_REVISION_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CPUID_REVISION_MSB = _u(@as(c_int, 3));
pub const M33_CPUID_REVISION_LSB = _u(@as(c_int, 0));
pub const M33_CPUID_REVISION_ACCESS = "RO";
pub const M33_ICSR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed04, .hex));
pub const M33_ICSR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xdfdff9ff, .hex));
pub const M33_ICSR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ICSR_PENDNMISET_RESET = _u(@as(c_int, 0x0));
pub const M33_ICSR_PENDNMISET_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const M33_ICSR_PENDNMISET_MSB = _u(@as(c_int, 31));
pub const M33_ICSR_PENDNMISET_LSB = _u(@as(c_int, 31));
pub const M33_ICSR_PENDNMISET_ACCESS = "RO";
pub const M33_ICSR_PENDNMICLR_RESET = _u(@as(c_int, 0x0));
pub const M33_ICSR_PENDNMICLR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const M33_ICSR_PENDNMICLR_MSB = _u(@as(c_int, 30));
pub const M33_ICSR_PENDNMICLR_LSB = _u(@as(c_int, 30));
pub const M33_ICSR_PENDNMICLR_ACCESS = "RW";
pub const M33_ICSR_PENDSVSET_RESET = _u(@as(c_int, 0x0));
pub const M33_ICSR_PENDSVSET_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const M33_ICSR_PENDSVSET_MSB = _u(@as(c_int, 28));
pub const M33_ICSR_PENDSVSET_LSB = _u(@as(c_int, 28));
pub const M33_ICSR_PENDSVSET_ACCESS = "RO";
pub const M33_ICSR_PENDSVCLR_RESET = _u(@as(c_int, 0x0));
pub const M33_ICSR_PENDSVCLR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const M33_ICSR_PENDSVCLR_MSB = _u(@as(c_int, 27));
pub const M33_ICSR_PENDSVCLR_LSB = _u(@as(c_int, 27));
pub const M33_ICSR_PENDSVCLR_ACCESS = "RW";
pub const M33_ICSR_PENDSTSET_RESET = _u(@as(c_int, 0x0));
pub const M33_ICSR_PENDSTSET_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const M33_ICSR_PENDSTSET_MSB = _u(@as(c_int, 26));
pub const M33_ICSR_PENDSTSET_LSB = _u(@as(c_int, 26));
pub const M33_ICSR_PENDSTSET_ACCESS = "RO";
pub const M33_ICSR_PENDSTCLR_RESET = _u(@as(c_int, 0x0));
pub const M33_ICSR_PENDSTCLR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const M33_ICSR_PENDSTCLR_MSB = _u(@as(c_int, 25));
pub const M33_ICSR_PENDSTCLR_LSB = _u(@as(c_int, 25));
pub const M33_ICSR_PENDSTCLR_ACCESS = "RW";
pub const M33_ICSR_STTNS_RESET = _u(@as(c_int, 0x0));
pub const M33_ICSR_STTNS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const M33_ICSR_STTNS_MSB = _u(@as(c_int, 24));
pub const M33_ICSR_STTNS_LSB = _u(@as(c_int, 24));
pub const M33_ICSR_STTNS_ACCESS = "RW";
pub const M33_ICSR_ISRPREEMPT_RESET = _u(@as(c_int, 0x0));
pub const M33_ICSR_ISRPREEMPT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const M33_ICSR_ISRPREEMPT_MSB = _u(@as(c_int, 23));
pub const M33_ICSR_ISRPREEMPT_LSB = _u(@as(c_int, 23));
pub const M33_ICSR_ISRPREEMPT_ACCESS = "RO";
pub const M33_ICSR_ISRPENDING_RESET = _u(@as(c_int, 0x0));
pub const M33_ICSR_ISRPENDING_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const M33_ICSR_ISRPENDING_MSB = _u(@as(c_int, 22));
pub const M33_ICSR_ISRPENDING_LSB = _u(@as(c_int, 22));
pub const M33_ICSR_ISRPENDING_ACCESS = "RO";
pub const M33_ICSR_VECTPENDING_RESET = _u(@as(c_int, 0x000));
pub const M33_ICSR_VECTPENDING_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x001ff000, .hex));
pub const M33_ICSR_VECTPENDING_MSB = _u(@as(c_int, 20));
pub const M33_ICSR_VECTPENDING_LSB = _u(@as(c_int, 12));
pub const M33_ICSR_VECTPENDING_ACCESS = "RO";
pub const M33_ICSR_RETTOBASE_RESET = _u(@as(c_int, 0x0));
pub const M33_ICSR_RETTOBASE_BITS = _u(@as(c_int, 0x00000800));
pub const M33_ICSR_RETTOBASE_MSB = _u(@as(c_int, 11));
pub const M33_ICSR_RETTOBASE_LSB = _u(@as(c_int, 11));
pub const M33_ICSR_RETTOBASE_ACCESS = "RO";
pub const M33_ICSR_VECTACTIVE_RESET = _u(@as(c_int, 0x000));
pub const M33_ICSR_VECTACTIVE_BITS = _u(@as(c_int, 0x000001ff));
pub const M33_ICSR_VECTACTIVE_MSB = _u(@as(c_int, 8));
pub const M33_ICSR_VECTACTIVE_LSB = _u(@as(c_int, 0));
pub const M33_ICSR_VECTACTIVE_ACCESS = "RO";
pub const M33_VTOR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed08, .hex));
pub const M33_VTOR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff80, .hex));
pub const M33_VTOR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_VTOR_TBLOFF_RESET = _u(@as(c_int, 0x0000000));
pub const M33_VTOR_TBLOFF_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff80, .hex));
pub const M33_VTOR_TBLOFF_MSB = _u(@as(c_int, 31));
pub const M33_VTOR_TBLOFF_LSB = _u(@as(c_int, 7));
pub const M33_VTOR_TBLOFF_ACCESS = "RW";
pub const M33_AIRCR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed0c, .hex));
pub const M33_AIRCR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffe70e, .hex));
pub const M33_AIRCR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_AIRCR_VECTKEY_RESET = _u(@as(c_int, 0x0000));
pub const M33_AIRCR_VECTKEY_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff0000, .hex));
pub const M33_AIRCR_VECTKEY_MSB = _u(@as(c_int, 31));
pub const M33_AIRCR_VECTKEY_LSB = _u(@as(c_int, 16));
pub const M33_AIRCR_VECTKEY_ACCESS = "RW";
pub const M33_AIRCR_ENDIANESS_RESET = _u(@as(c_int, 0x0));
pub const M33_AIRCR_ENDIANESS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const M33_AIRCR_ENDIANESS_MSB = _u(@as(c_int, 15));
pub const M33_AIRCR_ENDIANESS_LSB = _u(@as(c_int, 15));
pub const M33_AIRCR_ENDIANESS_ACCESS = "RO";
pub const M33_AIRCR_PRIS_RESET = _u(@as(c_int, 0x0));
pub const M33_AIRCR_PRIS_BITS = _u(@as(c_int, 0x00004000));
pub const M33_AIRCR_PRIS_MSB = _u(@as(c_int, 14));
pub const M33_AIRCR_PRIS_LSB = _u(@as(c_int, 14));
pub const M33_AIRCR_PRIS_ACCESS = "RW";
pub const M33_AIRCR_BFHFNMINS_RESET = _u(@as(c_int, 0x0));
pub const M33_AIRCR_BFHFNMINS_BITS = _u(@as(c_int, 0x00002000));
pub const M33_AIRCR_BFHFNMINS_MSB = _u(@as(c_int, 13));
pub const M33_AIRCR_BFHFNMINS_LSB = _u(@as(c_int, 13));
pub const M33_AIRCR_BFHFNMINS_ACCESS = "RW";
pub const M33_AIRCR_PRIGROUP_RESET = _u(@as(c_int, 0x0));
pub const M33_AIRCR_PRIGROUP_BITS = _u(@as(c_int, 0x00000700));
pub const M33_AIRCR_PRIGROUP_MSB = _u(@as(c_int, 10));
pub const M33_AIRCR_PRIGROUP_LSB = _u(@as(c_int, 8));
pub const M33_AIRCR_PRIGROUP_ACCESS = "RW";
pub const M33_AIRCR_SYSRESETREQS_RESET = _u(@as(c_int, 0x0));
pub const M33_AIRCR_SYSRESETREQS_BITS = _u(@as(c_int, 0x00000008));
pub const M33_AIRCR_SYSRESETREQS_MSB = _u(@as(c_int, 3));
pub const M33_AIRCR_SYSRESETREQS_LSB = _u(@as(c_int, 3));
pub const M33_AIRCR_SYSRESETREQS_ACCESS = "RW";
pub const M33_AIRCR_SYSRESETREQ_RESET = _u(@as(c_int, 0x0));
pub const M33_AIRCR_SYSRESETREQ_BITS = _u(@as(c_int, 0x00000004));
pub const M33_AIRCR_SYSRESETREQ_MSB = _u(@as(c_int, 2));
pub const M33_AIRCR_SYSRESETREQ_LSB = _u(@as(c_int, 2));
pub const M33_AIRCR_SYSRESETREQ_ACCESS = "RW";
pub const M33_AIRCR_VECTCLRACTIVE_RESET = _u(@as(c_int, 0x0));
pub const M33_AIRCR_VECTCLRACTIVE_BITS = _u(@as(c_int, 0x00000002));
pub const M33_AIRCR_VECTCLRACTIVE_MSB = _u(@as(c_int, 1));
pub const M33_AIRCR_VECTCLRACTIVE_LSB = _u(@as(c_int, 1));
pub const M33_AIRCR_VECTCLRACTIVE_ACCESS = "RW";
pub const M33_SCR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed10, .hex));
pub const M33_SCR_BITS = _u(@as(c_int, 0x0000001e));
pub const M33_SCR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_SCR_SEVONPEND_RESET = _u(@as(c_int, 0x0));
pub const M33_SCR_SEVONPEND_BITS = _u(@as(c_int, 0x00000010));
pub const M33_SCR_SEVONPEND_MSB = _u(@as(c_int, 4));
pub const M33_SCR_SEVONPEND_LSB = _u(@as(c_int, 4));
pub const M33_SCR_SEVONPEND_ACCESS = "RW";
pub const M33_SCR_SLEEPDEEPS_RESET = _u(@as(c_int, 0x0));
pub const M33_SCR_SLEEPDEEPS_BITS = _u(@as(c_int, 0x00000008));
pub const M33_SCR_SLEEPDEEPS_MSB = _u(@as(c_int, 3));
pub const M33_SCR_SLEEPDEEPS_LSB = _u(@as(c_int, 3));
pub const M33_SCR_SLEEPDEEPS_ACCESS = "RW";
pub const M33_SCR_SLEEPDEEP_RESET = _u(@as(c_int, 0x0));
pub const M33_SCR_SLEEPDEEP_BITS = _u(@as(c_int, 0x00000004));
pub const M33_SCR_SLEEPDEEP_MSB = _u(@as(c_int, 2));
pub const M33_SCR_SLEEPDEEP_LSB = _u(@as(c_int, 2));
pub const M33_SCR_SLEEPDEEP_ACCESS = "RW";
pub const M33_SCR_SLEEPONEXIT_RESET = _u(@as(c_int, 0x0));
pub const M33_SCR_SLEEPONEXIT_BITS = _u(@as(c_int, 0x00000002));
pub const M33_SCR_SLEEPONEXIT_MSB = _u(@as(c_int, 1));
pub const M33_SCR_SLEEPONEXIT_LSB = _u(@as(c_int, 1));
pub const M33_SCR_SLEEPONEXIT_ACCESS = "RW";
pub const M33_CCR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed14, .hex));
pub const M33_CCR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0007071b, .hex));
pub const M33_CCR_RESET = _u(@as(c_int, 0x00000201));
pub const M33_CCR_BP_RESET = _u(@as(c_int, 0x0));
pub const M33_CCR_BP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const M33_CCR_BP_MSB = _u(@as(c_int, 18));
pub const M33_CCR_BP_LSB = _u(@as(c_int, 18));
pub const M33_CCR_BP_ACCESS = "RO";
pub const M33_CCR_IC_RESET = _u(@as(c_int, 0x0));
pub const M33_CCR_IC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const M33_CCR_IC_MSB = _u(@as(c_int, 17));
pub const M33_CCR_IC_LSB = _u(@as(c_int, 17));
pub const M33_CCR_IC_ACCESS = "RO";
pub const M33_CCR_DC_RESET = _u(@as(c_int, 0x0));
pub const M33_CCR_DC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const M33_CCR_DC_MSB = _u(@as(c_int, 16));
pub const M33_CCR_DC_LSB = _u(@as(c_int, 16));
pub const M33_CCR_DC_ACCESS = "RO";
pub const M33_CCR_STKOFHFNMIGN_RESET = _u(@as(c_int, 0x0));
pub const M33_CCR_STKOFHFNMIGN_BITS = _u(@as(c_int, 0x00000400));
pub const M33_CCR_STKOFHFNMIGN_MSB = _u(@as(c_int, 10));
pub const M33_CCR_STKOFHFNMIGN_LSB = _u(@as(c_int, 10));
pub const M33_CCR_STKOFHFNMIGN_ACCESS = "RW";
pub const M33_CCR_RES1_RESET = _u(@as(c_int, 0x1));
pub const M33_CCR_RES1_BITS = _u(@as(c_int, 0x00000200));
pub const M33_CCR_RES1_MSB = _u(@as(c_int, 9));
pub const M33_CCR_RES1_LSB = _u(@as(c_int, 9));
pub const M33_CCR_RES1_ACCESS = "RO";
pub const M33_CCR_BFHFNMIGN_RESET = _u(@as(c_int, 0x0));
pub const M33_CCR_BFHFNMIGN_BITS = _u(@as(c_int, 0x00000100));
pub const M33_CCR_BFHFNMIGN_MSB = _u(@as(c_int, 8));
pub const M33_CCR_BFHFNMIGN_LSB = _u(@as(c_int, 8));
pub const M33_CCR_BFHFNMIGN_ACCESS = "RW";
pub const M33_CCR_DIV_0_TRP_RESET = _u(@as(c_int, 0x0));
pub const M33_CCR_DIV_0_TRP_BITS = _u(@as(c_int, 0x00000010));
pub const M33_CCR_DIV_0_TRP_MSB = _u(@as(c_int, 4));
pub const M33_CCR_DIV_0_TRP_LSB = _u(@as(c_int, 4));
pub const M33_CCR_DIV_0_TRP_ACCESS = "RW";
pub const M33_CCR_UNALIGN_TRP_RESET = _u(@as(c_int, 0x0));
pub const M33_CCR_UNALIGN_TRP_BITS = _u(@as(c_int, 0x00000008));
pub const M33_CCR_UNALIGN_TRP_MSB = _u(@as(c_int, 3));
pub const M33_CCR_UNALIGN_TRP_LSB = _u(@as(c_int, 3));
pub const M33_CCR_UNALIGN_TRP_ACCESS = "RW";
pub const M33_CCR_USERSETMPEND_RESET = _u(@as(c_int, 0x0));
pub const M33_CCR_USERSETMPEND_BITS = _u(@as(c_int, 0x00000002));
pub const M33_CCR_USERSETMPEND_MSB = _u(@as(c_int, 1));
pub const M33_CCR_USERSETMPEND_LSB = _u(@as(c_int, 1));
pub const M33_CCR_USERSETMPEND_ACCESS = "RW";
pub const M33_CCR_RES1_1_RESET = _u(@as(c_int, 0x1));
pub const M33_CCR_RES1_1_BITS = _u(@as(c_int, 0x00000001));
pub const M33_CCR_RES1_1_MSB = _u(@as(c_int, 0));
pub const M33_CCR_RES1_1_LSB = _u(@as(c_int, 0));
pub const M33_CCR_RES1_1_ACCESS = "RO";
pub const M33_SHPR1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed18, .hex));
pub const M33_SHPR1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe0e0e0e0, .hex));
pub const M33_SHPR1_RESET = _u(@as(c_int, 0x00000000));
pub const M33_SHPR1_PRI_7_3_RESET = _u(@as(c_int, 0x0));
pub const M33_SHPR1_PRI_7_3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe0000000, .hex));
pub const M33_SHPR1_PRI_7_3_MSB = _u(@as(c_int, 31));
pub const M33_SHPR1_PRI_7_3_LSB = _u(@as(c_int, 29));
pub const M33_SHPR1_PRI_7_3_ACCESS = "RW";
pub const M33_SHPR1_PRI_6_3_RESET = _u(@as(c_int, 0x0));
pub const M33_SHPR1_PRI_6_3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00e00000, .hex));
pub const M33_SHPR1_PRI_6_3_MSB = _u(@as(c_int, 23));
pub const M33_SHPR1_PRI_6_3_LSB = _u(@as(c_int, 21));
pub const M33_SHPR1_PRI_6_3_ACCESS = "RW";
pub const M33_SHPR1_PRI_5_3_RESET = _u(@as(c_int, 0x0));
pub const M33_SHPR1_PRI_5_3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000e000, .hex));
pub const M33_SHPR1_PRI_5_3_MSB = _u(@as(c_int, 15));
pub const M33_SHPR1_PRI_5_3_LSB = _u(@as(c_int, 13));
pub const M33_SHPR1_PRI_5_3_ACCESS = "RW";
pub const M33_SHPR1_PRI_4_3_RESET = _u(@as(c_int, 0x0));
pub const M33_SHPR1_PRI_4_3_BITS = _u(@as(c_int, 0x000000e0));
pub const M33_SHPR1_PRI_4_3_MSB = _u(@as(c_int, 7));
pub const M33_SHPR1_PRI_4_3_LSB = _u(@as(c_int, 5));
pub const M33_SHPR1_PRI_4_3_ACCESS = "RW";
pub const M33_SHPR2_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed1c, .hex));
pub const M33_SHPR2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe0ffffff, .hex));
pub const M33_SHPR2_RESET = _u(@as(c_int, 0x00000000));
pub const M33_SHPR2_PRI_11_3_RESET = _u(@as(c_int, 0x0));
pub const M33_SHPR2_PRI_11_3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe0000000, .hex));
pub const M33_SHPR2_PRI_11_3_MSB = _u(@as(c_int, 31));
pub const M33_SHPR2_PRI_11_3_LSB = _u(@as(c_int, 29));
pub const M33_SHPR2_PRI_11_3_ACCESS = "RW";
pub const M33_SHPR2_PRI_10_RESET = _u(@as(c_int, 0x00));
pub const M33_SHPR2_PRI_10_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ff0000, .hex));
pub const M33_SHPR2_PRI_10_MSB = _u(@as(c_int, 23));
pub const M33_SHPR2_PRI_10_LSB = _u(@as(c_int, 16));
pub const M33_SHPR2_PRI_10_ACCESS = "RO";
pub const M33_SHPR2_PRI_9_RESET = _u(@as(c_int, 0x00));
pub const M33_SHPR2_PRI_9_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ff00, .hex));
pub const M33_SHPR2_PRI_9_MSB = _u(@as(c_int, 15));
pub const M33_SHPR2_PRI_9_LSB = _u(@as(c_int, 8));
pub const M33_SHPR2_PRI_9_ACCESS = "RO";
pub const M33_SHPR2_PRI_8_RESET = _u(@as(c_int, 0x00));
pub const M33_SHPR2_PRI_8_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_SHPR2_PRI_8_MSB = _u(@as(c_int, 7));
pub const M33_SHPR2_PRI_8_LSB = _u(@as(c_int, 0));
pub const M33_SHPR2_PRI_8_ACCESS = "RO";
pub const M33_SHPR3_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed20, .hex));
pub const M33_SHPR3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe0e0ffe0, .hex));
pub const M33_SHPR3_RESET = _u(@as(c_int, 0x00000000));
pub const M33_SHPR3_PRI_15_3_RESET = _u(@as(c_int, 0x0));
pub const M33_SHPR3_PRI_15_3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe0000000, .hex));
pub const M33_SHPR3_PRI_15_3_MSB = _u(@as(c_int, 31));
pub const M33_SHPR3_PRI_15_3_LSB = _u(@as(c_int, 29));
pub const M33_SHPR3_PRI_15_3_ACCESS = "RW";
pub const M33_SHPR3_PRI_14_3_RESET = _u(@as(c_int, 0x0));
pub const M33_SHPR3_PRI_14_3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00e00000, .hex));
pub const M33_SHPR3_PRI_14_3_MSB = _u(@as(c_int, 23));
pub const M33_SHPR3_PRI_14_3_LSB = _u(@as(c_int, 21));
pub const M33_SHPR3_PRI_14_3_ACCESS = "RW";
pub const M33_SHPR3_PRI_13_RESET = _u(@as(c_int, 0x00));
pub const M33_SHPR3_PRI_13_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ff00, .hex));
pub const M33_SHPR3_PRI_13_MSB = _u(@as(c_int, 15));
pub const M33_SHPR3_PRI_13_LSB = _u(@as(c_int, 8));
pub const M33_SHPR3_PRI_13_ACCESS = "RO";
pub const M33_SHPR3_PRI_12_3_RESET = _u(@as(c_int, 0x0));
pub const M33_SHPR3_PRI_12_3_BITS = _u(@as(c_int, 0x000000e0));
pub const M33_SHPR3_PRI_12_3_MSB = _u(@as(c_int, 7));
pub const M33_SHPR3_PRI_12_3_LSB = _u(@as(c_int, 5));
pub const M33_SHPR3_PRI_12_3_ACCESS = "RW";
pub const M33_SHCSR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed24, .hex));
pub const M33_SHCSR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x003ffdbf, .hex));
pub const M33_SHCSR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_SHCSR_HARDFAULTPENDED_RESET = _u(@as(c_int, 0x0));
pub const M33_SHCSR_HARDFAULTPENDED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const M33_SHCSR_HARDFAULTPENDED_MSB = _u(@as(c_int, 21));
pub const M33_SHCSR_HARDFAULTPENDED_LSB = _u(@as(c_int, 21));
pub const M33_SHCSR_HARDFAULTPENDED_ACCESS = "RW";
pub const M33_SHCSR_SECUREFAULTPENDED_RESET = _u(@as(c_int, 0x0));
pub const M33_SHCSR_SECUREFAULTPENDED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const M33_SHCSR_SECUREFAULTPENDED_MSB = _u(@as(c_int, 20));
pub const M33_SHCSR_SECUREFAULTPENDED_LSB = _u(@as(c_int, 20));
pub const M33_SHCSR_SECUREFAULTPENDED_ACCESS = "RW";
pub const M33_SHCSR_SECUREFAULTENA_RESET = _u(@as(c_int, 0x0));
pub const M33_SHCSR_SECUREFAULTENA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const M33_SHCSR_SECUREFAULTENA_MSB = _u(@as(c_int, 19));
pub const M33_SHCSR_SECUREFAULTENA_LSB = _u(@as(c_int, 19));
pub const M33_SHCSR_SECUREFAULTENA_ACCESS = "RW";
pub const M33_SHCSR_USGFAULTENA_RESET = _u(@as(c_int, 0x0));
pub const M33_SHCSR_USGFAULTENA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const M33_SHCSR_USGFAULTENA_MSB = _u(@as(c_int, 18));
pub const M33_SHCSR_USGFAULTENA_LSB = _u(@as(c_int, 18));
pub const M33_SHCSR_USGFAULTENA_ACCESS = "RW";
pub const M33_SHCSR_BUSFAULTENA_RESET = _u(@as(c_int, 0x0));
pub const M33_SHCSR_BUSFAULTENA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const M33_SHCSR_BUSFAULTENA_MSB = _u(@as(c_int, 17));
pub const M33_SHCSR_BUSFAULTENA_LSB = _u(@as(c_int, 17));
pub const M33_SHCSR_BUSFAULTENA_ACCESS = "RW";
pub const M33_SHCSR_MEMFAULTENA_RESET = _u(@as(c_int, 0x0));
pub const M33_SHCSR_MEMFAULTENA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const M33_SHCSR_MEMFAULTENA_MSB = _u(@as(c_int, 16));
pub const M33_SHCSR_MEMFAULTENA_LSB = _u(@as(c_int, 16));
pub const M33_SHCSR_MEMFAULTENA_ACCESS = "RW";
pub const M33_SHCSR_SVCALLPENDED_RESET = _u(@as(c_int, 0x0));
pub const M33_SHCSR_SVCALLPENDED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const M33_SHCSR_SVCALLPENDED_MSB = _u(@as(c_int, 15));
pub const M33_SHCSR_SVCALLPENDED_LSB = _u(@as(c_int, 15));
pub const M33_SHCSR_SVCALLPENDED_ACCESS = "RW";
pub const M33_SHCSR_BUSFAULTPENDED_RESET = _u(@as(c_int, 0x0));
pub const M33_SHCSR_BUSFAULTPENDED_BITS = _u(@as(c_int, 0x00004000));
pub const M33_SHCSR_BUSFAULTPENDED_MSB = _u(@as(c_int, 14));
pub const M33_SHCSR_BUSFAULTPENDED_LSB = _u(@as(c_int, 14));
pub const M33_SHCSR_BUSFAULTPENDED_ACCESS = "RW";
pub const M33_SHCSR_MEMFAULTPENDED_RESET = _u(@as(c_int, 0x0));
pub const M33_SHCSR_MEMFAULTPENDED_BITS = _u(@as(c_int, 0x00002000));
pub const M33_SHCSR_MEMFAULTPENDED_MSB = _u(@as(c_int, 13));
pub const M33_SHCSR_MEMFAULTPENDED_LSB = _u(@as(c_int, 13));
pub const M33_SHCSR_MEMFAULTPENDED_ACCESS = "RW";
pub const M33_SHCSR_USGFAULTPENDED_RESET = _u(@as(c_int, 0x0));
pub const M33_SHCSR_USGFAULTPENDED_BITS = _u(@as(c_int, 0x00001000));
pub const M33_SHCSR_USGFAULTPENDED_MSB = _u(@as(c_int, 12));
pub const M33_SHCSR_USGFAULTPENDED_LSB = _u(@as(c_int, 12));
pub const M33_SHCSR_USGFAULTPENDED_ACCESS = "RW";
pub const M33_SHCSR_SYSTICKACT_RESET = _u(@as(c_int, 0x0));
pub const M33_SHCSR_SYSTICKACT_BITS = _u(@as(c_int, 0x00000800));
pub const M33_SHCSR_SYSTICKACT_MSB = _u(@as(c_int, 11));
pub const M33_SHCSR_SYSTICKACT_LSB = _u(@as(c_int, 11));
pub const M33_SHCSR_SYSTICKACT_ACCESS = "RW";
pub const M33_SHCSR_PENDSVACT_RESET = _u(@as(c_int, 0x0));
pub const M33_SHCSR_PENDSVACT_BITS = _u(@as(c_int, 0x00000400));
pub const M33_SHCSR_PENDSVACT_MSB = _u(@as(c_int, 10));
pub const M33_SHCSR_PENDSVACT_LSB = _u(@as(c_int, 10));
pub const M33_SHCSR_PENDSVACT_ACCESS = "RW";
pub const M33_SHCSR_MONITORACT_RESET = _u(@as(c_int, 0x0));
pub const M33_SHCSR_MONITORACT_BITS = _u(@as(c_int, 0x00000100));
pub const M33_SHCSR_MONITORACT_MSB = _u(@as(c_int, 8));
pub const M33_SHCSR_MONITORACT_LSB = _u(@as(c_int, 8));
pub const M33_SHCSR_MONITORACT_ACCESS = "RW";
pub const M33_SHCSR_SVCALLACT_RESET = _u(@as(c_int, 0x0));
pub const M33_SHCSR_SVCALLACT_BITS = _u(@as(c_int, 0x00000080));
pub const M33_SHCSR_SVCALLACT_MSB = _u(@as(c_int, 7));
pub const M33_SHCSR_SVCALLACT_LSB = _u(@as(c_int, 7));
pub const M33_SHCSR_SVCALLACT_ACCESS = "RW";
pub const M33_SHCSR_NMIACT_RESET = _u(@as(c_int, 0x0));
pub const M33_SHCSR_NMIACT_BITS = _u(@as(c_int, 0x00000020));
pub const M33_SHCSR_NMIACT_MSB = _u(@as(c_int, 5));
pub const M33_SHCSR_NMIACT_LSB = _u(@as(c_int, 5));
pub const M33_SHCSR_NMIACT_ACCESS = "RW";
pub const M33_SHCSR_SECUREFAULTACT_RESET = _u(@as(c_int, 0x0));
pub const M33_SHCSR_SECUREFAULTACT_BITS = _u(@as(c_int, 0x00000010));
pub const M33_SHCSR_SECUREFAULTACT_MSB = _u(@as(c_int, 4));
pub const M33_SHCSR_SECUREFAULTACT_LSB = _u(@as(c_int, 4));
pub const M33_SHCSR_SECUREFAULTACT_ACCESS = "RW";
pub const M33_SHCSR_USGFAULTACT_RESET = _u(@as(c_int, 0x0));
pub const M33_SHCSR_USGFAULTACT_BITS = _u(@as(c_int, 0x00000008));
pub const M33_SHCSR_USGFAULTACT_MSB = _u(@as(c_int, 3));
pub const M33_SHCSR_USGFAULTACT_LSB = _u(@as(c_int, 3));
pub const M33_SHCSR_USGFAULTACT_ACCESS = "RW";
pub const M33_SHCSR_HARDFAULTACT_RESET = _u(@as(c_int, 0x0));
pub const M33_SHCSR_HARDFAULTACT_BITS = _u(@as(c_int, 0x00000004));
pub const M33_SHCSR_HARDFAULTACT_MSB = _u(@as(c_int, 2));
pub const M33_SHCSR_HARDFAULTACT_LSB = _u(@as(c_int, 2));
pub const M33_SHCSR_HARDFAULTACT_ACCESS = "RW";
pub const M33_SHCSR_BUSFAULTACT_RESET = _u(@as(c_int, 0x0));
pub const M33_SHCSR_BUSFAULTACT_BITS = _u(@as(c_int, 0x00000002));
pub const M33_SHCSR_BUSFAULTACT_MSB = _u(@as(c_int, 1));
pub const M33_SHCSR_BUSFAULTACT_LSB = _u(@as(c_int, 1));
pub const M33_SHCSR_BUSFAULTACT_ACCESS = "RW";
pub const M33_SHCSR_MEMFAULTACT_RESET = _u(@as(c_int, 0x0));
pub const M33_SHCSR_MEMFAULTACT_BITS = _u(@as(c_int, 0x00000001));
pub const M33_SHCSR_MEMFAULTACT_MSB = _u(@as(c_int, 0));
pub const M33_SHCSR_MEMFAULTACT_LSB = _u(@as(c_int, 0));
pub const M33_SHCSR_MEMFAULTACT_ACCESS = "RW";
pub const M33_CFSR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed28, .hex));
pub const M33_CFSR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x031fbfff, .hex));
pub const M33_CFSR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CFSR_UFSR_DIVBYZERO_RESET = _u(@as(c_int, 0x0));
pub const M33_CFSR_UFSR_DIVBYZERO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const M33_CFSR_UFSR_DIVBYZERO_MSB = _u(@as(c_int, 25));
pub const M33_CFSR_UFSR_DIVBYZERO_LSB = _u(@as(c_int, 25));
pub const M33_CFSR_UFSR_DIVBYZERO_ACCESS = "RW";
pub const M33_CFSR_UFSR_UNALIGNED_RESET = _u(@as(c_int, 0x0));
pub const M33_CFSR_UFSR_UNALIGNED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const M33_CFSR_UFSR_UNALIGNED_MSB = _u(@as(c_int, 24));
pub const M33_CFSR_UFSR_UNALIGNED_LSB = _u(@as(c_int, 24));
pub const M33_CFSR_UFSR_UNALIGNED_ACCESS = "RW";
pub const M33_CFSR_UFSR_STKOF_RESET = _u(@as(c_int, 0x0));
pub const M33_CFSR_UFSR_STKOF_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const M33_CFSR_UFSR_STKOF_MSB = _u(@as(c_int, 20));
pub const M33_CFSR_UFSR_STKOF_LSB = _u(@as(c_int, 20));
pub const M33_CFSR_UFSR_STKOF_ACCESS = "RW";
pub const M33_CFSR_UFSR_NOCP_RESET = _u(@as(c_int, 0x0));
pub const M33_CFSR_UFSR_NOCP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const M33_CFSR_UFSR_NOCP_MSB = _u(@as(c_int, 19));
pub const M33_CFSR_UFSR_NOCP_LSB = _u(@as(c_int, 19));
pub const M33_CFSR_UFSR_NOCP_ACCESS = "RW";
pub const M33_CFSR_UFSR_INVPC_RESET = _u(@as(c_int, 0x0));
pub const M33_CFSR_UFSR_INVPC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const M33_CFSR_UFSR_INVPC_MSB = _u(@as(c_int, 18));
pub const M33_CFSR_UFSR_INVPC_LSB = _u(@as(c_int, 18));
pub const M33_CFSR_UFSR_INVPC_ACCESS = "RW";
pub const M33_CFSR_UFSR_INVSTATE_RESET = _u(@as(c_int, 0x0));
pub const M33_CFSR_UFSR_INVSTATE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const M33_CFSR_UFSR_INVSTATE_MSB = _u(@as(c_int, 17));
pub const M33_CFSR_UFSR_INVSTATE_LSB = _u(@as(c_int, 17));
pub const M33_CFSR_UFSR_INVSTATE_ACCESS = "RW";
pub const M33_CFSR_UFSR_UNDEFINSTR_RESET = _u(@as(c_int, 0x0));
pub const M33_CFSR_UFSR_UNDEFINSTR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const M33_CFSR_UFSR_UNDEFINSTR_MSB = _u(@as(c_int, 16));
pub const M33_CFSR_UFSR_UNDEFINSTR_LSB = _u(@as(c_int, 16));
pub const M33_CFSR_UFSR_UNDEFINSTR_ACCESS = "RW";
pub const M33_CFSR_BFSR_BFARVALID_RESET = _u(@as(c_int, 0x0));
pub const M33_CFSR_BFSR_BFARVALID_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const M33_CFSR_BFSR_BFARVALID_MSB = _u(@as(c_int, 15));
pub const M33_CFSR_BFSR_BFARVALID_LSB = _u(@as(c_int, 15));
pub const M33_CFSR_BFSR_BFARVALID_ACCESS = "RW";
pub const M33_CFSR_BFSR_LSPERR_RESET = _u(@as(c_int, 0x0));
pub const M33_CFSR_BFSR_LSPERR_BITS = _u(@as(c_int, 0x00002000));
pub const M33_CFSR_BFSR_LSPERR_MSB = _u(@as(c_int, 13));
pub const M33_CFSR_BFSR_LSPERR_LSB = _u(@as(c_int, 13));
pub const M33_CFSR_BFSR_LSPERR_ACCESS = "RW";
pub const M33_CFSR_BFSR_STKERR_RESET = _u(@as(c_int, 0x0));
pub const M33_CFSR_BFSR_STKERR_BITS = _u(@as(c_int, 0x00001000));
pub const M33_CFSR_BFSR_STKERR_MSB = _u(@as(c_int, 12));
pub const M33_CFSR_BFSR_STKERR_LSB = _u(@as(c_int, 12));
pub const M33_CFSR_BFSR_STKERR_ACCESS = "RW";
pub const M33_CFSR_BFSR_UNSTKERR_RESET = _u(@as(c_int, 0x0));
pub const M33_CFSR_BFSR_UNSTKERR_BITS = _u(@as(c_int, 0x00000800));
pub const M33_CFSR_BFSR_UNSTKERR_MSB = _u(@as(c_int, 11));
pub const M33_CFSR_BFSR_UNSTKERR_LSB = _u(@as(c_int, 11));
pub const M33_CFSR_BFSR_UNSTKERR_ACCESS = "RW";
pub const M33_CFSR_BFSR_IMPRECISERR_RESET = _u(@as(c_int, 0x0));
pub const M33_CFSR_BFSR_IMPRECISERR_BITS = _u(@as(c_int, 0x00000400));
pub const M33_CFSR_BFSR_IMPRECISERR_MSB = _u(@as(c_int, 10));
pub const M33_CFSR_BFSR_IMPRECISERR_LSB = _u(@as(c_int, 10));
pub const M33_CFSR_BFSR_IMPRECISERR_ACCESS = "RW";
pub const M33_CFSR_BFSR_PRECISERR_RESET = _u(@as(c_int, 0x0));
pub const M33_CFSR_BFSR_PRECISERR_BITS = _u(@as(c_int, 0x00000200));
pub const M33_CFSR_BFSR_PRECISERR_MSB = _u(@as(c_int, 9));
pub const M33_CFSR_BFSR_PRECISERR_LSB = _u(@as(c_int, 9));
pub const M33_CFSR_BFSR_PRECISERR_ACCESS = "RW";
pub const M33_CFSR_BFSR_IBUSERR_RESET = _u(@as(c_int, 0x0));
pub const M33_CFSR_BFSR_IBUSERR_BITS = _u(@as(c_int, 0x00000100));
pub const M33_CFSR_BFSR_IBUSERR_MSB = _u(@as(c_int, 8));
pub const M33_CFSR_BFSR_IBUSERR_LSB = _u(@as(c_int, 8));
pub const M33_CFSR_BFSR_IBUSERR_ACCESS = "RW";
pub const M33_CFSR_MMFSR_RESET = _u(@as(c_int, 0x00));
pub const M33_CFSR_MMFSR_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_CFSR_MMFSR_MSB = _u(@as(c_int, 7));
pub const M33_CFSR_MMFSR_LSB = _u(@as(c_int, 0));
pub const M33_CFSR_MMFSR_ACCESS = "RW";
pub const M33_HFSR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed2c, .hex));
pub const M33_HFSR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xc0000002, .hex));
pub const M33_HFSR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_HFSR_DEBUGEVT_RESET = _u(@as(c_int, 0x0));
pub const M33_HFSR_DEBUGEVT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const M33_HFSR_DEBUGEVT_MSB = _u(@as(c_int, 31));
pub const M33_HFSR_DEBUGEVT_LSB = _u(@as(c_int, 31));
pub const M33_HFSR_DEBUGEVT_ACCESS = "RW";
pub const M33_HFSR_FORCED_RESET = _u(@as(c_int, 0x0));
pub const M33_HFSR_FORCED_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const M33_HFSR_FORCED_MSB = _u(@as(c_int, 30));
pub const M33_HFSR_FORCED_LSB = _u(@as(c_int, 30));
pub const M33_HFSR_FORCED_ACCESS = "RW";
pub const M33_HFSR_VECTTBL_RESET = _u(@as(c_int, 0x0));
pub const M33_HFSR_VECTTBL_BITS = _u(@as(c_int, 0x00000002));
pub const M33_HFSR_VECTTBL_MSB = _u(@as(c_int, 1));
pub const M33_HFSR_VECTTBL_LSB = _u(@as(c_int, 1));
pub const M33_HFSR_VECTTBL_ACCESS = "RW";
pub const M33_DFSR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed30, .hex));
pub const M33_DFSR_BITS = _u(@as(c_int, 0x0000001f));
pub const M33_DFSR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DFSR_EXTERNAL_RESET = _u(@as(c_int, 0x0));
pub const M33_DFSR_EXTERNAL_BITS = _u(@as(c_int, 0x00000010));
pub const M33_DFSR_EXTERNAL_MSB = _u(@as(c_int, 4));
pub const M33_DFSR_EXTERNAL_LSB = _u(@as(c_int, 4));
pub const M33_DFSR_EXTERNAL_ACCESS = "RW";
pub const M33_DFSR_VCATCH_RESET = _u(@as(c_int, 0x0));
pub const M33_DFSR_VCATCH_BITS = _u(@as(c_int, 0x00000008));
pub const M33_DFSR_VCATCH_MSB = _u(@as(c_int, 3));
pub const M33_DFSR_VCATCH_LSB = _u(@as(c_int, 3));
pub const M33_DFSR_VCATCH_ACCESS = "RW";
pub const M33_DFSR_DWTTRAP_RESET = _u(@as(c_int, 0x0));
pub const M33_DFSR_DWTTRAP_BITS = _u(@as(c_int, 0x00000004));
pub const M33_DFSR_DWTTRAP_MSB = _u(@as(c_int, 2));
pub const M33_DFSR_DWTTRAP_LSB = _u(@as(c_int, 2));
pub const M33_DFSR_DWTTRAP_ACCESS = "RW";
pub const M33_DFSR_BKPT_RESET = _u(@as(c_int, 0x0));
pub const M33_DFSR_BKPT_BITS = _u(@as(c_int, 0x00000002));
pub const M33_DFSR_BKPT_MSB = _u(@as(c_int, 1));
pub const M33_DFSR_BKPT_LSB = _u(@as(c_int, 1));
pub const M33_DFSR_BKPT_ACCESS = "RW";
pub const M33_DFSR_HALTED_RESET = _u(@as(c_int, 0x0));
pub const M33_DFSR_HALTED_BITS = _u(@as(c_int, 0x00000001));
pub const M33_DFSR_HALTED_MSB = _u(@as(c_int, 0));
pub const M33_DFSR_HALTED_LSB = _u(@as(c_int, 0));
pub const M33_DFSR_HALTED_ACCESS = "RW";
pub const M33_MMFAR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed34, .hex));
pub const M33_MMFAR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_MMFAR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_MMFAR_ADDRESS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_MMFAR_ADDRESS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_MMFAR_ADDRESS_MSB = _u(@as(c_int, 31));
pub const M33_MMFAR_ADDRESS_LSB = _u(@as(c_int, 0));
pub const M33_MMFAR_ADDRESS_ACCESS = "RW";
pub const M33_BFAR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed38, .hex));
pub const M33_BFAR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_BFAR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_BFAR_ADDRESS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_BFAR_ADDRESS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_BFAR_ADDRESS_MSB = _u(@as(c_int, 31));
pub const M33_BFAR_ADDRESS_LSB = _u(@as(c_int, 0));
pub const M33_BFAR_ADDRESS_ACCESS = "RW";
pub const M33_ID_PFR0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed40, .hex));
pub const M33_ID_PFR0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_ID_PFR0_RESET = _u(@as(c_int, 0x00000030));
pub const M33_ID_PFR0_STATE1_RESET = _u(@as(c_int, 0x3));
pub const M33_ID_PFR0_STATE1_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_ID_PFR0_STATE1_MSB = _u(@as(c_int, 7));
pub const M33_ID_PFR0_STATE1_LSB = _u(@as(c_int, 4));
pub const M33_ID_PFR0_STATE1_ACCESS = "RO";
pub const M33_ID_PFR0_STATE0_RESET = _u(@as(c_int, 0x0));
pub const M33_ID_PFR0_STATE0_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_ID_PFR0_STATE0_MSB = _u(@as(c_int, 3));
pub const M33_ID_PFR0_STATE0_LSB = _u(@as(c_int, 0));
pub const M33_ID_PFR0_STATE0_ACCESS = "RO";
pub const M33_ID_PFR1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed44, .hex));
pub const M33_ID_PFR1_BITS = _u(@as(c_int, 0x00000ff0));
pub const M33_ID_PFR1_RESET = _u(@as(c_int, 0x00000520));
pub const M33_ID_PFR1_MPROGMOD_RESET = _u(@as(c_int, 0x5));
pub const M33_ID_PFR1_MPROGMOD_BITS = _u(@as(c_int, 0x00000f00));
pub const M33_ID_PFR1_MPROGMOD_MSB = _u(@as(c_int, 11));
pub const M33_ID_PFR1_MPROGMOD_LSB = _u(@as(c_int, 8));
pub const M33_ID_PFR1_MPROGMOD_ACCESS = "RO";
pub const M33_ID_PFR1_SECURITY_RESET = _u(@as(c_int, 0x2));
pub const M33_ID_PFR1_SECURITY_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_ID_PFR1_SECURITY_MSB = _u(@as(c_int, 7));
pub const M33_ID_PFR1_SECURITY_LSB = _u(@as(c_int, 4));
pub const M33_ID_PFR1_SECURITY_ACCESS = "RO";
pub const M33_ID_DFR0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed48, .hex));
pub const M33_ID_DFR0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_ID_DFR0_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const M33_ID_DFR0_MPROFDBG_RESET = _u(@as(c_int, 0x2));
pub const M33_ID_DFR0_MPROFDBG_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_ID_DFR0_MPROFDBG_MSB = _u(@as(c_int, 23));
pub const M33_ID_DFR0_MPROFDBG_LSB = _u(@as(c_int, 20));
pub const M33_ID_DFR0_MPROFDBG_ACCESS = "RO";
pub const M33_ID_AFR0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed4c, .hex));
pub const M33_ID_AFR0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const M33_ID_AFR0_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ID_AFR0_IMPDEF3_RESET = _u(@as(c_int, 0x0));
pub const M33_ID_AFR0_IMPDEF3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_ID_AFR0_IMPDEF3_MSB = _u(@as(c_int, 15));
pub const M33_ID_AFR0_IMPDEF3_LSB = _u(@as(c_int, 12));
pub const M33_ID_AFR0_IMPDEF3_ACCESS = "RO";
pub const M33_ID_AFR0_IMPDEF2_RESET = _u(@as(c_int, 0x0));
pub const M33_ID_AFR0_IMPDEF2_BITS = _u(@as(c_int, 0x00000f00));
pub const M33_ID_AFR0_IMPDEF2_MSB = _u(@as(c_int, 11));
pub const M33_ID_AFR0_IMPDEF2_LSB = _u(@as(c_int, 8));
pub const M33_ID_AFR0_IMPDEF2_ACCESS = "RO";
pub const M33_ID_AFR0_IMPDEF1_RESET = _u(@as(c_int, 0x0));
pub const M33_ID_AFR0_IMPDEF1_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_ID_AFR0_IMPDEF1_MSB = _u(@as(c_int, 7));
pub const M33_ID_AFR0_IMPDEF1_LSB = _u(@as(c_int, 4));
pub const M33_ID_AFR0_IMPDEF1_ACCESS = "RO";
pub const M33_ID_AFR0_IMPDEF0_RESET = _u(@as(c_int, 0x0));
pub const M33_ID_AFR0_IMPDEF0_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_ID_AFR0_IMPDEF0_MSB = _u(@as(c_int, 3));
pub const M33_ID_AFR0_IMPDEF0_LSB = _u(@as(c_int, 0));
pub const M33_ID_AFR0_IMPDEF0_ACCESS = "RO";
pub const M33_ID_MMFR0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed50, .hex));
pub const M33_ID_MMFR0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00fffff0, .hex));
pub const M33_ID_MMFR0_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00101f40, .hex));
pub const M33_ID_MMFR0_AUXREG_RESET = _u(@as(c_int, 0x1));
pub const M33_ID_MMFR0_AUXREG_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_ID_MMFR0_AUXREG_MSB = _u(@as(c_int, 23));
pub const M33_ID_MMFR0_AUXREG_LSB = _u(@as(c_int, 20));
pub const M33_ID_MMFR0_AUXREG_ACCESS = "RO";
pub const M33_ID_MMFR0_TCM_RESET = _u(@as(c_int, 0x0));
pub const M33_ID_MMFR0_TCM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hex));
pub const M33_ID_MMFR0_TCM_MSB = _u(@as(c_int, 19));
pub const M33_ID_MMFR0_TCM_LSB = _u(@as(c_int, 16));
pub const M33_ID_MMFR0_TCM_ACCESS = "RO";
pub const M33_ID_MMFR0_SHARELVL_RESET = _u(@as(c_int, 0x1));
pub const M33_ID_MMFR0_SHARELVL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_ID_MMFR0_SHARELVL_MSB = _u(@as(c_int, 15));
pub const M33_ID_MMFR0_SHARELVL_LSB = _u(@as(c_int, 12));
pub const M33_ID_MMFR0_SHARELVL_ACCESS = "RO";
pub const M33_ID_MMFR0_OUTERSHR_RESET = _u(@as(c_int, 0xf));
pub const M33_ID_MMFR0_OUTERSHR_BITS = _u(@as(c_int, 0x00000f00));
pub const M33_ID_MMFR0_OUTERSHR_MSB = _u(@as(c_int, 11));
pub const M33_ID_MMFR0_OUTERSHR_LSB = _u(@as(c_int, 8));
pub const M33_ID_MMFR0_OUTERSHR_ACCESS = "RO";
pub const M33_ID_MMFR0_PMSA_RESET = _u(@as(c_int, 0x4));
pub const M33_ID_MMFR0_PMSA_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_ID_MMFR0_PMSA_MSB = _u(@as(c_int, 7));
pub const M33_ID_MMFR0_PMSA_LSB = _u(@as(c_int, 4));
pub const M33_ID_MMFR0_PMSA_ACCESS = "RO";
pub const M33_ID_MMFR1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed54, .hex));
pub const M33_ID_MMFR1_BITS = _u(@as(c_int, 0x00000000));
pub const M33_ID_MMFR1_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ID_MMFR1_MSB = _u(@as(c_int, 31));
pub const M33_ID_MMFR1_LSB = _u(@as(c_int, 0));
pub const M33_ID_MMFR1_ACCESS = "RW";
pub const M33_ID_MMFR2_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed58, .hex));
pub const M33_ID_MMFR2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f000000, .hex));
pub const M33_ID_MMFR2_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const M33_ID_MMFR2_WFISTALL_RESET = _u(@as(c_int, 0x1));
pub const M33_ID_MMFR2_WFISTALL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f000000, .hex));
pub const M33_ID_MMFR2_WFISTALL_MSB = _u(@as(c_int, 27));
pub const M33_ID_MMFR2_WFISTALL_LSB = _u(@as(c_int, 24));
pub const M33_ID_MMFR2_WFISTALL_ACCESS = "RO";
pub const M33_ID_MMFR3_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed5c, .hex));
pub const M33_ID_MMFR3_BITS = _u(@as(c_int, 0x00000fff));
pub const M33_ID_MMFR3_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ID_MMFR3_BPMAINT_RESET = _u(@as(c_int, 0x0));
pub const M33_ID_MMFR3_BPMAINT_BITS = _u(@as(c_int, 0x00000f00));
pub const M33_ID_MMFR3_BPMAINT_MSB = _u(@as(c_int, 11));
pub const M33_ID_MMFR3_BPMAINT_LSB = _u(@as(c_int, 8));
pub const M33_ID_MMFR3_BPMAINT_ACCESS = "RO";
pub const M33_ID_MMFR3_CMAINTSW_RESET = _u(@as(c_int, 0x0));
pub const M33_ID_MMFR3_CMAINTSW_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_ID_MMFR3_CMAINTSW_MSB = _u(@as(c_int, 7));
pub const M33_ID_MMFR3_CMAINTSW_LSB = _u(@as(c_int, 4));
pub const M33_ID_MMFR3_CMAINTSW_ACCESS = "RO";
pub const M33_ID_MMFR3_CMAINTVA_RESET = _u(@as(c_int, 0x0));
pub const M33_ID_MMFR3_CMAINTVA_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_ID_MMFR3_CMAINTVA_MSB = _u(@as(c_int, 3));
pub const M33_ID_MMFR3_CMAINTVA_LSB = _u(@as(c_int, 0));
pub const M33_ID_MMFR3_CMAINTVA_ACCESS = "RO";
pub const M33_ID_ISAR0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed60, .hex));
pub const M33_ID_ISAR0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0ffffff0, .hex));
pub const M33_ID_ISAR0_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08092300, .hex));
pub const M33_ID_ISAR0_DIVIDE_RESET = _u(@as(c_int, 0x8));
pub const M33_ID_ISAR0_DIVIDE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f000000, .hex));
pub const M33_ID_ISAR0_DIVIDE_MSB = _u(@as(c_int, 27));
pub const M33_ID_ISAR0_DIVIDE_LSB = _u(@as(c_int, 24));
pub const M33_ID_ISAR0_DIVIDE_ACCESS = "RO";
pub const M33_ID_ISAR0_DEBUG_RESET = _u(@as(c_int, 0x0));
pub const M33_ID_ISAR0_DEBUG_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_ID_ISAR0_DEBUG_MSB = _u(@as(c_int, 23));
pub const M33_ID_ISAR0_DEBUG_LSB = _u(@as(c_int, 20));
pub const M33_ID_ISAR0_DEBUG_ACCESS = "RO";
pub const M33_ID_ISAR0_COPROC_RESET = _u(@as(c_int, 0x9));
pub const M33_ID_ISAR0_COPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hex));
pub const M33_ID_ISAR0_COPROC_MSB = _u(@as(c_int, 19));
pub const M33_ID_ISAR0_COPROC_LSB = _u(@as(c_int, 16));
pub const M33_ID_ISAR0_COPROC_ACCESS = "RO";
pub const M33_ID_ISAR0_CMPBRANCH_RESET = _u(@as(c_int, 0x2));
pub const M33_ID_ISAR0_CMPBRANCH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_ID_ISAR0_CMPBRANCH_MSB = _u(@as(c_int, 15));
pub const M33_ID_ISAR0_CMPBRANCH_LSB = _u(@as(c_int, 12));
pub const M33_ID_ISAR0_CMPBRANCH_ACCESS = "RO";
pub const M33_ID_ISAR0_BITFIELD_RESET = _u(@as(c_int, 0x3));
pub const M33_ID_ISAR0_BITFIELD_BITS = _u(@as(c_int, 0x00000f00));
pub const M33_ID_ISAR0_BITFIELD_MSB = _u(@as(c_int, 11));
pub const M33_ID_ISAR0_BITFIELD_LSB = _u(@as(c_int, 8));
pub const M33_ID_ISAR0_BITFIELD_ACCESS = "RO";
pub const M33_ID_ISAR0_BITCOUNT_RESET = _u(@as(c_int, 0x0));
pub const M33_ID_ISAR0_BITCOUNT_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_ID_ISAR0_BITCOUNT_MSB = _u(@as(c_int, 7));
pub const M33_ID_ISAR0_BITCOUNT_LSB = _u(@as(c_int, 4));
pub const M33_ID_ISAR0_BITCOUNT_ACCESS = "RO";
pub const M33_ID_ISAR1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed64, .hex));
pub const M33_ID_ISAR1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0ffff000, .hex));
pub const M33_ID_ISAR1_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x05725000, .hex));
pub const M33_ID_ISAR1_INTERWORK_RESET = _u(@as(c_int, 0x5));
pub const M33_ID_ISAR1_INTERWORK_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f000000, .hex));
pub const M33_ID_ISAR1_INTERWORK_MSB = _u(@as(c_int, 27));
pub const M33_ID_ISAR1_INTERWORK_LSB = _u(@as(c_int, 24));
pub const M33_ID_ISAR1_INTERWORK_ACCESS = "RO";
pub const M33_ID_ISAR1_IMMEDIATE_RESET = _u(@as(c_int, 0x7));
pub const M33_ID_ISAR1_IMMEDIATE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_ID_ISAR1_IMMEDIATE_MSB = _u(@as(c_int, 23));
pub const M33_ID_ISAR1_IMMEDIATE_LSB = _u(@as(c_int, 20));
pub const M33_ID_ISAR1_IMMEDIATE_ACCESS = "RO";
pub const M33_ID_ISAR1_IFTHEN_RESET = _u(@as(c_int, 0x2));
pub const M33_ID_ISAR1_IFTHEN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hex));
pub const M33_ID_ISAR1_IFTHEN_MSB = _u(@as(c_int, 19));
pub const M33_ID_ISAR1_IFTHEN_LSB = _u(@as(c_int, 16));
pub const M33_ID_ISAR1_IFTHEN_ACCESS = "RO";
pub const M33_ID_ISAR1_EXTEND_RESET = _u(@as(c_int, 0x5));
pub const M33_ID_ISAR1_EXTEND_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_ID_ISAR1_EXTEND_MSB = _u(@as(c_int, 15));
pub const M33_ID_ISAR1_EXTEND_LSB = _u(@as(c_int, 12));
pub const M33_ID_ISAR1_EXTEND_ACCESS = "RO";
pub const M33_ID_ISAR2_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed68, .hex));
pub const M33_ID_ISAR2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0ffffff, .hex));
pub const M33_ID_ISAR2_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x30173426, .hex));
pub const M33_ID_ISAR2_REVERSAL_RESET = _u(@as(c_int, 0x3));
pub const M33_ID_ISAR2_REVERSAL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_ID_ISAR2_REVERSAL_MSB = _u(@as(c_int, 31));
pub const M33_ID_ISAR2_REVERSAL_LSB = _u(@as(c_int, 28));
pub const M33_ID_ISAR2_REVERSAL_ACCESS = "RO";
pub const M33_ID_ISAR2_MULTU_RESET = _u(@as(c_int, 0x1));
pub const M33_ID_ISAR2_MULTU_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_ID_ISAR2_MULTU_MSB = _u(@as(c_int, 23));
pub const M33_ID_ISAR2_MULTU_LSB = _u(@as(c_int, 20));
pub const M33_ID_ISAR2_MULTU_ACCESS = "RO";
pub const M33_ID_ISAR2_MULTS_RESET = _u(@as(c_int, 0x7));
pub const M33_ID_ISAR2_MULTS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hex));
pub const M33_ID_ISAR2_MULTS_MSB = _u(@as(c_int, 19));
pub const M33_ID_ISAR2_MULTS_LSB = _u(@as(c_int, 16));
pub const M33_ID_ISAR2_MULTS_ACCESS = "RO";
pub const M33_ID_ISAR2_MULT_RESET = _u(@as(c_int, 0x3));
pub const M33_ID_ISAR2_MULT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_ID_ISAR2_MULT_MSB = _u(@as(c_int, 15));
pub const M33_ID_ISAR2_MULT_LSB = _u(@as(c_int, 12));
pub const M33_ID_ISAR2_MULT_ACCESS = "RO";
pub const M33_ID_ISAR2_MULTIACCESSINT_RESET = _u(@as(c_int, 0x4));
pub const M33_ID_ISAR2_MULTIACCESSINT_BITS = _u(@as(c_int, 0x00000f00));
pub const M33_ID_ISAR2_MULTIACCESSINT_MSB = _u(@as(c_int, 11));
pub const M33_ID_ISAR2_MULTIACCESSINT_LSB = _u(@as(c_int, 8));
pub const M33_ID_ISAR2_MULTIACCESSINT_ACCESS = "RO";
pub const M33_ID_ISAR2_MEMHINT_RESET = _u(@as(c_int, 0x2));
pub const M33_ID_ISAR2_MEMHINT_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_ID_ISAR2_MEMHINT_MSB = _u(@as(c_int, 7));
pub const M33_ID_ISAR2_MEMHINT_LSB = _u(@as(c_int, 4));
pub const M33_ID_ISAR2_MEMHINT_ACCESS = "RO";
pub const M33_ID_ISAR2_LOADSTORE_RESET = _u(@as(c_int, 0x6));
pub const M33_ID_ISAR2_LOADSTORE_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_ID_ISAR2_LOADSTORE_MSB = _u(@as(c_int, 3));
pub const M33_ID_ISAR2_LOADSTORE_LSB = _u(@as(c_int, 0));
pub const M33_ID_ISAR2_LOADSTORE_ACCESS = "RO";
pub const M33_ID_ISAR3_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed6c, .hex));
pub const M33_ID_ISAR3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0fffffff, .hex));
pub const M33_ID_ISAR3_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x07895729, .hex));
pub const M33_ID_ISAR3_TRUENOP_RESET = _u(@as(c_int, 0x7));
pub const M33_ID_ISAR3_TRUENOP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f000000, .hex));
pub const M33_ID_ISAR3_TRUENOP_MSB = _u(@as(c_int, 27));
pub const M33_ID_ISAR3_TRUENOP_LSB = _u(@as(c_int, 24));
pub const M33_ID_ISAR3_TRUENOP_ACCESS = "RO";
pub const M33_ID_ISAR3_T32COPY_RESET = _u(@as(c_int, 0x8));
pub const M33_ID_ISAR3_T32COPY_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_ID_ISAR3_T32COPY_MSB = _u(@as(c_int, 23));
pub const M33_ID_ISAR3_T32COPY_LSB = _u(@as(c_int, 20));
pub const M33_ID_ISAR3_T32COPY_ACCESS = "RO";
pub const M33_ID_ISAR3_TABBRANCH_RESET = _u(@as(c_int, 0x9));
pub const M33_ID_ISAR3_TABBRANCH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hex));
pub const M33_ID_ISAR3_TABBRANCH_MSB = _u(@as(c_int, 19));
pub const M33_ID_ISAR3_TABBRANCH_LSB = _u(@as(c_int, 16));
pub const M33_ID_ISAR3_TABBRANCH_ACCESS = "RO";
pub const M33_ID_ISAR3_SYNCHPRIM_RESET = _u(@as(c_int, 0x5));
pub const M33_ID_ISAR3_SYNCHPRIM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_ID_ISAR3_SYNCHPRIM_MSB = _u(@as(c_int, 15));
pub const M33_ID_ISAR3_SYNCHPRIM_LSB = _u(@as(c_int, 12));
pub const M33_ID_ISAR3_SYNCHPRIM_ACCESS = "RO";
pub const M33_ID_ISAR3_SVC_RESET = _u(@as(c_int, 0x7));
pub const M33_ID_ISAR3_SVC_BITS = _u(@as(c_int, 0x00000f00));
pub const M33_ID_ISAR3_SVC_MSB = _u(@as(c_int, 11));
pub const M33_ID_ISAR3_SVC_LSB = _u(@as(c_int, 8));
pub const M33_ID_ISAR3_SVC_ACCESS = "RO";
pub const M33_ID_ISAR3_SIMD_RESET = _u(@as(c_int, 0x2));
pub const M33_ID_ISAR3_SIMD_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_ID_ISAR3_SIMD_MSB = _u(@as(c_int, 7));
pub const M33_ID_ISAR3_SIMD_LSB = _u(@as(c_int, 4));
pub const M33_ID_ISAR3_SIMD_ACCESS = "RO";
pub const M33_ID_ISAR3_SATURATE_RESET = _u(@as(c_int, 0x9));
pub const M33_ID_ISAR3_SATURATE_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_ID_ISAR3_SATURATE_MSB = _u(@as(c_int, 3));
pub const M33_ID_ISAR3_SATURATE_LSB = _u(@as(c_int, 0));
pub const M33_ID_ISAR3_SATURATE_ACCESS = "RO";
pub const M33_ID_ISAR4_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed70, .hex));
pub const M33_ID_ISAR4_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0fff0fff, .hex));
pub const M33_ID_ISAR4_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01310132, .hex));
pub const M33_ID_ISAR4_PSR_M_RESET = _u(@as(c_int, 0x1));
pub const M33_ID_ISAR4_PSR_M_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f000000, .hex));
pub const M33_ID_ISAR4_PSR_M_MSB = _u(@as(c_int, 27));
pub const M33_ID_ISAR4_PSR_M_LSB = _u(@as(c_int, 24));
pub const M33_ID_ISAR4_PSR_M_ACCESS = "RO";
pub const M33_ID_ISAR4_SYNCPRIM_FRAC_RESET = _u(@as(c_int, 0x3));
pub const M33_ID_ISAR4_SYNCPRIM_FRAC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_ID_ISAR4_SYNCPRIM_FRAC_MSB = _u(@as(c_int, 23));
pub const M33_ID_ISAR4_SYNCPRIM_FRAC_LSB = _u(@as(c_int, 20));
pub const M33_ID_ISAR4_SYNCPRIM_FRAC_ACCESS = "RO";
pub const M33_ID_ISAR4_BARRIER_RESET = _u(@as(c_int, 0x1));
pub const M33_ID_ISAR4_BARRIER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hex));
pub const M33_ID_ISAR4_BARRIER_MSB = _u(@as(c_int, 19));
pub const M33_ID_ISAR4_BARRIER_LSB = _u(@as(c_int, 16));
pub const M33_ID_ISAR4_BARRIER_ACCESS = "RO";
pub const M33_ID_ISAR4_WRITEBACK_RESET = _u(@as(c_int, 0x1));
pub const M33_ID_ISAR4_WRITEBACK_BITS = _u(@as(c_int, 0x00000f00));
pub const M33_ID_ISAR4_WRITEBACK_MSB = _u(@as(c_int, 11));
pub const M33_ID_ISAR4_WRITEBACK_LSB = _u(@as(c_int, 8));
pub const M33_ID_ISAR4_WRITEBACK_ACCESS = "RO";
pub const M33_ID_ISAR4_WITHSHIFTS_RESET = _u(@as(c_int, 0x3));
pub const M33_ID_ISAR4_WITHSHIFTS_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_ID_ISAR4_WITHSHIFTS_MSB = _u(@as(c_int, 7));
pub const M33_ID_ISAR4_WITHSHIFTS_LSB = _u(@as(c_int, 4));
pub const M33_ID_ISAR4_WITHSHIFTS_ACCESS = "RO";
pub const M33_ID_ISAR4_UNPRIV_RESET = _u(@as(c_int, 0x2));
pub const M33_ID_ISAR4_UNPRIV_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_ID_ISAR4_UNPRIV_MSB = _u(@as(c_int, 3));
pub const M33_ID_ISAR4_UNPRIV_LSB = _u(@as(c_int, 0));
pub const M33_ID_ISAR4_UNPRIV_ACCESS = "RO";
pub const M33_ID_ISAR5_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed74, .hex));
pub const M33_ID_ISAR5_BITS = _u(@as(c_int, 0x00000000));
pub const M33_ID_ISAR5_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ID_ISAR5_MSB = _u(@as(c_int, 31));
pub const M33_ID_ISAR5_LSB = _u(@as(c_int, 0));
pub const M33_ID_ISAR5_ACCESS = "RW";
pub const M33_CTR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed7c, .hex));
pub const M33_CTR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8fffc00f, .hex));
pub const M33_CTR_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000c000, .hex));
pub const M33_CTR_RES1_RESET = _u(@as(c_int, 0x1));
pub const M33_CTR_RES1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const M33_CTR_RES1_MSB = _u(@as(c_int, 31));
pub const M33_CTR_RES1_LSB = _u(@as(c_int, 31));
pub const M33_CTR_RES1_ACCESS = "RO";
pub const M33_CTR_CWG_RESET = _u(@as(c_int, 0x0));
pub const M33_CTR_CWG_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f000000, .hex));
pub const M33_CTR_CWG_MSB = _u(@as(c_int, 27));
pub const M33_CTR_CWG_LSB = _u(@as(c_int, 24));
pub const M33_CTR_CWG_ACCESS = "RO";
pub const M33_CTR_ERG_RESET = _u(@as(c_int, 0x0));
pub const M33_CTR_ERG_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_CTR_ERG_MSB = _u(@as(c_int, 23));
pub const M33_CTR_ERG_LSB = _u(@as(c_int, 20));
pub const M33_CTR_ERG_ACCESS = "RO";
pub const M33_CTR_DMINLINE_RESET = _u(@as(c_int, 0x0));
pub const M33_CTR_DMINLINE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hex));
pub const M33_CTR_DMINLINE_MSB = _u(@as(c_int, 19));
pub const M33_CTR_DMINLINE_LSB = _u(@as(c_int, 16));
pub const M33_CTR_DMINLINE_ACCESS = "RO";
pub const M33_CTR_RES1_1_RESET = _u(@as(c_int, 0x3));
pub const M33_CTR_RES1_1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const M33_CTR_RES1_1_MSB = _u(@as(c_int, 15));
pub const M33_CTR_RES1_1_LSB = _u(@as(c_int, 14));
pub const M33_CTR_RES1_1_ACCESS = "RO";
pub const M33_CTR_IMINLINE_RESET = _u(@as(c_int, 0x0));
pub const M33_CTR_IMINLINE_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTR_IMINLINE_MSB = _u(@as(c_int, 3));
pub const M33_CTR_IMINLINE_LSB = _u(@as(c_int, 0));
pub const M33_CTR_IMINLINE_ACCESS = "RO";
pub const M33_CPACR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed88, .hex));
pub const M33_CPACR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f0ffff, .hex));
pub const M33_CPACR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CPACR_CP11_RESET = _u(@as(c_int, 0x0));
pub const M33_CPACR_CP11_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00c00000, .hex));
pub const M33_CPACR_CP11_MSB = _u(@as(c_int, 23));
pub const M33_CPACR_CP11_LSB = _u(@as(c_int, 22));
pub const M33_CPACR_CP11_ACCESS = "RW";
pub const M33_CPACR_CP10_RESET = _u(@as(c_int, 0x0));
pub const M33_CPACR_CP10_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00300000, .hex));
pub const M33_CPACR_CP10_MSB = _u(@as(c_int, 21));
pub const M33_CPACR_CP10_LSB = _u(@as(c_int, 20));
pub const M33_CPACR_CP10_ACCESS = "RW";
pub const M33_CPACR_CP7_RESET = _u(@as(c_int, 0x0));
pub const M33_CPACR_CP7_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000c000, .hex));
pub const M33_CPACR_CP7_MSB = _u(@as(c_int, 15));
pub const M33_CPACR_CP7_LSB = _u(@as(c_int, 14));
pub const M33_CPACR_CP7_ACCESS = "RW";
pub const M33_CPACR_CP6_RESET = _u(@as(c_int, 0x0));
pub const M33_CPACR_CP6_BITS = _u(@as(c_int, 0x00003000));
pub const M33_CPACR_CP6_MSB = _u(@as(c_int, 13));
pub const M33_CPACR_CP6_LSB = _u(@as(c_int, 12));
pub const M33_CPACR_CP6_ACCESS = "RW";
pub const M33_CPACR_CP5_RESET = _u(@as(c_int, 0x0));
pub const M33_CPACR_CP5_BITS = _u(@as(c_int, 0x00000c00));
pub const M33_CPACR_CP5_MSB = _u(@as(c_int, 11));
pub const M33_CPACR_CP5_LSB = _u(@as(c_int, 10));
pub const M33_CPACR_CP5_ACCESS = "RW";
pub const M33_CPACR_CP4_RESET = _u(@as(c_int, 0x0));
pub const M33_CPACR_CP4_BITS = _u(@as(c_int, 0x00000300));
pub const M33_CPACR_CP4_MSB = _u(@as(c_int, 9));
pub const M33_CPACR_CP4_LSB = _u(@as(c_int, 8));
pub const M33_CPACR_CP4_ACCESS = "RW";
pub const M33_CPACR_CP3_RESET = _u(@as(c_int, 0x0));
pub const M33_CPACR_CP3_BITS = _u(@as(c_int, 0x000000c0));
pub const M33_CPACR_CP3_MSB = _u(@as(c_int, 7));
pub const M33_CPACR_CP3_LSB = _u(@as(c_int, 6));
pub const M33_CPACR_CP3_ACCESS = "RW";
pub const M33_CPACR_CP2_RESET = _u(@as(c_int, 0x0));
pub const M33_CPACR_CP2_BITS = _u(@as(c_int, 0x00000030));
pub const M33_CPACR_CP2_MSB = _u(@as(c_int, 5));
pub const M33_CPACR_CP2_LSB = _u(@as(c_int, 4));
pub const M33_CPACR_CP2_ACCESS = "RW";
pub const M33_CPACR_CP1_RESET = _u(@as(c_int, 0x0));
pub const M33_CPACR_CP1_BITS = _u(@as(c_int, 0x0000000c));
pub const M33_CPACR_CP1_MSB = _u(@as(c_int, 3));
pub const M33_CPACR_CP1_LSB = _u(@as(c_int, 2));
pub const M33_CPACR_CP1_ACCESS = "RW";
pub const M33_CPACR_CP0_RESET = _u(@as(c_int, 0x0));
pub const M33_CPACR_CP0_BITS = _u(@as(c_int, 0x00000003));
pub const M33_CPACR_CP0_MSB = _u(@as(c_int, 1));
pub const M33_CPACR_CP0_LSB = _u(@as(c_int, 0));
pub const M33_CPACR_CP0_ACCESS = "RW";
pub const M33_NSACR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed8c, .hex));
pub const M33_NSACR_BITS = _u(@as(c_int, 0x00000cff));
pub const M33_NSACR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_NSACR_CP11_RESET = _u(@as(c_int, 0x0));
pub const M33_NSACR_CP11_BITS = _u(@as(c_int, 0x00000800));
pub const M33_NSACR_CP11_MSB = _u(@as(c_int, 11));
pub const M33_NSACR_CP11_LSB = _u(@as(c_int, 11));
pub const M33_NSACR_CP11_ACCESS = "RW";
pub const M33_NSACR_CP10_RESET = _u(@as(c_int, 0x0));
pub const M33_NSACR_CP10_BITS = _u(@as(c_int, 0x00000400));
pub const M33_NSACR_CP10_MSB = _u(@as(c_int, 10));
pub const M33_NSACR_CP10_LSB = _u(@as(c_int, 10));
pub const M33_NSACR_CP10_ACCESS = "RW";
pub const M33_NSACR_CP7_RESET = _u(@as(c_int, 0x0));
pub const M33_NSACR_CP7_BITS = _u(@as(c_int, 0x00000080));
pub const M33_NSACR_CP7_MSB = _u(@as(c_int, 7));
pub const M33_NSACR_CP7_LSB = _u(@as(c_int, 7));
pub const M33_NSACR_CP7_ACCESS = "RW";
pub const M33_NSACR_CP6_RESET = _u(@as(c_int, 0x0));
pub const M33_NSACR_CP6_BITS = _u(@as(c_int, 0x00000040));
pub const M33_NSACR_CP6_MSB = _u(@as(c_int, 6));
pub const M33_NSACR_CP6_LSB = _u(@as(c_int, 6));
pub const M33_NSACR_CP6_ACCESS = "RW";
pub const M33_NSACR_CP5_RESET = _u(@as(c_int, 0x0));
pub const M33_NSACR_CP5_BITS = _u(@as(c_int, 0x00000020));
pub const M33_NSACR_CP5_MSB = _u(@as(c_int, 5));
pub const M33_NSACR_CP5_LSB = _u(@as(c_int, 5));
pub const M33_NSACR_CP5_ACCESS = "RW";
pub const M33_NSACR_CP4_RESET = _u(@as(c_int, 0x0));
pub const M33_NSACR_CP4_BITS = _u(@as(c_int, 0x00000010));
pub const M33_NSACR_CP4_MSB = _u(@as(c_int, 4));
pub const M33_NSACR_CP4_LSB = _u(@as(c_int, 4));
pub const M33_NSACR_CP4_ACCESS = "RW";
pub const M33_NSACR_CP3_RESET = _u(@as(c_int, 0x0));
pub const M33_NSACR_CP3_BITS = _u(@as(c_int, 0x00000008));
pub const M33_NSACR_CP3_MSB = _u(@as(c_int, 3));
pub const M33_NSACR_CP3_LSB = _u(@as(c_int, 3));
pub const M33_NSACR_CP3_ACCESS = "RW";
pub const M33_NSACR_CP2_RESET = _u(@as(c_int, 0x0));
pub const M33_NSACR_CP2_BITS = _u(@as(c_int, 0x00000004));
pub const M33_NSACR_CP2_MSB = _u(@as(c_int, 2));
pub const M33_NSACR_CP2_LSB = _u(@as(c_int, 2));
pub const M33_NSACR_CP2_ACCESS = "RW";
pub const M33_NSACR_CP1_RESET = _u(@as(c_int, 0x0));
pub const M33_NSACR_CP1_BITS = _u(@as(c_int, 0x00000002));
pub const M33_NSACR_CP1_MSB = _u(@as(c_int, 1));
pub const M33_NSACR_CP1_LSB = _u(@as(c_int, 1));
pub const M33_NSACR_CP1_ACCESS = "RW";
pub const M33_NSACR_CP0_RESET = _u(@as(c_int, 0x0));
pub const M33_NSACR_CP0_BITS = _u(@as(c_int, 0x00000001));
pub const M33_NSACR_CP0_MSB = _u(@as(c_int, 0));
pub const M33_NSACR_CP0_LSB = _u(@as(c_int, 0));
pub const M33_NSACR_CP0_ACCESS = "RW";
pub const M33_MPU_TYPE_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed90, .hex));
pub const M33_MPU_TYPE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ff01, .hex));
pub const M33_MPU_TYPE_RESET = _u(@as(c_int, 0x00000800));
pub const M33_MPU_TYPE_DREGION_RESET = _u(@as(c_int, 0x08));
pub const M33_MPU_TYPE_DREGION_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ff00, .hex));
pub const M33_MPU_TYPE_DREGION_MSB = _u(@as(c_int, 15));
pub const M33_MPU_TYPE_DREGION_LSB = _u(@as(c_int, 8));
pub const M33_MPU_TYPE_DREGION_ACCESS = "RO";
pub const M33_MPU_TYPE_SEPARATE_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_TYPE_SEPARATE_BITS = _u(@as(c_int, 0x00000001));
pub const M33_MPU_TYPE_SEPARATE_MSB = _u(@as(c_int, 0));
pub const M33_MPU_TYPE_SEPARATE_LSB = _u(@as(c_int, 0));
pub const M33_MPU_TYPE_SEPARATE_ACCESS = "RO";
pub const M33_MPU_CTRL_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed94, .hex));
pub const M33_MPU_CTRL_BITS = _u(@as(c_int, 0x00000007));
pub const M33_MPU_CTRL_RESET = _u(@as(c_int, 0x00000000));
pub const M33_MPU_CTRL_PRIVDEFENA_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_CTRL_PRIVDEFENA_BITS = _u(@as(c_int, 0x00000004));
pub const M33_MPU_CTRL_PRIVDEFENA_MSB = _u(@as(c_int, 2));
pub const M33_MPU_CTRL_PRIVDEFENA_LSB = _u(@as(c_int, 2));
pub const M33_MPU_CTRL_PRIVDEFENA_ACCESS = "RW";
pub const M33_MPU_CTRL_HFNMIENA_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_CTRL_HFNMIENA_BITS = _u(@as(c_int, 0x00000002));
pub const M33_MPU_CTRL_HFNMIENA_MSB = _u(@as(c_int, 1));
pub const M33_MPU_CTRL_HFNMIENA_LSB = _u(@as(c_int, 1));
pub const M33_MPU_CTRL_HFNMIENA_ACCESS = "RW";
pub const M33_MPU_CTRL_ENABLE_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_CTRL_ENABLE_BITS = _u(@as(c_int, 0x00000001));
pub const M33_MPU_CTRL_ENABLE_MSB = _u(@as(c_int, 0));
pub const M33_MPU_CTRL_ENABLE_LSB = _u(@as(c_int, 0));
pub const M33_MPU_CTRL_ENABLE_ACCESS = "RW";
pub const M33_MPU_RNR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed98, .hex));
pub const M33_MPU_RNR_BITS = _u(@as(c_int, 0x00000007));
pub const M33_MPU_RNR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_MPU_RNR_REGION_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RNR_REGION_BITS = _u(@as(c_int, 0x00000007));
pub const M33_MPU_RNR_REGION_MSB = _u(@as(c_int, 2));
pub const M33_MPU_RNR_REGION_LSB = _u(@as(c_int, 0));
pub const M33_MPU_RNR_REGION_ACCESS = "RW";
pub const M33_MPU_RBAR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ed9c, .hex));
pub const M33_MPU_RBAR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_MPU_RBAR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_MPU_RBAR_BASE_RESET = _u(@as(c_int, 0x0000000));
pub const M33_MPU_RBAR_BASE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffe0, .hex));
pub const M33_MPU_RBAR_BASE_MSB = _u(@as(c_int, 31));
pub const M33_MPU_RBAR_BASE_LSB = _u(@as(c_int, 5));
pub const M33_MPU_RBAR_BASE_ACCESS = "RW";
pub const M33_MPU_RBAR_SH_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RBAR_SH_BITS = _u(@as(c_int, 0x00000018));
pub const M33_MPU_RBAR_SH_MSB = _u(@as(c_int, 4));
pub const M33_MPU_RBAR_SH_LSB = _u(@as(c_int, 3));
pub const M33_MPU_RBAR_SH_ACCESS = "RW";
pub const M33_MPU_RBAR_AP_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RBAR_AP_BITS = _u(@as(c_int, 0x00000006));
pub const M33_MPU_RBAR_AP_MSB = _u(@as(c_int, 2));
pub const M33_MPU_RBAR_AP_LSB = _u(@as(c_int, 1));
pub const M33_MPU_RBAR_AP_ACCESS = "RW";
pub const M33_MPU_RBAR_XN_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RBAR_XN_BITS = _u(@as(c_int, 0x00000001));
pub const M33_MPU_RBAR_XN_MSB = _u(@as(c_int, 0));
pub const M33_MPU_RBAR_XN_LSB = _u(@as(c_int, 0));
pub const M33_MPU_RBAR_XN_ACCESS = "RW";
pub const M33_MPU_RLAR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000eda0, .hex));
pub const M33_MPU_RLAR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffef, .hex));
pub const M33_MPU_RLAR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_MPU_RLAR_LIMIT_RESET = _u(@as(c_int, 0x0000000));
pub const M33_MPU_RLAR_LIMIT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffe0, .hex));
pub const M33_MPU_RLAR_LIMIT_MSB = _u(@as(c_int, 31));
pub const M33_MPU_RLAR_LIMIT_LSB = _u(@as(c_int, 5));
pub const M33_MPU_RLAR_LIMIT_ACCESS = "RW";
pub const M33_MPU_RLAR_ATTRINDX_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RLAR_ATTRINDX_BITS = _u(@as(c_int, 0x0000000e));
pub const M33_MPU_RLAR_ATTRINDX_MSB = _u(@as(c_int, 3));
pub const M33_MPU_RLAR_ATTRINDX_LSB = _u(@as(c_int, 1));
pub const M33_MPU_RLAR_ATTRINDX_ACCESS = "RW";
pub const M33_MPU_RLAR_EN_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RLAR_EN_BITS = _u(@as(c_int, 0x00000001));
pub const M33_MPU_RLAR_EN_MSB = _u(@as(c_int, 0));
pub const M33_MPU_RLAR_EN_LSB = _u(@as(c_int, 0));
pub const M33_MPU_RLAR_EN_ACCESS = "RW";
pub const M33_MPU_RBAR_A1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000eda4, .hex));
pub const M33_MPU_RBAR_A1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_MPU_RBAR_A1_RESET = _u(@as(c_int, 0x00000000));
pub const M33_MPU_RBAR_A1_BASE_RESET = _u(@as(c_int, 0x0000000));
pub const M33_MPU_RBAR_A1_BASE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffe0, .hex));
pub const M33_MPU_RBAR_A1_BASE_MSB = _u(@as(c_int, 31));
pub const M33_MPU_RBAR_A1_BASE_LSB = _u(@as(c_int, 5));
pub const M33_MPU_RBAR_A1_BASE_ACCESS = "RW";
pub const M33_MPU_RBAR_A1_SH_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RBAR_A1_SH_BITS = _u(@as(c_int, 0x00000018));
pub const M33_MPU_RBAR_A1_SH_MSB = _u(@as(c_int, 4));
pub const M33_MPU_RBAR_A1_SH_LSB = _u(@as(c_int, 3));
pub const M33_MPU_RBAR_A1_SH_ACCESS = "RW";
pub const M33_MPU_RBAR_A1_AP_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RBAR_A1_AP_BITS = _u(@as(c_int, 0x00000006));
pub const M33_MPU_RBAR_A1_AP_MSB = _u(@as(c_int, 2));
pub const M33_MPU_RBAR_A1_AP_LSB = _u(@as(c_int, 1));
pub const M33_MPU_RBAR_A1_AP_ACCESS = "RW";
pub const M33_MPU_RBAR_A1_XN_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RBAR_A1_XN_BITS = _u(@as(c_int, 0x00000001));
pub const M33_MPU_RBAR_A1_XN_MSB = _u(@as(c_int, 0));
pub const M33_MPU_RBAR_A1_XN_LSB = _u(@as(c_int, 0));
pub const M33_MPU_RBAR_A1_XN_ACCESS = "RW";
pub const M33_MPU_RLAR_A1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000eda8, .hex));
pub const M33_MPU_RLAR_A1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffef, .hex));
pub const M33_MPU_RLAR_A1_RESET = _u(@as(c_int, 0x00000000));
pub const M33_MPU_RLAR_A1_LIMIT_RESET = _u(@as(c_int, 0x0000000));
pub const M33_MPU_RLAR_A1_LIMIT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffe0, .hex));
pub const M33_MPU_RLAR_A1_LIMIT_MSB = _u(@as(c_int, 31));
pub const M33_MPU_RLAR_A1_LIMIT_LSB = _u(@as(c_int, 5));
pub const M33_MPU_RLAR_A1_LIMIT_ACCESS = "RW";
pub const M33_MPU_RLAR_A1_ATTRINDX_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RLAR_A1_ATTRINDX_BITS = _u(@as(c_int, 0x0000000e));
pub const M33_MPU_RLAR_A1_ATTRINDX_MSB = _u(@as(c_int, 3));
pub const M33_MPU_RLAR_A1_ATTRINDX_LSB = _u(@as(c_int, 1));
pub const M33_MPU_RLAR_A1_ATTRINDX_ACCESS = "RW";
pub const M33_MPU_RLAR_A1_EN_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RLAR_A1_EN_BITS = _u(@as(c_int, 0x00000001));
pub const M33_MPU_RLAR_A1_EN_MSB = _u(@as(c_int, 0));
pub const M33_MPU_RLAR_A1_EN_LSB = _u(@as(c_int, 0));
pub const M33_MPU_RLAR_A1_EN_ACCESS = "RW";
pub const M33_MPU_RBAR_A2_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000edac, .hex));
pub const M33_MPU_RBAR_A2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_MPU_RBAR_A2_RESET = _u(@as(c_int, 0x00000000));
pub const M33_MPU_RBAR_A2_BASE_RESET = _u(@as(c_int, 0x0000000));
pub const M33_MPU_RBAR_A2_BASE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffe0, .hex));
pub const M33_MPU_RBAR_A2_BASE_MSB = _u(@as(c_int, 31));
pub const M33_MPU_RBAR_A2_BASE_LSB = _u(@as(c_int, 5));
pub const M33_MPU_RBAR_A2_BASE_ACCESS = "RW";
pub const M33_MPU_RBAR_A2_SH_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RBAR_A2_SH_BITS = _u(@as(c_int, 0x00000018));
pub const M33_MPU_RBAR_A2_SH_MSB = _u(@as(c_int, 4));
pub const M33_MPU_RBAR_A2_SH_LSB = _u(@as(c_int, 3));
pub const M33_MPU_RBAR_A2_SH_ACCESS = "RW";
pub const M33_MPU_RBAR_A2_AP_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RBAR_A2_AP_BITS = _u(@as(c_int, 0x00000006));
pub const M33_MPU_RBAR_A2_AP_MSB = _u(@as(c_int, 2));
pub const M33_MPU_RBAR_A2_AP_LSB = _u(@as(c_int, 1));
pub const M33_MPU_RBAR_A2_AP_ACCESS = "RW";
pub const M33_MPU_RBAR_A2_XN_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RBAR_A2_XN_BITS = _u(@as(c_int, 0x00000001));
pub const M33_MPU_RBAR_A2_XN_MSB = _u(@as(c_int, 0));
pub const M33_MPU_RBAR_A2_XN_LSB = _u(@as(c_int, 0));
pub const M33_MPU_RBAR_A2_XN_ACCESS = "RW";
pub const M33_MPU_RLAR_A2_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000edb0, .hex));
pub const M33_MPU_RLAR_A2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffef, .hex));
pub const M33_MPU_RLAR_A2_RESET = _u(@as(c_int, 0x00000000));
pub const M33_MPU_RLAR_A2_LIMIT_RESET = _u(@as(c_int, 0x0000000));
pub const M33_MPU_RLAR_A2_LIMIT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffe0, .hex));
pub const M33_MPU_RLAR_A2_LIMIT_MSB = _u(@as(c_int, 31));
pub const M33_MPU_RLAR_A2_LIMIT_LSB = _u(@as(c_int, 5));
pub const M33_MPU_RLAR_A2_LIMIT_ACCESS = "RW";
pub const M33_MPU_RLAR_A2_ATTRINDX_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RLAR_A2_ATTRINDX_BITS = _u(@as(c_int, 0x0000000e));
pub const M33_MPU_RLAR_A2_ATTRINDX_MSB = _u(@as(c_int, 3));
pub const M33_MPU_RLAR_A2_ATTRINDX_LSB = _u(@as(c_int, 1));
pub const M33_MPU_RLAR_A2_ATTRINDX_ACCESS = "RW";
pub const M33_MPU_RLAR_A2_EN_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RLAR_A2_EN_BITS = _u(@as(c_int, 0x00000001));
pub const M33_MPU_RLAR_A2_EN_MSB = _u(@as(c_int, 0));
pub const M33_MPU_RLAR_A2_EN_LSB = _u(@as(c_int, 0));
pub const M33_MPU_RLAR_A2_EN_ACCESS = "RW";
pub const M33_MPU_RBAR_A3_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000edb4, .hex));
pub const M33_MPU_RBAR_A3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_MPU_RBAR_A3_RESET = _u(@as(c_int, 0x00000000));
pub const M33_MPU_RBAR_A3_BASE_RESET = _u(@as(c_int, 0x0000000));
pub const M33_MPU_RBAR_A3_BASE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffe0, .hex));
pub const M33_MPU_RBAR_A3_BASE_MSB = _u(@as(c_int, 31));
pub const M33_MPU_RBAR_A3_BASE_LSB = _u(@as(c_int, 5));
pub const M33_MPU_RBAR_A3_BASE_ACCESS = "RW";
pub const M33_MPU_RBAR_A3_SH_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RBAR_A3_SH_BITS = _u(@as(c_int, 0x00000018));
pub const M33_MPU_RBAR_A3_SH_MSB = _u(@as(c_int, 4));
pub const M33_MPU_RBAR_A3_SH_LSB = _u(@as(c_int, 3));
pub const M33_MPU_RBAR_A3_SH_ACCESS = "RW";
pub const M33_MPU_RBAR_A3_AP_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RBAR_A3_AP_BITS = _u(@as(c_int, 0x00000006));
pub const M33_MPU_RBAR_A3_AP_MSB = _u(@as(c_int, 2));
pub const M33_MPU_RBAR_A3_AP_LSB = _u(@as(c_int, 1));
pub const M33_MPU_RBAR_A3_AP_ACCESS = "RW";
pub const M33_MPU_RBAR_A3_XN_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RBAR_A3_XN_BITS = _u(@as(c_int, 0x00000001));
pub const M33_MPU_RBAR_A3_XN_MSB = _u(@as(c_int, 0));
pub const M33_MPU_RBAR_A3_XN_LSB = _u(@as(c_int, 0));
pub const M33_MPU_RBAR_A3_XN_ACCESS = "RW";
pub const M33_MPU_RLAR_A3_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000edb8, .hex));
pub const M33_MPU_RLAR_A3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffef, .hex));
pub const M33_MPU_RLAR_A3_RESET = _u(@as(c_int, 0x00000000));
pub const M33_MPU_RLAR_A3_LIMIT_RESET = _u(@as(c_int, 0x0000000));
pub const M33_MPU_RLAR_A3_LIMIT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffe0, .hex));
pub const M33_MPU_RLAR_A3_LIMIT_MSB = _u(@as(c_int, 31));
pub const M33_MPU_RLAR_A3_LIMIT_LSB = _u(@as(c_int, 5));
pub const M33_MPU_RLAR_A3_LIMIT_ACCESS = "RW";
pub const M33_MPU_RLAR_A3_ATTRINDX_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RLAR_A3_ATTRINDX_BITS = _u(@as(c_int, 0x0000000e));
pub const M33_MPU_RLAR_A3_ATTRINDX_MSB = _u(@as(c_int, 3));
pub const M33_MPU_RLAR_A3_ATTRINDX_LSB = _u(@as(c_int, 1));
pub const M33_MPU_RLAR_A3_ATTRINDX_ACCESS = "RW";
pub const M33_MPU_RLAR_A3_EN_RESET = _u(@as(c_int, 0x0));
pub const M33_MPU_RLAR_A3_EN_BITS = _u(@as(c_int, 0x00000001));
pub const M33_MPU_RLAR_A3_EN_MSB = _u(@as(c_int, 0));
pub const M33_MPU_RLAR_A3_EN_LSB = _u(@as(c_int, 0));
pub const M33_MPU_RLAR_A3_EN_ACCESS = "RW";
pub const M33_MPU_MAIR0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000edc0, .hex));
pub const M33_MPU_MAIR0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_MPU_MAIR0_RESET = _u(@as(c_int, 0x00000000));
pub const M33_MPU_MAIR0_ATTR3_RESET = _u(@as(c_int, 0x00));
pub const M33_MPU_MAIR0_ATTR3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff000000, .hex));
pub const M33_MPU_MAIR0_ATTR3_MSB = _u(@as(c_int, 31));
pub const M33_MPU_MAIR0_ATTR3_LSB = _u(@as(c_int, 24));
pub const M33_MPU_MAIR0_ATTR3_ACCESS = "RW";
pub const M33_MPU_MAIR0_ATTR2_RESET = _u(@as(c_int, 0x00));
pub const M33_MPU_MAIR0_ATTR2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ff0000, .hex));
pub const M33_MPU_MAIR0_ATTR2_MSB = _u(@as(c_int, 23));
pub const M33_MPU_MAIR0_ATTR2_LSB = _u(@as(c_int, 16));
pub const M33_MPU_MAIR0_ATTR2_ACCESS = "RW";
pub const M33_MPU_MAIR0_ATTR1_RESET = _u(@as(c_int, 0x00));
pub const M33_MPU_MAIR0_ATTR1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ff00, .hex));
pub const M33_MPU_MAIR0_ATTR1_MSB = _u(@as(c_int, 15));
pub const M33_MPU_MAIR0_ATTR1_LSB = _u(@as(c_int, 8));
pub const M33_MPU_MAIR0_ATTR1_ACCESS = "RW";
pub const M33_MPU_MAIR0_ATTR0_RESET = _u(@as(c_int, 0x00));
pub const M33_MPU_MAIR0_ATTR0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_MPU_MAIR0_ATTR0_MSB = _u(@as(c_int, 7));
pub const M33_MPU_MAIR0_ATTR0_LSB = _u(@as(c_int, 0));
pub const M33_MPU_MAIR0_ATTR0_ACCESS = "RW";
pub const M33_MPU_MAIR1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000edc4, .hex));
pub const M33_MPU_MAIR1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_MPU_MAIR1_RESET = _u(@as(c_int, 0x00000000));
pub const M33_MPU_MAIR1_ATTR7_RESET = _u(@as(c_int, 0x00));
pub const M33_MPU_MAIR1_ATTR7_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff000000, .hex));
pub const M33_MPU_MAIR1_ATTR7_MSB = _u(@as(c_int, 31));
pub const M33_MPU_MAIR1_ATTR7_LSB = _u(@as(c_int, 24));
pub const M33_MPU_MAIR1_ATTR7_ACCESS = "RW";
pub const M33_MPU_MAIR1_ATTR6_RESET = _u(@as(c_int, 0x00));
pub const M33_MPU_MAIR1_ATTR6_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00ff0000, .hex));
pub const M33_MPU_MAIR1_ATTR6_MSB = _u(@as(c_int, 23));
pub const M33_MPU_MAIR1_ATTR6_LSB = _u(@as(c_int, 16));
pub const M33_MPU_MAIR1_ATTR6_ACCESS = "RW";
pub const M33_MPU_MAIR1_ATTR5_RESET = _u(@as(c_int, 0x00));
pub const M33_MPU_MAIR1_ATTR5_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ff00, .hex));
pub const M33_MPU_MAIR1_ATTR5_MSB = _u(@as(c_int, 15));
pub const M33_MPU_MAIR1_ATTR5_LSB = _u(@as(c_int, 8));
pub const M33_MPU_MAIR1_ATTR5_ACCESS = "RW";
pub const M33_MPU_MAIR1_ATTR4_RESET = _u(@as(c_int, 0x00));
pub const M33_MPU_MAIR1_ATTR4_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_MPU_MAIR1_ATTR4_MSB = _u(@as(c_int, 7));
pub const M33_MPU_MAIR1_ATTR4_LSB = _u(@as(c_int, 0));
pub const M33_MPU_MAIR1_ATTR4_ACCESS = "RW";
pub const M33_SAU_CTRL_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000edd0, .hex));
pub const M33_SAU_CTRL_BITS = _u(@as(c_int, 0x00000003));
pub const M33_SAU_CTRL_RESET = _u(@as(c_int, 0x00000000));
pub const M33_SAU_CTRL_ALLNS_RESET = _u(@as(c_int, 0x0));
pub const M33_SAU_CTRL_ALLNS_BITS = _u(@as(c_int, 0x00000002));
pub const M33_SAU_CTRL_ALLNS_MSB = _u(@as(c_int, 1));
pub const M33_SAU_CTRL_ALLNS_LSB = _u(@as(c_int, 1));
pub const M33_SAU_CTRL_ALLNS_ACCESS = "RW";
pub const M33_SAU_CTRL_ENABLE_RESET = _u(@as(c_int, 0x0));
pub const M33_SAU_CTRL_ENABLE_BITS = _u(@as(c_int, 0x00000001));
pub const M33_SAU_CTRL_ENABLE_MSB = _u(@as(c_int, 0));
pub const M33_SAU_CTRL_ENABLE_LSB = _u(@as(c_int, 0));
pub const M33_SAU_CTRL_ENABLE_ACCESS = "RW";
pub const M33_SAU_TYPE_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000edd4, .hex));
pub const M33_SAU_TYPE_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_SAU_TYPE_RESET = _u(@as(c_int, 0x00000008));
pub const M33_SAU_TYPE_SREGION_RESET = _u(@as(c_int, 0x08));
pub const M33_SAU_TYPE_SREGION_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_SAU_TYPE_SREGION_MSB = _u(@as(c_int, 7));
pub const M33_SAU_TYPE_SREGION_LSB = _u(@as(c_int, 0));
pub const M33_SAU_TYPE_SREGION_ACCESS = "RO";
pub const M33_SAU_RNR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000edd8, .hex));
pub const M33_SAU_RNR_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_SAU_RNR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_SAU_RNR_REGION_RESET = _u(@as(c_int, 0x00));
pub const M33_SAU_RNR_REGION_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_SAU_RNR_REGION_MSB = _u(@as(c_int, 7));
pub const M33_SAU_RNR_REGION_LSB = _u(@as(c_int, 0));
pub const M33_SAU_RNR_REGION_ACCESS = "RW";
pub const M33_SAU_RBAR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000eddc, .hex));
pub const M33_SAU_RBAR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffe0, .hex));
pub const M33_SAU_RBAR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_SAU_RBAR_BADDR_RESET = _u(@as(c_int, 0x0000000));
pub const M33_SAU_RBAR_BADDR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffe0, .hex));
pub const M33_SAU_RBAR_BADDR_MSB = _u(@as(c_int, 31));
pub const M33_SAU_RBAR_BADDR_LSB = _u(@as(c_int, 5));
pub const M33_SAU_RBAR_BADDR_ACCESS = "RW";
pub const M33_SAU_RLAR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ede0, .hex));
pub const M33_SAU_RLAR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffe3, .hex));
pub const M33_SAU_RLAR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_SAU_RLAR_LADDR_RESET = _u(@as(c_int, 0x0000000));
pub const M33_SAU_RLAR_LADDR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffe0, .hex));
pub const M33_SAU_RLAR_LADDR_MSB = _u(@as(c_int, 31));
pub const M33_SAU_RLAR_LADDR_LSB = _u(@as(c_int, 5));
pub const M33_SAU_RLAR_LADDR_ACCESS = "RW";
pub const M33_SAU_RLAR_NSC_RESET = _u(@as(c_int, 0x0));
pub const M33_SAU_RLAR_NSC_BITS = _u(@as(c_int, 0x00000002));
pub const M33_SAU_RLAR_NSC_MSB = _u(@as(c_int, 1));
pub const M33_SAU_RLAR_NSC_LSB = _u(@as(c_int, 1));
pub const M33_SAU_RLAR_NSC_ACCESS = "RW";
pub const M33_SAU_RLAR_ENABLE_RESET = _u(@as(c_int, 0x0));
pub const M33_SAU_RLAR_ENABLE_BITS = _u(@as(c_int, 0x00000001));
pub const M33_SAU_RLAR_ENABLE_MSB = _u(@as(c_int, 0));
pub const M33_SAU_RLAR_ENABLE_LSB = _u(@as(c_int, 0));
pub const M33_SAU_RLAR_ENABLE_ACCESS = "RW";
pub const M33_SFSR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ede4, .hex));
pub const M33_SFSR_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_SFSR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_SFSR_LSERR_RESET = _u(@as(c_int, 0x0));
pub const M33_SFSR_LSERR_BITS = _u(@as(c_int, 0x00000080));
pub const M33_SFSR_LSERR_MSB = _u(@as(c_int, 7));
pub const M33_SFSR_LSERR_LSB = _u(@as(c_int, 7));
pub const M33_SFSR_LSERR_ACCESS = "RW";
pub const M33_SFSR_SFARVALID_RESET = _u(@as(c_int, 0x0));
pub const M33_SFSR_SFARVALID_BITS = _u(@as(c_int, 0x00000040));
pub const M33_SFSR_SFARVALID_MSB = _u(@as(c_int, 6));
pub const M33_SFSR_SFARVALID_LSB = _u(@as(c_int, 6));
pub const M33_SFSR_SFARVALID_ACCESS = "RW";
pub const M33_SFSR_LSPERR_RESET = _u(@as(c_int, 0x0));
pub const M33_SFSR_LSPERR_BITS = _u(@as(c_int, 0x00000020));
pub const M33_SFSR_LSPERR_MSB = _u(@as(c_int, 5));
pub const M33_SFSR_LSPERR_LSB = _u(@as(c_int, 5));
pub const M33_SFSR_LSPERR_ACCESS = "RW";
pub const M33_SFSR_INVTRAN_RESET = _u(@as(c_int, 0x0));
pub const M33_SFSR_INVTRAN_BITS = _u(@as(c_int, 0x00000010));
pub const M33_SFSR_INVTRAN_MSB = _u(@as(c_int, 4));
pub const M33_SFSR_INVTRAN_LSB = _u(@as(c_int, 4));
pub const M33_SFSR_INVTRAN_ACCESS = "RW";
pub const M33_SFSR_AUVIOL_RESET = _u(@as(c_int, 0x0));
pub const M33_SFSR_AUVIOL_BITS = _u(@as(c_int, 0x00000008));
pub const M33_SFSR_AUVIOL_MSB = _u(@as(c_int, 3));
pub const M33_SFSR_AUVIOL_LSB = _u(@as(c_int, 3));
pub const M33_SFSR_AUVIOL_ACCESS = "RW";
pub const M33_SFSR_INVER_RESET = _u(@as(c_int, 0x0));
pub const M33_SFSR_INVER_BITS = _u(@as(c_int, 0x00000004));
pub const M33_SFSR_INVER_MSB = _u(@as(c_int, 2));
pub const M33_SFSR_INVER_LSB = _u(@as(c_int, 2));
pub const M33_SFSR_INVER_ACCESS = "RW";
pub const M33_SFSR_INVIS_RESET = _u(@as(c_int, 0x0));
pub const M33_SFSR_INVIS_BITS = _u(@as(c_int, 0x00000002));
pub const M33_SFSR_INVIS_MSB = _u(@as(c_int, 1));
pub const M33_SFSR_INVIS_LSB = _u(@as(c_int, 1));
pub const M33_SFSR_INVIS_ACCESS = "RW";
pub const M33_SFSR_INVEP_RESET = _u(@as(c_int, 0x0));
pub const M33_SFSR_INVEP_BITS = _u(@as(c_int, 0x00000001));
pub const M33_SFSR_INVEP_MSB = _u(@as(c_int, 0));
pub const M33_SFSR_INVEP_LSB = _u(@as(c_int, 0));
pub const M33_SFSR_INVEP_ACCESS = "RW";
pub const M33_SFAR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ede8, .hex));
pub const M33_SFAR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_SFAR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_SFAR_ADDRESS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_SFAR_ADDRESS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_SFAR_ADDRESS_MSB = _u(@as(c_int, 31));
pub const M33_SFAR_ADDRESS_LSB = _u(@as(c_int, 0));
pub const M33_SFAR_ADDRESS_ACCESS = "RW";
pub const M33_DHCSR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000edf0, .hex));
pub const M33_DHCSR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x071f002f, .hex));
pub const M33_DHCSR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DHCSR_S_RESTART_ST_RESET = _u(@as(c_int, 0x0));
pub const M33_DHCSR_S_RESTART_ST_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const M33_DHCSR_S_RESTART_ST_MSB = _u(@as(c_int, 26));
pub const M33_DHCSR_S_RESTART_ST_LSB = _u(@as(c_int, 26));
pub const M33_DHCSR_S_RESTART_ST_ACCESS = "RO";
pub const M33_DHCSR_S_RESET_ST_RESET = _u(@as(c_int, 0x0));
pub const M33_DHCSR_S_RESET_ST_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const M33_DHCSR_S_RESET_ST_MSB = _u(@as(c_int, 25));
pub const M33_DHCSR_S_RESET_ST_LSB = _u(@as(c_int, 25));
pub const M33_DHCSR_S_RESET_ST_ACCESS = "RO";
pub const M33_DHCSR_S_RETIRE_ST_RESET = _u(@as(c_int, 0x0));
pub const M33_DHCSR_S_RETIRE_ST_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const M33_DHCSR_S_RETIRE_ST_MSB = _u(@as(c_int, 24));
pub const M33_DHCSR_S_RETIRE_ST_LSB = _u(@as(c_int, 24));
pub const M33_DHCSR_S_RETIRE_ST_ACCESS = "RO";
pub const M33_DHCSR_S_SDE_RESET = _u(@as(c_int, 0x0));
pub const M33_DHCSR_S_SDE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const M33_DHCSR_S_SDE_MSB = _u(@as(c_int, 20));
pub const M33_DHCSR_S_SDE_LSB = _u(@as(c_int, 20));
pub const M33_DHCSR_S_SDE_ACCESS = "RO";
pub const M33_DHCSR_S_LOCKUP_RESET = _u(@as(c_int, 0x0));
pub const M33_DHCSR_S_LOCKUP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const M33_DHCSR_S_LOCKUP_MSB = _u(@as(c_int, 19));
pub const M33_DHCSR_S_LOCKUP_LSB = _u(@as(c_int, 19));
pub const M33_DHCSR_S_LOCKUP_ACCESS = "RO";
pub const M33_DHCSR_S_SLEEP_RESET = _u(@as(c_int, 0x0));
pub const M33_DHCSR_S_SLEEP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const M33_DHCSR_S_SLEEP_MSB = _u(@as(c_int, 18));
pub const M33_DHCSR_S_SLEEP_LSB = _u(@as(c_int, 18));
pub const M33_DHCSR_S_SLEEP_ACCESS = "RO";
pub const M33_DHCSR_S_HALT_RESET = _u(@as(c_int, 0x0));
pub const M33_DHCSR_S_HALT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const M33_DHCSR_S_HALT_MSB = _u(@as(c_int, 17));
pub const M33_DHCSR_S_HALT_LSB = _u(@as(c_int, 17));
pub const M33_DHCSR_S_HALT_ACCESS = "RO";
pub const M33_DHCSR_S_REGRDY_RESET = _u(@as(c_int, 0x0));
pub const M33_DHCSR_S_REGRDY_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const M33_DHCSR_S_REGRDY_MSB = _u(@as(c_int, 16));
pub const M33_DHCSR_S_REGRDY_LSB = _u(@as(c_int, 16));
pub const M33_DHCSR_S_REGRDY_ACCESS = "RO";
pub const M33_DHCSR_C_SNAPSTALL_RESET = _u(@as(c_int, 0x0));
pub const M33_DHCSR_C_SNAPSTALL_BITS = _u(@as(c_int, 0x00000020));
pub const M33_DHCSR_C_SNAPSTALL_MSB = _u(@as(c_int, 5));
pub const M33_DHCSR_C_SNAPSTALL_LSB = _u(@as(c_int, 5));
pub const M33_DHCSR_C_SNAPSTALL_ACCESS = "RW";
pub const M33_DHCSR_C_MASKINTS_RESET = _u(@as(c_int, 0x0));
pub const M33_DHCSR_C_MASKINTS_BITS = _u(@as(c_int, 0x00000008));
pub const M33_DHCSR_C_MASKINTS_MSB = _u(@as(c_int, 3));
pub const M33_DHCSR_C_MASKINTS_LSB = _u(@as(c_int, 3));
pub const M33_DHCSR_C_MASKINTS_ACCESS = "RW";
pub const M33_DHCSR_C_STEP_RESET = _u(@as(c_int, 0x0));
pub const M33_DHCSR_C_STEP_BITS = _u(@as(c_int, 0x00000004));
pub const M33_DHCSR_C_STEP_MSB = _u(@as(c_int, 2));
pub const M33_DHCSR_C_STEP_LSB = _u(@as(c_int, 2));
pub const M33_DHCSR_C_STEP_ACCESS = "RW";
pub const M33_DHCSR_C_HALT_RESET = _u(@as(c_int, 0x0));
pub const M33_DHCSR_C_HALT_BITS = _u(@as(c_int, 0x00000002));
pub const M33_DHCSR_C_HALT_MSB = _u(@as(c_int, 1));
pub const M33_DHCSR_C_HALT_LSB = _u(@as(c_int, 1));
pub const M33_DHCSR_C_HALT_ACCESS = "RW";
pub const M33_DHCSR_C_DEBUGEN_RESET = _u(@as(c_int, 0x0));
pub const M33_DHCSR_C_DEBUGEN_BITS = _u(@as(c_int, 0x00000001));
pub const M33_DHCSR_C_DEBUGEN_MSB = _u(@as(c_int, 0));
pub const M33_DHCSR_C_DEBUGEN_LSB = _u(@as(c_int, 0));
pub const M33_DHCSR_C_DEBUGEN_ACCESS = "RW";
pub const M33_DCRSR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000edf4, .hex));
pub const M33_DCRSR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001007f, .hex));
pub const M33_DCRSR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DCRSR_REGWNR_RESET = _u(@as(c_int, 0x0));
pub const M33_DCRSR_REGWNR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const M33_DCRSR_REGWNR_MSB = _u(@as(c_int, 16));
pub const M33_DCRSR_REGWNR_LSB = _u(@as(c_int, 16));
pub const M33_DCRSR_REGWNR_ACCESS = "RW";
pub const M33_DCRSR_REGSEL_RESET = _u(@as(c_int, 0x00));
pub const M33_DCRSR_REGSEL_BITS = _u(@as(c_int, 0x0000007f));
pub const M33_DCRSR_REGSEL_MSB = _u(@as(c_int, 6));
pub const M33_DCRSR_REGSEL_LSB = _u(@as(c_int, 0));
pub const M33_DCRSR_REGSEL_ACCESS = "RW";
pub const M33_DCRDR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000edf8, .hex));
pub const M33_DCRDR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_DCRDR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DCRDR_DBGTMP_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DCRDR_DBGTMP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_DCRDR_DBGTMP_MSB = _u(@as(c_int, 31));
pub const M33_DCRDR_DBGTMP_LSB = _u(@as(c_int, 0));
pub const M33_DCRDR_DBGTMP_ACCESS = "RW";
pub const M33_DEMCR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000edfc, .hex));
pub const M33_DEMCR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x011f0ff1, .hex));
pub const M33_DEMCR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DEMCR_TRCENA_RESET = _u(@as(c_int, 0x0));
pub const M33_DEMCR_TRCENA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const M33_DEMCR_TRCENA_MSB = _u(@as(c_int, 24));
pub const M33_DEMCR_TRCENA_LSB = _u(@as(c_int, 24));
pub const M33_DEMCR_TRCENA_ACCESS = "RW";
pub const M33_DEMCR_SDME_RESET = _u(@as(c_int, 0x0));
pub const M33_DEMCR_SDME_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const M33_DEMCR_SDME_MSB = _u(@as(c_int, 20));
pub const M33_DEMCR_SDME_LSB = _u(@as(c_int, 20));
pub const M33_DEMCR_SDME_ACCESS = "RO";
pub const M33_DEMCR_MON_REQ_RESET = _u(@as(c_int, 0x0));
pub const M33_DEMCR_MON_REQ_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const M33_DEMCR_MON_REQ_MSB = _u(@as(c_int, 19));
pub const M33_DEMCR_MON_REQ_LSB = _u(@as(c_int, 19));
pub const M33_DEMCR_MON_REQ_ACCESS = "RW";
pub const M33_DEMCR_MON_STEP_RESET = _u(@as(c_int, 0x0));
pub const M33_DEMCR_MON_STEP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const M33_DEMCR_MON_STEP_MSB = _u(@as(c_int, 18));
pub const M33_DEMCR_MON_STEP_LSB = _u(@as(c_int, 18));
pub const M33_DEMCR_MON_STEP_ACCESS = "RW";
pub const M33_DEMCR_MON_PEND_RESET = _u(@as(c_int, 0x0));
pub const M33_DEMCR_MON_PEND_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const M33_DEMCR_MON_PEND_MSB = _u(@as(c_int, 17));
pub const M33_DEMCR_MON_PEND_LSB = _u(@as(c_int, 17));
pub const M33_DEMCR_MON_PEND_ACCESS = "RW";
pub const M33_DEMCR_MON_EN_RESET = _u(@as(c_int, 0x0));
pub const M33_DEMCR_MON_EN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const M33_DEMCR_MON_EN_MSB = _u(@as(c_int, 16));
pub const M33_DEMCR_MON_EN_LSB = _u(@as(c_int, 16));
pub const M33_DEMCR_MON_EN_ACCESS = "RW";
pub const M33_DEMCR_VC_SFERR_RESET = _u(@as(c_int, 0x0));
pub const M33_DEMCR_VC_SFERR_BITS = _u(@as(c_int, 0x00000800));
pub const M33_DEMCR_VC_SFERR_MSB = _u(@as(c_int, 11));
pub const M33_DEMCR_VC_SFERR_LSB = _u(@as(c_int, 11));
pub const M33_DEMCR_VC_SFERR_ACCESS = "RW";
pub const M33_DEMCR_VC_HARDERR_RESET = _u(@as(c_int, 0x0));
pub const M33_DEMCR_VC_HARDERR_BITS = _u(@as(c_int, 0x00000400));
pub const M33_DEMCR_VC_HARDERR_MSB = _u(@as(c_int, 10));
pub const M33_DEMCR_VC_HARDERR_LSB = _u(@as(c_int, 10));
pub const M33_DEMCR_VC_HARDERR_ACCESS = "RW";
pub const M33_DEMCR_VC_INTERR_RESET = _u(@as(c_int, 0x0));
pub const M33_DEMCR_VC_INTERR_BITS = _u(@as(c_int, 0x00000200));
pub const M33_DEMCR_VC_INTERR_MSB = _u(@as(c_int, 9));
pub const M33_DEMCR_VC_INTERR_LSB = _u(@as(c_int, 9));
pub const M33_DEMCR_VC_INTERR_ACCESS = "RW";
pub const M33_DEMCR_VC_BUSERR_RESET = _u(@as(c_int, 0x0));
pub const M33_DEMCR_VC_BUSERR_BITS = _u(@as(c_int, 0x00000100));
pub const M33_DEMCR_VC_BUSERR_MSB = _u(@as(c_int, 8));
pub const M33_DEMCR_VC_BUSERR_LSB = _u(@as(c_int, 8));
pub const M33_DEMCR_VC_BUSERR_ACCESS = "RW";
pub const M33_DEMCR_VC_STATERR_RESET = _u(@as(c_int, 0x0));
pub const M33_DEMCR_VC_STATERR_BITS = _u(@as(c_int, 0x00000080));
pub const M33_DEMCR_VC_STATERR_MSB = _u(@as(c_int, 7));
pub const M33_DEMCR_VC_STATERR_LSB = _u(@as(c_int, 7));
pub const M33_DEMCR_VC_STATERR_ACCESS = "RW";
pub const M33_DEMCR_VC_CHKERR_RESET = _u(@as(c_int, 0x0));
pub const M33_DEMCR_VC_CHKERR_BITS = _u(@as(c_int, 0x00000040));
pub const M33_DEMCR_VC_CHKERR_MSB = _u(@as(c_int, 6));
pub const M33_DEMCR_VC_CHKERR_LSB = _u(@as(c_int, 6));
pub const M33_DEMCR_VC_CHKERR_ACCESS = "RW";
pub const M33_DEMCR_VC_NOCPERR_RESET = _u(@as(c_int, 0x0));
pub const M33_DEMCR_VC_NOCPERR_BITS = _u(@as(c_int, 0x00000020));
pub const M33_DEMCR_VC_NOCPERR_MSB = _u(@as(c_int, 5));
pub const M33_DEMCR_VC_NOCPERR_LSB = _u(@as(c_int, 5));
pub const M33_DEMCR_VC_NOCPERR_ACCESS = "RW";
pub const M33_DEMCR_VC_MMERR_RESET = _u(@as(c_int, 0x0));
pub const M33_DEMCR_VC_MMERR_BITS = _u(@as(c_int, 0x00000010));
pub const M33_DEMCR_VC_MMERR_MSB = _u(@as(c_int, 4));
pub const M33_DEMCR_VC_MMERR_LSB = _u(@as(c_int, 4));
pub const M33_DEMCR_VC_MMERR_ACCESS = "RW";
pub const M33_DEMCR_VC_CORERESET_RESET = _u(@as(c_int, 0x0));
pub const M33_DEMCR_VC_CORERESET_BITS = _u(@as(c_int, 0x00000001));
pub const M33_DEMCR_VC_CORERESET_MSB = _u(@as(c_int, 0));
pub const M33_DEMCR_VC_CORERESET_LSB = _u(@as(c_int, 0));
pub const M33_DEMCR_VC_CORERESET_ACCESS = "RW";
pub const M33_DSCSR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ee08, .hex));
pub const M33_DSCSR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030003, .hex));
pub const M33_DSCSR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DSCSR_CDSKEY_RESET = _u(@as(c_int, 0x0));
pub const M33_DSCSR_CDSKEY_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const M33_DSCSR_CDSKEY_MSB = _u(@as(c_int, 17));
pub const M33_DSCSR_CDSKEY_LSB = _u(@as(c_int, 17));
pub const M33_DSCSR_CDSKEY_ACCESS = "RW";
pub const M33_DSCSR_CDS_RESET = _u(@as(c_int, 0x0));
pub const M33_DSCSR_CDS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const M33_DSCSR_CDS_MSB = _u(@as(c_int, 16));
pub const M33_DSCSR_CDS_LSB = _u(@as(c_int, 16));
pub const M33_DSCSR_CDS_ACCESS = "RW";
pub const M33_DSCSR_SBRSEL_RESET = _u(@as(c_int, 0x0));
pub const M33_DSCSR_SBRSEL_BITS = _u(@as(c_int, 0x00000002));
pub const M33_DSCSR_SBRSEL_MSB = _u(@as(c_int, 1));
pub const M33_DSCSR_SBRSEL_LSB = _u(@as(c_int, 1));
pub const M33_DSCSR_SBRSEL_ACCESS = "RW";
pub const M33_DSCSR_SBRSELEN_RESET = _u(@as(c_int, 0x0));
pub const M33_DSCSR_SBRSELEN_BITS = _u(@as(c_int, 0x00000001));
pub const M33_DSCSR_SBRSELEN_MSB = _u(@as(c_int, 0));
pub const M33_DSCSR_SBRSELEN_LSB = _u(@as(c_int, 0));
pub const M33_DSCSR_SBRSELEN_ACCESS = "RW";
pub const M33_STIR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ef00, .hex));
pub const M33_STIR_BITS = _u(@as(c_int, 0x000001ff));
pub const M33_STIR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_STIR_INTID_RESET = _u(@as(c_int, 0x000));
pub const M33_STIR_INTID_BITS = _u(@as(c_int, 0x000001ff));
pub const M33_STIR_INTID_MSB = _u(@as(c_int, 8));
pub const M33_STIR_INTID_LSB = _u(@as(c_int, 0));
pub const M33_STIR_INTID_ACCESS = "RW";
pub const M33_FPCCR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ef34, .hex));
pub const M33_FPCCR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xfc0007ff, .hex));
pub const M33_FPCCR_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000472, .hex));
pub const M33_FPCCR_ASPEN_RESET = _u(@as(c_int, 0x0));
pub const M33_FPCCR_ASPEN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const M33_FPCCR_ASPEN_MSB = _u(@as(c_int, 31));
pub const M33_FPCCR_ASPEN_LSB = _u(@as(c_int, 31));
pub const M33_FPCCR_ASPEN_ACCESS = "RW";
pub const M33_FPCCR_LSPEN_RESET = _u(@as(c_int, 0x0));
pub const M33_FPCCR_LSPEN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex));
pub const M33_FPCCR_LSPEN_MSB = _u(@as(c_int, 30));
pub const M33_FPCCR_LSPEN_LSB = _u(@as(c_int, 30));
pub const M33_FPCCR_LSPEN_ACCESS = "RW";
pub const M33_FPCCR_LSPENS_RESET = _u(@as(c_int, 0x1));
pub const M33_FPCCR_LSPENS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const M33_FPCCR_LSPENS_MSB = _u(@as(c_int, 29));
pub const M33_FPCCR_LSPENS_LSB = _u(@as(c_int, 29));
pub const M33_FPCCR_LSPENS_ACCESS = "RW";
pub const M33_FPCCR_CLRONRET_RESET = _u(@as(c_int, 0x0));
pub const M33_FPCCR_CLRONRET_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const M33_FPCCR_CLRONRET_MSB = _u(@as(c_int, 28));
pub const M33_FPCCR_CLRONRET_LSB = _u(@as(c_int, 28));
pub const M33_FPCCR_CLRONRET_ACCESS = "RW";
pub const M33_FPCCR_CLRONRETS_RESET = _u(@as(c_int, 0x0));
pub const M33_FPCCR_CLRONRETS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const M33_FPCCR_CLRONRETS_MSB = _u(@as(c_int, 27));
pub const M33_FPCCR_CLRONRETS_LSB = _u(@as(c_int, 27));
pub const M33_FPCCR_CLRONRETS_ACCESS = "RW";
pub const M33_FPCCR_TS_RESET = _u(@as(c_int, 0x0));
pub const M33_FPCCR_TS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const M33_FPCCR_TS_MSB = _u(@as(c_int, 26));
pub const M33_FPCCR_TS_LSB = _u(@as(c_int, 26));
pub const M33_FPCCR_TS_ACCESS = "RW";
pub const M33_FPCCR_UFRDY_RESET = _u(@as(c_int, 0x1));
pub const M33_FPCCR_UFRDY_BITS = _u(@as(c_int, 0x00000400));
pub const M33_FPCCR_UFRDY_MSB = _u(@as(c_int, 10));
pub const M33_FPCCR_UFRDY_LSB = _u(@as(c_int, 10));
pub const M33_FPCCR_UFRDY_ACCESS = "RW";
pub const M33_FPCCR_SPLIMVIOL_RESET = _u(@as(c_int, 0x0));
pub const M33_FPCCR_SPLIMVIOL_BITS = _u(@as(c_int, 0x00000200));
pub const M33_FPCCR_SPLIMVIOL_MSB = _u(@as(c_int, 9));
pub const M33_FPCCR_SPLIMVIOL_LSB = _u(@as(c_int, 9));
pub const M33_FPCCR_SPLIMVIOL_ACCESS = "RW";
pub const M33_FPCCR_MONRDY_RESET = _u(@as(c_int, 0x0));
pub const M33_FPCCR_MONRDY_BITS = _u(@as(c_int, 0x00000100));
pub const M33_FPCCR_MONRDY_MSB = _u(@as(c_int, 8));
pub const M33_FPCCR_MONRDY_LSB = _u(@as(c_int, 8));
pub const M33_FPCCR_MONRDY_ACCESS = "RW";
pub const M33_FPCCR_SFRDY_RESET = _u(@as(c_int, 0x0));
pub const M33_FPCCR_SFRDY_BITS = _u(@as(c_int, 0x00000080));
pub const M33_FPCCR_SFRDY_MSB = _u(@as(c_int, 7));
pub const M33_FPCCR_SFRDY_LSB = _u(@as(c_int, 7));
pub const M33_FPCCR_SFRDY_ACCESS = "RW";
pub const M33_FPCCR_BFRDY_RESET = _u(@as(c_int, 0x1));
pub const M33_FPCCR_BFRDY_BITS = _u(@as(c_int, 0x00000040));
pub const M33_FPCCR_BFRDY_MSB = _u(@as(c_int, 6));
pub const M33_FPCCR_BFRDY_LSB = _u(@as(c_int, 6));
pub const M33_FPCCR_BFRDY_ACCESS = "RW";
pub const M33_FPCCR_MMRDY_RESET = _u(@as(c_int, 0x1));
pub const M33_FPCCR_MMRDY_BITS = _u(@as(c_int, 0x00000020));
pub const M33_FPCCR_MMRDY_MSB = _u(@as(c_int, 5));
pub const M33_FPCCR_MMRDY_LSB = _u(@as(c_int, 5));
pub const M33_FPCCR_MMRDY_ACCESS = "RW";
pub const M33_FPCCR_HFRDY_RESET = _u(@as(c_int, 0x1));
pub const M33_FPCCR_HFRDY_BITS = _u(@as(c_int, 0x00000010));
pub const M33_FPCCR_HFRDY_MSB = _u(@as(c_int, 4));
pub const M33_FPCCR_HFRDY_LSB = _u(@as(c_int, 4));
pub const M33_FPCCR_HFRDY_ACCESS = "RW";
pub const M33_FPCCR_THREAD_RESET = _u(@as(c_int, 0x0));
pub const M33_FPCCR_THREAD_BITS = _u(@as(c_int, 0x00000008));
pub const M33_FPCCR_THREAD_MSB = _u(@as(c_int, 3));
pub const M33_FPCCR_THREAD_LSB = _u(@as(c_int, 3));
pub const M33_FPCCR_THREAD_ACCESS = "RW";
pub const M33_FPCCR_S_RESET = _u(@as(c_int, 0x0));
pub const M33_FPCCR_S_BITS = _u(@as(c_int, 0x00000004));
pub const M33_FPCCR_S_MSB = _u(@as(c_int, 2));
pub const M33_FPCCR_S_LSB = _u(@as(c_int, 2));
pub const M33_FPCCR_S_ACCESS = "RW";
pub const M33_FPCCR_USER_RESET = _u(@as(c_int, 0x1));
pub const M33_FPCCR_USER_BITS = _u(@as(c_int, 0x00000002));
pub const M33_FPCCR_USER_MSB = _u(@as(c_int, 1));
pub const M33_FPCCR_USER_LSB = _u(@as(c_int, 1));
pub const M33_FPCCR_USER_ACCESS = "RW";
pub const M33_FPCCR_LSPACT_RESET = _u(@as(c_int, 0x0));
pub const M33_FPCCR_LSPACT_BITS = _u(@as(c_int, 0x00000001));
pub const M33_FPCCR_LSPACT_MSB = _u(@as(c_int, 0));
pub const M33_FPCCR_LSPACT_LSB = _u(@as(c_int, 0));
pub const M33_FPCCR_LSPACT_ACCESS = "RW";
pub const M33_FPCAR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ef38, .hex));
pub const M33_FPCAR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xfffffff8, .hex));
pub const M33_FPCAR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_FPCAR_ADDRESS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_FPCAR_ADDRESS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xfffffff8, .hex));
pub const M33_FPCAR_ADDRESS_MSB = _u(@as(c_int, 31));
pub const M33_FPCAR_ADDRESS_LSB = _u(@as(c_int, 3));
pub const M33_FPCAR_ADDRESS_ACCESS = "RW";
pub const M33_FPDSCR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ef3c, .hex));
pub const M33_FPDSCR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x07c00000, .hex));
pub const M33_FPDSCR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_FPDSCR_AHP_RESET = _u(@as(c_int, 0x0));
pub const M33_FPDSCR_AHP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const M33_FPDSCR_AHP_MSB = _u(@as(c_int, 26));
pub const M33_FPDSCR_AHP_LSB = _u(@as(c_int, 26));
pub const M33_FPDSCR_AHP_ACCESS = "RW";
pub const M33_FPDSCR_DN_RESET = _u(@as(c_int, 0x0));
pub const M33_FPDSCR_DN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const M33_FPDSCR_DN_MSB = _u(@as(c_int, 25));
pub const M33_FPDSCR_DN_LSB = _u(@as(c_int, 25));
pub const M33_FPDSCR_DN_ACCESS = "RW";
pub const M33_FPDSCR_FZ_RESET = _u(@as(c_int, 0x0));
pub const M33_FPDSCR_FZ_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const M33_FPDSCR_FZ_MSB = _u(@as(c_int, 24));
pub const M33_FPDSCR_FZ_LSB = _u(@as(c_int, 24));
pub const M33_FPDSCR_FZ_ACCESS = "RW";
pub const M33_FPDSCR_RMODE_RESET = _u(@as(c_int, 0x0));
pub const M33_FPDSCR_RMODE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00c00000, .hex));
pub const M33_FPDSCR_RMODE_MSB = _u(@as(c_int, 23));
pub const M33_FPDSCR_RMODE_LSB = _u(@as(c_int, 22));
pub const M33_FPDSCR_RMODE_ACCESS = "RW";
pub const M33_MVFR0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ef40, .hex));
pub const M33_MVFR0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0ff0fff, .hex));
pub const M33_MVFR0_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x60540601, .hex));
pub const M33_MVFR0_FPROUND_RESET = _u(@as(c_int, 0x6));
pub const M33_MVFR0_FPROUND_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_MVFR0_FPROUND_MSB = _u(@as(c_int, 31));
pub const M33_MVFR0_FPROUND_LSB = _u(@as(c_int, 28));
pub const M33_MVFR0_FPROUND_ACCESS = "RO";
pub const M33_MVFR0_FPSQRT_RESET = _u(@as(c_int, 0x5));
pub const M33_MVFR0_FPSQRT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_MVFR0_FPSQRT_MSB = _u(@as(c_int, 23));
pub const M33_MVFR0_FPSQRT_LSB = _u(@as(c_int, 20));
pub const M33_MVFR0_FPSQRT_ACCESS = "RO";
pub const M33_MVFR0_FPDIVIDE_RESET = _u(@as(c_int, 0x4));
pub const M33_MVFR0_FPDIVIDE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hex));
pub const M33_MVFR0_FPDIVIDE_MSB = _u(@as(c_int, 19));
pub const M33_MVFR0_FPDIVIDE_LSB = _u(@as(c_int, 16));
pub const M33_MVFR0_FPDIVIDE_ACCESS = "RO";
pub const M33_MVFR0_FPDP_RESET = _u(@as(c_int, 0x6));
pub const M33_MVFR0_FPDP_BITS = _u(@as(c_int, 0x00000f00));
pub const M33_MVFR0_FPDP_MSB = _u(@as(c_int, 11));
pub const M33_MVFR0_FPDP_LSB = _u(@as(c_int, 8));
pub const M33_MVFR0_FPDP_ACCESS = "RO";
pub const M33_MVFR0_FPSP_RESET = _u(@as(c_int, 0x0));
pub const M33_MVFR0_FPSP_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_MVFR0_FPSP_MSB = _u(@as(c_int, 7));
pub const M33_MVFR0_FPSP_LSB = _u(@as(c_int, 4));
pub const M33_MVFR0_FPSP_ACCESS = "RO";
pub const M33_MVFR0_SIMDREG_RESET = _u(@as(c_int, 0x1));
pub const M33_MVFR0_SIMDREG_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_MVFR0_SIMDREG_MSB = _u(@as(c_int, 3));
pub const M33_MVFR0_SIMDREG_LSB = _u(@as(c_int, 0));
pub const M33_MVFR0_SIMDREG_ACCESS = "RO";
pub const M33_MVFR1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ef44, .hex));
pub const M33_MVFR1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff0000ff, .hex));
pub const M33_MVFR1_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85000089, .hex));
pub const M33_MVFR1_FMAC_RESET = _u(@as(c_int, 0x8));
pub const M33_MVFR1_FMAC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_MVFR1_FMAC_MSB = _u(@as(c_int, 31));
pub const M33_MVFR1_FMAC_LSB = _u(@as(c_int, 28));
pub const M33_MVFR1_FMAC_ACCESS = "RO";
pub const M33_MVFR1_FPHP_RESET = _u(@as(c_int, 0x5));
pub const M33_MVFR1_FPHP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f000000, .hex));
pub const M33_MVFR1_FPHP_MSB = _u(@as(c_int, 27));
pub const M33_MVFR1_FPHP_LSB = _u(@as(c_int, 24));
pub const M33_MVFR1_FPHP_ACCESS = "RO";
pub const M33_MVFR1_FPDNAN_RESET = _u(@as(c_int, 0x8));
pub const M33_MVFR1_FPDNAN_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_MVFR1_FPDNAN_MSB = _u(@as(c_int, 7));
pub const M33_MVFR1_FPDNAN_LSB = _u(@as(c_int, 4));
pub const M33_MVFR1_FPDNAN_ACCESS = "RO";
pub const M33_MVFR1_FPFTZ_RESET = _u(@as(c_int, 0x9));
pub const M33_MVFR1_FPFTZ_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_MVFR1_FPFTZ_MSB = _u(@as(c_int, 3));
pub const M33_MVFR1_FPFTZ_LSB = _u(@as(c_int, 0));
pub const M33_MVFR1_FPFTZ_ACCESS = "RO";
pub const M33_MVFR2_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ef48, .hex));
pub const M33_MVFR2_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_MVFR2_RESET = _u(@as(c_int, 0x00000060));
pub const M33_MVFR2_FPMISC_RESET = _u(@as(c_int, 0x6));
pub const M33_MVFR2_FPMISC_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_MVFR2_FPMISC_MSB = _u(@as(c_int, 7));
pub const M33_MVFR2_FPMISC_LSB = _u(@as(c_int, 4));
pub const M33_MVFR2_FPMISC_ACCESS = "RO";
pub const M33_DDEVARCH_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000efbc, .hex));
pub const M33_DDEVARCH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_DDEVARCH_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x47702a04, .hex));
pub const M33_DDEVARCH_ARCHITECT_RESET = _u(@as(c_int, 0x23b));
pub const M33_DDEVARCH_ARCHITECT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffe00000, .hex));
pub const M33_DDEVARCH_ARCHITECT_MSB = _u(@as(c_int, 31));
pub const M33_DDEVARCH_ARCHITECT_LSB = _u(@as(c_int, 21));
pub const M33_DDEVARCH_ARCHITECT_ACCESS = "RO";
pub const M33_DDEVARCH_PRESENT_RESET = _u(@as(c_int, 0x1));
pub const M33_DDEVARCH_PRESENT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const M33_DDEVARCH_PRESENT_MSB = _u(@as(c_int, 20));
pub const M33_DDEVARCH_PRESENT_LSB = _u(@as(c_int, 20));
pub const M33_DDEVARCH_PRESENT_ACCESS = "RO";
pub const M33_DDEVARCH_REVISION_RESET = _u(@as(c_int, 0x0));
pub const M33_DDEVARCH_REVISION_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hex));
pub const M33_DDEVARCH_REVISION_MSB = _u(@as(c_int, 19));
pub const M33_DDEVARCH_REVISION_LSB = _u(@as(c_int, 16));
pub const M33_DDEVARCH_REVISION_ACCESS = "RO";
pub const M33_DDEVARCH_ARCHVER_RESET = _u(@as(c_int, 0x2));
pub const M33_DDEVARCH_ARCHVER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_DDEVARCH_ARCHVER_MSB = _u(@as(c_int, 15));
pub const M33_DDEVARCH_ARCHVER_LSB = _u(@as(c_int, 12));
pub const M33_DDEVARCH_ARCHVER_ACCESS = "RO";
pub const M33_DDEVARCH_ARCHPART_RESET = _u(@as(c_int, 0xa04));
pub const M33_DDEVARCH_ARCHPART_BITS = _u(@as(c_int, 0x00000fff));
pub const M33_DDEVARCH_ARCHPART_MSB = _u(@as(c_int, 11));
pub const M33_DDEVARCH_ARCHPART_LSB = _u(@as(c_int, 0));
pub const M33_DDEVARCH_ARCHPART_ACCESS = "RO";
pub const M33_DDEVTYPE_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000efcc, .hex));
pub const M33_DDEVTYPE_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DDEVTYPE_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DDEVTYPE_SUB_RESET = _u(@as(c_int, 0x0));
pub const M33_DDEVTYPE_SUB_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_DDEVTYPE_SUB_MSB = _u(@as(c_int, 7));
pub const M33_DDEVTYPE_SUB_LSB = _u(@as(c_int, 4));
pub const M33_DDEVTYPE_SUB_ACCESS = "RO";
pub const M33_DDEVTYPE_MAJOR_RESET = _u(@as(c_int, 0x0));
pub const M33_DDEVTYPE_MAJOR_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_DDEVTYPE_MAJOR_MSB = _u(@as(c_int, 3));
pub const M33_DDEVTYPE_MAJOR_LSB = _u(@as(c_int, 0));
pub const M33_DDEVTYPE_MAJOR_ACCESS = "RO";
pub const M33_DPIDR4_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000efd0, .hex));
pub const M33_DPIDR4_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DPIDR4_RESET = _u(@as(c_int, 0x00000004));
pub const M33_DPIDR4_SIZE_RESET = _u(@as(c_int, 0x0));
pub const M33_DPIDR4_SIZE_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_DPIDR4_SIZE_MSB = _u(@as(c_int, 7));
pub const M33_DPIDR4_SIZE_LSB = _u(@as(c_int, 4));
pub const M33_DPIDR4_SIZE_ACCESS = "RO";
pub const M33_DPIDR4_DES_2_RESET = _u(@as(c_int, 0x4));
pub const M33_DPIDR4_DES_2_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_DPIDR4_DES_2_MSB = _u(@as(c_int, 3));
pub const M33_DPIDR4_DES_2_LSB = _u(@as(c_int, 0));
pub const M33_DPIDR4_DES_2_ACCESS = "RO";
pub const M33_DPIDR5_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000efd4, .hex));
pub const M33_DPIDR5_BITS = _u(@as(c_int, 0x00000000));
pub const M33_DPIDR5_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DPIDR5_MSB = _u(@as(c_int, 31));
pub const M33_DPIDR5_LSB = _u(@as(c_int, 0));
pub const M33_DPIDR5_ACCESS = "RW";
pub const M33_DPIDR6_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000efd8, .hex));
pub const M33_DPIDR6_BITS = _u(@as(c_int, 0x00000000));
pub const M33_DPIDR6_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DPIDR6_MSB = _u(@as(c_int, 31));
pub const M33_DPIDR6_LSB = _u(@as(c_int, 0));
pub const M33_DPIDR6_ACCESS = "RW";
pub const M33_DPIDR7_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000efdc, .hex));
pub const M33_DPIDR7_BITS = _u(@as(c_int, 0x00000000));
pub const M33_DPIDR7_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DPIDR7_MSB = _u(@as(c_int, 31));
pub const M33_DPIDR7_LSB = _u(@as(c_int, 0));
pub const M33_DPIDR7_ACCESS = "RW";
pub const M33_DPIDR0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000efe0, .hex));
pub const M33_DPIDR0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DPIDR0_RESET = _u(@as(c_int, 0x00000021));
pub const M33_DPIDR0_PART_0_RESET = _u(@as(c_int, 0x21));
pub const M33_DPIDR0_PART_0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DPIDR0_PART_0_MSB = _u(@as(c_int, 7));
pub const M33_DPIDR0_PART_0_LSB = _u(@as(c_int, 0));
pub const M33_DPIDR0_PART_0_ACCESS = "RO";
pub const M33_DPIDR1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000efe4, .hex));
pub const M33_DPIDR1_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DPIDR1_RESET = _u(@as(c_int, 0x000000bd));
pub const M33_DPIDR1_DES_0_RESET = _u(@as(c_int, 0xb));
pub const M33_DPIDR1_DES_0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_DPIDR1_DES_0_MSB = _u(@as(c_int, 7));
pub const M33_DPIDR1_DES_0_LSB = _u(@as(c_int, 4));
pub const M33_DPIDR1_DES_0_ACCESS = "RO";
pub const M33_DPIDR1_PART_1_RESET = _u(@as(c_int, 0xd));
pub const M33_DPIDR1_PART_1_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_DPIDR1_PART_1_MSB = _u(@as(c_int, 3));
pub const M33_DPIDR1_PART_1_LSB = _u(@as(c_int, 0));
pub const M33_DPIDR1_PART_1_ACCESS = "RO";
pub const M33_DPIDR2_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000efe8, .hex));
pub const M33_DPIDR2_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DPIDR2_RESET = _u(@as(c_int, 0x0000000b));
pub const M33_DPIDR2_REVISION_RESET = _u(@as(c_int, 0x0));
pub const M33_DPIDR2_REVISION_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_DPIDR2_REVISION_MSB = _u(@as(c_int, 7));
pub const M33_DPIDR2_REVISION_LSB = _u(@as(c_int, 4));
pub const M33_DPIDR2_REVISION_ACCESS = "RO";
pub const M33_DPIDR2_JEDEC_RESET = _u(@as(c_int, 0x1));
pub const M33_DPIDR2_JEDEC_BITS = _u(@as(c_int, 0x00000008));
pub const M33_DPIDR2_JEDEC_MSB = _u(@as(c_int, 3));
pub const M33_DPIDR2_JEDEC_LSB = _u(@as(c_int, 3));
pub const M33_DPIDR2_JEDEC_ACCESS = "RO";
pub const M33_DPIDR2_DES_1_RESET = _u(@as(c_int, 0x3));
pub const M33_DPIDR2_DES_1_BITS = _u(@as(c_int, 0x00000007));
pub const M33_DPIDR2_DES_1_MSB = _u(@as(c_int, 2));
pub const M33_DPIDR2_DES_1_LSB = _u(@as(c_int, 0));
pub const M33_DPIDR2_DES_1_ACCESS = "RO";
pub const M33_DPIDR3_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000efec, .hex));
pub const M33_DPIDR3_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DPIDR3_RESET = _u(@as(c_int, 0x00000000));
pub const M33_DPIDR3_REVAND_RESET = _u(@as(c_int, 0x0));
pub const M33_DPIDR3_REVAND_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_DPIDR3_REVAND_MSB = _u(@as(c_int, 7));
pub const M33_DPIDR3_REVAND_LSB = _u(@as(c_int, 4));
pub const M33_DPIDR3_REVAND_ACCESS = "RO";
pub const M33_DPIDR3_CMOD_RESET = _u(@as(c_int, 0x0));
pub const M33_DPIDR3_CMOD_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_DPIDR3_CMOD_MSB = _u(@as(c_int, 3));
pub const M33_DPIDR3_CMOD_LSB = _u(@as(c_int, 0));
pub const M33_DPIDR3_CMOD_ACCESS = "RO";
pub const M33_DCIDR0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000eff0, .hex));
pub const M33_DCIDR0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DCIDR0_RESET = _u(@as(c_int, 0x0000000d));
pub const M33_DCIDR0_PRMBL_0_RESET = _u(@as(c_int, 0x0d));
pub const M33_DCIDR0_PRMBL_0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DCIDR0_PRMBL_0_MSB = _u(@as(c_int, 7));
pub const M33_DCIDR0_PRMBL_0_LSB = _u(@as(c_int, 0));
pub const M33_DCIDR0_PRMBL_0_ACCESS = "RO";
pub const M33_DCIDR1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000eff4, .hex));
pub const M33_DCIDR1_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DCIDR1_RESET = _u(@as(c_int, 0x00000090));
pub const M33_DCIDR1_CLASS_RESET = _u(@as(c_int, 0x9));
pub const M33_DCIDR1_CLASS_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_DCIDR1_CLASS_MSB = _u(@as(c_int, 7));
pub const M33_DCIDR1_CLASS_LSB = _u(@as(c_int, 4));
pub const M33_DCIDR1_CLASS_ACCESS = "RO";
pub const M33_DCIDR1_PRMBL_1_RESET = _u(@as(c_int, 0x0));
pub const M33_DCIDR1_PRMBL_1_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_DCIDR1_PRMBL_1_MSB = _u(@as(c_int, 3));
pub const M33_DCIDR1_PRMBL_1_LSB = _u(@as(c_int, 0));
pub const M33_DCIDR1_PRMBL_1_ACCESS = "RO";
pub const M33_DCIDR2_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000eff8, .hex));
pub const M33_DCIDR2_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DCIDR2_RESET = _u(@as(c_int, 0x00000005));
pub const M33_DCIDR2_PRMBL_2_RESET = _u(@as(c_int, 0x05));
pub const M33_DCIDR2_PRMBL_2_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DCIDR2_PRMBL_2_MSB = _u(@as(c_int, 7));
pub const M33_DCIDR2_PRMBL_2_LSB = _u(@as(c_int, 0));
pub const M33_DCIDR2_PRMBL_2_ACCESS = "RO";
pub const M33_DCIDR3_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000effc, .hex));
pub const M33_DCIDR3_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DCIDR3_RESET = _u(@as(c_int, 0x000000b1));
pub const M33_DCIDR3_PRMBL_3_RESET = _u(@as(c_int, 0xb1));
pub const M33_DCIDR3_PRMBL_3_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DCIDR3_PRMBL_3_MSB = _u(@as(c_int, 7));
pub const M33_DCIDR3_PRMBL_3_LSB = _u(@as(c_int, 0));
pub const M33_DCIDR3_PRMBL_3_ACCESS = "RO";
pub const M33_TRCPRGCTLR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041004, .hex));
pub const M33_TRCPRGCTLR_BITS = _u(@as(c_int, 0x00000001));
pub const M33_TRCPRGCTLR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCPRGCTLR_EN_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCPRGCTLR_EN_BITS = _u(@as(c_int, 0x00000001));
pub const M33_TRCPRGCTLR_EN_MSB = _u(@as(c_int, 0));
pub const M33_TRCPRGCTLR_EN_LSB = _u(@as(c_int, 0));
pub const M33_TRCPRGCTLR_EN_ACCESS = "RW";
pub const M33_TRCSTATR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0004100c, .hex));
pub const M33_TRCSTATR_BITS = _u(@as(c_int, 0x00000003));
pub const M33_TRCSTATR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCSTATR_PMSTABLE_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCSTATR_PMSTABLE_BITS = _u(@as(c_int, 0x00000002));
pub const M33_TRCSTATR_PMSTABLE_MSB = _u(@as(c_int, 1));
pub const M33_TRCSTATR_PMSTABLE_LSB = _u(@as(c_int, 1));
pub const M33_TRCSTATR_PMSTABLE_ACCESS = "RO";
pub const M33_TRCSTATR_IDLE_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCSTATR_IDLE_BITS = _u(@as(c_int, 0x00000001));
pub const M33_TRCSTATR_IDLE_MSB = _u(@as(c_int, 0));
pub const M33_TRCSTATR_IDLE_LSB = _u(@as(c_int, 0));
pub const M33_TRCSTATR_IDLE_ACCESS = "RO";
pub const M33_TRCCONFIGR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041010, .hex));
pub const M33_TRCCONFIGR_BITS = _u(@as(c_int, 0x00001ff8));
pub const M33_TRCCONFIGR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCCONFIGR_RS_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCCONFIGR_RS_BITS = _u(@as(c_int, 0x00001000));
pub const M33_TRCCONFIGR_RS_MSB = _u(@as(c_int, 12));
pub const M33_TRCCONFIGR_RS_LSB = _u(@as(c_int, 12));
pub const M33_TRCCONFIGR_RS_ACCESS = "RW";
pub const M33_TRCCONFIGR_TS_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCCONFIGR_TS_BITS = _u(@as(c_int, 0x00000800));
pub const M33_TRCCONFIGR_TS_MSB = _u(@as(c_int, 11));
pub const M33_TRCCONFIGR_TS_LSB = _u(@as(c_int, 11));
pub const M33_TRCCONFIGR_TS_ACCESS = "RW";
pub const M33_TRCCONFIGR_COND_RESET = _u(@as(c_int, 0x00));
pub const M33_TRCCONFIGR_COND_BITS = _u(@as(c_int, 0x000007e0));
pub const M33_TRCCONFIGR_COND_MSB = _u(@as(c_int, 10));
pub const M33_TRCCONFIGR_COND_LSB = _u(@as(c_int, 5));
pub const M33_TRCCONFIGR_COND_ACCESS = "RW";
pub const M33_TRCCONFIGR_CCI_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCCONFIGR_CCI_BITS = _u(@as(c_int, 0x00000010));
pub const M33_TRCCONFIGR_CCI_MSB = _u(@as(c_int, 4));
pub const M33_TRCCONFIGR_CCI_LSB = _u(@as(c_int, 4));
pub const M33_TRCCONFIGR_CCI_ACCESS = "RW";
pub const M33_TRCCONFIGR_BB_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCCONFIGR_BB_BITS = _u(@as(c_int, 0x00000008));
pub const M33_TRCCONFIGR_BB_MSB = _u(@as(c_int, 3));
pub const M33_TRCCONFIGR_BB_LSB = _u(@as(c_int, 3));
pub const M33_TRCCONFIGR_BB_ACCESS = "RW";
pub const M33_TRCEVENTCTL0R_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041020, .hex));
pub const M33_TRCEVENTCTL0R_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008787, .hex));
pub const M33_TRCEVENTCTL0R_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCEVENTCTL0R_TYPE1_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCEVENTCTL0R_TYPE1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const M33_TRCEVENTCTL0R_TYPE1_MSB = _u(@as(c_int, 15));
pub const M33_TRCEVENTCTL0R_TYPE1_LSB = _u(@as(c_int, 15));
pub const M33_TRCEVENTCTL0R_TYPE1_ACCESS = "RW";
pub const M33_TRCEVENTCTL0R_SEL1_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCEVENTCTL0R_SEL1_BITS = _u(@as(c_int, 0x00000700));
pub const M33_TRCEVENTCTL0R_SEL1_MSB = _u(@as(c_int, 10));
pub const M33_TRCEVENTCTL0R_SEL1_LSB = _u(@as(c_int, 8));
pub const M33_TRCEVENTCTL0R_SEL1_ACCESS = "RW";
pub const M33_TRCEVENTCTL0R_TYPE0_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCEVENTCTL0R_TYPE0_BITS = _u(@as(c_int, 0x00000080));
pub const M33_TRCEVENTCTL0R_TYPE0_MSB = _u(@as(c_int, 7));
pub const M33_TRCEVENTCTL0R_TYPE0_LSB = _u(@as(c_int, 7));
pub const M33_TRCEVENTCTL0R_TYPE0_ACCESS = "RW";
pub const M33_TRCEVENTCTL0R_SEL0_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCEVENTCTL0R_SEL0_BITS = _u(@as(c_int, 0x00000007));
pub const M33_TRCEVENTCTL0R_SEL0_MSB = _u(@as(c_int, 2));
pub const M33_TRCEVENTCTL0R_SEL0_LSB = _u(@as(c_int, 0));
pub const M33_TRCEVENTCTL0R_SEL0_ACCESS = "RW";
pub const M33_TRCEVENTCTL1R_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041024, .hex));
pub const M33_TRCEVENTCTL1R_BITS = _u(@as(c_int, 0x00001803));
pub const M33_TRCEVENTCTL1R_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCEVENTCTL1R_LPOVERRIDE_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCEVENTCTL1R_LPOVERRIDE_BITS = _u(@as(c_int, 0x00001000));
pub const M33_TRCEVENTCTL1R_LPOVERRIDE_MSB = _u(@as(c_int, 12));
pub const M33_TRCEVENTCTL1R_LPOVERRIDE_LSB = _u(@as(c_int, 12));
pub const M33_TRCEVENTCTL1R_LPOVERRIDE_ACCESS = "RW";
pub const M33_TRCEVENTCTL1R_ATB_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCEVENTCTL1R_ATB_BITS = _u(@as(c_int, 0x00000800));
pub const M33_TRCEVENTCTL1R_ATB_MSB = _u(@as(c_int, 11));
pub const M33_TRCEVENTCTL1R_ATB_LSB = _u(@as(c_int, 11));
pub const M33_TRCEVENTCTL1R_ATB_ACCESS = "RW";
pub const M33_TRCEVENTCTL1R_INSTEN1_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCEVENTCTL1R_INSTEN1_BITS = _u(@as(c_int, 0x00000002));
pub const M33_TRCEVENTCTL1R_INSTEN1_MSB = _u(@as(c_int, 1));
pub const M33_TRCEVENTCTL1R_INSTEN1_LSB = _u(@as(c_int, 1));
pub const M33_TRCEVENTCTL1R_INSTEN1_ACCESS = "RW";
pub const M33_TRCEVENTCTL1R_INSTEN0_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCEVENTCTL1R_INSTEN0_BITS = _u(@as(c_int, 0x00000001));
pub const M33_TRCEVENTCTL1R_INSTEN0_MSB = _u(@as(c_int, 0));
pub const M33_TRCEVENTCTL1R_INSTEN0_LSB = _u(@as(c_int, 0));
pub const M33_TRCEVENTCTL1R_INSTEN0_ACCESS = "RW";
pub const M33_TRCSTALLCTLR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0004102c, .hex));
pub const M33_TRCSTALLCTLR_BITS = _u(@as(c_int, 0x0000050c));
pub const M33_TRCSTALLCTLR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCSTALLCTLR_INSTPRIORITY_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCSTALLCTLR_INSTPRIORITY_BITS = _u(@as(c_int, 0x00000400));
pub const M33_TRCSTALLCTLR_INSTPRIORITY_MSB = _u(@as(c_int, 10));
pub const M33_TRCSTALLCTLR_INSTPRIORITY_LSB = _u(@as(c_int, 10));
pub const M33_TRCSTALLCTLR_INSTPRIORITY_ACCESS = "RO";
pub const M33_TRCSTALLCTLR_ISTALL_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCSTALLCTLR_ISTALL_BITS = _u(@as(c_int, 0x00000100));
pub const M33_TRCSTALLCTLR_ISTALL_MSB = _u(@as(c_int, 8));
pub const M33_TRCSTALLCTLR_ISTALL_LSB = _u(@as(c_int, 8));
pub const M33_TRCSTALLCTLR_ISTALL_ACCESS = "RW";
pub const M33_TRCSTALLCTLR_LEVEL_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCSTALLCTLR_LEVEL_BITS = _u(@as(c_int, 0x0000000c));
pub const M33_TRCSTALLCTLR_LEVEL_MSB = _u(@as(c_int, 3));
pub const M33_TRCSTALLCTLR_LEVEL_LSB = _u(@as(c_int, 2));
pub const M33_TRCSTALLCTLR_LEVEL_ACCESS = "RW";
pub const M33_TRCTSCTLR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041030, .hex));
pub const M33_TRCTSCTLR_BITS = _u(@as(c_int, 0x00000083));
pub const M33_TRCTSCTLR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCTSCTLR_TYPE0_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCTSCTLR_TYPE0_BITS = _u(@as(c_int, 0x00000080));
pub const M33_TRCTSCTLR_TYPE0_MSB = _u(@as(c_int, 7));
pub const M33_TRCTSCTLR_TYPE0_LSB = _u(@as(c_int, 7));
pub const M33_TRCTSCTLR_TYPE0_ACCESS = "RW";
pub const M33_TRCTSCTLR_SEL0_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCTSCTLR_SEL0_BITS = _u(@as(c_int, 0x00000003));
pub const M33_TRCTSCTLR_SEL0_MSB = _u(@as(c_int, 1));
pub const M33_TRCTSCTLR_SEL0_LSB = _u(@as(c_int, 0));
pub const M33_TRCTSCTLR_SEL0_ACCESS = "RW";
pub const M33_TRCSYNCPR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041034, .hex));
pub const M33_TRCSYNCPR_BITS = _u(@as(c_int, 0x0000001f));
pub const M33_TRCSYNCPR_RESET = _u(@as(c_int, 0x0000000a));
pub const M33_TRCSYNCPR_PERIOD_RESET = _u(@as(c_int, 0x0a));
pub const M33_TRCSYNCPR_PERIOD_BITS = _u(@as(c_int, 0x0000001f));
pub const M33_TRCSYNCPR_PERIOD_MSB = _u(@as(c_int, 4));
pub const M33_TRCSYNCPR_PERIOD_LSB = _u(@as(c_int, 0));
pub const M33_TRCSYNCPR_PERIOD_ACCESS = "RO";
pub const M33_TRCCCCTLR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041038, .hex));
pub const M33_TRCCCCTLR_BITS = _u(@as(c_int, 0x00000fff));
pub const M33_TRCCCCTLR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCCCCTLR_THRESHOLD_RESET = _u(@as(c_int, 0x000));
pub const M33_TRCCCCTLR_THRESHOLD_BITS = _u(@as(c_int, 0x00000fff));
pub const M33_TRCCCCTLR_THRESHOLD_MSB = _u(@as(c_int, 11));
pub const M33_TRCCCCTLR_THRESHOLD_LSB = _u(@as(c_int, 0));
pub const M33_TRCCCCTLR_THRESHOLD_ACCESS = "RW";
pub const M33_TRCVICTLR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041080, .hex));
pub const M33_TRCVICTLR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00090e83, .hex));
pub const M33_TRCVICTLR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCVICTLR_EXLEVEL_S3_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCVICTLR_EXLEVEL_S3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const M33_TRCVICTLR_EXLEVEL_S3_MSB = _u(@as(c_int, 19));
pub const M33_TRCVICTLR_EXLEVEL_S3_LSB = _u(@as(c_int, 19));
pub const M33_TRCVICTLR_EXLEVEL_S3_ACCESS = "RW";
pub const M33_TRCVICTLR_EXLEVEL_S0_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCVICTLR_EXLEVEL_S0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const M33_TRCVICTLR_EXLEVEL_S0_MSB = _u(@as(c_int, 16));
pub const M33_TRCVICTLR_EXLEVEL_S0_LSB = _u(@as(c_int, 16));
pub const M33_TRCVICTLR_EXLEVEL_S0_ACCESS = "RW";
pub const M33_TRCVICTLR_TRCERR_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCVICTLR_TRCERR_BITS = _u(@as(c_int, 0x00000800));
pub const M33_TRCVICTLR_TRCERR_MSB = _u(@as(c_int, 11));
pub const M33_TRCVICTLR_TRCERR_LSB = _u(@as(c_int, 11));
pub const M33_TRCVICTLR_TRCERR_ACCESS = "RW";
pub const M33_TRCVICTLR_TRCRESET_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCVICTLR_TRCRESET_BITS = _u(@as(c_int, 0x00000400));
pub const M33_TRCVICTLR_TRCRESET_MSB = _u(@as(c_int, 10));
pub const M33_TRCVICTLR_TRCRESET_LSB = _u(@as(c_int, 10));
pub const M33_TRCVICTLR_TRCRESET_ACCESS = "RW";
pub const M33_TRCVICTLR_SSSTATUS_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCVICTLR_SSSTATUS_BITS = _u(@as(c_int, 0x00000200));
pub const M33_TRCVICTLR_SSSTATUS_MSB = _u(@as(c_int, 9));
pub const M33_TRCVICTLR_SSSTATUS_LSB = _u(@as(c_int, 9));
pub const M33_TRCVICTLR_SSSTATUS_ACCESS = "RW";
pub const M33_TRCVICTLR_TYPE0_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCVICTLR_TYPE0_BITS = _u(@as(c_int, 0x00000080));
pub const M33_TRCVICTLR_TYPE0_MSB = _u(@as(c_int, 7));
pub const M33_TRCVICTLR_TYPE0_LSB = _u(@as(c_int, 7));
pub const M33_TRCVICTLR_TYPE0_ACCESS = "RW";
pub const M33_TRCVICTLR_SEL0_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCVICTLR_SEL0_BITS = _u(@as(c_int, 0x00000003));
pub const M33_TRCVICTLR_SEL0_MSB = _u(@as(c_int, 1));
pub const M33_TRCVICTLR_SEL0_LSB = _u(@as(c_int, 0));
pub const M33_TRCVICTLR_SEL0_ACCESS = "RW";
pub const M33_TRCCNTRLDVR0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041140, .hex));
pub const M33_TRCCNTRLDVR0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const M33_TRCCNTRLDVR0_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCCNTRLDVR0_VALUE_RESET = _u(@as(c_int, 0x0000));
pub const M33_TRCCNTRLDVR0_VALUE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const M33_TRCCNTRLDVR0_VALUE_MSB = _u(@as(c_int, 15));
pub const M33_TRCCNTRLDVR0_VALUE_LSB = _u(@as(c_int, 0));
pub const M33_TRCCNTRLDVR0_VALUE_ACCESS = "RW";
pub const M33_TRCIDR8_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041180, .hex));
pub const M33_TRCIDR8_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_TRCIDR8_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCIDR8_MAXSPEC_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCIDR8_MAXSPEC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_TRCIDR8_MAXSPEC_MSB = _u(@as(c_int, 31));
pub const M33_TRCIDR8_MAXSPEC_LSB = _u(@as(c_int, 0));
pub const M33_TRCIDR8_MAXSPEC_ACCESS = "RO";
pub const M33_TRCIDR9_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041184, .hex));
pub const M33_TRCIDR9_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_TRCIDR9_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCIDR9_NUMP0KEY_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCIDR9_NUMP0KEY_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_TRCIDR9_NUMP0KEY_MSB = _u(@as(c_int, 31));
pub const M33_TRCIDR9_NUMP0KEY_LSB = _u(@as(c_int, 0));
pub const M33_TRCIDR9_NUMP0KEY_ACCESS = "RO";
pub const M33_TRCIDR10_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041188, .hex));
pub const M33_TRCIDR10_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_TRCIDR10_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCIDR10_NUMP1KEY_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCIDR10_NUMP1KEY_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_TRCIDR10_NUMP1KEY_MSB = _u(@as(c_int, 31));
pub const M33_TRCIDR10_NUMP1KEY_LSB = _u(@as(c_int, 0));
pub const M33_TRCIDR10_NUMP1KEY_ACCESS = "RO";
pub const M33_TRCIDR11_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0004118c, .hex));
pub const M33_TRCIDR11_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_TRCIDR11_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCIDR11_NUMP1SPC_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCIDR11_NUMP1SPC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_TRCIDR11_NUMP1SPC_MSB = _u(@as(c_int, 31));
pub const M33_TRCIDR11_NUMP1SPC_LSB = _u(@as(c_int, 0));
pub const M33_TRCIDR11_NUMP1SPC_ACCESS = "RO";
pub const M33_TRCIDR12_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041190, .hex));
pub const M33_TRCIDR12_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_TRCIDR12_RESET = _u(@as(c_int, 0x00000001));
pub const M33_TRCIDR12_NUMCONDKEY_RESET = _u(@as(c_int, 0x00000001));
pub const M33_TRCIDR12_NUMCONDKEY_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_TRCIDR12_NUMCONDKEY_MSB = _u(@as(c_int, 31));
pub const M33_TRCIDR12_NUMCONDKEY_LSB = _u(@as(c_int, 0));
pub const M33_TRCIDR12_NUMCONDKEY_ACCESS = "RO";
pub const M33_TRCIDR13_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041194, .hex));
pub const M33_TRCIDR13_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_TRCIDR13_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCIDR13_NUMCONDSPC_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCIDR13_NUMCONDSPC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_TRCIDR13_NUMCONDSPC_MSB = _u(@as(c_int, 31));
pub const M33_TRCIDR13_NUMCONDSPC_LSB = _u(@as(c_int, 0));
pub const M33_TRCIDR13_NUMCONDSPC_ACCESS = "RO";
pub const M33_TRCIMSPEC_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000411c0, .hex));
pub const M33_TRCIMSPEC_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_TRCIMSPEC_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCIMSPEC_SUPPORT_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCIMSPEC_SUPPORT_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_TRCIMSPEC_SUPPORT_MSB = _u(@as(c_int, 3));
pub const M33_TRCIMSPEC_SUPPORT_LSB = _u(@as(c_int, 0));
pub const M33_TRCIMSPEC_SUPPORT_ACCESS = "RO";
pub const M33_TRCIDR0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000411e0, .hex));
pub const M33_TRCIDR0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x3f03feff, .hex));
pub const M33_TRCIDR0_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x280006e1, .hex));
pub const M33_TRCIDR0_COMMOPT_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCIDR0_COMMOPT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex));
pub const M33_TRCIDR0_COMMOPT_MSB = _u(@as(c_int, 29));
pub const M33_TRCIDR0_COMMOPT_LSB = _u(@as(c_int, 29));
pub const M33_TRCIDR0_COMMOPT_ACCESS = "RO";
pub const M33_TRCIDR0_TSSIZE_RESET = _u(@as(c_int, 0x08));
pub const M33_TRCIDR0_TSSIZE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1f000000, .hex));
pub const M33_TRCIDR0_TSSIZE_MSB = _u(@as(c_int, 28));
pub const M33_TRCIDR0_TSSIZE_LSB = _u(@as(c_int, 24));
pub const M33_TRCIDR0_TSSIZE_ACCESS = "RO";
pub const M33_TRCIDR0_TRCEXDATA_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCIDR0_TRCEXDATA_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const M33_TRCIDR0_TRCEXDATA_MSB = _u(@as(c_int, 17));
pub const M33_TRCIDR0_TRCEXDATA_LSB = _u(@as(c_int, 17));
pub const M33_TRCIDR0_TRCEXDATA_ACCESS = "RO";
pub const M33_TRCIDR0_QSUPP_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCIDR0_QSUPP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00018000, .hex));
pub const M33_TRCIDR0_QSUPP_MSB = _u(@as(c_int, 16));
pub const M33_TRCIDR0_QSUPP_LSB = _u(@as(c_int, 15));
pub const M33_TRCIDR0_QSUPP_ACCESS = "RO";
pub const M33_TRCIDR0_QFILT_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCIDR0_QFILT_BITS = _u(@as(c_int, 0x00004000));
pub const M33_TRCIDR0_QFILT_MSB = _u(@as(c_int, 14));
pub const M33_TRCIDR0_QFILT_LSB = _u(@as(c_int, 14));
pub const M33_TRCIDR0_QFILT_ACCESS = "RO";
pub const M33_TRCIDR0_CONDTYPE_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCIDR0_CONDTYPE_BITS = _u(@as(c_int, 0x00003000));
pub const M33_TRCIDR0_CONDTYPE_MSB = _u(@as(c_int, 13));
pub const M33_TRCIDR0_CONDTYPE_LSB = _u(@as(c_int, 12));
pub const M33_TRCIDR0_CONDTYPE_ACCESS = "RO";
pub const M33_TRCIDR0_NUMEVENT_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCIDR0_NUMEVENT_BITS = _u(@as(c_int, 0x00000c00));
pub const M33_TRCIDR0_NUMEVENT_MSB = _u(@as(c_int, 11));
pub const M33_TRCIDR0_NUMEVENT_LSB = _u(@as(c_int, 10));
pub const M33_TRCIDR0_NUMEVENT_ACCESS = "RO";
pub const M33_TRCIDR0_RETSTACK_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCIDR0_RETSTACK_BITS = _u(@as(c_int, 0x00000200));
pub const M33_TRCIDR0_RETSTACK_MSB = _u(@as(c_int, 9));
pub const M33_TRCIDR0_RETSTACK_LSB = _u(@as(c_int, 9));
pub const M33_TRCIDR0_RETSTACK_ACCESS = "RO";
pub const M33_TRCIDR0_TRCCCI_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCIDR0_TRCCCI_BITS = _u(@as(c_int, 0x00000080));
pub const M33_TRCIDR0_TRCCCI_MSB = _u(@as(c_int, 7));
pub const M33_TRCIDR0_TRCCCI_LSB = _u(@as(c_int, 7));
pub const M33_TRCIDR0_TRCCCI_ACCESS = "RO";
pub const M33_TRCIDR0_TRCCOND_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCIDR0_TRCCOND_BITS = _u(@as(c_int, 0x00000040));
pub const M33_TRCIDR0_TRCCOND_MSB = _u(@as(c_int, 6));
pub const M33_TRCIDR0_TRCCOND_LSB = _u(@as(c_int, 6));
pub const M33_TRCIDR0_TRCCOND_ACCESS = "RO";
pub const M33_TRCIDR0_TRCBB_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCIDR0_TRCBB_BITS = _u(@as(c_int, 0x00000020));
pub const M33_TRCIDR0_TRCBB_MSB = _u(@as(c_int, 5));
pub const M33_TRCIDR0_TRCBB_LSB = _u(@as(c_int, 5));
pub const M33_TRCIDR0_TRCBB_ACCESS = "RO";
pub const M33_TRCIDR0_TRCDATA_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCIDR0_TRCDATA_BITS = _u(@as(c_int, 0x00000018));
pub const M33_TRCIDR0_TRCDATA_MSB = _u(@as(c_int, 4));
pub const M33_TRCIDR0_TRCDATA_LSB = _u(@as(c_int, 3));
pub const M33_TRCIDR0_TRCDATA_ACCESS = "RO";
pub const M33_TRCIDR0_INSTP0_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCIDR0_INSTP0_BITS = _u(@as(c_int, 0x00000006));
pub const M33_TRCIDR0_INSTP0_MSB = _u(@as(c_int, 2));
pub const M33_TRCIDR0_INSTP0_LSB = _u(@as(c_int, 1));
pub const M33_TRCIDR0_INSTP0_ACCESS = "RO";
pub const M33_TRCIDR0_RES1_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCIDR0_RES1_BITS = _u(@as(c_int, 0x00000001));
pub const M33_TRCIDR0_RES1_MSB = _u(@as(c_int, 0));
pub const M33_TRCIDR0_RES1_LSB = _u(@as(c_int, 0));
pub const M33_TRCIDR0_RES1_ACCESS = "RO";
pub const M33_TRCIDR1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000411e4, .hex));
pub const M33_TRCIDR1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00ffff, .hex));
pub const M33_TRCIDR1_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x4100f421, .hex));
pub const M33_TRCIDR1_DESIGNER_RESET = _u(@as(c_int, 0x41));
pub const M33_TRCIDR1_DESIGNER_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff000000, .hex));
pub const M33_TRCIDR1_DESIGNER_MSB = _u(@as(c_int, 31));
pub const M33_TRCIDR1_DESIGNER_LSB = _u(@as(c_int, 24));
pub const M33_TRCIDR1_DESIGNER_ACCESS = "RO";
pub const M33_TRCIDR1_RES1_RESET = _u(@as(c_int, 0xf));
pub const M33_TRCIDR1_RES1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_TRCIDR1_RES1_MSB = _u(@as(c_int, 15));
pub const M33_TRCIDR1_RES1_LSB = _u(@as(c_int, 12));
pub const M33_TRCIDR1_RES1_ACCESS = "RO";
pub const M33_TRCIDR1_TRCARCHMAJ_RESET = _u(@as(c_int, 0x4));
pub const M33_TRCIDR1_TRCARCHMAJ_BITS = _u(@as(c_int, 0x00000f00));
pub const M33_TRCIDR1_TRCARCHMAJ_MSB = _u(@as(c_int, 11));
pub const M33_TRCIDR1_TRCARCHMAJ_LSB = _u(@as(c_int, 8));
pub const M33_TRCIDR1_TRCARCHMAJ_ACCESS = "RO";
pub const M33_TRCIDR1_TRCARCHMIN_RESET = _u(@as(c_int, 0x2));
pub const M33_TRCIDR1_TRCARCHMIN_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_TRCIDR1_TRCARCHMIN_MSB = _u(@as(c_int, 7));
pub const M33_TRCIDR1_TRCARCHMIN_LSB = _u(@as(c_int, 4));
pub const M33_TRCIDR1_TRCARCHMIN_ACCESS = "RO";
pub const M33_TRCIDR1_REVISION_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCIDR1_REVISION_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_TRCIDR1_REVISION_MSB = _u(@as(c_int, 3));
pub const M33_TRCIDR1_REVISION_LSB = _u(@as(c_int, 0));
pub const M33_TRCIDR1_REVISION_ACCESS = "RO";
pub const M33_TRCIDR2_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000411e8, .hex));
pub const M33_TRCIDR2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1fffffff, .hex));
pub const M33_TRCIDR2_RESET = _u(@as(c_int, 0x00000004));
pub const M33_TRCIDR2_CCSIZE_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCIDR2_CCSIZE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1e000000, .hex));
pub const M33_TRCIDR2_CCSIZE_MSB = _u(@as(c_int, 28));
pub const M33_TRCIDR2_CCSIZE_LSB = _u(@as(c_int, 25));
pub const M33_TRCIDR2_CCSIZE_ACCESS = "RO";
pub const M33_TRCIDR2_DVSIZE_RESET = _u(@as(c_int, 0x00));
pub const M33_TRCIDR2_DVSIZE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01f00000, .hex));
pub const M33_TRCIDR2_DVSIZE_MSB = _u(@as(c_int, 24));
pub const M33_TRCIDR2_DVSIZE_LSB = _u(@as(c_int, 20));
pub const M33_TRCIDR2_DVSIZE_ACCESS = "RO";
pub const M33_TRCIDR2_DASIZE_RESET = _u(@as(c_int, 0x00));
pub const M33_TRCIDR2_DASIZE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f8000, .hex));
pub const M33_TRCIDR2_DASIZE_MSB = _u(@as(c_int, 19));
pub const M33_TRCIDR2_DASIZE_LSB = _u(@as(c_int, 15));
pub const M33_TRCIDR2_DASIZE_ACCESS = "RO";
pub const M33_TRCIDR2_VMIDSIZE_RESET = _u(@as(c_int, 0x00));
pub const M33_TRCIDR2_VMIDSIZE_BITS = _u(@as(c_int, 0x00007c00));
pub const M33_TRCIDR2_VMIDSIZE_MSB = _u(@as(c_int, 14));
pub const M33_TRCIDR2_VMIDSIZE_LSB = _u(@as(c_int, 10));
pub const M33_TRCIDR2_VMIDSIZE_ACCESS = "RO";
pub const M33_TRCIDR2_CIDSIZE_RESET = _u(@as(c_int, 0x00));
pub const M33_TRCIDR2_CIDSIZE_BITS = _u(@as(c_int, 0x000003e0));
pub const M33_TRCIDR2_CIDSIZE_MSB = _u(@as(c_int, 9));
pub const M33_TRCIDR2_CIDSIZE_LSB = _u(@as(c_int, 5));
pub const M33_TRCIDR2_CIDSIZE_ACCESS = "RO";
pub const M33_TRCIDR2_IASIZE_RESET = _u(@as(c_int, 0x04));
pub const M33_TRCIDR2_IASIZE_BITS = _u(@as(c_int, 0x0000001f));
pub const M33_TRCIDR2_IASIZE_MSB = _u(@as(c_int, 4));
pub const M33_TRCIDR2_IASIZE_LSB = _u(@as(c_int, 0));
pub const M33_TRCIDR2_IASIZE_ACCESS = "RO";
pub const M33_TRCIDR3_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000411ec, .hex));
pub const M33_TRCIDR3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff0fff, .hex));
pub const M33_TRCIDR3_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f090004, .hex));
pub const M33_TRCIDR3_NOOVERFLOW_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCIDR3_NOOVERFLOW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const M33_TRCIDR3_NOOVERFLOW_MSB = _u(@as(c_int, 31));
pub const M33_TRCIDR3_NOOVERFLOW_LSB = _u(@as(c_int, 31));
pub const M33_TRCIDR3_NOOVERFLOW_ACCESS = "RO";
pub const M33_TRCIDR3_NUMPROC_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCIDR3_NUMPROC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000000, .hex));
pub const M33_TRCIDR3_NUMPROC_MSB = _u(@as(c_int, 30));
pub const M33_TRCIDR3_NUMPROC_LSB = _u(@as(c_int, 28));
pub const M33_TRCIDR3_NUMPROC_ACCESS = "RO";
pub const M33_TRCIDR3_SYSSTALL_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCIDR3_SYSSTALL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const M33_TRCIDR3_SYSSTALL_MSB = _u(@as(c_int, 27));
pub const M33_TRCIDR3_SYSSTALL_LSB = _u(@as(c_int, 27));
pub const M33_TRCIDR3_SYSSTALL_ACCESS = "RO";
pub const M33_TRCIDR3_STALLCTL_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCIDR3_STALLCTL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const M33_TRCIDR3_STALLCTL_MSB = _u(@as(c_int, 26));
pub const M33_TRCIDR3_STALLCTL_LSB = _u(@as(c_int, 26));
pub const M33_TRCIDR3_STALLCTL_ACCESS = "RO";
pub const M33_TRCIDR3_SYNCPR_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCIDR3_SYNCPR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const M33_TRCIDR3_SYNCPR_MSB = _u(@as(c_int, 25));
pub const M33_TRCIDR3_SYNCPR_LSB = _u(@as(c_int, 25));
pub const M33_TRCIDR3_SYNCPR_ACCESS = "RO";
pub const M33_TRCIDR3_TRCERR_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCIDR3_TRCERR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const M33_TRCIDR3_TRCERR_MSB = _u(@as(c_int, 24));
pub const M33_TRCIDR3_TRCERR_LSB = _u(@as(c_int, 24));
pub const M33_TRCIDR3_TRCERR_ACCESS = "RO";
pub const M33_TRCIDR3_EXLEVEL_NS_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCIDR3_EXLEVEL_NS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_TRCIDR3_EXLEVEL_NS_MSB = _u(@as(c_int, 23));
pub const M33_TRCIDR3_EXLEVEL_NS_LSB = _u(@as(c_int, 20));
pub const M33_TRCIDR3_EXLEVEL_NS_ACCESS = "RO";
pub const M33_TRCIDR3_EXLEVEL_S_RESET = _u(@as(c_int, 0x9));
pub const M33_TRCIDR3_EXLEVEL_S_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hex));
pub const M33_TRCIDR3_EXLEVEL_S_MSB = _u(@as(c_int, 19));
pub const M33_TRCIDR3_EXLEVEL_S_LSB = _u(@as(c_int, 16));
pub const M33_TRCIDR3_EXLEVEL_S_ACCESS = "RO";
pub const M33_TRCIDR3_CCITMIN_RESET = _u(@as(c_int, 0x004));
pub const M33_TRCIDR3_CCITMIN_BITS = _u(@as(c_int, 0x00000fff));
pub const M33_TRCIDR3_CCITMIN_MSB = _u(@as(c_int, 11));
pub const M33_TRCIDR3_CCITMIN_LSB = _u(@as(c_int, 0));
pub const M33_TRCIDR3_CCITMIN_ACCESS = "RO";
pub const M33_TRCIDR4_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000411f0, .hex));
pub const M33_TRCIDR4_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xfffff1ff, .hex));
pub const M33_TRCIDR4_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00114000, .hex));
pub const M33_TRCIDR4_NUMVMIDC_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCIDR4_NUMVMIDC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex));
pub const M33_TRCIDR4_NUMVMIDC_MSB = _u(@as(c_int, 31));
pub const M33_TRCIDR4_NUMVMIDC_LSB = _u(@as(c_int, 28));
pub const M33_TRCIDR4_NUMVMIDC_ACCESS = "RO";
pub const M33_TRCIDR4_NUMCIDC_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCIDR4_NUMCIDC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f000000, .hex));
pub const M33_TRCIDR4_NUMCIDC_MSB = _u(@as(c_int, 27));
pub const M33_TRCIDR4_NUMCIDC_LSB = _u(@as(c_int, 24));
pub const M33_TRCIDR4_NUMCIDC_ACCESS = "RO";
pub const M33_TRCIDR4_NUMSSCC_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCIDR4_NUMSSCC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00f00000, .hex));
pub const M33_TRCIDR4_NUMSSCC_MSB = _u(@as(c_int, 23));
pub const M33_TRCIDR4_NUMSSCC_LSB = _u(@as(c_int, 20));
pub const M33_TRCIDR4_NUMSSCC_ACCESS = "RO";
pub const M33_TRCIDR4_NUMRSPAIR_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCIDR4_NUMRSPAIR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hex));
pub const M33_TRCIDR4_NUMRSPAIR_MSB = _u(@as(c_int, 19));
pub const M33_TRCIDR4_NUMRSPAIR_LSB = _u(@as(c_int, 16));
pub const M33_TRCIDR4_NUMRSPAIR_ACCESS = "RO";
pub const M33_TRCIDR4_NUMPC_RESET = _u(@as(c_int, 0x4));
pub const M33_TRCIDR4_NUMPC_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000f000, .hex));
pub const M33_TRCIDR4_NUMPC_MSB = _u(@as(c_int, 15));
pub const M33_TRCIDR4_NUMPC_LSB = _u(@as(c_int, 12));
pub const M33_TRCIDR4_NUMPC_ACCESS = "RO";
pub const M33_TRCIDR4_SUPPDAC_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCIDR4_SUPPDAC_BITS = _u(@as(c_int, 0x00000100));
pub const M33_TRCIDR4_SUPPDAC_MSB = _u(@as(c_int, 8));
pub const M33_TRCIDR4_SUPPDAC_LSB = _u(@as(c_int, 8));
pub const M33_TRCIDR4_SUPPDAC_ACCESS = "RO";
pub const M33_TRCIDR4_NUMDVC_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCIDR4_NUMDVC_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_TRCIDR4_NUMDVC_MSB = _u(@as(c_int, 7));
pub const M33_TRCIDR4_NUMDVC_LSB = _u(@as(c_int, 4));
pub const M33_TRCIDR4_NUMDVC_ACCESS = "RO";
pub const M33_TRCIDR4_NUMACPAIRS_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCIDR4_NUMACPAIRS_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_TRCIDR4_NUMACPAIRS_MSB = _u(@as(c_int, 3));
pub const M33_TRCIDR4_NUMACPAIRS_LSB = _u(@as(c_int, 0));
pub const M33_TRCIDR4_NUMACPAIRS_ACCESS = "RO";
pub const M33_TRCIDR5_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000411f4, .hex));
pub const M33_TRCIDR5_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xfeff0fff, .hex));
pub const M33_TRCIDR5_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90c70004, .hex));
pub const M33_TRCIDR5_REDFUNCNTR_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCIDR5_REDFUNCNTR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const M33_TRCIDR5_REDFUNCNTR_MSB = _u(@as(c_int, 31));
pub const M33_TRCIDR5_REDFUNCNTR_LSB = _u(@as(c_int, 31));
pub const M33_TRCIDR5_REDFUNCNTR_ACCESS = "RO";
pub const M33_TRCIDR5_NUMCNTR_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCIDR5_NUMCNTR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000000, .hex));
pub const M33_TRCIDR5_NUMCNTR_MSB = _u(@as(c_int, 30));
pub const M33_TRCIDR5_NUMCNTR_LSB = _u(@as(c_int, 28));
pub const M33_TRCIDR5_NUMCNTR_ACCESS = "RO";
pub const M33_TRCIDR5_NUMSEQSTATE_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCIDR5_NUMSEQSTATE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0e000000, .hex));
pub const M33_TRCIDR5_NUMSEQSTATE_MSB = _u(@as(c_int, 27));
pub const M33_TRCIDR5_NUMSEQSTATE_LSB = _u(@as(c_int, 25));
pub const M33_TRCIDR5_NUMSEQSTATE_ACCESS = "RO";
pub const M33_TRCIDR5_LPOVERRIDE_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCIDR5_LPOVERRIDE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const M33_TRCIDR5_LPOVERRIDE_MSB = _u(@as(c_int, 23));
pub const M33_TRCIDR5_LPOVERRIDE_LSB = _u(@as(c_int, 23));
pub const M33_TRCIDR5_LPOVERRIDE_ACCESS = "RO";
pub const M33_TRCIDR5_ATBTRIG_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCIDR5_ATBTRIG_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const M33_TRCIDR5_ATBTRIG_MSB = _u(@as(c_int, 22));
pub const M33_TRCIDR5_ATBTRIG_LSB = _u(@as(c_int, 22));
pub const M33_TRCIDR5_ATBTRIG_ACCESS = "RO";
pub const M33_TRCIDR5_TRACEIDSIZE_RESET = _u(@as(c_int, 0x07));
pub const M33_TRCIDR5_TRACEIDSIZE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x003f0000, .hex));
pub const M33_TRCIDR5_TRACEIDSIZE_MSB = _u(@as(c_int, 21));
pub const M33_TRCIDR5_TRACEIDSIZE_LSB = _u(@as(c_int, 16));
pub const M33_TRCIDR5_TRACEIDSIZE_ACCESS = "RO";
pub const M33_TRCIDR5_NUMEXTINSEL_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCIDR5_NUMEXTINSEL_BITS = _u(@as(c_int, 0x00000e00));
pub const M33_TRCIDR5_NUMEXTINSEL_MSB = _u(@as(c_int, 11));
pub const M33_TRCIDR5_NUMEXTINSEL_LSB = _u(@as(c_int, 9));
pub const M33_TRCIDR5_NUMEXTINSEL_ACCESS = "RO";
pub const M33_TRCIDR5_NUMEXTIN_RESET = _u(@as(c_int, 0x004));
pub const M33_TRCIDR5_NUMEXTIN_BITS = _u(@as(c_int, 0x000001ff));
pub const M33_TRCIDR5_NUMEXTIN_MSB = _u(@as(c_int, 8));
pub const M33_TRCIDR5_NUMEXTIN_LSB = _u(@as(c_int, 0));
pub const M33_TRCIDR5_NUMEXTIN_ACCESS = "RO";
pub const M33_TRCIDR6_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000411f8, .hex));
pub const M33_TRCIDR6_BITS = _u(@as(c_int, 0x00000000));
pub const M33_TRCIDR6_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCIDR6_MSB = _u(@as(c_int, 31));
pub const M33_TRCIDR6_LSB = _u(@as(c_int, 0));
pub const M33_TRCIDR6_ACCESS = "RW";
pub const M33_TRCIDR7_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000411fc, .hex));
pub const M33_TRCIDR7_BITS = _u(@as(c_int, 0x00000000));
pub const M33_TRCIDR7_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCIDR7_MSB = _u(@as(c_int, 31));
pub const M33_TRCIDR7_LSB = _u(@as(c_int, 0));
pub const M33_TRCIDR7_ACCESS = "RW";
pub const M33_TRCRSCTLR2_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041208, .hex));
pub const M33_TRCRSCTLR2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x003700ff, .hex));
pub const M33_TRCRSCTLR2_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCRSCTLR2_PAIRINV_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCRSCTLR2_PAIRINV_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const M33_TRCRSCTLR2_PAIRINV_MSB = _u(@as(c_int, 21));
pub const M33_TRCRSCTLR2_PAIRINV_LSB = _u(@as(c_int, 21));
pub const M33_TRCRSCTLR2_PAIRINV_ACCESS = "RW";
pub const M33_TRCRSCTLR2_INV_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCRSCTLR2_INV_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const M33_TRCRSCTLR2_INV_MSB = _u(@as(c_int, 20));
pub const M33_TRCRSCTLR2_INV_LSB = _u(@as(c_int, 20));
pub const M33_TRCRSCTLR2_INV_ACCESS = "RW";
pub const M33_TRCRSCTLR2_GROUP_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCRSCTLR2_GROUP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00070000, .hex));
pub const M33_TRCRSCTLR2_GROUP_MSB = _u(@as(c_int, 18));
pub const M33_TRCRSCTLR2_GROUP_LSB = _u(@as(c_int, 16));
pub const M33_TRCRSCTLR2_GROUP_ACCESS = "RW";
pub const M33_TRCRSCTLR2_SELECT_RESET = _u(@as(c_int, 0x00));
pub const M33_TRCRSCTLR2_SELECT_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_TRCRSCTLR2_SELECT_MSB = _u(@as(c_int, 7));
pub const M33_TRCRSCTLR2_SELECT_LSB = _u(@as(c_int, 0));
pub const M33_TRCRSCTLR2_SELECT_ACCESS = "RW";
pub const M33_TRCRSCTLR3_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0004120c, .hex));
pub const M33_TRCRSCTLR3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x003700ff, .hex));
pub const M33_TRCRSCTLR3_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCRSCTLR3_PAIRINV_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCRSCTLR3_PAIRINV_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const M33_TRCRSCTLR3_PAIRINV_MSB = _u(@as(c_int, 21));
pub const M33_TRCRSCTLR3_PAIRINV_LSB = _u(@as(c_int, 21));
pub const M33_TRCRSCTLR3_PAIRINV_ACCESS = "RW";
pub const M33_TRCRSCTLR3_INV_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCRSCTLR3_INV_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const M33_TRCRSCTLR3_INV_MSB = _u(@as(c_int, 20));
pub const M33_TRCRSCTLR3_INV_LSB = _u(@as(c_int, 20));
pub const M33_TRCRSCTLR3_INV_ACCESS = "RW";
pub const M33_TRCRSCTLR3_GROUP_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCRSCTLR3_GROUP_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00070000, .hex));
pub const M33_TRCRSCTLR3_GROUP_MSB = _u(@as(c_int, 18));
pub const M33_TRCRSCTLR3_GROUP_LSB = _u(@as(c_int, 16));
pub const M33_TRCRSCTLR3_GROUP_ACCESS = "RW";
pub const M33_TRCRSCTLR3_SELECT_RESET = _u(@as(c_int, 0x00));
pub const M33_TRCRSCTLR3_SELECT_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_TRCRSCTLR3_SELECT_MSB = _u(@as(c_int, 7));
pub const M33_TRCRSCTLR3_SELECT_LSB = _u(@as(c_int, 0));
pub const M33_TRCRSCTLR3_SELECT_ACCESS = "RW";
pub const M33_TRCSSCSR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000412a0, .hex));
pub const M33_TRCSSCSR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000000f, .hex));
pub const M33_TRCSSCSR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCSSCSR_STATUS_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCSSCSR_STATUS_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex));
pub const M33_TRCSSCSR_STATUS_MSB = _u(@as(c_int, 31));
pub const M33_TRCSSCSR_STATUS_LSB = _u(@as(c_int, 31));
pub const M33_TRCSSCSR_STATUS_ACCESS = "RW";
pub const M33_TRCSSCSR_PC_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCSSCSR_PC_BITS = _u(@as(c_int, 0x00000008));
pub const M33_TRCSSCSR_PC_MSB = _u(@as(c_int, 3));
pub const M33_TRCSSCSR_PC_LSB = _u(@as(c_int, 3));
pub const M33_TRCSSCSR_PC_ACCESS = "RO";
pub const M33_TRCSSCSR_DV_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCSSCSR_DV_BITS = _u(@as(c_int, 0x00000004));
pub const M33_TRCSSCSR_DV_MSB = _u(@as(c_int, 2));
pub const M33_TRCSSCSR_DV_LSB = _u(@as(c_int, 2));
pub const M33_TRCSSCSR_DV_ACCESS = "RO";
pub const M33_TRCSSCSR_DA_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCSSCSR_DA_BITS = _u(@as(c_int, 0x00000002));
pub const M33_TRCSSCSR_DA_MSB = _u(@as(c_int, 1));
pub const M33_TRCSSCSR_DA_LSB = _u(@as(c_int, 1));
pub const M33_TRCSSCSR_DA_ACCESS = "RO";
pub const M33_TRCSSCSR_INST_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCSSCSR_INST_BITS = _u(@as(c_int, 0x00000001));
pub const M33_TRCSSCSR_INST_MSB = _u(@as(c_int, 0));
pub const M33_TRCSSCSR_INST_LSB = _u(@as(c_int, 0));
pub const M33_TRCSSCSR_INST_ACCESS = "RO";
pub const M33_TRCSSPCICR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000412c0, .hex));
pub const M33_TRCSSPCICR_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_TRCSSPCICR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCSSPCICR_PC_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCSSPCICR_PC_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_TRCSSPCICR_PC_MSB = _u(@as(c_int, 3));
pub const M33_TRCSSPCICR_PC_LSB = _u(@as(c_int, 0));
pub const M33_TRCSSPCICR_PC_ACCESS = "RW";
pub const M33_TRCPDCR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041310, .hex));
pub const M33_TRCPDCR_BITS = _u(@as(c_int, 0x00000008));
pub const M33_TRCPDCR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCPDCR_PU_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCPDCR_PU_BITS = _u(@as(c_int, 0x00000008));
pub const M33_TRCPDCR_PU_MSB = _u(@as(c_int, 3));
pub const M33_TRCPDCR_PU_LSB = _u(@as(c_int, 3));
pub const M33_TRCPDCR_PU_ACCESS = "RW";
pub const M33_TRCPDSR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041314, .hex));
pub const M33_TRCPDSR_BITS = _u(@as(c_int, 0x00000023));
pub const M33_TRCPDSR_RESET = _u(@as(c_int, 0x00000003));
pub const M33_TRCPDSR_OSLK_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCPDSR_OSLK_BITS = _u(@as(c_int, 0x00000020));
pub const M33_TRCPDSR_OSLK_MSB = _u(@as(c_int, 5));
pub const M33_TRCPDSR_OSLK_LSB = _u(@as(c_int, 5));
pub const M33_TRCPDSR_OSLK_ACCESS = "RO";
pub const M33_TRCPDSR_STICKYPD_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCPDSR_STICKYPD_BITS = _u(@as(c_int, 0x00000002));
pub const M33_TRCPDSR_STICKYPD_MSB = _u(@as(c_int, 1));
pub const M33_TRCPDSR_STICKYPD_LSB = _u(@as(c_int, 1));
pub const M33_TRCPDSR_STICKYPD_ACCESS = "RO";
pub const M33_TRCPDSR_POWER_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCPDSR_POWER_BITS = _u(@as(c_int, 0x00000001));
pub const M33_TRCPDSR_POWER_MSB = _u(@as(c_int, 0));
pub const M33_TRCPDSR_POWER_LSB = _u(@as(c_int, 0));
pub const M33_TRCPDSR_POWER_ACCESS = "RO";
pub const M33_TRCITATBIDR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041ee4, .hex));
pub const M33_TRCITATBIDR_BITS = _u(@as(c_int, 0x0000007f));
pub const M33_TRCITATBIDR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCITATBIDR_ID_RESET = _u(@as(c_int, 0x00));
pub const M33_TRCITATBIDR_ID_BITS = _u(@as(c_int, 0x0000007f));
pub const M33_TRCITATBIDR_ID_MSB = _u(@as(c_int, 6));
pub const M33_TRCITATBIDR_ID_LSB = _u(@as(c_int, 0));
pub const M33_TRCITATBIDR_ID_ACCESS = "RW";
pub const M33_TRCITIATBINR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041ef4, .hex));
pub const M33_TRCITIATBINR_BITS = _u(@as(c_int, 0x00000003));
pub const M33_TRCITIATBINR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCITIATBINR_AFVALIDM_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCITIATBINR_AFVALIDM_BITS = _u(@as(c_int, 0x00000002));
pub const M33_TRCITIATBINR_AFVALIDM_MSB = _u(@as(c_int, 1));
pub const M33_TRCITIATBINR_AFVALIDM_LSB = _u(@as(c_int, 1));
pub const M33_TRCITIATBINR_AFVALIDM_ACCESS = "RW";
pub const M33_TRCITIATBINR_ATREADYM_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCITIATBINR_ATREADYM_BITS = _u(@as(c_int, 0x00000001));
pub const M33_TRCITIATBINR_ATREADYM_MSB = _u(@as(c_int, 0));
pub const M33_TRCITIATBINR_ATREADYM_LSB = _u(@as(c_int, 0));
pub const M33_TRCITIATBINR_ATREADYM_ACCESS = "RW";
pub const M33_TRCITIATBOUTR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041efc, .hex));
pub const M33_TRCITIATBOUTR_BITS = _u(@as(c_int, 0x00000003));
pub const M33_TRCITIATBOUTR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCITIATBOUTR_AFREADY_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCITIATBOUTR_AFREADY_BITS = _u(@as(c_int, 0x00000002));
pub const M33_TRCITIATBOUTR_AFREADY_MSB = _u(@as(c_int, 1));
pub const M33_TRCITIATBOUTR_AFREADY_LSB = _u(@as(c_int, 1));
pub const M33_TRCITIATBOUTR_AFREADY_ACCESS = "RW";
pub const M33_TRCITIATBOUTR_ATVALID_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCITIATBOUTR_ATVALID_BITS = _u(@as(c_int, 0x00000001));
pub const M33_TRCITIATBOUTR_ATVALID_MSB = _u(@as(c_int, 0));
pub const M33_TRCITIATBOUTR_ATVALID_LSB = _u(@as(c_int, 0));
pub const M33_TRCITIATBOUTR_ATVALID_ACCESS = "RW";
pub const M33_TRCCLAIMSET_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041fa0, .hex));
pub const M33_TRCCLAIMSET_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_TRCCLAIMSET_RESET = _u(@as(c_int, 0x0000000f));
pub const M33_TRCCLAIMSET_SET3_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCCLAIMSET_SET3_BITS = _u(@as(c_int, 0x00000008));
pub const M33_TRCCLAIMSET_SET3_MSB = _u(@as(c_int, 3));
pub const M33_TRCCLAIMSET_SET3_LSB = _u(@as(c_int, 3));
pub const M33_TRCCLAIMSET_SET3_ACCESS = "RW";
pub const M33_TRCCLAIMSET_SET2_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCCLAIMSET_SET2_BITS = _u(@as(c_int, 0x00000004));
pub const M33_TRCCLAIMSET_SET2_MSB = _u(@as(c_int, 2));
pub const M33_TRCCLAIMSET_SET2_LSB = _u(@as(c_int, 2));
pub const M33_TRCCLAIMSET_SET2_ACCESS = "RW";
pub const M33_TRCCLAIMSET_SET1_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCCLAIMSET_SET1_BITS = _u(@as(c_int, 0x00000002));
pub const M33_TRCCLAIMSET_SET1_MSB = _u(@as(c_int, 1));
pub const M33_TRCCLAIMSET_SET1_LSB = _u(@as(c_int, 1));
pub const M33_TRCCLAIMSET_SET1_ACCESS = "RW";
pub const M33_TRCCLAIMSET_SET0_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCCLAIMSET_SET0_BITS = _u(@as(c_int, 0x00000001));
pub const M33_TRCCLAIMSET_SET0_MSB = _u(@as(c_int, 0));
pub const M33_TRCCLAIMSET_SET0_LSB = _u(@as(c_int, 0));
pub const M33_TRCCLAIMSET_SET0_ACCESS = "RW";
pub const M33_TRCCLAIMCLR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041fa4, .hex));
pub const M33_TRCCLAIMCLR_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_TRCCLAIMCLR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCCLAIMCLR_CLR3_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCCLAIMCLR_CLR3_BITS = _u(@as(c_int, 0x00000008));
pub const M33_TRCCLAIMCLR_CLR3_MSB = _u(@as(c_int, 3));
pub const M33_TRCCLAIMCLR_CLR3_LSB = _u(@as(c_int, 3));
pub const M33_TRCCLAIMCLR_CLR3_ACCESS = "RW";
pub const M33_TRCCLAIMCLR_CLR2_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCCLAIMCLR_CLR2_BITS = _u(@as(c_int, 0x00000004));
pub const M33_TRCCLAIMCLR_CLR2_MSB = _u(@as(c_int, 2));
pub const M33_TRCCLAIMCLR_CLR2_LSB = _u(@as(c_int, 2));
pub const M33_TRCCLAIMCLR_CLR2_ACCESS = "RW";
pub const M33_TRCCLAIMCLR_CLR1_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCCLAIMCLR_CLR1_BITS = _u(@as(c_int, 0x00000002));
pub const M33_TRCCLAIMCLR_CLR1_MSB = _u(@as(c_int, 1));
pub const M33_TRCCLAIMCLR_CLR1_LSB = _u(@as(c_int, 1));
pub const M33_TRCCLAIMCLR_CLR1_ACCESS = "RW";
pub const M33_TRCCLAIMCLR_CLR0_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCCLAIMCLR_CLR0_BITS = _u(@as(c_int, 0x00000001));
pub const M33_TRCCLAIMCLR_CLR0_MSB = _u(@as(c_int, 0));
pub const M33_TRCCLAIMCLR_CLR0_LSB = _u(@as(c_int, 0));
pub const M33_TRCCLAIMCLR_CLR0_ACCESS = "RW";
pub const M33_TRCAUTHSTATUS_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041fb8, .hex));
pub const M33_TRCAUTHSTATUS_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_TRCAUTHSTATUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCAUTHSTATUS_SNID_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCAUTHSTATUS_SNID_BITS = _u(@as(c_int, 0x000000c0));
pub const M33_TRCAUTHSTATUS_SNID_MSB = _u(@as(c_int, 7));
pub const M33_TRCAUTHSTATUS_SNID_LSB = _u(@as(c_int, 6));
pub const M33_TRCAUTHSTATUS_SNID_ACCESS = "RO";
pub const M33_TRCAUTHSTATUS_SID_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCAUTHSTATUS_SID_BITS = _u(@as(c_int, 0x00000030));
pub const M33_TRCAUTHSTATUS_SID_MSB = _u(@as(c_int, 5));
pub const M33_TRCAUTHSTATUS_SID_LSB = _u(@as(c_int, 4));
pub const M33_TRCAUTHSTATUS_SID_ACCESS = "RO";
pub const M33_TRCAUTHSTATUS_NSNID_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCAUTHSTATUS_NSNID_BITS = _u(@as(c_int, 0x0000000c));
pub const M33_TRCAUTHSTATUS_NSNID_MSB = _u(@as(c_int, 3));
pub const M33_TRCAUTHSTATUS_NSNID_LSB = _u(@as(c_int, 2));
pub const M33_TRCAUTHSTATUS_NSNID_ACCESS = "RO";
pub const M33_TRCAUTHSTATUS_NSID_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCAUTHSTATUS_NSID_BITS = _u(@as(c_int, 0x00000003));
pub const M33_TRCAUTHSTATUS_NSID_MSB = _u(@as(c_int, 1));
pub const M33_TRCAUTHSTATUS_NSID_LSB = _u(@as(c_int, 0));
pub const M33_TRCAUTHSTATUS_NSID_ACCESS = "RO";
pub const M33_TRCDEVARCH_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041fbc, .hex));
pub const M33_TRCDEVARCH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_TRCDEVARCH_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x47724a13, .hex));
pub const M33_TRCDEVARCH_ARCHITECT_RESET = _u(@as(c_int, 0x23b));
pub const M33_TRCDEVARCH_ARCHITECT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffe00000, .hex));
pub const M33_TRCDEVARCH_ARCHITECT_MSB = _u(@as(c_int, 31));
pub const M33_TRCDEVARCH_ARCHITECT_LSB = _u(@as(c_int, 21));
pub const M33_TRCDEVARCH_ARCHITECT_ACCESS = "RO";
pub const M33_TRCDEVARCH_PRESENT_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCDEVARCH_PRESENT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const M33_TRCDEVARCH_PRESENT_MSB = _u(@as(c_int, 20));
pub const M33_TRCDEVARCH_PRESENT_LSB = _u(@as(c_int, 20));
pub const M33_TRCDEVARCH_PRESENT_ACCESS = "RO";
pub const M33_TRCDEVARCH_REVISION_RESET = _u(@as(c_int, 0x2));
pub const M33_TRCDEVARCH_REVISION_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hex));
pub const M33_TRCDEVARCH_REVISION_MSB = _u(@as(c_int, 19));
pub const M33_TRCDEVARCH_REVISION_LSB = _u(@as(c_int, 16));
pub const M33_TRCDEVARCH_REVISION_ACCESS = "RO";
pub const M33_TRCDEVARCH_ARCHID_RESET = _u(@as(c_int, 0x4a13));
pub const M33_TRCDEVARCH_ARCHID_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const M33_TRCDEVARCH_ARCHID_MSB = _u(@as(c_int, 15));
pub const M33_TRCDEVARCH_ARCHID_LSB = _u(@as(c_int, 0));
pub const M33_TRCDEVARCH_ARCHID_ACCESS = "RO";
pub const M33_TRCDEVID_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041fc8, .hex));
pub const M33_TRCDEVID_BITS = _u(@as(c_int, 0x00000000));
pub const M33_TRCDEVID_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCDEVID_MSB = _u(@as(c_int, 31));
pub const M33_TRCDEVID_LSB = _u(@as(c_int, 0));
pub const M33_TRCDEVID_ACCESS = "RW";
pub const M33_TRCDEVTYPE_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041fcc, .hex));
pub const M33_TRCDEVTYPE_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_TRCDEVTYPE_RESET = _u(@as(c_int, 0x00000013));
pub const M33_TRCDEVTYPE_SUB_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCDEVTYPE_SUB_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_TRCDEVTYPE_SUB_MSB = _u(@as(c_int, 7));
pub const M33_TRCDEVTYPE_SUB_LSB = _u(@as(c_int, 4));
pub const M33_TRCDEVTYPE_SUB_ACCESS = "RO";
pub const M33_TRCDEVTYPE_MAJOR_RESET = _u(@as(c_int, 0x3));
pub const M33_TRCDEVTYPE_MAJOR_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_TRCDEVTYPE_MAJOR_MSB = _u(@as(c_int, 3));
pub const M33_TRCDEVTYPE_MAJOR_LSB = _u(@as(c_int, 0));
pub const M33_TRCDEVTYPE_MAJOR_ACCESS = "RO";
pub const M33_TRCPIDR4_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041fd0, .hex));
pub const M33_TRCPIDR4_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_TRCPIDR4_RESET = _u(@as(c_int, 0x00000004));
pub const M33_TRCPIDR4_SIZE_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCPIDR4_SIZE_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_TRCPIDR4_SIZE_MSB = _u(@as(c_int, 7));
pub const M33_TRCPIDR4_SIZE_LSB = _u(@as(c_int, 4));
pub const M33_TRCPIDR4_SIZE_ACCESS = "RO";
pub const M33_TRCPIDR4_DES_2_RESET = _u(@as(c_int, 0x4));
pub const M33_TRCPIDR4_DES_2_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_TRCPIDR4_DES_2_MSB = _u(@as(c_int, 3));
pub const M33_TRCPIDR4_DES_2_LSB = _u(@as(c_int, 0));
pub const M33_TRCPIDR4_DES_2_ACCESS = "RO";
pub const M33_TRCPIDR5_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041fd4, .hex));
pub const M33_TRCPIDR5_BITS = _u(@as(c_int, 0x00000000));
pub const M33_TRCPIDR5_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCPIDR5_MSB = _u(@as(c_int, 31));
pub const M33_TRCPIDR5_LSB = _u(@as(c_int, 0));
pub const M33_TRCPIDR5_ACCESS = "RW";
pub const M33_TRCPIDR6_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041fd8, .hex));
pub const M33_TRCPIDR6_BITS = _u(@as(c_int, 0x00000000));
pub const M33_TRCPIDR6_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCPIDR6_MSB = _u(@as(c_int, 31));
pub const M33_TRCPIDR6_LSB = _u(@as(c_int, 0));
pub const M33_TRCPIDR6_ACCESS = "RW";
pub const M33_TRCPIDR7_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041fdc, .hex));
pub const M33_TRCPIDR7_BITS = _u(@as(c_int, 0x00000000));
pub const M33_TRCPIDR7_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCPIDR7_MSB = _u(@as(c_int, 31));
pub const M33_TRCPIDR7_LSB = _u(@as(c_int, 0));
pub const M33_TRCPIDR7_ACCESS = "RW";
pub const M33_TRCPIDR0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041fe0, .hex));
pub const M33_TRCPIDR0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_TRCPIDR0_RESET = _u(@as(c_int, 0x00000021));
pub const M33_TRCPIDR0_PART_0_RESET = _u(@as(c_int, 0x21));
pub const M33_TRCPIDR0_PART_0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_TRCPIDR0_PART_0_MSB = _u(@as(c_int, 7));
pub const M33_TRCPIDR0_PART_0_LSB = _u(@as(c_int, 0));
pub const M33_TRCPIDR0_PART_0_ACCESS = "RO";
pub const M33_TRCPIDR1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041fe4, .hex));
pub const M33_TRCPIDR1_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_TRCPIDR1_RESET = _u(@as(c_int, 0x000000bd));
pub const M33_TRCPIDR1_DES_0_RESET = _u(@as(c_int, 0xb));
pub const M33_TRCPIDR1_DES_0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_TRCPIDR1_DES_0_MSB = _u(@as(c_int, 7));
pub const M33_TRCPIDR1_DES_0_LSB = _u(@as(c_int, 4));
pub const M33_TRCPIDR1_DES_0_ACCESS = "RO";
pub const M33_TRCPIDR1_PART_0_RESET = _u(@as(c_int, 0xd));
pub const M33_TRCPIDR1_PART_0_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_TRCPIDR1_PART_0_MSB = _u(@as(c_int, 3));
pub const M33_TRCPIDR1_PART_0_LSB = _u(@as(c_int, 0));
pub const M33_TRCPIDR1_PART_0_ACCESS = "RO";
pub const M33_TRCPIDR2_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041fe8, .hex));
pub const M33_TRCPIDR2_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_TRCPIDR2_RESET = _u(@as(c_int, 0x0000002b));
pub const M33_TRCPIDR2_REVISION_RESET = _u(@as(c_int, 0x2));
pub const M33_TRCPIDR2_REVISION_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_TRCPIDR2_REVISION_MSB = _u(@as(c_int, 7));
pub const M33_TRCPIDR2_REVISION_LSB = _u(@as(c_int, 4));
pub const M33_TRCPIDR2_REVISION_ACCESS = "RO";
pub const M33_TRCPIDR2_JEDEC_RESET = _u(@as(c_int, 0x1));
pub const M33_TRCPIDR2_JEDEC_BITS = _u(@as(c_int, 0x00000008));
pub const M33_TRCPIDR2_JEDEC_MSB = _u(@as(c_int, 3));
pub const M33_TRCPIDR2_JEDEC_LSB = _u(@as(c_int, 3));
pub const M33_TRCPIDR2_JEDEC_ACCESS = "RO";
pub const M33_TRCPIDR2_DES_0_RESET = _u(@as(c_int, 0x3));
pub const M33_TRCPIDR2_DES_0_BITS = _u(@as(c_int, 0x00000007));
pub const M33_TRCPIDR2_DES_0_MSB = _u(@as(c_int, 2));
pub const M33_TRCPIDR2_DES_0_LSB = _u(@as(c_int, 0));
pub const M33_TRCPIDR2_DES_0_ACCESS = "RO";
pub const M33_TRCPIDR3_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041fec, .hex));
pub const M33_TRCPIDR3_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_TRCPIDR3_RESET = _u(@as(c_int, 0x00000000));
pub const M33_TRCPIDR3_REVAND_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCPIDR3_REVAND_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_TRCPIDR3_REVAND_MSB = _u(@as(c_int, 7));
pub const M33_TRCPIDR3_REVAND_LSB = _u(@as(c_int, 4));
pub const M33_TRCPIDR3_REVAND_ACCESS = "RO";
pub const M33_TRCPIDR3_CMOD_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCPIDR3_CMOD_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_TRCPIDR3_CMOD_MSB = _u(@as(c_int, 3));
pub const M33_TRCPIDR3_CMOD_LSB = _u(@as(c_int, 0));
pub const M33_TRCPIDR3_CMOD_ACCESS = "RO";
pub const M33_TRCCIDR0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041ff0, .hex));
pub const M33_TRCCIDR0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_TRCCIDR0_RESET = _u(@as(c_int, 0x0000000d));
pub const M33_TRCCIDR0_PRMBL_0_RESET = _u(@as(c_int, 0x0d));
pub const M33_TRCCIDR0_PRMBL_0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_TRCCIDR0_PRMBL_0_MSB = _u(@as(c_int, 7));
pub const M33_TRCCIDR0_PRMBL_0_LSB = _u(@as(c_int, 0));
pub const M33_TRCCIDR0_PRMBL_0_ACCESS = "RO";
pub const M33_TRCCIDR1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041ff4, .hex));
pub const M33_TRCCIDR1_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_TRCCIDR1_RESET = _u(@as(c_int, 0x00000090));
pub const M33_TRCCIDR1_CLASS_RESET = _u(@as(c_int, 0x9));
pub const M33_TRCCIDR1_CLASS_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_TRCCIDR1_CLASS_MSB = _u(@as(c_int, 7));
pub const M33_TRCCIDR1_CLASS_LSB = _u(@as(c_int, 4));
pub const M33_TRCCIDR1_CLASS_ACCESS = "RO";
pub const M33_TRCCIDR1_PRMBL_1_RESET = _u(@as(c_int, 0x0));
pub const M33_TRCCIDR1_PRMBL_1_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_TRCCIDR1_PRMBL_1_MSB = _u(@as(c_int, 3));
pub const M33_TRCCIDR1_PRMBL_1_LSB = _u(@as(c_int, 0));
pub const M33_TRCCIDR1_PRMBL_1_ACCESS = "RO";
pub const M33_TRCCIDR2_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041ff8, .hex));
pub const M33_TRCCIDR2_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_TRCCIDR2_RESET = _u(@as(c_int, 0x00000005));
pub const M33_TRCCIDR2_PRMBL_2_RESET = _u(@as(c_int, 0x05));
pub const M33_TRCCIDR2_PRMBL_2_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_TRCCIDR2_PRMBL_2_MSB = _u(@as(c_int, 7));
pub const M33_TRCCIDR2_PRMBL_2_LSB = _u(@as(c_int, 0));
pub const M33_TRCCIDR2_PRMBL_2_ACCESS = "RO";
pub const M33_TRCCIDR3_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00041ffc, .hex));
pub const M33_TRCCIDR3_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_TRCCIDR3_RESET = _u(@as(c_int, 0x000000b1));
pub const M33_TRCCIDR3_PRMBL_3_RESET = _u(@as(c_int, 0xb1));
pub const M33_TRCCIDR3_PRMBL_3_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_TRCCIDR3_PRMBL_3_MSB = _u(@as(c_int, 7));
pub const M33_TRCCIDR3_PRMBL_3_LSB = _u(@as(c_int, 0));
pub const M33_TRCCIDR3_PRMBL_3_ACCESS = "RO";
pub const M33_CTICONTROL_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042000, .hex));
pub const M33_CTICONTROL_BITS = _u(@as(c_int, 0x00000001));
pub const M33_CTICONTROL_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTICONTROL_GLBEN_RESET = _u(@as(c_int, 0x0));
pub const M33_CTICONTROL_GLBEN_BITS = _u(@as(c_int, 0x00000001));
pub const M33_CTICONTROL_GLBEN_MSB = _u(@as(c_int, 0));
pub const M33_CTICONTROL_GLBEN_LSB = _u(@as(c_int, 0));
pub const M33_CTICONTROL_GLBEN_ACCESS = "RW";
pub const M33_CTIINTACK_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042010, .hex));
pub const M33_CTIINTACK_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_CTIINTACK_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTIINTACK_INTACK_RESET = _u(@as(c_int, 0x00));
pub const M33_CTIINTACK_INTACK_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_CTIINTACK_INTACK_MSB = _u(@as(c_int, 7));
pub const M33_CTIINTACK_INTACK_LSB = _u(@as(c_int, 0));
pub const M33_CTIINTACK_INTACK_ACCESS = "RW";
pub const M33_CTIAPPSET_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042014, .hex));
pub const M33_CTIAPPSET_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIAPPSET_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTIAPPSET_APPSET_RESET = _u(@as(c_int, 0x0));
pub const M33_CTIAPPSET_APPSET_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIAPPSET_APPSET_MSB = _u(@as(c_int, 3));
pub const M33_CTIAPPSET_APPSET_LSB = _u(@as(c_int, 0));
pub const M33_CTIAPPSET_APPSET_ACCESS = "RW";
pub const M33_CTIAPPCLEAR_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042018, .hex));
pub const M33_CTIAPPCLEAR_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIAPPCLEAR_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTIAPPCLEAR_APPCLEAR_RESET = _u(@as(c_int, 0x0));
pub const M33_CTIAPPCLEAR_APPCLEAR_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIAPPCLEAR_APPCLEAR_MSB = _u(@as(c_int, 3));
pub const M33_CTIAPPCLEAR_APPCLEAR_LSB = _u(@as(c_int, 0));
pub const M33_CTIAPPCLEAR_APPCLEAR_ACCESS = "RW";
pub const M33_CTIAPPPULSE_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0004201c, .hex));
pub const M33_CTIAPPPULSE_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIAPPPULSE_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTIAPPPULSE_APPULSE_RESET = _u(@as(c_int, 0x0));
pub const M33_CTIAPPPULSE_APPULSE_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIAPPPULSE_APPULSE_MSB = _u(@as(c_int, 3));
pub const M33_CTIAPPPULSE_APPULSE_LSB = _u(@as(c_int, 0));
pub const M33_CTIAPPPULSE_APPULSE_ACCESS = "RW";
pub const M33_CTIINEN0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042020, .hex));
pub const M33_CTIINEN0_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIINEN0_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTIINEN0_TRIGINEN_RESET = _u(@as(c_int, 0x0));
pub const M33_CTIINEN0_TRIGINEN_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIINEN0_TRIGINEN_MSB = _u(@as(c_int, 3));
pub const M33_CTIINEN0_TRIGINEN_LSB = _u(@as(c_int, 0));
pub const M33_CTIINEN0_TRIGINEN_ACCESS = "RW";
pub const M33_CTIINEN1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042024, .hex));
pub const M33_CTIINEN1_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIINEN1_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTIINEN1_TRIGINEN_RESET = _u(@as(c_int, 0x0));
pub const M33_CTIINEN1_TRIGINEN_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIINEN1_TRIGINEN_MSB = _u(@as(c_int, 3));
pub const M33_CTIINEN1_TRIGINEN_LSB = _u(@as(c_int, 0));
pub const M33_CTIINEN1_TRIGINEN_ACCESS = "RW";
pub const M33_CTIINEN2_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042028, .hex));
pub const M33_CTIINEN2_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIINEN2_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTIINEN2_TRIGINEN_RESET = _u(@as(c_int, 0x0));
pub const M33_CTIINEN2_TRIGINEN_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIINEN2_TRIGINEN_MSB = _u(@as(c_int, 3));
pub const M33_CTIINEN2_TRIGINEN_LSB = _u(@as(c_int, 0));
pub const M33_CTIINEN2_TRIGINEN_ACCESS = "RW";
pub const M33_CTIINEN3_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0004202c, .hex));
pub const M33_CTIINEN3_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIINEN3_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTIINEN3_TRIGINEN_RESET = _u(@as(c_int, 0x0));
pub const M33_CTIINEN3_TRIGINEN_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIINEN3_TRIGINEN_MSB = _u(@as(c_int, 3));
pub const M33_CTIINEN3_TRIGINEN_LSB = _u(@as(c_int, 0));
pub const M33_CTIINEN3_TRIGINEN_ACCESS = "RW";
pub const M33_CTIINEN4_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042030, .hex));
pub const M33_CTIINEN4_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIINEN4_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTIINEN4_TRIGINEN_RESET = _u(@as(c_int, 0x0));
pub const M33_CTIINEN4_TRIGINEN_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIINEN4_TRIGINEN_MSB = _u(@as(c_int, 3));
pub const M33_CTIINEN4_TRIGINEN_LSB = _u(@as(c_int, 0));
pub const M33_CTIINEN4_TRIGINEN_ACCESS = "RW";
pub const M33_CTIINEN5_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042034, .hex));
pub const M33_CTIINEN5_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIINEN5_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTIINEN5_TRIGINEN_RESET = _u(@as(c_int, 0x0));
pub const M33_CTIINEN5_TRIGINEN_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIINEN5_TRIGINEN_MSB = _u(@as(c_int, 3));
pub const M33_CTIINEN5_TRIGINEN_LSB = _u(@as(c_int, 0));
pub const M33_CTIINEN5_TRIGINEN_ACCESS = "RW";
pub const M33_CTIINEN6_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042038, .hex));
pub const M33_CTIINEN6_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIINEN6_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTIINEN6_TRIGINEN_RESET = _u(@as(c_int, 0x0));
pub const M33_CTIINEN6_TRIGINEN_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIINEN6_TRIGINEN_MSB = _u(@as(c_int, 3));
pub const M33_CTIINEN6_TRIGINEN_LSB = _u(@as(c_int, 0));
pub const M33_CTIINEN6_TRIGINEN_ACCESS = "RW";
pub const M33_CTIINEN7_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0004203c, .hex));
pub const M33_CTIINEN7_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIINEN7_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTIINEN7_TRIGINEN_RESET = _u(@as(c_int, 0x0));
pub const M33_CTIINEN7_TRIGINEN_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIINEN7_TRIGINEN_MSB = _u(@as(c_int, 3));
pub const M33_CTIINEN7_TRIGINEN_LSB = _u(@as(c_int, 0));
pub const M33_CTIINEN7_TRIGINEN_ACCESS = "RW";
pub const M33_CTIOUTEN0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000420a0, .hex));
pub const M33_CTIOUTEN0_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIOUTEN0_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTIOUTEN0_TRIGOUTEN_RESET = _u(@as(c_int, 0x0));
pub const M33_CTIOUTEN0_TRIGOUTEN_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIOUTEN0_TRIGOUTEN_MSB = _u(@as(c_int, 3));
pub const M33_CTIOUTEN0_TRIGOUTEN_LSB = _u(@as(c_int, 0));
pub const M33_CTIOUTEN0_TRIGOUTEN_ACCESS = "RW";
pub const M33_CTIOUTEN1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000420a4, .hex));
pub const M33_CTIOUTEN1_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIOUTEN1_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTIOUTEN1_TRIGOUTEN_RESET = _u(@as(c_int, 0x0));
pub const M33_CTIOUTEN1_TRIGOUTEN_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIOUTEN1_TRIGOUTEN_MSB = _u(@as(c_int, 3));
pub const M33_CTIOUTEN1_TRIGOUTEN_LSB = _u(@as(c_int, 0));
pub const M33_CTIOUTEN1_TRIGOUTEN_ACCESS = "RW";
pub const M33_CTIOUTEN2_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000420a8, .hex));
pub const M33_CTIOUTEN2_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIOUTEN2_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTIOUTEN2_TRIGOUTEN_RESET = _u(@as(c_int, 0x0));
pub const M33_CTIOUTEN2_TRIGOUTEN_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIOUTEN2_TRIGOUTEN_MSB = _u(@as(c_int, 3));
pub const M33_CTIOUTEN2_TRIGOUTEN_LSB = _u(@as(c_int, 0));
pub const M33_CTIOUTEN2_TRIGOUTEN_ACCESS = "RW";
pub const M33_CTIOUTEN3_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000420ac, .hex));
pub const M33_CTIOUTEN3_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIOUTEN3_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTIOUTEN3_TRIGOUTEN_RESET = _u(@as(c_int, 0x0));
pub const M33_CTIOUTEN3_TRIGOUTEN_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIOUTEN3_TRIGOUTEN_MSB = _u(@as(c_int, 3));
pub const M33_CTIOUTEN3_TRIGOUTEN_LSB = _u(@as(c_int, 0));
pub const M33_CTIOUTEN3_TRIGOUTEN_ACCESS = "RW";
pub const M33_CTIOUTEN4_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000420b0, .hex));
pub const M33_CTIOUTEN4_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIOUTEN4_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTIOUTEN4_TRIGOUTEN_RESET = _u(@as(c_int, 0x0));
pub const M33_CTIOUTEN4_TRIGOUTEN_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIOUTEN4_TRIGOUTEN_MSB = _u(@as(c_int, 3));
pub const M33_CTIOUTEN4_TRIGOUTEN_LSB = _u(@as(c_int, 0));
pub const M33_CTIOUTEN4_TRIGOUTEN_ACCESS = "RW";
pub const M33_CTIOUTEN5_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000420b4, .hex));
pub const M33_CTIOUTEN5_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIOUTEN5_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTIOUTEN5_TRIGOUTEN_RESET = _u(@as(c_int, 0x0));
pub const M33_CTIOUTEN5_TRIGOUTEN_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIOUTEN5_TRIGOUTEN_MSB = _u(@as(c_int, 3));
pub const M33_CTIOUTEN5_TRIGOUTEN_LSB = _u(@as(c_int, 0));
pub const M33_CTIOUTEN5_TRIGOUTEN_ACCESS = "RW";
pub const M33_CTIOUTEN6_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000420b8, .hex));
pub const M33_CTIOUTEN6_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIOUTEN6_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTIOUTEN6_TRIGOUTEN_RESET = _u(@as(c_int, 0x0));
pub const M33_CTIOUTEN6_TRIGOUTEN_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIOUTEN6_TRIGOUTEN_MSB = _u(@as(c_int, 3));
pub const M33_CTIOUTEN6_TRIGOUTEN_LSB = _u(@as(c_int, 0));
pub const M33_CTIOUTEN6_TRIGOUTEN_ACCESS = "RW";
pub const M33_CTIOUTEN7_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000420bc, .hex));
pub const M33_CTIOUTEN7_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIOUTEN7_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTIOUTEN7_TRIGOUTEN_RESET = _u(@as(c_int, 0x0));
pub const M33_CTIOUTEN7_TRIGOUTEN_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIOUTEN7_TRIGOUTEN_MSB = _u(@as(c_int, 3));
pub const M33_CTIOUTEN7_TRIGOUTEN_LSB = _u(@as(c_int, 0));
pub const M33_CTIOUTEN7_TRIGOUTEN_ACCESS = "RW";
pub const M33_CTITRIGINSTATUS_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042130, .hex));
pub const M33_CTITRIGINSTATUS_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_CTITRIGINSTATUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTITRIGINSTATUS_TRIGINSTATUS_RESET = _u(@as(c_int, 0x00));
pub const M33_CTITRIGINSTATUS_TRIGINSTATUS_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_CTITRIGINSTATUS_TRIGINSTATUS_MSB = _u(@as(c_int, 7));
pub const M33_CTITRIGINSTATUS_TRIGINSTATUS_LSB = _u(@as(c_int, 0));
pub const M33_CTITRIGINSTATUS_TRIGINSTATUS_ACCESS = "RO";
pub const M33_CTITRIGOUTSTATUS_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042134, .hex));
pub const M33_CTITRIGOUTSTATUS_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_CTITRIGOUTSTATUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTITRIGOUTSTATUS_TRIGOUTSTATUS_RESET = _u(@as(c_int, 0x00));
pub const M33_CTITRIGOUTSTATUS_TRIGOUTSTATUS_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_CTITRIGOUTSTATUS_TRIGOUTSTATUS_MSB = _u(@as(c_int, 7));
pub const M33_CTITRIGOUTSTATUS_TRIGOUTSTATUS_LSB = _u(@as(c_int, 0));
pub const M33_CTITRIGOUTSTATUS_TRIGOUTSTATUS_ACCESS = "RO";
pub const M33_CTICHINSTATUS_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042138, .hex));
pub const M33_CTICHINSTATUS_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTICHINSTATUS_RESET = _u(@as(c_int, 0x00000000));
pub const M33_CTICHINSTATUS_CTICHOUTSTATUS_RESET = _u(@as(c_int, 0x0));
pub const M33_CTICHINSTATUS_CTICHOUTSTATUS_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTICHINSTATUS_CTICHOUTSTATUS_MSB = _u(@as(c_int, 3));
pub const M33_CTICHINSTATUS_CTICHOUTSTATUS_LSB = _u(@as(c_int, 0));
pub const M33_CTICHINSTATUS_CTICHOUTSTATUS_ACCESS = "RO";
pub const M33_CTIGATE_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042140, .hex));
pub const M33_CTIGATE_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CTIGATE_RESET = _u(@as(c_int, 0x0000000f));
pub const M33_CTIGATE_CTIGATEEN3_RESET = _u(@as(c_int, 0x1));
pub const M33_CTIGATE_CTIGATEEN3_BITS = _u(@as(c_int, 0x00000008));
pub const M33_CTIGATE_CTIGATEEN3_MSB = _u(@as(c_int, 3));
pub const M33_CTIGATE_CTIGATEEN3_LSB = _u(@as(c_int, 3));
pub const M33_CTIGATE_CTIGATEEN3_ACCESS = "RW";
pub const M33_CTIGATE_CTIGATEEN2_RESET = _u(@as(c_int, 0x1));
pub const M33_CTIGATE_CTIGATEEN2_BITS = _u(@as(c_int, 0x00000004));
pub const M33_CTIGATE_CTIGATEEN2_MSB = _u(@as(c_int, 2));
pub const M33_CTIGATE_CTIGATEEN2_LSB = _u(@as(c_int, 2));
pub const M33_CTIGATE_CTIGATEEN2_ACCESS = "RW";
pub const M33_CTIGATE_CTIGATEEN1_RESET = _u(@as(c_int, 0x1));
pub const M33_CTIGATE_CTIGATEEN1_BITS = _u(@as(c_int, 0x00000002));
pub const M33_CTIGATE_CTIGATEEN1_MSB = _u(@as(c_int, 1));
pub const M33_CTIGATE_CTIGATEEN1_LSB = _u(@as(c_int, 1));
pub const M33_CTIGATE_CTIGATEEN1_ACCESS = "RW";
pub const M33_CTIGATE_CTIGATEEN0_RESET = _u(@as(c_int, 0x1));
pub const M33_CTIGATE_CTIGATEEN0_BITS = _u(@as(c_int, 0x00000001));
pub const M33_CTIGATE_CTIGATEEN0_MSB = _u(@as(c_int, 0));
pub const M33_CTIGATE_CTIGATEEN0_LSB = _u(@as(c_int, 0));
pub const M33_CTIGATE_CTIGATEEN0_ACCESS = "RW";
pub const M33_ASICCTL_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042144, .hex));
pub const M33_ASICCTL_BITS = _u(@as(c_int, 0x00000000));
pub const M33_ASICCTL_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ASICCTL_MSB = _u(@as(c_int, 31));
pub const M33_ASICCTL_LSB = _u(@as(c_int, 0));
pub const M33_ASICCTL_ACCESS = "RW";
pub const M33_ITCHOUT_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042ee4, .hex));
pub const M33_ITCHOUT_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_ITCHOUT_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITCHOUT_CTCHOUT_RESET = _u(@as(c_int, 0x0));
pub const M33_ITCHOUT_CTCHOUT_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_ITCHOUT_CTCHOUT_MSB = _u(@as(c_int, 3));
pub const M33_ITCHOUT_CTCHOUT_LSB = _u(@as(c_int, 0));
pub const M33_ITCHOUT_CTCHOUT_ACCESS = "RW";
pub const M33_ITTRIGOUT_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042ee8, .hex));
pub const M33_ITTRIGOUT_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_ITTRIGOUT_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITTRIGOUT_CTTRIGOUT_RESET = _u(@as(c_int, 0x00));
pub const M33_ITTRIGOUT_CTTRIGOUT_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_ITTRIGOUT_CTTRIGOUT_MSB = _u(@as(c_int, 7));
pub const M33_ITTRIGOUT_CTTRIGOUT_LSB = _u(@as(c_int, 0));
pub const M33_ITTRIGOUT_CTTRIGOUT_ACCESS = "RW";
pub const M33_ITCHIN_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042ef4, .hex));
pub const M33_ITCHIN_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_ITCHIN_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITCHIN_CTCHIN_RESET = _u(@as(c_int, 0x0));
pub const M33_ITCHIN_CTCHIN_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_ITCHIN_CTCHIN_MSB = _u(@as(c_int, 3));
pub const M33_ITCHIN_CTCHIN_LSB = _u(@as(c_int, 0));
pub const M33_ITCHIN_CTCHIN_ACCESS = "RO";
pub const M33_ITCTRL_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042f00, .hex));
pub const M33_ITCTRL_BITS = _u(@as(c_int, 0x00000001));
pub const M33_ITCTRL_RESET = _u(@as(c_int, 0x00000000));
pub const M33_ITCTRL_IME_RESET = _u(@as(c_int, 0x0));
pub const M33_ITCTRL_IME_BITS = _u(@as(c_int, 0x00000001));
pub const M33_ITCTRL_IME_MSB = _u(@as(c_int, 0));
pub const M33_ITCTRL_IME_LSB = _u(@as(c_int, 0));
pub const M33_ITCTRL_IME_ACCESS = "RW";
pub const M33_DEVARCH_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042fbc, .hex));
pub const M33_DEVARCH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const M33_DEVARCH_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x47701a14, .hex));
pub const M33_DEVARCH_ARCHITECT_RESET = _u(@as(c_int, 0x23b));
pub const M33_DEVARCH_ARCHITECT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffe00000, .hex));
pub const M33_DEVARCH_ARCHITECT_MSB = _u(@as(c_int, 31));
pub const M33_DEVARCH_ARCHITECT_LSB = _u(@as(c_int, 21));
pub const M33_DEVARCH_ARCHITECT_ACCESS = "RO";
pub const M33_DEVARCH_PRESENT_RESET = _u(@as(c_int, 0x1));
pub const M33_DEVARCH_PRESENT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const M33_DEVARCH_PRESENT_MSB = _u(@as(c_int, 20));
pub const M33_DEVARCH_PRESENT_LSB = _u(@as(c_int, 20));
pub const M33_DEVARCH_PRESENT_ACCESS = "RO";
pub const M33_DEVARCH_REVISION_RESET = _u(@as(c_int, 0x0));
pub const M33_DEVARCH_REVISION_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hex));
pub const M33_DEVARCH_REVISION_MSB = _u(@as(c_int, 19));
pub const M33_DEVARCH_REVISION_LSB = _u(@as(c_int, 16));
pub const M33_DEVARCH_REVISION_ACCESS = "RO";
pub const M33_DEVARCH_ARCHID_RESET = _u(@as(c_int, 0x1a14));
pub const M33_DEVARCH_ARCHID_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const M33_DEVARCH_ARCHID_MSB = _u(@as(c_int, 15));
pub const M33_DEVARCH_ARCHID_LSB = _u(@as(c_int, 0));
pub const M33_DEVARCH_ARCHID_ACCESS = "RO";
pub const M33_DEVID_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042fc8, .hex));
pub const M33_DEVID_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000fff1f, .hex));
pub const M33_DEVID_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040800, .hex));
pub const M33_DEVID_NUMCH_RESET = _u(@as(c_int, 0x4));
pub const M33_DEVID_NUMCH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000f0000, .hex));
pub const M33_DEVID_NUMCH_MSB = _u(@as(c_int, 19));
pub const M33_DEVID_NUMCH_LSB = _u(@as(c_int, 16));
pub const M33_DEVID_NUMCH_ACCESS = "RO";
pub const M33_DEVID_NUMTRIG_RESET = _u(@as(c_int, 0x08));
pub const M33_DEVID_NUMTRIG_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ff00, .hex));
pub const M33_DEVID_NUMTRIG_MSB = _u(@as(c_int, 15));
pub const M33_DEVID_NUMTRIG_LSB = _u(@as(c_int, 8));
pub const M33_DEVID_NUMTRIG_ACCESS = "RO";
pub const M33_DEVID_EXTMUXNUM_RESET = _u(@as(c_int, 0x00));
pub const M33_DEVID_EXTMUXNUM_BITS = _u(@as(c_int, 0x0000001f));
pub const M33_DEVID_EXTMUXNUM_MSB = _u(@as(c_int, 4));
pub const M33_DEVID_EXTMUXNUM_LSB = _u(@as(c_int, 0));
pub const M33_DEVID_EXTMUXNUM_ACCESS = "RO";
pub const M33_DEVTYPE_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042fcc, .hex));
pub const M33_DEVTYPE_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_DEVTYPE_RESET = _u(@as(c_int, 0x00000014));
pub const M33_DEVTYPE_SUB_RESET = _u(@as(c_int, 0x1));
pub const M33_DEVTYPE_SUB_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_DEVTYPE_SUB_MSB = _u(@as(c_int, 7));
pub const M33_DEVTYPE_SUB_LSB = _u(@as(c_int, 4));
pub const M33_DEVTYPE_SUB_ACCESS = "RO";
pub const M33_DEVTYPE_MAJOR_RESET = _u(@as(c_int, 0x4));
pub const M33_DEVTYPE_MAJOR_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_DEVTYPE_MAJOR_MSB = _u(@as(c_int, 3));
pub const M33_DEVTYPE_MAJOR_LSB = _u(@as(c_int, 0));
pub const M33_DEVTYPE_MAJOR_ACCESS = "RO";
pub const M33_PIDR4_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042fd0, .hex));
pub const M33_PIDR4_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_PIDR4_RESET = _u(@as(c_int, 0x00000004));
pub const M33_PIDR4_SIZE_RESET = _u(@as(c_int, 0x0));
pub const M33_PIDR4_SIZE_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_PIDR4_SIZE_MSB = _u(@as(c_int, 7));
pub const M33_PIDR4_SIZE_LSB = _u(@as(c_int, 4));
pub const M33_PIDR4_SIZE_ACCESS = "RO";
pub const M33_PIDR4_DES_2_RESET = _u(@as(c_int, 0x4));
pub const M33_PIDR4_DES_2_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_PIDR4_DES_2_MSB = _u(@as(c_int, 3));
pub const M33_PIDR4_DES_2_LSB = _u(@as(c_int, 0));
pub const M33_PIDR4_DES_2_ACCESS = "RO";
pub const M33_PIDR5_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042fd4, .hex));
pub const M33_PIDR5_BITS = _u(@as(c_int, 0x00000000));
pub const M33_PIDR5_RESET = _u(@as(c_int, 0x00000000));
pub const M33_PIDR5_MSB = _u(@as(c_int, 31));
pub const M33_PIDR5_LSB = _u(@as(c_int, 0));
pub const M33_PIDR5_ACCESS = "RW";
pub const M33_PIDR6_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042fd8, .hex));
pub const M33_PIDR6_BITS = _u(@as(c_int, 0x00000000));
pub const M33_PIDR6_RESET = _u(@as(c_int, 0x00000000));
pub const M33_PIDR6_MSB = _u(@as(c_int, 31));
pub const M33_PIDR6_LSB = _u(@as(c_int, 0));
pub const M33_PIDR6_ACCESS = "RW";
pub const M33_PIDR7_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042fdc, .hex));
pub const M33_PIDR7_BITS = _u(@as(c_int, 0x00000000));
pub const M33_PIDR7_RESET = _u(@as(c_int, 0x00000000));
pub const M33_PIDR7_MSB = _u(@as(c_int, 31));
pub const M33_PIDR7_LSB = _u(@as(c_int, 0));
pub const M33_PIDR7_ACCESS = "RW";
pub const M33_PIDR0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042fe0, .hex));
pub const M33_PIDR0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_PIDR0_RESET = _u(@as(c_int, 0x00000021));
pub const M33_PIDR0_PART_0_RESET = _u(@as(c_int, 0x21));
pub const M33_PIDR0_PART_0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_PIDR0_PART_0_MSB = _u(@as(c_int, 7));
pub const M33_PIDR0_PART_0_LSB = _u(@as(c_int, 0));
pub const M33_PIDR0_PART_0_ACCESS = "RO";
pub const M33_PIDR1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042fe4, .hex));
pub const M33_PIDR1_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_PIDR1_RESET = _u(@as(c_int, 0x000000bd));
pub const M33_PIDR1_DES_0_RESET = _u(@as(c_int, 0xb));
pub const M33_PIDR1_DES_0_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_PIDR1_DES_0_MSB = _u(@as(c_int, 7));
pub const M33_PIDR1_DES_0_LSB = _u(@as(c_int, 4));
pub const M33_PIDR1_DES_0_ACCESS = "RO";
pub const M33_PIDR1_PART_1_RESET = _u(@as(c_int, 0xd));
pub const M33_PIDR1_PART_1_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_PIDR1_PART_1_MSB = _u(@as(c_int, 3));
pub const M33_PIDR1_PART_1_LSB = _u(@as(c_int, 0));
pub const M33_PIDR1_PART_1_ACCESS = "RO";
pub const M33_PIDR2_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042fe8, .hex));
pub const M33_PIDR2_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_PIDR2_RESET = _u(@as(c_int, 0x0000000b));
pub const M33_PIDR2_REVISION_RESET = _u(@as(c_int, 0x0));
pub const M33_PIDR2_REVISION_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_PIDR2_REVISION_MSB = _u(@as(c_int, 7));
pub const M33_PIDR2_REVISION_LSB = _u(@as(c_int, 4));
pub const M33_PIDR2_REVISION_ACCESS = "RO";
pub const M33_PIDR2_JEDEC_RESET = _u(@as(c_int, 0x1));
pub const M33_PIDR2_JEDEC_BITS = _u(@as(c_int, 0x00000008));
pub const M33_PIDR2_JEDEC_MSB = _u(@as(c_int, 3));
pub const M33_PIDR2_JEDEC_LSB = _u(@as(c_int, 3));
pub const M33_PIDR2_JEDEC_ACCESS = "RO";
pub const M33_PIDR2_DES_1_RESET = _u(@as(c_int, 0x3));
pub const M33_PIDR2_DES_1_BITS = _u(@as(c_int, 0x00000007));
pub const M33_PIDR2_DES_1_MSB = _u(@as(c_int, 2));
pub const M33_PIDR2_DES_1_LSB = _u(@as(c_int, 0));
pub const M33_PIDR2_DES_1_ACCESS = "RO";
pub const M33_PIDR3_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042fec, .hex));
pub const M33_PIDR3_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_PIDR3_RESET = _u(@as(c_int, 0x00000000));
pub const M33_PIDR3_REVAND_RESET = _u(@as(c_int, 0x0));
pub const M33_PIDR3_REVAND_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_PIDR3_REVAND_MSB = _u(@as(c_int, 7));
pub const M33_PIDR3_REVAND_LSB = _u(@as(c_int, 4));
pub const M33_PIDR3_REVAND_ACCESS = "RO";
pub const M33_PIDR3_CMOD_RESET = _u(@as(c_int, 0x0));
pub const M33_PIDR3_CMOD_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_PIDR3_CMOD_MSB = _u(@as(c_int, 3));
pub const M33_PIDR3_CMOD_LSB = _u(@as(c_int, 0));
pub const M33_PIDR3_CMOD_ACCESS = "RO";
pub const M33_CIDR0_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042ff0, .hex));
pub const M33_CIDR0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_CIDR0_RESET = _u(@as(c_int, 0x0000000d));
pub const M33_CIDR0_PRMBL_0_RESET = _u(@as(c_int, 0x0d));
pub const M33_CIDR0_PRMBL_0_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_CIDR0_PRMBL_0_MSB = _u(@as(c_int, 7));
pub const M33_CIDR0_PRMBL_0_LSB = _u(@as(c_int, 0));
pub const M33_CIDR0_PRMBL_0_ACCESS = "RO";
pub const M33_CIDR1_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042ff4, .hex));
pub const M33_CIDR1_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_CIDR1_RESET = _u(@as(c_int, 0x00000090));
pub const M33_CIDR1_CLASS_RESET = _u(@as(c_int, 0x9));
pub const M33_CIDR1_CLASS_BITS = _u(@as(c_int, 0x000000f0));
pub const M33_CIDR1_CLASS_MSB = _u(@as(c_int, 7));
pub const M33_CIDR1_CLASS_LSB = _u(@as(c_int, 4));
pub const M33_CIDR1_CLASS_ACCESS = "RO";
pub const M33_CIDR1_PRMBL_1_RESET = _u(@as(c_int, 0x0));
pub const M33_CIDR1_PRMBL_1_BITS = _u(@as(c_int, 0x0000000f));
pub const M33_CIDR1_PRMBL_1_MSB = _u(@as(c_int, 3));
pub const M33_CIDR1_PRMBL_1_LSB = _u(@as(c_int, 0));
pub const M33_CIDR1_PRMBL_1_ACCESS = "RO";
pub const M33_CIDR2_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042ff8, .hex));
pub const M33_CIDR2_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_CIDR2_RESET = _u(@as(c_int, 0x00000005));
pub const M33_CIDR2_PRMBL_2_RESET = _u(@as(c_int, 0x05));
pub const M33_CIDR2_PRMBL_2_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_CIDR2_PRMBL_2_MSB = _u(@as(c_int, 7));
pub const M33_CIDR2_PRMBL_2_LSB = _u(@as(c_int, 0));
pub const M33_CIDR2_PRMBL_2_ACCESS = "RO";
pub const M33_CIDR3_OFFSET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00042ffc, .hex));
pub const M33_CIDR3_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_CIDR3_RESET = _u(@as(c_int, 0x000000b1));
pub const M33_CIDR3_PRMBL_3_RESET = _u(@as(c_int, 0xb1));
pub const M33_CIDR3_PRMBL_3_BITS = _u(@as(c_int, 0x000000ff));
pub const M33_CIDR3_PRMBL_3_MSB = _u(@as(c_int, 7));
pub const M33_CIDR3_PRMBL_3_LSB = _u(@as(c_int, 0));
pub const M33_CIDR3_PRMBL_3_ACCESS = "RO";
pub const ARM_CPU_PREFIXED = @compileError("unable to translate macro: undefined identifier `M33_`");
// /home/ianic/Code/pico/pico-sdk/src/rp2350/pico_platform/include/pico/platform/cpu_regs.h:22:9
pub const _HARDWARE_STRUCTS_M33_H = "";
pub const m33_hw = @import("std").zig.c_translation.cast([*c]m33_hw_t, PPB_BASE);
pub const m33_ns_hw = @import("std").zig.c_translation.cast([*c]m33_hw_t, PPB_NONSEC_BASE);
pub const arm_cpu_hw = m33_hw;
pub const _HARDWARE_STRUCTS_NVIC_H = "";
pub const nvic_hw = @import("std").zig.c_translation.cast([*c]nvic_hw_t, PPB_BASE + M33_NVIC_ISER0_OFFSET);
pub const nvic_ns_hw = @import("std").zig.c_translation.cast([*c]nvic_hw_t, PPB_NONSEC_BASE + M33_NVIC_ISER0_OFFSET);
pub const _HARDWARE_STRUCTS_SCB_H = "";
pub const scb_hw = @import("std").zig.c_translation.cast([*c]armv8m_scb_hw_t, PPB_BASE + M33_CPUID_OFFSET);
pub const scb_ns_hw = @import("std").zig.c_translation.cast([*c]armv8m_scb_hw_t, PPB_NONSEC_BASE + M33_CPUID_OFFSET);
pub const PICO_DEFAULT_IRQ_PRIORITY = @as(c_int, 0x80);
pub const PICO_LOWEST_IRQ_PRIORITY = @as(c_int, 0xff);
pub const PICO_HIGHEST_IRQ_PRIORITY = @as(c_int, 0x00);
pub const PICO_SHARED_IRQ_HANDLER_DEFAULT_ORDER_PRIORITY = @as(c_int, 0x80);
pub const PICO_SHARED_IRQ_HANDLER_HIGHEST_ORDER_PRIORITY = @as(c_int, 0xff);
pub const PICO_SHARED_IRQ_HANDLER_LOWEST_ORDER_PRIORITY = @as(c_int, 0x00);
pub const PARAM_ASSERTIONS_ENABLED_HARDWARE_IRQ = @as(c_int, 0);
pub const PICO_USE_GPIO_COPROCESSOR = @as(c_int, 1);
pub const _HARDWARE_GPIO_COPROC_H = "";
pub const PARAM_ASSERTIONS_ENABLED_HARDWARE_GPIO = @as(c_int, 0);
pub const GPIO_IRQ_CALLBACK_ORDER_PRIORITY = PICO_SHARED_IRQ_HANDLER_LOWEST_ORDER_PRIORITY;
pub const GPIO_RAW_IRQ_HANDLER_DEFAULT_ORDER_PRIORITY = PICO_SHARED_IRQ_HANDLER_DEFAULT_ORDER_PRIORITY;
pub const PICO_DEBUG_PIN_BASE = @as(c_uint, 19);
pub const PICO_DEBUG_PIN_COUNT = @as(c_uint, 3);
pub const CU_REGISTER_DEBUG_PINS = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio.h:1428:9
pub const CU_SELECT_DEBUG_PINS = @compileError("unable to translate macro: undefined identifier `DEBUG_PIN_TYPE`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio.h:1429:9
pub const DEBUG_PINS_ENABLED = @compileError("unable to translate macro: undefined identifier `__selected_debug_pins`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio.h:1430:9
pub const DEBUG_PINS_SET = @compileError("unable to translate C expr: unexpected token 'if'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio.h:1441:9
pub const DEBUG_PINS_CLR = @compileError("unable to translate C expr: unexpected token 'if'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio.h:1442:9
pub const DEBUG_PINS_XOR = @compileError("unable to translate C expr: unexpected token 'if'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_gpio/include/hardware/gpio.h:1443:9
pub const PARAM_ASSERTIONS_ENABLED_HARDWARE_ADC = @as(c_int, 0);
pub const ADC_TEMPERATURE_CHANNEL_NUM = NUM_ADC_CHANNELS - @as(c_int, 1);
pub const PICO_ADC_CLKDIV_ROUND_NEAREST = PICO_CLKDIV_ROUND_NEAREST;
pub const _PICO_CYW43_ARCH_H = "";
pub const CYW43_INCLUDED_CYW43_H = "";
pub const _CYW43_CONFIGPORT_H = "";
pub const _PICO_TIME_H = "";
pub const _HARDWARE_TIMER_H = "";
pub const _HARDWARE_STRUCTS_TIMER_H = "";
pub const _HARDWARE_REGS_TIMER_H = "";
pub const TIMER_TIMEHW_OFFSET = _u(@as(c_int, 0x00000000));
pub const TIMER_TIMEHW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const TIMER_TIMEHW_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_TIMEHW_MSB = _u(@as(c_int, 31));
pub const TIMER_TIMEHW_LSB = _u(@as(c_int, 0));
pub const TIMER_TIMEHW_ACCESS = "WF";
pub const TIMER_TIMELW_OFFSET = _u(@as(c_int, 0x00000004));
pub const TIMER_TIMELW_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const TIMER_TIMELW_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_TIMELW_MSB = _u(@as(c_int, 31));
pub const TIMER_TIMELW_LSB = _u(@as(c_int, 0));
pub const TIMER_TIMELW_ACCESS = "WF";
pub const TIMER_TIMEHR_OFFSET = _u(@as(c_int, 0x00000008));
pub const TIMER_TIMEHR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const TIMER_TIMEHR_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_TIMEHR_MSB = _u(@as(c_int, 31));
pub const TIMER_TIMEHR_LSB = _u(@as(c_int, 0));
pub const TIMER_TIMEHR_ACCESS = "RO";
pub const TIMER_TIMELR_OFFSET = _u(@as(c_int, 0x0000000c));
pub const TIMER_TIMELR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const TIMER_TIMELR_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_TIMELR_MSB = _u(@as(c_int, 31));
pub const TIMER_TIMELR_LSB = _u(@as(c_int, 0));
pub const TIMER_TIMELR_ACCESS = "RO";
pub const TIMER_ALARM0_OFFSET = _u(@as(c_int, 0x00000010));
pub const TIMER_ALARM0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const TIMER_ALARM0_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_ALARM0_MSB = _u(@as(c_int, 31));
pub const TIMER_ALARM0_LSB = _u(@as(c_int, 0));
pub const TIMER_ALARM0_ACCESS = "RW";
pub const TIMER_ALARM1_OFFSET = _u(@as(c_int, 0x00000014));
pub const TIMER_ALARM1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const TIMER_ALARM1_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_ALARM1_MSB = _u(@as(c_int, 31));
pub const TIMER_ALARM1_LSB = _u(@as(c_int, 0));
pub const TIMER_ALARM1_ACCESS = "RW";
pub const TIMER_ALARM2_OFFSET = _u(@as(c_int, 0x00000018));
pub const TIMER_ALARM2_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const TIMER_ALARM2_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_ALARM2_MSB = _u(@as(c_int, 31));
pub const TIMER_ALARM2_LSB = _u(@as(c_int, 0));
pub const TIMER_ALARM2_ACCESS = "RW";
pub const TIMER_ALARM3_OFFSET = _u(@as(c_int, 0x0000001c));
pub const TIMER_ALARM3_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const TIMER_ALARM3_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_ALARM3_MSB = _u(@as(c_int, 31));
pub const TIMER_ALARM3_LSB = _u(@as(c_int, 0));
pub const TIMER_ALARM3_ACCESS = "RW";
pub const TIMER_ARMED_OFFSET = _u(@as(c_int, 0x00000020));
pub const TIMER_ARMED_BITS = _u(@as(c_int, 0x0000000f));
pub const TIMER_ARMED_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_ARMED_MSB = _u(@as(c_int, 3));
pub const TIMER_ARMED_LSB = _u(@as(c_int, 0));
pub const TIMER_ARMED_ACCESS = "WC";
pub const TIMER_TIMERAWH_OFFSET = _u(@as(c_int, 0x00000024));
pub const TIMER_TIMERAWH_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const TIMER_TIMERAWH_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_TIMERAWH_MSB = _u(@as(c_int, 31));
pub const TIMER_TIMERAWH_LSB = _u(@as(c_int, 0));
pub const TIMER_TIMERAWH_ACCESS = "RO";
pub const TIMER_TIMERAWL_OFFSET = _u(@as(c_int, 0x00000028));
pub const TIMER_TIMERAWL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex));
pub const TIMER_TIMERAWL_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_TIMERAWL_MSB = _u(@as(c_int, 31));
pub const TIMER_TIMERAWL_LSB = _u(@as(c_int, 0));
pub const TIMER_TIMERAWL_ACCESS = "RO";
pub const TIMER_DBGPAUSE_OFFSET = _u(@as(c_int, 0x0000002c));
pub const TIMER_DBGPAUSE_BITS = _u(@as(c_int, 0x00000006));
pub const TIMER_DBGPAUSE_RESET = _u(@as(c_int, 0x00000007));
pub const TIMER_DBGPAUSE_DBG1_RESET = _u(@as(c_int, 0x1));
pub const TIMER_DBGPAUSE_DBG1_BITS = _u(@as(c_int, 0x00000004));
pub const TIMER_DBGPAUSE_DBG1_MSB = _u(@as(c_int, 2));
pub const TIMER_DBGPAUSE_DBG1_LSB = _u(@as(c_int, 2));
pub const TIMER_DBGPAUSE_DBG1_ACCESS = "RW";
pub const TIMER_DBGPAUSE_DBG0_RESET = _u(@as(c_int, 0x1));
pub const TIMER_DBGPAUSE_DBG0_BITS = _u(@as(c_int, 0x00000002));
pub const TIMER_DBGPAUSE_DBG0_MSB = _u(@as(c_int, 1));
pub const TIMER_DBGPAUSE_DBG0_LSB = _u(@as(c_int, 1));
pub const TIMER_DBGPAUSE_DBG0_ACCESS = "RW";
pub const TIMER_PAUSE_OFFSET = _u(@as(c_int, 0x00000030));
pub const TIMER_PAUSE_BITS = _u(@as(c_int, 0x00000001));
pub const TIMER_PAUSE_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_PAUSE_MSB = _u(@as(c_int, 0));
pub const TIMER_PAUSE_LSB = _u(@as(c_int, 0));
pub const TIMER_PAUSE_ACCESS = "RW";
pub const TIMER_LOCKED_OFFSET = _u(@as(c_int, 0x00000034));
pub const TIMER_LOCKED_BITS = _u(@as(c_int, 0x00000001));
pub const TIMER_LOCKED_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_LOCKED_MSB = _u(@as(c_int, 0));
pub const TIMER_LOCKED_LSB = _u(@as(c_int, 0));
pub const TIMER_LOCKED_ACCESS = "RW";
pub const TIMER_SOURCE_OFFSET = _u(@as(c_int, 0x00000038));
pub const TIMER_SOURCE_BITS = _u(@as(c_int, 0x00000001));
pub const TIMER_SOURCE_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_SOURCE_CLK_SYS_RESET = _u(@as(c_int, 0x0));
pub const TIMER_SOURCE_CLK_SYS_BITS = _u(@as(c_int, 0x00000001));
pub const TIMER_SOURCE_CLK_SYS_MSB = _u(@as(c_int, 0));
pub const TIMER_SOURCE_CLK_SYS_LSB = _u(@as(c_int, 0));
pub const TIMER_SOURCE_CLK_SYS_ACCESS = "RW";
pub const TIMER_SOURCE_CLK_SYS_VALUE_TICK = _u(@as(c_int, 0x0));
pub const TIMER_SOURCE_CLK_SYS_VALUE_CLK_SYS = _u(@as(c_int, 0x1));
pub const TIMER_INTR_OFFSET = _u(@as(c_int, 0x0000003c));
pub const TIMER_INTR_BITS = _u(@as(c_int, 0x0000000f));
pub const TIMER_INTR_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_INTR_ALARM_3_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTR_ALARM_3_BITS = _u(@as(c_int, 0x00000008));
pub const TIMER_INTR_ALARM_3_MSB = _u(@as(c_int, 3));
pub const TIMER_INTR_ALARM_3_LSB = _u(@as(c_int, 3));
pub const TIMER_INTR_ALARM_3_ACCESS = "WC";
pub const TIMER_INTR_ALARM_2_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTR_ALARM_2_BITS = _u(@as(c_int, 0x00000004));
pub const TIMER_INTR_ALARM_2_MSB = _u(@as(c_int, 2));
pub const TIMER_INTR_ALARM_2_LSB = _u(@as(c_int, 2));
pub const TIMER_INTR_ALARM_2_ACCESS = "WC";
pub const TIMER_INTR_ALARM_1_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTR_ALARM_1_BITS = _u(@as(c_int, 0x00000002));
pub const TIMER_INTR_ALARM_1_MSB = _u(@as(c_int, 1));
pub const TIMER_INTR_ALARM_1_LSB = _u(@as(c_int, 1));
pub const TIMER_INTR_ALARM_1_ACCESS = "WC";
pub const TIMER_INTR_ALARM_0_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTR_ALARM_0_BITS = _u(@as(c_int, 0x00000001));
pub const TIMER_INTR_ALARM_0_MSB = _u(@as(c_int, 0));
pub const TIMER_INTR_ALARM_0_LSB = _u(@as(c_int, 0));
pub const TIMER_INTR_ALARM_0_ACCESS = "WC";
pub const TIMER_INTE_OFFSET = _u(@as(c_int, 0x00000040));
pub const TIMER_INTE_BITS = _u(@as(c_int, 0x0000000f));
pub const TIMER_INTE_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_INTE_ALARM_3_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTE_ALARM_3_BITS = _u(@as(c_int, 0x00000008));
pub const TIMER_INTE_ALARM_3_MSB = _u(@as(c_int, 3));
pub const TIMER_INTE_ALARM_3_LSB = _u(@as(c_int, 3));
pub const TIMER_INTE_ALARM_3_ACCESS = "RW";
pub const TIMER_INTE_ALARM_2_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTE_ALARM_2_BITS = _u(@as(c_int, 0x00000004));
pub const TIMER_INTE_ALARM_2_MSB = _u(@as(c_int, 2));
pub const TIMER_INTE_ALARM_2_LSB = _u(@as(c_int, 2));
pub const TIMER_INTE_ALARM_2_ACCESS = "RW";
pub const TIMER_INTE_ALARM_1_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTE_ALARM_1_BITS = _u(@as(c_int, 0x00000002));
pub const TIMER_INTE_ALARM_1_MSB = _u(@as(c_int, 1));
pub const TIMER_INTE_ALARM_1_LSB = _u(@as(c_int, 1));
pub const TIMER_INTE_ALARM_1_ACCESS = "RW";
pub const TIMER_INTE_ALARM_0_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTE_ALARM_0_BITS = _u(@as(c_int, 0x00000001));
pub const TIMER_INTE_ALARM_0_MSB = _u(@as(c_int, 0));
pub const TIMER_INTE_ALARM_0_LSB = _u(@as(c_int, 0));
pub const TIMER_INTE_ALARM_0_ACCESS = "RW";
pub const TIMER_INTF_OFFSET = _u(@as(c_int, 0x00000044));
pub const TIMER_INTF_BITS = _u(@as(c_int, 0x0000000f));
pub const TIMER_INTF_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_INTF_ALARM_3_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTF_ALARM_3_BITS = _u(@as(c_int, 0x00000008));
pub const TIMER_INTF_ALARM_3_MSB = _u(@as(c_int, 3));
pub const TIMER_INTF_ALARM_3_LSB = _u(@as(c_int, 3));
pub const TIMER_INTF_ALARM_3_ACCESS = "RW";
pub const TIMER_INTF_ALARM_2_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTF_ALARM_2_BITS = _u(@as(c_int, 0x00000004));
pub const TIMER_INTF_ALARM_2_MSB = _u(@as(c_int, 2));
pub const TIMER_INTF_ALARM_2_LSB = _u(@as(c_int, 2));
pub const TIMER_INTF_ALARM_2_ACCESS = "RW";
pub const TIMER_INTF_ALARM_1_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTF_ALARM_1_BITS = _u(@as(c_int, 0x00000002));
pub const TIMER_INTF_ALARM_1_MSB = _u(@as(c_int, 1));
pub const TIMER_INTF_ALARM_1_LSB = _u(@as(c_int, 1));
pub const TIMER_INTF_ALARM_1_ACCESS = "RW";
pub const TIMER_INTF_ALARM_0_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTF_ALARM_0_BITS = _u(@as(c_int, 0x00000001));
pub const TIMER_INTF_ALARM_0_MSB = _u(@as(c_int, 0));
pub const TIMER_INTF_ALARM_0_LSB = _u(@as(c_int, 0));
pub const TIMER_INTF_ALARM_0_ACCESS = "RW";
pub const TIMER_INTS_OFFSET = _u(@as(c_int, 0x00000048));
pub const TIMER_INTS_BITS = _u(@as(c_int, 0x0000000f));
pub const TIMER_INTS_RESET = _u(@as(c_int, 0x00000000));
pub const TIMER_INTS_ALARM_3_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTS_ALARM_3_BITS = _u(@as(c_int, 0x00000008));
pub const TIMER_INTS_ALARM_3_MSB = _u(@as(c_int, 3));
pub const TIMER_INTS_ALARM_3_LSB = _u(@as(c_int, 3));
pub const TIMER_INTS_ALARM_3_ACCESS = "RO";
pub const TIMER_INTS_ALARM_2_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTS_ALARM_2_BITS = _u(@as(c_int, 0x00000004));
pub const TIMER_INTS_ALARM_2_MSB = _u(@as(c_int, 2));
pub const TIMER_INTS_ALARM_2_LSB = _u(@as(c_int, 2));
pub const TIMER_INTS_ALARM_2_ACCESS = "RO";
pub const TIMER_INTS_ALARM_1_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTS_ALARM_1_BITS = _u(@as(c_int, 0x00000002));
pub const TIMER_INTS_ALARM_1_MSB = _u(@as(c_int, 1));
pub const TIMER_INTS_ALARM_1_LSB = _u(@as(c_int, 1));
pub const TIMER_INTS_ALARM_1_ACCESS = "RO";
pub const TIMER_INTS_ALARM_0_RESET = _u(@as(c_int, 0x0));
pub const TIMER_INTS_ALARM_0_BITS = _u(@as(c_int, 0x00000001));
pub const TIMER_INTS_ALARM_0_MSB = _u(@as(c_int, 0));
pub const TIMER_INTS_ALARM_0_LSB = _u(@as(c_int, 0));
pub const TIMER_INTS_ALARM_0_ACCESS = "RO";
pub const timer0_hw = @import("std").zig.c_translation.cast([*c]timer_hw_t, TIMER0_BASE);
pub const timer1_hw = @import("std").zig.c_translation.cast([*c]timer_hw_t, TIMER1_BASE);
pub const PARAM_ASSERTIONS_ENABLED_HARDWARE_TIMER = @as(c_int, 0);
pub inline fn TIMER_NUM(timer: anytype) @TypeOf(timer == timer1_hw) {
    _ = &timer;
    return timer == timer1_hw;
}
pub inline fn TIMER_INSTANCE(num: anytype) @TypeOf(if (num) timer1_hw else timer0_hw) {
    _ = &num;
    return if (num) timer1_hw else timer0_hw;
}
pub inline fn TIMER_ALARM_IRQ_NUM(timer: anytype, alarm_num: anytype) @TypeOf((TIMER0_IRQ_0 + (TIMER_NUM(timer) * NUM_ALARMS)) + alarm_num) {
    _ = &timer;
    _ = &alarm_num;
    return (TIMER0_IRQ_0 + (TIMER_NUM(timer) * NUM_ALARMS)) + alarm_num;
}
pub inline fn TIMER_ALARM_NUM_FROM_IRQ(irq_num: anytype) @TypeOf((irq_num - TIMER0_IRQ_0) & @as(c_uint, 3)) {
    _ = &irq_num;
    return (irq_num - TIMER0_IRQ_0) & @as(c_uint, 3);
}
pub inline fn TIMER_NUM_FROM_IRQ(irq_num: anytype) @TypeOf((irq_num - TIMER0_IRQ_0) >> @as(c_int, 2)) {
    _ = &irq_num;
    return (irq_num - TIMER0_IRQ_0) >> @as(c_int, 2);
}
pub const PICO_DEFAULT_TIMER = @as(c_int, 0);
pub const PICO_DEFAULT_TIMER_INSTANCE = @compileError("unable to translate macro: undefined identifier `timer`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_timer/include/hardware/timer.h:182:9
pub const timer_hw = PICO_DEFAULT_TIMER_INSTANCE();
pub const PARAM_ASSERTIONS_ENABLED_PICO_TIME = @as(c_int, 0);
pub const PICO_TIME_SLEEP_OVERHEAD_ADJUST_US = @as(c_int, 6);
pub const PICO_TIME_DEFAULT_ALARM_POOL_DISABLED = @as(c_int, 0);
pub const PICO_TIME_DEFAULT_ALARM_POOL_HARDWARE_ALARM_NUM = @as(c_int, 3);
pub const PICO_TIME_DEFAULT_ALARM_POOL_MAX_TIMERS = @as(c_int, 16);
pub const CYW43_HOST_NAME = "PicoW";
pub const CYW43_GPIO = @as(c_int, 1);
pub const CYW43_LOGIC_DEBUG = @as(c_int, 0);
pub const CYW43_USE_OTP_MAC = @as(c_int, 1);
pub const CYW43_NO_NETUTILS = @as(c_int, 1);
pub const CYW43_IOCTL_TIMEOUT_US = @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000, .decimal);
pub const CYW43_USE_STATS = @as(c_int, 0);
pub const CYW43_HAL_MAC_WLAN0 = @as(c_int, 0);
pub const STATIC = @compileError("unable to translate C expr: unexpected token 'static'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_cyw43_driver/include/cyw43_configport.h:54:9
pub const CYW43_USE_SPI = @as(c_int, 1);
pub const CYW43_SPI_PIO = @as(c_int, 1);
pub const CYW43_CHIPSET_FIRMWARE_INCLUDE_FILE = "w43439A0_7_95_49_00_combined.h";
pub const CYW43_WIFI_NVRAM_INCLUDE_FILE = "wifi_nvram_43439.h";
pub const CYW43_EPERM = -PICO_ERROR_NOT_PERMITTED;
pub const CYW43_EIO = -PICO_ERROR_IO;
pub const CYW43_EINVAL = -PICO_ERROR_INVALID_ARG;
pub const CYW43_ETIMEDOUT = -PICO_ERROR_TIMEOUT;
pub const CYW43_NUM_GPIOS = CYW43_WL_GPIO_COUNT;
pub const cyw43_hal_pin_obj_t = uint;
pub inline fn CYW43_ARRAY_SIZE(a: anytype) @TypeOf(count_of(a)) {
    _ = &a;
    return count_of(a);
}
pub const CYW43_PIN_WL_REG_ON = CYW43_DEFAULT_PIN_WL_REG_ON;
pub const CYW43_PIN_WL_DATA_OUT = CYW43_DEFAULT_PIN_WL_DATA_OUT;
pub const CYW43_PIN_WL_DATA_IN = CYW43_DEFAULT_PIN_WL_DATA_IN;
pub const CYW43_PIN_WL_HOST_WAKE = CYW43_DEFAULT_PIN_WL_HOST_WAKE;
pub const CYW43_PIN_WL_CLOCK = CYW43_DEFAULT_PIN_WL_CLOCK;
pub const CYW43_PIN_WL_CS = CYW43_DEFAULT_PIN_WL_CS;
pub const CYW43_HAL_PIN_MODE_INPUT = GPIO_IN;
pub const CYW43_HAL_PIN_MODE_OUTPUT = GPIO_OUT;
pub const CYW43_HAL_PIN_PULL_NONE = @as(c_int, 0);
pub const CYW43_HAL_PIN_PULL_UP = @as(c_int, 1);
pub const CYW43_HAL_PIN_PULL_DOWN = @as(c_int, 2);
pub const CYW43_THREAD_ENTER = @compileError("unable to translate C expr: unexpected token ';'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_cyw43_driver/include/cyw43_configport.h:169:9
pub const CYW43_THREAD_EXIT = @compileError("unable to translate C expr: unexpected token ';'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_cyw43_driver/include/cyw43_configport.h:170:9
pub inline fn cyw43_arch_lwip_check() @TypeOf(cyw43_thread_lock_check()) {
    return cyw43_thread_lock_check();
}
pub const CYW43_THREAD_LOCK_CHECK = @compileError("unable to translate C expr: unexpected token ';'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_cyw43_driver/include/cyw43_configport.h:176:9
pub const CYW43_SDPCM_SEND_COMMON_WAIT = @compileError("unable to translate C expr: unexpected token ';'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_cyw43_driver/include/cyw43_configport.h:184:9
pub const CYW43_DO_IOCTL_WAIT = @compileError("unable to translate C expr: unexpected token ';'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_cyw43_driver/include/cyw43_configport.h:185:9
pub const CYW43_POST_POLL_HOOK = @compileError("unable to translate C expr: unexpected token ';'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_cyw43_driver/include/cyw43_configport.h:195:9
pub const cyw43_malloc = malloc;
pub const cyw43_free = free;
pub const PICO_CYW43_LOGGING_ENABLED = @as(c_int, 1);
pub const CYW43_CLEAR_SDIO_INT = @as(c_int, 0);
pub const CYW43_INCLUDE_LEGACY_F1_OVERFLOW_WORKAROUND_VARIABLES = @as(c_int, 0);
pub const CYW43_ENABLE_BLUETOOTH = @as(c_int, 0);
pub const CYW43_ENABLE_BLUETOOTH_OVER_UART = @as(c_int, 0);
pub const CYW43_RESOURCE_ATTRIBUTE = @compileError("unable to translate macro: undefined identifier `aligned`");
// /home/ianic/Code/pico/pico-sdk/lib/cyw43-driver/src/cyw43_config.h:111:9
pub const CYW43_RESOURCE_VERIFY_DOWNLOAD = @as(c_int, 0);
pub const CYW43_SLEEP_MAX = @as(c_int, 50);
pub const CYW43_HAL_UART_READCHAR_BLOCKING_WAIT = cyw43_delay_us(@as(c_int, 10));
pub const CYW43_LWIP = @as(c_int, 1);
pub const CYW43_NETUTILS = @as(c_int, 0);
pub const _STDIO_H_ = "";
pub const _FSTDIO = "";
pub const __need___va_list = "";
pub const __GNUC_VA_LIST = "";
pub const _VA_LIST_DEFINED = "";
pub const _SYS_REENT_H_ = "";
pub const _SYS__TYPES_H = "";
pub const __need_wint_t = "";
pub const _WINT_T = "";
pub const _MACHINE__TYPES_H = "";
pub const unsigned = c_int;
pub const _CLOCK_T_ = c_ulong;
pub const _TIME_T_ = __int_least64_t;
pub const _CLOCKID_T_ = c_ulong;
pub const _TIMER_T_ = c_ulong;
pub const _NULL = @as(c_int, 0);
pub const __Long = c_long;
pub const __SYS_LOCK_H__ = "";
pub const _LOCK_RECURSIVE_T = _LOCK_T;
pub const __LOCK_INIT = @compileError("unable to translate macro: undefined identifier `__lock_`");
// /usr/arm-none-eabi/include/sys/lock.h:37:9
pub inline fn __LOCK_INIT_RECURSIVE(class: anytype, lock: anytype) @TypeOf(__LOCK_INIT(class, lock)) {
    _ = &class;
    _ = &lock;
    return __LOCK_INIT(class, lock);
}
pub inline fn __lock_init(lock: anytype) @TypeOf(__retarget_lock_init(&lock)) {
    _ = &lock;
    return __retarget_lock_init(&lock);
}
pub inline fn __lock_init_recursive(lock: anytype) @TypeOf(__retarget_lock_init_recursive(&lock)) {
    _ = &lock;
    return __retarget_lock_init_recursive(&lock);
}
pub inline fn __lock_close(lock: anytype) @TypeOf(__retarget_lock_close(lock)) {
    _ = &lock;
    return __retarget_lock_close(lock);
}
pub inline fn __lock_close_recursive(lock: anytype) @TypeOf(__retarget_lock_close_recursive(lock)) {
    _ = &lock;
    return __retarget_lock_close_recursive(lock);
}
pub inline fn __lock_acquire(lock: anytype) @TypeOf(__retarget_lock_acquire(lock)) {
    _ = &lock;
    return __retarget_lock_acquire(lock);
}
pub inline fn __lock_acquire_recursive(lock: anytype) @TypeOf(__retarget_lock_acquire_recursive(lock)) {
    _ = &lock;
    return __retarget_lock_acquire_recursive(lock);
}
pub inline fn __lock_try_acquire(lock: anytype) @TypeOf(__retarget_lock_try_acquire(lock)) {
    _ = &lock;
    return __retarget_lock_try_acquire(lock);
}
pub inline fn __lock_try_acquire_recursive(lock: anytype) @TypeOf(__retarget_lock_try_acquire_recursive(lock)) {
    _ = &lock;
    return __retarget_lock_try_acquire_recursive(lock);
}
pub inline fn __lock_release(lock: anytype) @TypeOf(__retarget_lock_release(lock)) {
    _ = &lock;
    return __retarget_lock_release(lock);
}
pub inline fn __lock_release_recursive(lock: anytype) @TypeOf(__retarget_lock_release_recursive(lock)) {
    _ = &lock;
    return __retarget_lock_release_recursive(lock);
}
pub const _ATEXIT_SIZE = @as(c_int, 32);
pub const _ATEXIT_INIT = @compileError("unable to translate C expr: unexpected token '{'");
// /usr/arm-none-eabi/include/sys/reent.h:106:10
pub const _REENT_SMALL_CHECK_INIT = @compileError("unable to translate C expr: unexpected token ''");
// /usr/arm-none-eabi/include/sys/reent.h:146:9
pub const _RAND48_SEED_0 = @as(c_int, 0x330e);
pub const _RAND48_SEED_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xabcd, .hex);
pub const _RAND48_SEED_2 = @as(c_int, 0x1234);
pub const _RAND48_MULT_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe66d, .hex);
pub const _RAND48_MULT_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xdeec, .hex);
pub const _RAND48_MULT_2 = @as(c_int, 0x0005);
pub const _RAND48_ADD = @as(c_int, 0x000b);
pub const _REENT_EMERGENCY_SIZE = @as(c_int, 25);
pub const _REENT_ASCTIME_SIZE = @as(c_int, 26);
pub const _REENT_SIGNAL_SIZE = @as(c_int, 24);
pub const _REENT_INIT_RESERVED_0 = "";
pub const _REENT_INIT_RESERVED_1 = "";
pub const _REENT_INIT_RESERVED_2 = "";
pub const _REENT_INIT_RESERVED_6_7 = "";
pub const _REENT_INIT_RESERVED_8 = "";
pub const _REENT_INIT = @compileError("unable to translate C expr: unexpected token '{'");
// /usr/arm-none-eabi/include/sys/reent.h:667:9
pub const _REENT_INIT_PTR_ZEROED = @compileError("unable to translate C expr: unexpected token '{'");
// /usr/arm-none-eabi/include/sys/reent.h:714:9
pub const _REENT_CHECK_RAND48 = @compileError("unable to translate C expr: unexpected token ''");
// /usr/arm-none-eabi/include/sys/reent.h:728:9
pub const _REENT_CHECK_MP = @compileError("unable to translate C expr: unexpected token ''");
// /usr/arm-none-eabi/include/sys/reent.h:729:9
pub const _REENT_CHECK_TM = @compileError("unable to translate C expr: unexpected token ''");
// /usr/arm-none-eabi/include/sys/reent.h:730:9
pub const _REENT_CHECK_ASCTIME_BUF = @compileError("unable to translate C expr: unexpected token ''");
// /usr/arm-none-eabi/include/sys/reent.h:731:9
pub const _REENT_CHECK_EMERGENCY = @compileError("unable to translate C expr: unexpected token ''");
// /usr/arm-none-eabi/include/sys/reent.h:732:9
pub const _REENT_CHECK_MISC = @compileError("unable to translate C expr: unexpected token ''");
// /usr/arm-none-eabi/include/sys/reent.h:733:9
pub const _REENT_CHECK_SIGNAL_BUF = @compileError("unable to translate C expr: unexpected token ''");
// /usr/arm-none-eabi/include/sys/reent.h:734:9
pub inline fn _REENT_SIGNGAM(ptr: anytype) @TypeOf(ptr.*._new._reent._gamma_signgam) {
    _ = &ptr;
    return ptr.*._new._reent._gamma_signgam;
}
pub inline fn _REENT_RAND_NEXT(ptr: anytype) @TypeOf(ptr.*._new._reent._rand_next) {
    _ = &ptr;
    return ptr.*._new._reent._rand_next;
}
pub inline fn _REENT_RAND48_SEED(ptr: anytype) @TypeOf(ptr.*._new._reent._r48._seed) {
    _ = &ptr;
    return ptr.*._new._reent._r48._seed;
}
pub inline fn _REENT_RAND48_MULT(ptr: anytype) @TypeOf(ptr.*._new._reent._r48._mult) {
    _ = &ptr;
    return ptr.*._new._reent._r48._mult;
}
pub inline fn _REENT_RAND48_ADD(ptr: anytype) @TypeOf(ptr.*._new._reent._r48._add) {
    _ = &ptr;
    return ptr.*._new._reent._r48._add;
}
pub inline fn _REENT_MP_RESULT(ptr: anytype) @TypeOf(ptr.*._result) {
    _ = &ptr;
    return ptr.*._result;
}
pub inline fn _REENT_MP_RESULT_K(ptr: anytype) @TypeOf(ptr.*._result_k) {
    _ = &ptr;
    return ptr.*._result_k;
}
pub inline fn _REENT_MP_P5S(ptr: anytype) @TypeOf(ptr.*._p5s) {
    _ = &ptr;
    return ptr.*._p5s;
}
pub inline fn _REENT_MP_FREELIST(ptr: anytype) @TypeOf(ptr.*._freelist) {
    _ = &ptr;
    return ptr.*._freelist;
}
pub inline fn _REENT_ASCTIME_BUF(ptr: anytype) @TypeOf(ptr.*._new._reent._asctime_buf) {
    _ = &ptr;
    return ptr.*._new._reent._asctime_buf;
}
pub inline fn _REENT_TM(ptr: anytype) @TypeOf(&ptr.*._new._reent._localtime_buf) {
    _ = &ptr;
    return &ptr.*._new._reent._localtime_buf;
}
pub inline fn _REENT_STRTOK_LAST(ptr: anytype) @TypeOf(ptr.*._new._reent._strtok_last) {
    _ = &ptr;
    return ptr.*._new._reent._strtok_last;
}
pub inline fn _REENT_MBLEN_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._mblen_state) {
    _ = &ptr;
    return ptr.*._new._reent._mblen_state;
}
pub inline fn _REENT_MBTOWC_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._mbtowc_state) {
    _ = &ptr;
    return ptr.*._new._reent._mbtowc_state;
}
pub inline fn _REENT_WCTOMB_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._wctomb_state) {
    _ = &ptr;
    return ptr.*._new._reent._wctomb_state;
}
pub inline fn _REENT_MBRLEN_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._mbrlen_state) {
    _ = &ptr;
    return ptr.*._new._reent._mbrlen_state;
}
pub inline fn _REENT_MBRTOWC_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._mbrtowc_state) {
    _ = &ptr;
    return ptr.*._new._reent._mbrtowc_state;
}
pub inline fn _REENT_MBSRTOWCS_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._mbsrtowcs_state) {
    _ = &ptr;
    return ptr.*._new._reent._mbsrtowcs_state;
}
pub inline fn _REENT_WCRTOMB_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._wcrtomb_state) {
    _ = &ptr;
    return ptr.*._new._reent._wcrtomb_state;
}
pub inline fn _REENT_WCSRTOMBS_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._wcsrtombs_state) {
    _ = &ptr;
    return ptr.*._new._reent._wcsrtombs_state;
}
pub inline fn _REENT_L64A_BUF(ptr: anytype) @TypeOf(ptr.*._new._reent._l64a_buf) {
    _ = &ptr;
    return ptr.*._new._reent._l64a_buf;
}
pub inline fn _REENT_SIGNAL_BUF(ptr: anytype) @TypeOf(ptr.*._new._reent._signal_buf) {
    _ = &ptr;
    return ptr.*._new._reent._signal_buf;
}
pub inline fn _REENT_GETDATE_ERR_P(ptr: anytype) @TypeOf(&ptr.*._new._reent._getdate_err) {
    _ = &ptr;
    return &ptr.*._new._reent._getdate_err;
}
pub inline fn _REENT_GETLOCALENAME_L_BUF(ptr: anytype) @TypeOf(ptr.*._new._reent._getlocalename_l_buf) {
    _ = &ptr;
    return ptr.*._new._reent._getlocalename_l_buf;
}
pub inline fn _REENT_CLEANUP(_ptr: anytype) @TypeOf(_ptr.*.__cleanup) {
    _ = &_ptr;
    return _ptr.*.__cleanup;
}
pub inline fn _REENT_CVTBUF(_ptr: anytype) @TypeOf(_ptr.*._cvtbuf) {
    _ = &_ptr;
    return _ptr.*._cvtbuf;
}
pub inline fn _REENT_CVTLEN(_ptr: anytype) @TypeOf(_ptr.*._cvtlen) {
    _ = &_ptr;
    return _ptr.*._cvtlen;
}
pub inline fn _REENT_EMERGENCY(_ptr: anytype) @TypeOf(_ptr.*._emergency) {
    _ = &_ptr;
    return _ptr.*._emergency;
}
pub inline fn _REENT_ERRNO(_ptr: anytype) @TypeOf(_ptr.*._errno) {
    _ = &_ptr;
    return _ptr.*._errno;
}
pub inline fn _REENT_INC(_ptr: anytype) @TypeOf(_ptr.*._inc) {
    _ = &_ptr;
    return _ptr.*._inc;
}
pub inline fn _REENT_LOCALE(_ptr: anytype) @TypeOf(_ptr.*._locale) {
    _ = &_ptr;
    return _ptr.*._locale;
}
pub inline fn _REENT_SIG_FUNC(_ptr: anytype) @TypeOf(_ptr.*._sig_func) {
    _ = &_ptr;
    return _ptr.*._sig_func;
}
pub inline fn _REENT_STDIN(_ptr: anytype) @TypeOf(_ptr.*._stdin) {
    _ = &_ptr;
    return _ptr.*._stdin;
}
pub inline fn _REENT_STDOUT(_ptr: anytype) @TypeOf(_ptr.*._stdout) {
    _ = &_ptr;
    return _ptr.*._stdout;
}
pub inline fn _REENT_STDERR(_ptr: anytype) @TypeOf(_ptr.*._stderr) {
    _ = &_ptr;
    return _ptr.*._stderr;
}
pub const _REENT_INIT_PTR = @compileError("unable to translate C expr: unexpected token '{'");
// /usr/arm-none-eabi/include/sys/reent.h:783:9
pub const __ATTRIBUTE_IMPURE_PTR__ = "";
pub const __ATTRIBUTE_IMPURE_DATA__ = "";
// /usr/arm-none-eabi/include/sys/reent.h:813:10: warning: macro '_REENT' contains a runtime value, translated to function
pub inline fn _REENT() @TypeOf(_impure_ptr) {
    return _impure_ptr;
}
pub inline fn _REENT_IS_NULL(_ptr: anytype) @TypeOf(_ptr == NULL) {
    _ = &_ptr;
    return _ptr == NULL;
}
// /usr/arm-none-eabi/include/sys/reent.h:818:9: warning: macro '_GLOBAL_REENT' contains a runtime value, translated to function
pub inline fn _GLOBAL_REENT() @TypeOf(&_impure_data) {
    return &_impure_data;
}
pub const _Kmax = @import("std").zig.c_translation.sizeof(usize) << @as(c_int, 3);
pub const __FILE_defined = "";
pub const _OFF_T_DECLARED = "";
pub const _SSIZE_T_DECLARED = "";
pub const _NEWLIB_STDIO_H = "";
pub inline fn _flockfile(fp: anytype) @TypeOf(if (fp.*._flags & __SSTR) @as(c_int, 0) else __lock_acquire_recursive(fp.*._lock)) {
    _ = &fp;
    return if (fp.*._flags & __SSTR) @as(c_int, 0) else __lock_acquire_recursive(fp.*._lock);
}
pub inline fn _funlockfile(fp: anytype) @TypeOf(if (fp.*._flags & __SSTR) @as(c_int, 0) else __lock_release_recursive(fp.*._lock)) {
    _ = &fp;
    return if (fp.*._flags & __SSTR) @as(c_int, 0) else __lock_release_recursive(fp.*._lock);
}
pub const __SLBF = @as(c_int, 0x0001);
pub const __SNBF = @as(c_int, 0x0002);
pub const __SRD = @as(c_int, 0x0004);
pub const __SWR = @as(c_int, 0x0008);
pub const __SRW = @as(c_int, 0x0010);
pub const __SEOF = @as(c_int, 0x0020);
pub const __SERR = @as(c_int, 0x0040);
pub const __SMBF = @as(c_int, 0x0080);
pub const __SAPP = @as(c_int, 0x0100);
pub const __SSTR = @as(c_int, 0x0200);
pub const __SOPT = @as(c_int, 0x0400);
pub const __SNPT = @as(c_int, 0x0800);
pub const __SOFF = @as(c_int, 0x1000);
pub const __SORD = @as(c_int, 0x2000);
pub const __SL64 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hex);
pub const __SNLK = @as(c_int, 0x0001);
pub const __SWID = @as(c_int, 0x2000);
pub const _IOFBF = @as(c_int, 0);
pub const _IOLBF = @as(c_int, 1);
pub const _IONBF = @as(c_int, 2);
pub const EOF = -@as(c_int, 1);
pub const BUFSIZ = @as(c_int, 1024);
pub const FOPEN_MAX = @as(c_int, 20);
pub const FILENAME_MAX = @as(c_int, 1024);
pub const L_tmpnam = FILENAME_MAX;
pub const P_tmpdir = "/tmp";
pub const SEEK_SET = @as(c_int, 0);
pub const SEEK_CUR = @as(c_int, 1);
pub const SEEK_END = @as(c_int, 2);
pub const TMP_MAX = @as(c_int, 26);
pub const stdin = _REENT_STDIN(_REENT);
pub const stdout = _REENT_STDOUT(_REENT);
pub const stderr = _REENT_STDERR(_REENT);
pub inline fn _stdin_r(x: anytype) @TypeOf(_REENT_STDIN(x)) {
    _ = &x;
    return _REENT_STDIN(x);
}
pub inline fn _stdout_r(x: anytype) @TypeOf(_REENT_STDOUT(x)) {
    _ = &x;
    return _REENT_STDOUT(x);
}
pub inline fn _stderr_r(x: anytype) @TypeOf(_REENT_STDERR(x)) {
    _ = &x;
    return _REENT_STDERR(x);
}
pub const __VALIST = __gnuc_va_list;
pub inline fn fropen(__cookie: anytype, __fn: anytype) @TypeOf(funopen(__cookie, __fn, NULL, NULL, NULL)) {
    _ = &__cookie;
    _ = &__fn;
    return funopen(__cookie, __fn, NULL, NULL, NULL);
}
pub inline fn fwopen(__cookie: anytype, __fn: anytype) @TypeOf(funopen(__cookie, NULL, __fn, NULL, NULL)) {
    _ = &__cookie;
    _ = &__fn;
    return funopen(__cookie, NULL, __fn, NULL, NULL);
}
pub const __sgetc_raw_r = @compileError("TODO unary inc/dec expr");
// /usr/arm-none-eabi/include/stdio.h:658:15
pub inline fn __sgetc_r(__ptr: anytype, __p: anytype) @TypeOf(__sgetc_raw_r(__ptr, __p)) {
    _ = &__ptr;
    _ = &__p;
    return __sgetc_raw_r(__ptr, __p);
}
pub inline fn __sfeof(p: anytype) c_int {
    _ = &p;
    return @import("std").zig.c_translation.cast(c_int, (p.*._flags & __SEOF) != @as(c_int, 0));
}
pub inline fn __sferror(p: anytype) c_int {
    _ = &p;
    return @import("std").zig.c_translation.cast(c_int, (p.*._flags & __SERR) != @as(c_int, 0));
}
pub const __sclearerr = @compileError("unable to translate C expr: expected ')' instead got '&='");
// /usr/arm-none-eabi/include/stdio.h:725:9
pub inline fn __sfileno(p: anytype) @TypeOf(p.*._file) {
    _ = &p;
    return p.*._file;
}
pub const fast_putc = @compileError("TODO unary inc/dec expr");
// /usr/arm-none-eabi/include/stdio.h:778:9
pub const L_ctermid = @as(c_int, 16);
pub const _SSP_STDIO_H_ = "";
pub const _SSP_SSP_H_ = "";
pub const __ssp_real_ = @compileError("unable to translate C expr: unexpected token '##'");
// /usr/arm-none-eabi/include/ssp/ssp.h:40:9
pub inline fn __ssp_real(fun: anytype) @TypeOf(__ssp_real_(fun)) {
    _ = &fun;
    return __ssp_real_(fun);
}
pub const __ssp_inline = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/arm-none-eabi/include/ssp/ssp.h:44:9
pub inline fn __ssp_bos(ptr: anytype) @TypeOf(__builtin_object_size(ptr, __SSP_FORTIFY_LEVEL > @as(c_int, 1))) {
    _ = &ptr;
    return __builtin_object_size(ptr, __SSP_FORTIFY_LEVEL > @as(c_int, 1));
}
pub inline fn __ssp_bos0(ptr: anytype) @TypeOf(__builtin_object_size(ptr, @as(c_int, 0))) {
    _ = &ptr;
    return __builtin_object_size(ptr, @as(c_int, 0));
}
pub inline fn __ssp_bos_known(ptr: anytype) @TypeOf(__ssp_bos0(ptr) != @import("std").zig.c_translation.cast(usize, -@as(c_int, 1))) {
    _ = &ptr;
    return __ssp_bos0(ptr) != @import("std").zig.c_translation.cast(usize, -@as(c_int, 1));
}
pub const __ssp_check = @compileError("unable to translate C expr: unexpected token 'if'");
// /usr/arm-none-eabi/include/ssp/ssp.h:58:9
pub const __ssp_decl = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/arm-none-eabi/include/ssp/ssp.h:61:9
pub const __ssp_redirect_raw = @compileError("unable to translate macro: undefined identifier `__buf`");
// /usr/arm-none-eabi/include/ssp/ssp.h:64:9
pub inline fn __ssp_redirect(rtype: anytype, fun: anytype, args: anytype, call: anytype) @TypeOf(__ssp_redirect_raw(rtype, fun, args, call, @as(c_int, 1), __ssp_bos)) {
    _ = &rtype;
    _ = &fun;
    _ = &args;
    _ = &call;
    return __ssp_redirect_raw(rtype, fun, args, call, @as(c_int, 1), __ssp_bos);
}
pub inline fn __ssp_redirect0(rtype: anytype, fun: anytype, args: anytype, call: anytype) @TypeOf(__ssp_redirect_raw(rtype, fun, args, call, @as(c_int, 1), __ssp_bos0)) {
    _ = &rtype;
    _ = &fun;
    _ = &args;
    _ = &call;
    return __ssp_redirect_raw(rtype, fun, args, call, @as(c_int, 1), __ssp_bos0);
}
pub inline fn __ssp_overlap(a: anytype, b: anytype, l: anytype) @TypeOf(((a <= b) and (b < (a + l))) or ((b <= a) and (a < (b + l)))) {
    _ = &a;
    _ = &b;
    _ = &l;
    return ((a <= b) and (b < (a + l))) or ((b <= a) and (a < (b + l)));
}
pub const CYW43_PRINTF = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /home/ianic/Code/pico/pico-sdk/lib/cyw43-driver/src/cyw43_config.h:155:9
pub const CYW43_VDEBUG = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /home/ianic/Code/pico/pico-sdk/lib/cyw43-driver/src/cyw43_config.h:159:9
pub const CYW43_VERBOSE_DEBUG = @as(c_int, 0);
pub const CYW43_DEBUG = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /home/ianic/Code/pico/pico-sdk/lib/cyw43-driver/src/cyw43_config.h:167:9
pub const CYW43_INFO = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /home/ianic/Code/pico/pico-sdk/lib/cyw43-driver/src/cyw43_config.h:172:9
pub const CYW43_WARN = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /home/ianic/Code/pico/pico-sdk/lib/cyw43-driver/src/cyw43_config.h:176:9
pub inline fn CYW43_FAIL_FAST_CHECK(res: anytype) @TypeOf(res) {
    _ = &res;
    return res;
}
pub const CYW43_EVENT_POLL_HOOK = "";
pub const CYW43_DEFAULT_IP_STA_ADDRESS = LWIP_MAKEU32(@as(c_int, 0), @as(c_int, 0), @as(c_int, 0), @as(c_int, 0));
pub const CYW43_DEFAULT_IP_AP_ADDRESS = LWIP_MAKEU32(@as(c_int, 192), @as(c_int, 168), @as(c_int, 4), @as(c_int, 1));
pub const CYW43_DEFAULT_IP_MASK = LWIP_MAKEU32(@as(c_int, 255), @as(c_int, 255), @as(c_int, 255), @as(c_int, 0));
pub const CYW43_DEFAULT_IP_STA_GATEWAY = LWIP_MAKEU32(@as(c_int, 192), @as(c_int, 168), @as(c_int, 0), @as(c_int, 1));
pub const CYW43_DEFAULT_IP_AP_GATEWAY = LWIP_MAKEU32(@as(c_int, 192), @as(c_int, 168), @as(c_int, 4), @as(c_int, 1));
pub const CYW43_DEFAULT_IP_DNS = LWIP_MAKEU32(@as(c_int, 8), @as(c_int, 8), @as(c_int, 8), @as(c_int, 8));
pub const CYW43_CB_TCPIP_INIT_EXTRA = @compileError("unable to translate C expr: unexpected token 'do'");
// /home/ianic/Code/pico/pico-sdk/lib/cyw43-driver/src/cyw43_config.h:216:9
pub const CYW43_CB_TCPIP_DEINIT_EXTRA = @compileError("unable to translate C expr: unexpected token 'do'");
// /home/ianic/Code/pico/pico-sdk/lib/cyw43-driver/src/cyw43_config.h:222:9
pub const LWIP_HDR_NETIF_H = "";
pub const LWIP_HDR_OPT_H = "";
pub const __LWIPOPTS_H__ = "";
pub const NO_SYS = @as(c_int, 1);
pub const LWIP_SOCKET = @as(c_int, 0);
pub const MEM_LIBC_MALLOC = @as(c_int, 0);
pub const MEM_ALIGNMENT = @as(c_int, 4);
pub const MEM_SIZE = @as(c_int, 4000);
pub const MEMP_NUM_TCP_SEG = @as(c_int, 32);
pub const MEMP_NUM_ARP_QUEUE = @as(c_int, 10);
pub const PBUF_POOL_SIZE = @as(c_int, 24);
pub const LWIP_ARP = @as(c_int, 1);
pub const LWIP_ETHERNET = @as(c_int, 1);
pub const LWIP_ICMP = @as(c_int, 1);
pub const LWIP_RAW = @as(c_int, 1);
pub const TCP_WND = @as(c_int, 8) * TCP_MSS;
pub const TCP_MSS = @as(c_int, 1460);
pub const TCP_SND_BUF = @as(c_int, 8) * TCP_MSS;
pub const TCP_SND_QUEUELEN = @import("std").zig.c_translation.MacroArithmetic.div((@as(c_int, 4) * TCP_SND_BUF) + (TCP_MSS - @as(c_int, 1)), TCP_MSS);
pub const LWIP_NETIF_STATUS_CALLBACK = @as(c_int, 1);
pub const LWIP_NETIF_LINK_CALLBACK = @as(c_int, 1);
pub const LWIP_NETIF_HOSTNAME = @as(c_int, 1);
pub const LWIP_NETCONN = @as(c_int, 0);
pub const MEM_STATS = @as(c_int, 0);
pub const SYS_STATS = @as(c_int, 0);
pub const MEMP_STATS = @as(c_int, 0);
pub const LINK_STATS = @as(c_int, 0);
pub const LWIP_CHKSUM_ALGORITHM = @as(c_int, 3);
pub const LWIP_DHCP = @as(c_int, 1);
pub const LWIP_IPV4 = @as(c_int, 1);
pub const LWIP_TCP = @as(c_int, 1);
pub const LWIP_UDP = @as(c_int, 1);
pub const LWIP_DNS = @as(c_int, 1);
pub const LWIP_TCP_KEEPALIVE = @as(c_int, 1);
pub const LWIP_NETIF_TX_SINGLE_PBUF = @as(c_int, 1);
pub const DHCP_DOES_ARP_CHECK = @as(c_int, 0);
pub const LWIP_DHCP_DOES_ACD_CHECK = @as(c_int, 0);
pub const LWIP_DEBUG = @as(c_int, 1);
pub const LWIP_STATS = @as(c_int, 1);
pub const LWIP_STATS_DISPLAY = @as(c_int, 1);
pub const ETHARP_DEBUG = LWIP_DBG_OFF;
pub const NETIF_DEBUG = LWIP_DBG_OFF;
pub const PBUF_DEBUG = LWIP_DBG_OFF;
pub const API_LIB_DEBUG = LWIP_DBG_OFF;
pub const API_MSG_DEBUG = LWIP_DBG_OFF;
pub const SOCKETS_DEBUG = LWIP_DBG_OFF;
pub const ICMP_DEBUG = LWIP_DBG_OFF;
pub const INET_DEBUG = LWIP_DBG_OFF;
pub const IP_DEBUG = LWIP_DBG_OFF;
pub const IP_REASS_DEBUG = LWIP_DBG_OFF;
pub const RAW_DEBUG = LWIP_DBG_OFF;
pub const MEM_DEBUG = LWIP_DBG_OFF;
pub const MEMP_DEBUG = LWIP_DBG_OFF;
pub const SYS_DEBUG = LWIP_DBG_OFF;
pub const TCP_DEBUG = LWIP_DBG_OFF;
pub const TCP_INPUT_DEBUG = LWIP_DBG_OFF;
pub const TCP_OUTPUT_DEBUG = LWIP_DBG_OFF;
pub const TCP_RTO_DEBUG = LWIP_DBG_OFF;
pub const TCP_CWND_DEBUG = LWIP_DBG_OFF;
pub const TCP_WND_DEBUG = LWIP_DBG_OFF;
pub const TCP_FR_DEBUG = LWIP_DBG_OFF;
pub const TCP_QLEN_DEBUG = LWIP_DBG_OFF;
pub const TCP_RST_DEBUG = LWIP_DBG_OFF;
pub const UDP_DEBUG = LWIP_DBG_OFF;
pub const TCPIP_DEBUG = LWIP_DBG_OFF;
pub const PPP_DEBUG = LWIP_DBG_OFF;
pub const SLIP_DEBUG = LWIP_DBG_OFF;
pub const DHCP_DEBUG = LWIP_DBG_OFF;
pub const LWIP_HDR_DEBUG_H = "";
pub const LWIP_HDR_ARCH_H = "";
pub const LITTLE_ENDIAN = @as(c_int, 1234);
pub const BIG_ENDIAN = @as(c_int, 4321);
pub const __CC_H__ = "";
pub const _SYS_TIME_H_ = "";
pub const _SYS__TIMEVAL_H_ = "";
pub const _SUSECONDS_T_DECLARED = "";
pub const __time_t_defined = "";
pub const _TIME_T_DECLARED = "";
pub const _TIMEVAL_DEFINED = "";
pub const __BIT_TYPES_DEFINED__ = @as(c_int, 1);
pub const _SYS_TYPES_H = "";
pub const _SYS__STDINT_H = "";
pub const _INT8_T_DECLARED = "";
pub const _UINT8_T_DECLARED = "";
pub const _INT16_T_DECLARED = "";
pub const _UINT16_T_DECLARED = "";
pub const __int16_t_defined = @as(c_int, 1);
pub const _INT32_T_DECLARED = "";
pub const _UINT32_T_DECLARED = "";
pub const __int32_t_defined = @as(c_int, 1);
pub const _INT64_T_DECLARED = "";
pub const _UINT64_T_DECLARED = "";
pub const __int64_t_defined = @as(c_int, 1);
pub const _INTMAX_T_DECLARED = "";
pub const _UINTMAX_T_DECLARED = "";
pub const _INTPTR_T_DECLARED = "";
pub const _UINTPTR_T_DECLARED = "";
pub const __MACHINE_ENDIAN_H__ = "";
pub const _LITTLE_ENDIAN = @as(c_int, 1234);
pub const _BIG_ENDIAN = @as(c_int, 4321);
pub const _PDP_ENDIAN = @as(c_int, 3412);
pub const _BYTE_ORDER = _LITTLE_ENDIAN;
pub const _QUAD_HIGHWORD = @as(c_int, 1);
pub const _QUAD_LOWWORD = @as(c_int, 0);
pub const PDP_ENDIAN = _PDP_ENDIAN;
pub const BYTE_ORDER = _BYTE_ORDER;
pub inline fn __bswap16(_x: anytype) @TypeOf(__builtin_bswap16(_x)) {
    _ = &_x;
    return __builtin_bswap16(_x);
}
pub inline fn __bswap32(_x: anytype) @TypeOf(__builtin_bswap32(_x)) {
    _ = &_x;
    return __builtin_bswap32(_x);
}
pub inline fn __bswap64(_x: anytype) @TypeOf(__builtin_bswap64(_x)) {
    _ = &_x;
    return __builtin_bswap64(_x);
}
pub inline fn __htonl(_x: anytype) @TypeOf(__bswap32(_x)) {
    _ = &_x;
    return __bswap32(_x);
}
pub inline fn __htons(_x: anytype) @TypeOf(__bswap16(_x)) {
    _ = &_x;
    return __bswap16(_x);
}
pub inline fn __ntohl(_x: anytype) @TypeOf(__bswap32(_x)) {
    _ = &_x;
    return __bswap32(_x);
}
pub inline fn __ntohs(_x: anytype) @TypeOf(__bswap16(_x)) {
    _ = &_x;
    return __bswap16(_x);
}
pub const _SYS_SELECT_H = "";
pub const _SYS__SIGSET_H_ = "";
pub const _SYS_TIMESPEC_H_ = "";
pub const _SYS__TIMESPEC_H_ = "";
pub const TIMEVAL_TO_TIMESPEC = @compileError("unable to translate C expr: unexpected token 'do'");
// /usr/arm-none-eabi/include/sys/timespec.h:41:9
pub const TIMESPEC_TO_TIMEVAL = @compileError("unable to translate C expr: unexpected token 'do'");
// /usr/arm-none-eabi/include/sys/timespec.h:46:9
pub const _SIGSET_T_DECLARED = "";
pub const _SYS_TYPES_FD_SET = "";
pub const FD_SETSIZE = @as(c_int, 64);
pub const _NFDBITS = @import("std").zig.c_translation.cast(c_int, @import("std").zig.c_translation.sizeof(__fd_mask)) * @as(c_int, 8);
pub const NFDBITS = _NFDBITS;
pub inline fn _howmany(x: anytype, y: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.div(x + (y - @as(c_int, 1)), y)) {
    _ = &x;
    _ = &y;
    return @import("std").zig.c_translation.MacroArithmetic.div(x + (y - @as(c_int, 1)), y);
}
pub const fds_bits = @compileError("unable to translate macro: undefined identifier `__fds_bits`");
// /usr/arm-none-eabi/include/sys/select.h:58:9
pub inline fn __fdset_mask(n: anytype) @TypeOf(@import("std").zig.c_translation.cast(__fd_mask, @as(c_int, 1)) << @import("std").zig.c_translation.MacroArithmetic.rem(n, _NFDBITS)) {
    _ = &n;
    return @import("std").zig.c_translation.cast(__fd_mask, @as(c_int, 1)) << @import("std").zig.c_translation.MacroArithmetic.rem(n, _NFDBITS);
}
pub const FD_CLR = @compileError("unable to translate C expr: expected ')' instead got '&='");
// /usr/arm-none-eabi/include/sys/select.h:62:9
pub const FD_COPY = @compileError("unable to translate C expr: expected ')' instead got '='");
// /usr/arm-none-eabi/include/sys/select.h:64:9
pub inline fn FD_ISSET(n: anytype, p: anytype) @TypeOf((p.*.__fds_bits[@as(usize, @intCast(@import("std").zig.c_translation.MacroArithmetic.div(n, _NFDBITS)))] & __fdset_mask(n)) != @as(c_int, 0)) {
    _ = &n;
    _ = &p;
    return (p.*.__fds_bits[@as(usize, @intCast(@import("std").zig.c_translation.MacroArithmetic.div(n, _NFDBITS)))] & __fdset_mask(n)) != @as(c_int, 0);
}
pub const FD_SET = @compileError("unable to translate C expr: expected ')' instead got '|='");
// /usr/arm-none-eabi/include/sys/select.h:67:9
pub const FD_ZERO = @compileError("unable to translate macro: undefined identifier `_p`");
// /usr/arm-none-eabi/include/sys/select.h:68:9
pub const physadr = @compileError("unable to translate macro: undefined identifier `physadr_t`");
// /usr/arm-none-eabi/include/sys/types.h:51:11
pub const quad = @compileError("unable to translate macro: undefined identifier `quad_t`");
// /usr/arm-none-eabi/include/sys/types.h:52:11
pub const _IN_ADDR_T_DECLARED = "";
pub const _IN_PORT_T_DECLARED = "";
pub const __u_char_defined = "";
pub const __u_short_defined = "";
pub const __u_int_defined = "";
pub const __u_long_defined = "";
pub const _BSDTYPES_DEFINED = "";
pub const _BLKCNT_T_DECLARED = "";
pub const _BLKSIZE_T_DECLARED = "";
pub const __clock_t_defined = "";
pub const _CLOCK_T_DECLARED = "";
pub const __caddr_t_defined = "";
pub const _FSBLKCNT_T_DECLARED = "";
pub const _ID_T_DECLARED = "";
pub const _INO_T_DECLARED = "";
pub const _DEV_T_DECLARED = "";
pub const _UID_T_DECLARED = "";
pub const _GID_T_DECLARED = "";
pub const _PID_T_DECLARED = "";
pub const _KEY_T_DECLARED = "";
pub const _MODE_T_DECLARED = "";
pub const _NLINK_T_DECLARED = "";
pub const __clockid_t_defined = "";
pub const _CLOCKID_T_DECLARED = "";
pub const __timer_t_defined = "";
pub const _TIMER_T_DECLARED = "";
pub const _USECONDS_T_DECLARED = "";
pub const _SYS__PTHREADTYPES_H_ = "";
pub const _SYS_SCHED_H_ = "";
pub const SCHED_OTHER = @as(c_int, 0);
pub const SCHED_FIFO = @as(c_int, 1);
pub const SCHED_RR = @as(c_int, 2);
pub const PTHREAD_SCOPE_PROCESS = @as(c_int, 0);
pub const PTHREAD_SCOPE_SYSTEM = @as(c_int, 1);
pub const PTHREAD_INHERIT_SCHED = @as(c_int, 1);
pub const PTHREAD_EXPLICIT_SCHED = @as(c_int, 2);
pub const PTHREAD_CREATE_DETACHED = @as(c_int, 0);
pub const PTHREAD_CREATE_JOINABLE = @as(c_int, 1);
pub const _PTHREAD_MUTEX_INITIALIZER = @import("std").zig.c_translation.cast(pthread_mutex_t, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hex));
pub const _PTHREAD_COND_INITIALIZER = @import("std").zig.c_translation.cast(pthread_cond_t, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hex));
pub const _PTHREAD_ONCE_INIT = @compileError("unable to translate C expr: unexpected token '{'");
// /usr/arm-none-eabi/include/sys/_pthreadtypes.h:197:9
pub const DST_NONE = @as(c_int, 0);
pub const DST_USA = @as(c_int, 1);
pub const DST_AUST = @as(c_int, 2);
pub const DST_WET = @as(c_int, 3);
pub const DST_MET = @as(c_int, 4);
pub const DST_EET = @as(c_int, 5);
pub const DST_CAN = @as(c_int, 6);
pub const bintime_clear = @compileError("unable to translate C expr: expected ')' instead got '='");
// /usr/arm-none-eabi/include/sys/time.h:132:9
pub inline fn bintime_isset(a: anytype) @TypeOf((a.*.sec != 0) or (a.*.frac != 0)) {
    _ = &a;
    return (a.*.sec != 0) or (a.*.frac != 0);
}
pub inline fn bintime_cmp(a: anytype, b: anytype, cmp: anytype) @TypeOf(if (a.*.sec == b.*.sec) a.*.frac ++ cmp(b).*.frac else a.*.sec ++ cmp(b).*.sec) {
    _ = &a;
    _ = &b;
    _ = &cmp;
    return if (a.*.sec == b.*.sec) a.*.frac ++ cmp(b).*.frac else a.*.sec ++ cmp(b).*.sec;
}
pub const SBT_1S = @import("std").zig.c_translation.cast(sbintime_t, @as(c_int, 1)) << @as(c_int, 32);
pub const SBT_1M = SBT_1S * @as(c_int, 60);
pub const SBT_1MS = @import("std").zig.c_translation.MacroArithmetic.div(SBT_1S, @as(c_int, 1000));
pub const SBT_1US = @import("std").zig.c_translation.MacroArithmetic.div(SBT_1S, @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000, .decimal));
pub const SBT_1NS = @import("std").zig.c_translation.MacroArithmetic.div(SBT_1S, @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000000, .decimal));
pub const SBT_MAX = @as(c_longlong, 0x7fffffffffffffff);
pub const timespecclear = @compileError("unable to translate C expr: expected ')' instead got '='");
// /usr/arm-none-eabi/include/sys/time.h:345:9
pub inline fn timespecisset(tvp: anytype) @TypeOf((tvp.*.tv_sec != 0) or (tvp.*.tv_nsec != 0)) {
    _ = &tvp;
    return (tvp.*.tv_sec != 0) or (tvp.*.tv_nsec != 0);
}
pub inline fn timespeccmp(tvp: anytype, uvp: anytype, cmp: anytype) @TypeOf(if (tvp.*.tv_sec == uvp.*.tv_sec) tvp.*.tv_nsec ++ cmp(uvp).*.tv_nsec else tvp.*.tv_sec ++ cmp(uvp).*.tv_sec) {
    _ = &tvp;
    _ = &uvp;
    _ = &cmp;
    return if (tvp.*.tv_sec == uvp.*.tv_sec) tvp.*.tv_nsec ++ cmp(uvp).*.tv_nsec else tvp.*.tv_sec ++ cmp(uvp).*.tv_sec;
}
pub const timespecadd = @compileError("unable to translate C expr: unexpected token 'do'");
// /usr/arm-none-eabi/include/sys/time.h:352:9
pub const timespecsub = @compileError("unable to translate C expr: unexpected token 'do'");
// /usr/arm-none-eabi/include/sys/time.h:361:9
pub const timerclear = @compileError("unable to translate C expr: expected ')' instead got '='");
// /usr/arm-none-eabi/include/sys/time.h:373:9
pub inline fn timerisset(tvp: anytype) @TypeOf((tvp.*.tv_sec != 0) or (tvp.*.tv_usec != 0)) {
    _ = &tvp;
    return (tvp.*.tv_sec != 0) or (tvp.*.tv_usec != 0);
}
pub inline fn timercmp(tvp: anytype, uvp: anytype, cmp: anytype) @TypeOf(if (tvp.*.tv_sec == uvp.*.tv_sec) tvp.*.tv_usec ++ cmp(uvp).*.tv_usec else tvp.*.tv_sec ++ cmp(uvp).*.tv_sec) {
    _ = &tvp;
    _ = &uvp;
    _ = &cmp;
    return if (tvp.*.tv_sec == uvp.*.tv_sec) tvp.*.tv_usec ++ cmp(uvp).*.tv_usec else tvp.*.tv_sec ++ cmp(uvp).*.tv_sec;
}
pub const timeradd = @compileError("unable to translate C expr: unexpected token 'do'");
// /usr/arm-none-eabi/include/sys/time.h:379:9
pub const timersub = @compileError("unable to translate C expr: unexpected token 'do'");
// /usr/arm-none-eabi/include/sys/time.h:388:9
pub const ITIMER_REAL = @as(c_int, 0);
pub const ITIMER_VIRTUAL = @as(c_int, 1);
pub const ITIMER_PROF = @as(c_int, 2);
pub const _TIME_H_ = "";
pub const _MACHTIME_H_ = "";
pub const _CLOCKS_PER_SEC_ = @as(c_int, 100);
pub const CLOCKS_PER_SEC = _CLOCKS_PER_SEC_;
pub const CLK_TCK = CLOCKS_PER_SEC;
pub const _SYS__LOCALE_H = "";
// /usr/arm-none-eabi/include/time.h:142:9: warning: macro 'tzname' contains a runtime value, translated to function
pub inline fn tzname() @TypeOf(_tzname) {
    return _tzname;
}
pub const CLOCK_ENABLED = @as(c_int, 1);
pub const CLOCK_DISABLED = @as(c_int, 0);
pub const CLOCK_ALLOWED = @as(c_int, 1);
pub const CLOCK_DISALLOWED = @as(c_int, 0);
pub const TIMER_ABSTIME = @as(c_int, 4);
pub const CLOCK_REALTIME = @as(c_int, 1);
pub const PICO_LWIP_CUSTOM_LOCK_TCPIP_CORE = @as(c_int, 1);
pub const PACK_STRUCT_BEGIN = "";
pub const PACK_STRUCT_STRUCT = @compileError("unable to translate macro: undefined identifier `__packed__`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_lwip/include/arch/cc.h:74:9
pub const PACK_STRUCT_END = "";
pub inline fn PACK_STRUCT_FIELD(x: anytype) @TypeOf(x) {
    _ = &x;
    return x;
}
pub inline fn LWIP_PLATFORM_ASSERT(x: anytype) @TypeOf(panic(x)) {
    _ = &x;
    return panic(x);
}
pub const _PICO_RAND_H = "";
pub const PICO_RAND_ENTROPY_SRC_TRNG = @as(c_int, 1);
pub const PICO_RAND_ENTROPY_SRC_TIME = @as(c_int, 1);
pub const PICO_RAND_SEED_ENTROPY_SRC_ROSC = @compileError("unable to translate macro: undefined identifier `PICO_RAND_ENTROPY_SRC_ROSC`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_rand/include/pico/rand.h:98:9
pub const PICO_RAND_SEED_ENTROPY_SRC_TRNG = PICO_RAND_ENTROPY_SRC_TRNG;
pub const PICO_RAND_SEED_ENTROPY_SRC_TIME = PICO_RAND_ENTROPY_SRC_TIME;
pub const PICO_RAND_SEED_ENTROPY_SRC_BUS_PERF_COUNTER = @compileError("unable to translate macro: undefined identifier `PICO_RAND_ENTROPY_SRC_BUS_PERF_COUNTER`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_rand/include/pico/rand.h:113:9
pub const PICO_RAND_SEED_ENTROPY_SRC_BOOT_RANDOM = @as(c_int, 1);
pub const PICO_RAND_SEED_ENTROPY_SRC_BOARD_ID = !(PICO_RAND_SEED_ENTROPY_SRC_BOOT_RANDOM != 0);
pub const PICO_RAND_ROSC_BIT_SAMPLE_COUNT = @as(c_int, 1);
pub const PICO_RAND_MIN_ROSC_BIT_SAMPLE_TIME_US = @as(c_uint, 10);
pub const PICO_RAND_BUS_PERF_COUNTER_EVENT = @compileError("unable to translate macro: undefined identifier `arbiter_sram5_perf_event_access`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/pico_rand/include/pico/rand.h:162:9
pub const PICO_RAND_RAM_HASH_END = SRAM_END;
pub const PICO_RAND_RAM_HASH_START = PICO_RAND_RAM_HASH_END - @as(c_uint, 1024);
pub inline fn LWIP_RAND() @TypeOf(get_rand_32()) {
    return get_rand_32();
}
pub const LWIP_PLATFORM_DIAG = @compileError("unable to translate C expr: unexpected token 'do'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/arch.h:81:9
pub const _STDLIB_H_ = "";
pub const _MACHSTDLIB_H_ = "";
pub const _NEWLIB_ALLOCA_H = "";
pub const alloca = @compileError("unable to translate macro: undefined identifier `__builtin_alloca`");
// /usr/arm-none-eabi/include/alloca.h:16:9
pub const __compar_fn_t_defined = "";
pub const EXIT_FAILURE = @as(c_int, 1);
pub const EXIT_SUCCESS = @as(c_int, 0);
pub const RAND_MAX = __RAND_MAX;
pub const MB_CUR_MAX = __locale_mb_cur_max();
pub const strtodf = strtof;
pub const _SSP_STDLIB_H_ = "";
pub const LWIP_NO_STDDEF_H = @as(c_int, 0);
pub const LWIP_NO_STDINT_H = @as(c_int, 0);
pub const LWIP_HAVE_INT64 = @as(c_int, 1);
pub const LWIP_NO_INTTYPES_H = @as(c_int, 0);
pub const __CLANG_INTTYPES_H = "";
pub const _INTTYPES_H = "";
pub const _SYS__INTSUP_H = "";
pub const __STDINT_EXP = @compileError("unable to translate macro: undefined identifier `__`");
// /usr/arm-none-eabi/include/sys/_intsup.h:16:9
pub const signed = @as(c_int, 0);
pub const char = @as(c_int, 0);
pub const short = @as(c_int, 1);
pub const __int20 = @as(c_int, 2);
pub const __int20__ = @as(c_int, 2);
pub const int = @as(c_int, 2);
pub const long = @as(c_int, 4);
pub const _INTPTR_EQ_INT = "";
pub const __INT8 = "hh";
pub const __INT16 = "h";
pub const __INT32 = "";
pub const __INT64 = "ll";
pub const __FAST8 = "hh";
pub const __FAST16 = "h";
pub const __FAST32 = "";
pub const __FAST64 = "ll";
pub const __LEAST8 = "hh";
pub const __LEAST16 = "h";
pub const __LEAST32 = "";
pub const __LEAST64 = "ll";
pub const __STRINGIFY = @compileError("unable to translate C expr: unexpected token '#'");
// /usr/arm-none-eabi/include/inttypes.h:28:9
pub inline fn __PRI8(x: anytype) @TypeOf(__INT8 ++ __STRINGIFY(x)) {
    _ = &x;
    return __INT8 ++ __STRINGIFY(x);
}
pub inline fn __PRI8LEAST(x: anytype) @TypeOf(__LEAST8 ++ __STRINGIFY(x)) {
    _ = &x;
    return __LEAST8 ++ __STRINGIFY(x);
}
pub inline fn __PRI8FAST(x: anytype) @TypeOf(__FAST8 ++ __STRINGIFY(x)) {
    _ = &x;
    return __FAST8 ++ __STRINGIFY(x);
}
pub inline fn __SCN8(x: anytype) @TypeOf(__INT8 ++ __STRINGIFY(x)) {
    _ = &x;
    return __INT8 ++ __STRINGIFY(x);
}
pub inline fn __SCN8LEAST(x: anytype) @TypeOf(__LEAST8 ++ __STRINGIFY(x)) {
    _ = &x;
    return __LEAST8 ++ __STRINGIFY(x);
}
pub inline fn __SCN8FAST(x: anytype) @TypeOf(__FAST8 ++ __STRINGIFY(x)) {
    _ = &x;
    return __FAST8 ++ __STRINGIFY(x);
}
pub const PRId8 = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:52:9
pub const PRIi8 = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:53:9
pub const PRIo8 = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:54:9
pub const PRIu8 = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:55:9
pub const PRIx8 = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:56:9
pub const PRIX8 = @compileError("unable to translate macro: undefined identifier `X`");
// /usr/arm-none-eabi/include/inttypes.h:57:9
pub const SCNd8 = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:62:9
pub const SCNi8 = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:63:9
pub const SCNo8 = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:64:9
pub const SCNu8 = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:65:9
pub const SCNx8 = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:66:9
pub const PRIdLEAST8 = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:71:9
pub const PRIiLEAST8 = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:72:9
pub const PRIoLEAST8 = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:73:9
pub const PRIuLEAST8 = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:74:9
pub const PRIxLEAST8 = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:75:9
pub const PRIXLEAST8 = @compileError("unable to translate macro: undefined identifier `X`");
// /usr/arm-none-eabi/include/inttypes.h:76:9
pub const SCNdLEAST8 = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:81:11
pub const SCNiLEAST8 = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:82:11
pub const SCNoLEAST8 = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:83:11
pub const SCNuLEAST8 = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:84:11
pub const SCNxLEAST8 = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:85:11
pub const PRIdFAST8 = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:89:9
pub const PRIiFAST8 = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:90:9
pub const PRIoFAST8 = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:91:9
pub const PRIuFAST8 = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:92:9
pub const PRIxFAST8 = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:93:9
pub const PRIXFAST8 = @compileError("unable to translate macro: undefined identifier `X`");
// /usr/arm-none-eabi/include/inttypes.h:94:9
pub const SCNdFAST8 = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:99:11
pub const SCNiFAST8 = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:100:11
pub const SCNoFAST8 = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:101:11
pub const SCNuFAST8 = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:102:11
pub const SCNxFAST8 = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:103:11
pub inline fn __PRI16(x: anytype) @TypeOf(__INT16 ++ __STRINGIFY(x)) {
    _ = &x;
    return __INT16 ++ __STRINGIFY(x);
}
pub inline fn __PRI16LEAST(x: anytype) @TypeOf(__LEAST16 ++ __STRINGIFY(x)) {
    _ = &x;
    return __LEAST16 ++ __STRINGIFY(x);
}
pub inline fn __PRI16FAST(x: anytype) @TypeOf(__FAST16 ++ __STRINGIFY(x)) {
    _ = &x;
    return __FAST16 ++ __STRINGIFY(x);
}
pub inline fn __SCN16(x: anytype) @TypeOf(__INT16 ++ __STRINGIFY(x)) {
    _ = &x;
    return __INT16 ++ __STRINGIFY(x);
}
pub inline fn __SCN16LEAST(x: anytype) @TypeOf(__LEAST16 ++ __STRINGIFY(x)) {
    _ = &x;
    return __LEAST16 ++ __STRINGIFY(x);
}
pub inline fn __SCN16FAST(x: anytype) @TypeOf(__FAST16 ++ __STRINGIFY(x)) {
    _ = &x;
    return __FAST16 ++ __STRINGIFY(x);
}
pub const PRId16 = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:116:9
pub const PRIi16 = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:117:9
pub const PRIo16 = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:118:9
pub const PRIu16 = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:119:9
pub const PRIx16 = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:120:9
pub const PRIX16 = @compileError("unable to translate macro: undefined identifier `X`");
// /usr/arm-none-eabi/include/inttypes.h:121:9
pub const SCNd16 = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:123:9
pub const SCNi16 = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:124:9
pub const SCNo16 = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:125:9
pub const SCNu16 = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:126:9
pub const SCNx16 = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:127:9
pub const PRIdLEAST16 = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:130:9
pub const PRIiLEAST16 = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:131:9
pub const PRIoLEAST16 = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:132:9
pub const PRIuLEAST16 = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:133:9
pub const PRIxLEAST16 = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:134:9
pub const PRIXLEAST16 = @compileError("unable to translate macro: undefined identifier `X`");
// /usr/arm-none-eabi/include/inttypes.h:135:9
pub const SCNdLEAST16 = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:137:9
pub const SCNiLEAST16 = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:138:9
pub const SCNoLEAST16 = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:139:9
pub const SCNuLEAST16 = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:140:9
pub const SCNxLEAST16 = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:141:9
pub const PRIdFAST16 = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:144:9
pub const PRIiFAST16 = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:145:9
pub const PRIoFAST16 = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:146:9
pub const PRIuFAST16 = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:147:9
pub const PRIxFAST16 = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:148:9
pub const PRIXFAST16 = @compileError("unable to translate macro: undefined identifier `X`");
// /usr/arm-none-eabi/include/inttypes.h:149:9
pub const SCNdFAST16 = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:151:9
pub const SCNiFAST16 = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:152:9
pub const SCNoFAST16 = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:153:9
pub const SCNuFAST16 = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:154:9
pub const SCNxFAST16 = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:155:9
pub inline fn __PRI32(x: anytype) @TypeOf(__STRINGIFY(x)) {
    _ = &x;
    return __STRINGIFY(x);
}
pub inline fn __SCN32(x: anytype) @TypeOf(__STRINGIFY(x)) {
    _ = &x;
    return __STRINGIFY(x);
}
pub inline fn __PRI32LEAST(x: anytype) @TypeOf(__STRINGIFY(x)) {
    _ = &x;
    return __STRINGIFY(x);
}
pub inline fn __SCN32LEAST(x: anytype) @TypeOf(__STRINGIFY(x)) {
    _ = &x;
    return __STRINGIFY(x);
}
pub inline fn __PRI32FAST(x: anytype) @TypeOf(__STRINGIFY(x)) {
    _ = &x;
    return __STRINGIFY(x);
}
pub inline fn __SCN32FAST(x: anytype) @TypeOf(__STRINGIFY(x)) {
    _ = &x;
    return __STRINGIFY(x);
}
pub const PRId32 = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:165:9
pub const PRIi32 = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:166:9
pub const PRIo32 = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:167:9
pub const PRIu32 = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:168:9
pub const PRIx32 = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:169:9
pub const PRIX32 = @compileError("unable to translate macro: undefined identifier `X`");
// /usr/arm-none-eabi/include/inttypes.h:170:9
pub const SCNd32 = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:172:9
pub const SCNi32 = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:173:9
pub const SCNo32 = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:174:9
pub const SCNu32 = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:175:9
pub const SCNx32 = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:176:9
pub const PRIdLEAST32 = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:179:9
pub const PRIiLEAST32 = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:180:9
pub const PRIoLEAST32 = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:181:9
pub const PRIuLEAST32 = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:182:9
pub const PRIxLEAST32 = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:183:9
pub const PRIXLEAST32 = @compileError("unable to translate macro: undefined identifier `X`");
// /usr/arm-none-eabi/include/inttypes.h:184:9
pub const SCNdLEAST32 = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:186:9
pub const SCNiLEAST32 = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:187:9
pub const SCNoLEAST32 = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:188:9
pub const SCNuLEAST32 = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:189:9
pub const SCNxLEAST32 = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:190:9
pub const PRIdFAST32 = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:193:9
pub const PRIiFAST32 = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:194:9
pub const PRIoFAST32 = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:195:9
pub const PRIuFAST32 = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:196:9
pub const PRIxFAST32 = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:197:9
pub const PRIXFAST32 = @compileError("unable to translate macro: undefined identifier `X`");
// /usr/arm-none-eabi/include/inttypes.h:198:9
pub const SCNdFAST32 = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:200:9
pub const SCNiFAST32 = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:201:9
pub const SCNoFAST32 = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:202:9
pub const SCNuFAST32 = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:203:9
pub const SCNxFAST32 = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:204:9
pub inline fn __PRI64(x: anytype) @TypeOf(__INT64 ++ __STRINGIFY(x)) {
    _ = &x;
    return __INT64 ++ __STRINGIFY(x);
}
pub inline fn __SCN64(x: anytype) @TypeOf(__INT64 ++ __STRINGIFY(x)) {
    _ = &x;
    return __INT64 ++ __STRINGIFY(x);
}
pub inline fn __PRI64LEAST(x: anytype) @TypeOf(__LEAST64 ++ __STRINGIFY(x)) {
    _ = &x;
    return __LEAST64 ++ __STRINGIFY(x);
}
pub inline fn __SCN64LEAST(x: anytype) @TypeOf(__LEAST64 ++ __STRINGIFY(x)) {
    _ = &x;
    return __LEAST64 ++ __STRINGIFY(x);
}
pub inline fn __PRI64FAST(x: anytype) @TypeOf(__FAST64 ++ __STRINGIFY(x)) {
    _ = &x;
    return __FAST64 ++ __STRINGIFY(x);
}
pub inline fn __SCN64FAST(x: anytype) @TypeOf(__FAST64 ++ __STRINGIFY(x)) {
    _ = &x;
    return __FAST64 ++ __STRINGIFY(x);
}
pub const PRId64 = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:217:9
pub const PRIi64 = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:218:9
pub const PRIo64 = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:219:9
pub const PRIu64 = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:220:9
pub const PRIx64 = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:221:9
pub const PRIX64 = @compileError("unable to translate macro: undefined identifier `X`");
// /usr/arm-none-eabi/include/inttypes.h:222:9
pub const SCNd64 = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:224:9
pub const SCNi64 = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:225:9
pub const SCNo64 = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:226:9
pub const SCNu64 = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:227:9
pub const SCNx64 = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:228:9
pub const __PRIMAX = @compileError("unable to translate macro: undefined identifier `ll`");
// /usr/arm-none-eabi/include/inttypes.h:266:9
pub const __SCNMAX = @compileError("unable to translate macro: undefined identifier `ll`");
// /usr/arm-none-eabi/include/inttypes.h:267:9
pub const PRIdMAX = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:273:9
pub const PRIiMAX = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:274:9
pub const PRIoMAX = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:275:9
pub const PRIuMAX = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:276:9
pub const PRIxMAX = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:277:9
pub const PRIXMAX = @compileError("unable to translate macro: undefined identifier `X`");
// /usr/arm-none-eabi/include/inttypes.h:278:9
pub const SCNdMAX = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:280:9
pub const SCNiMAX = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:281:9
pub const SCNoMAX = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:282:9
pub const SCNuMAX = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:283:9
pub const SCNxMAX = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:284:9
pub inline fn __PRIPTR(x: anytype) @TypeOf(__STRINGIFY(x)) {
    _ = &x;
    return __STRINGIFY(x);
}
pub inline fn __SCNPTR(x: anytype) @TypeOf(__STRINGIFY(x)) {
    _ = &x;
    return __STRINGIFY(x);
}
pub const PRIdPTR = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:298:9
pub const PRIiPTR = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:299:9
pub const PRIoPTR = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:300:9
pub const PRIuPTR = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:301:9
pub const PRIxPTR = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:302:9
pub const PRIXPTR = @compileError("unable to translate macro: undefined identifier `X`");
// /usr/arm-none-eabi/include/inttypes.h:303:9
pub const SCNdPTR = @compileError("unable to translate macro: undefined identifier `d`");
// /usr/arm-none-eabi/include/inttypes.h:305:9
pub const SCNiPTR = @compileError("unable to translate macro: undefined identifier `i`");
// /usr/arm-none-eabi/include/inttypes.h:306:9
pub const SCNoPTR = @compileError("unable to translate macro: undefined identifier `o`");
// /usr/arm-none-eabi/include/inttypes.h:307:9
pub const SCNuPTR = @compileError("unable to translate macro: undefined identifier `u`");
// /usr/arm-none-eabi/include/inttypes.h:308:9
pub const SCNxPTR = @compileError("unable to translate macro: undefined identifier `x`");
// /usr/arm-none-eabi/include/inttypes.h:309:9
pub const X8_F = "02" ++ PRIx8;
pub const U16_F = PRIu16;
pub const S16_F = PRId16;
pub const X16_F = PRIx16;
pub const U32_F = PRIu32;
pub const S32_F = PRId32;
pub const X32_F = PRIx32;
pub const SZT_F = PRIuPTR;
pub const LWIP_NO_LIMITS_H = @as(c_int, 0);
pub const __CLANG_LIMITS_H = "";
pub const _GCC_LIMITS_H_ = "";
pub const SCHAR_MAX = __SCHAR_MAX__;
pub const SHRT_MAX = __SHRT_MAX__;
pub const INT_MAX = __INT_MAX__;
pub const LONG_MAX = __LONG_MAX__;
pub const SCHAR_MIN = -__SCHAR_MAX__ - @as(c_int, 1);
pub const SHRT_MIN = -__SHRT_MAX__ - @as(c_int, 1);
pub const INT_MIN = -__INT_MAX__ - @as(c_int, 1);
pub const LONG_MIN = -__LONG_MAX__ - @as(c_long, 1);
pub const UCHAR_MAX = (__SCHAR_MAX__ * @as(c_int, 2)) + @as(c_int, 1);
pub const USHRT_MAX = (__SHRT_MAX__ * @as(c_int, 2)) + @as(c_int, 1);
pub const UINT_MAX = (__INT_MAX__ * @as(c_uint, 2)) + @as(c_uint, 1);
pub const ULONG_MAX = (__LONG_MAX__ * @as(c_ulong, 2)) + @as(c_ulong, 1);
pub const MB_LEN_MAX = @as(c_int, 1);
pub const CHAR_BIT = __CHAR_BIT__;
pub const CHAR_MIN = @as(c_int, 0);
pub const CHAR_MAX = UCHAR_MAX;
pub const LLONG_MAX = __LONG_LONG_MAX__;
pub const LLONG_MIN = -__LONG_LONG_MAX__ - @as(c_longlong, 1);
pub const ULLONG_MAX = (__LONG_LONG_MAX__ * @as(c_ulonglong, 2)) + @as(c_ulonglong, 1);
pub const LONG_LONG_MAX = __LONG_LONG_MAX__;
pub const LONG_LONG_MIN = -__LONG_LONG_MAX__ - @as(c_longlong, 1);
pub const ULONG_LONG_MAX = (__LONG_LONG_MAX__ * @as(c_ulonglong, 2)) + @as(c_ulonglong, 1);
pub const SSIZE_MAX = INT_MAX;
pub const LWIP_UINT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex);
pub const LWIP_NO_CTYPE_H = @as(c_int, 0);
pub const _CTYPE_H_ = "";
pub inline fn _tolower(__c: anytype) @TypeOf((@import("std").zig.c_translation.cast(u8, __c) - 'A') + 'a') {
    _ = &__c;
    return (@import("std").zig.c_translation.cast(u8, __c) - 'A') + 'a';
}
pub inline fn _toupper(__c: anytype) @TypeOf((@import("std").zig.c_translation.cast(u8, __c) - 'a') + 'A') {
    _ = &__c;
    return (@import("std").zig.c_translation.cast(u8, __c) - 'a') + 'A';
}
pub const _U = @as(c_int, 0o1);
pub const _L = @as(c_int, 0o2);
pub const _N = @as(c_int, 0o4);
pub const _S = @as(c_int, 0o10);
pub const _P = @as(c_int, 0o20);
pub const _C = @as(c_int, 0o40);
pub const _X = @as(c_int, 0o100);
pub const _B = @as(c_int, 0o200);
pub inline fn __locale_ctype_ptr() @TypeOf(_ctype_) {
    return _ctype_;
}
pub const __CTYPE_PTR = __locale_ctype_ptr();
pub const __ctype_lookup = @compileError("unable to translate C expr: unexpected token 'a string literal'");
// /usr/arm-none-eabi/include/ctype.h:90:9
pub const __ctype_lookup_l = @compileError("unable to translate C expr: unexpected token 'a string literal'");
// /usr/arm-none-eabi/include/ctype.h:121:9
pub inline fn lwip_isdigit(c: anytype) @TypeOf(isdigit(@import("std").zig.c_translation.cast(u8, c))) {
    _ = &c;
    return isdigit(@import("std").zig.c_translation.cast(u8, c));
}
pub inline fn lwip_isxdigit(c: anytype) @TypeOf(isxdigit(@import("std").zig.c_translation.cast(u8, c))) {
    _ = &c;
    return isxdigit(@import("std").zig.c_translation.cast(u8, c));
}
pub inline fn lwip_islower(c: anytype) @TypeOf(islower(@import("std").zig.c_translation.cast(u8, c))) {
    _ = &c;
    return islower(@import("std").zig.c_translation.cast(u8, c));
}
pub inline fn lwip_isspace(c: anytype) @TypeOf(isspace(@import("std").zig.c_translation.cast(u8, c))) {
    _ = &c;
    return isspace(@import("std").zig.c_translation.cast(u8, c));
}
pub inline fn lwip_isupper(c: anytype) @TypeOf(isupper(@import("std").zig.c_translation.cast(u8, c))) {
    _ = &c;
    return isupper(@import("std").zig.c_translation.cast(u8, c));
}
pub inline fn lwip_tolower(c: anytype) @TypeOf(tolower(@import("std").zig.c_translation.cast(u8, c))) {
    _ = &c;
    return tolower(@import("std").zig.c_translation.cast(u8, c));
}
pub inline fn lwip_toupper(c: anytype) @TypeOf(toupper(@import("std").zig.c_translation.cast(u8, c))) {
    _ = &c;
    return toupper(@import("std").zig.c_translation.cast(u8, c));
}
pub inline fn LWIP_CONST_CAST(target_type: anytype, val: anytype) @TypeOf(target_type(@import("std").zig.c_translation.cast(ptrdiff_t, val))) {
    _ = &target_type;
    _ = &val;
    return target_type(@import("std").zig.c_translation.cast(ptrdiff_t, val));
}
pub inline fn LWIP_ALIGNMENT_CAST(target_type: anytype, val: anytype) @TypeOf(LWIP_CONST_CAST(target_type, val)) {
    _ = &target_type;
    _ = &val;
    return LWIP_CONST_CAST(target_type, val);
}
pub inline fn LWIP_PTR_NUMERIC_CAST(target_type: anytype, val: anytype) @TypeOf(LWIP_CONST_CAST(target_type, val)) {
    _ = &target_type;
    _ = &val;
    return LWIP_CONST_CAST(target_type, val);
}
pub inline fn LWIP_PACKED_CAST(target_type: anytype, val: anytype) @TypeOf(LWIP_CONST_CAST(target_type, val)) {
    _ = &target_type;
    _ = &val;
    return LWIP_CONST_CAST(target_type, val);
}
pub inline fn LWIP_DECLARE_MEMORY_ALIGNED(variable_name: anytype, size: anytype) @TypeOf(u8_t ++ variable_name[@as(usize, @intCast(LWIP_MEM_ALIGN_BUFFER(size)))]) {
    _ = &variable_name;
    _ = &size;
    return u8_t ++ variable_name[@as(usize, @intCast(LWIP_MEM_ALIGN_BUFFER(size)))];
}
pub inline fn LWIP_MEM_ALIGN_SIZE(size: anytype) @TypeOf(((size + MEM_ALIGNMENT) - @as(c_uint, 1)) & ~(MEM_ALIGNMENT - @as(c_uint, 1))) {
    _ = &size;
    return ((size + MEM_ALIGNMENT) - @as(c_uint, 1)) & ~(MEM_ALIGNMENT - @as(c_uint, 1));
}
pub inline fn LWIP_MEM_ALIGN_BUFFER(size: anytype) @TypeOf((size + MEM_ALIGNMENT) - @as(c_uint, 1)) {
    _ = &size;
    return (size + MEM_ALIGNMENT) - @as(c_uint, 1);
}
pub inline fn LWIP_MEM_ALIGN(addr: anytype) ?*anyopaque {
    _ = &addr;
    return @import("std").zig.c_translation.cast(?*anyopaque, ((@import("std").zig.c_translation.cast(mem_ptr_t, addr) + MEM_ALIGNMENT) - @as(c_int, 1)) & ~@import("std").zig.c_translation.cast(mem_ptr_t, MEM_ALIGNMENT - @as(c_int, 1)));
}
pub inline fn PACK_STRUCT_FLD_8(x: anytype) @TypeOf(PACK_STRUCT_FIELD(x)) {
    _ = &x;
    return PACK_STRUCT_FIELD(x);
}
pub inline fn PACK_STRUCT_FLD_S(x: anytype) @TypeOf(PACK_STRUCT_FIELD(x)) {
    _ = &x;
    return PACK_STRUCT_FIELD(x);
}
pub inline fn LWIP_UNUSED_ARG(x: anytype) anyopaque {
    _ = &x;
    return @import("std").zig.c_translation.cast(anyopaque, x);
}
pub const LWIP_DBG_LEVEL_ALL = @as(c_int, 0x00);
pub const LWIP_DBG_LEVEL_WARNING = @as(c_int, 0x01);
pub const LWIP_DBG_LEVEL_SERIOUS = @as(c_int, 0x02);
pub const LWIP_DBG_LEVEL_SEVERE = @as(c_int, 0x03);
pub const LWIP_DBG_MASK_LEVEL = @as(c_int, 0x03);
pub const LWIP_DBG_LEVEL_OFF = LWIP_DBG_LEVEL_ALL;
pub const LWIP_DBG_ON = @as(c_uint, 0x80);
pub const LWIP_DBG_OFF = @as(c_uint, 0x00);
pub const LWIP_DBG_TRACE = @as(c_uint, 0x40);
pub const LWIP_DBG_STATE = @as(c_uint, 0x20);
pub const LWIP_DBG_FRESH = @as(c_uint, 0x10);
pub const LWIP_DBG_HALT = @as(c_uint, 0x08);
pub const LWIP_ASSERT = @compileError("unable to translate C expr: unexpected token 'do'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/debug.h:116:9
pub inline fn LWIP_PLATFORM_ERROR(message: anytype) @TypeOf(LWIP_PLATFORM_DIAG(message)) {
    _ = &message;
    return LWIP_PLATFORM_DIAG(message);
}
pub const LWIP_ERROR = @compileError("unable to translate C expr: unexpected token 'do'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/debug.h:130:9
pub inline fn LWIP_DEBUG_ENABLED(debug: anytype) @TypeOf((((debug & LWIP_DBG_ON) != 0) and ((debug & LWIP_DBG_TYPES_ON) != 0)) and (@import("std").zig.c_translation.cast(s16_t, debug & LWIP_DBG_MASK_LEVEL) >= LWIP_DBG_MIN_LEVEL)) {
    _ = &debug;
    return (((debug & LWIP_DBG_ON) != 0) and ((debug & LWIP_DBG_TYPES_ON) != 0)) and (@import("std").zig.c_translation.cast(s16_t, debug & LWIP_DBG_MASK_LEVEL) >= LWIP_DBG_MIN_LEVEL);
}
pub const LWIP_DEBUGF = @compileError("unable to translate C expr: unexpected token 'do'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/debug.h:147:9
pub const LWIP_TIMERS = @as(c_int, 1);
pub const LWIP_TIMERS_CUSTOM = @as(c_int, 0);
pub inline fn MEMCPY(dst: anytype, src: anytype, len: anytype) @TypeOf(memcpy(dst, src, len)) {
    _ = &dst;
    _ = &src;
    _ = &len;
    return memcpy(dst, src, len);
}
pub inline fn SMEMCPY(dst: anytype, src: anytype, len: anytype) @TypeOf(memcpy(dst, src, len)) {
    _ = &dst;
    _ = &src;
    _ = &len;
    return memcpy(dst, src, len);
}
pub inline fn MEMMOVE(dst: anytype, src: anytype, len: anytype) @TypeOf(memmove(dst, src, len)) {
    _ = &dst;
    _ = &src;
    _ = &len;
    return memmove(dst, src, len);
}
pub const LWIP_MPU_COMPATIBLE = @as(c_int, 0);
pub const LWIP_TCPIP_CORE_LOCKING = @as(c_int, 1);
pub const LWIP_TCPIP_CORE_LOCKING_INPUT = @as(c_int, 0);
pub const SYS_LIGHTWEIGHT_PROT = @as(c_int, 1);
pub const LWIP_ASSERT_CORE_LOCKED = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/opt.h:227:9
pub const MEM_CUSTOM_ALLOCATOR = @as(c_int, 0);
pub const MEMP_MEM_MALLOC = @as(c_int, 0);
pub const MEMP_MEM_INIT = @as(c_int, 0);
pub const MEMP_OVERFLOW_CHECK = @as(c_int, 0);
pub const MEMP_SANITY_CHECK = @as(c_int, 0);
pub const MEM_OVERFLOW_CHECK = @as(c_int, 0);
pub const MEM_SANITY_CHECK = @as(c_int, 0);
pub const MEM_USE_POOLS = @as(c_int, 0);
pub const MEM_USE_POOLS_TRY_BIGGER_POOL = @as(c_int, 0);
pub const MEMP_USE_CUSTOM_POOLS = @as(c_int, 0);
pub const LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT = @as(c_int, 0);
pub const MEMP_NUM_PBUF = @as(c_int, 16);
pub const MEMP_NUM_RAW_PCB = @as(c_int, 4);
pub const MEMP_NUM_UDP_PCB = @as(c_int, 4);
pub const MEMP_NUM_TCP_PCB = @as(c_int, 5);
pub const MEMP_NUM_TCP_PCB_LISTEN = @as(c_int, 8);
pub const MEMP_NUM_ALTCP_PCB = MEMP_NUM_TCP_PCB;
pub const MEMP_NUM_REASSDATA = @as(c_int, 5);
pub const MEMP_NUM_FRAG_PBUF = @as(c_int, 15);
pub const MEMP_NUM_IGMP_GROUP = @as(c_int, 8);
pub const LWIP_NUM_SYS_TIMEOUT_INTERNAL = @compileError("unable to translate macro: undefined identifier `PPP_NUM_TIMEOUTS`");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/opt.h:519:9
pub const MEMP_NUM_SYS_TIMEOUT = LWIP_NUM_SYS_TIMEOUT_INTERNAL;
pub const MEMP_NUM_NETBUF = @as(c_int, 2);
pub const MEMP_NUM_NETCONN = @as(c_int, 4);
pub const MEMP_NUM_SELECT_CB = @as(c_int, 4);
pub const MEMP_NUM_TCPIP_MSG_API = @as(c_int, 8);
pub const MEMP_NUM_TCPIP_MSG_INPKT = @as(c_int, 8);
pub const MEMP_NUM_NETDB = @as(c_int, 1);
pub const MEMP_NUM_LOCALHOSTLIST = @as(c_int, 1);
pub const MEMP_NUM_API_MSG = MEMP_NUM_TCPIP_MSG_API;
pub const MEMP_NUM_DNS_API_MSG = MEMP_NUM_TCPIP_MSG_API;
pub const MEMP_NUM_SOCKET_SETGETSOCKOPT_DATA = MEMP_NUM_TCPIP_MSG_API;
pub const MEMP_NUM_NETIFAPI_MSG = MEMP_NUM_TCPIP_MSG_API;
pub const ARP_TABLE_SIZE = @as(c_int, 10);
pub const ARP_MAXAGE = @as(c_int, 300);
pub const ARP_QUEUEING = @as(c_int, 0);
pub const ARP_QUEUE_LEN = @as(c_int, 3);
pub const ETHARP_SUPPORT_VLAN = @as(c_int, 0);
pub const LWIP_VLAN_PCP = @as(c_int, 0);
pub const ETH_PAD_SIZE = @as(c_int, 0);
pub const ETHARP_SUPPORT_STATIC_ENTRIES = @as(c_int, 0);
pub const ETHARP_TABLE_MATCH_NETIF = !(LWIP_SINGLE_NETIF != 0);
pub const IP_FORWARD = @as(c_int, 0);
pub const IP_REASSEMBLY = @as(c_int, 1);
pub const IP_FRAG = @as(c_int, 1);
pub const IP_OPTIONS_ALLOWED = @as(c_int, 1);
pub const IP_REASS_MAXAGE = @as(c_int, 15);
pub const IP_REASS_MAX_PBUFS = @as(c_int, 10);
pub const IP_DEFAULT_TTL = @as(c_int, 255);
pub const IP_SOF_BROADCAST = @as(c_int, 0);
pub const IP_SOF_BROADCAST_RECV = @as(c_int, 0);
pub const IP_FORWARD_ALLOW_TX_ON_RX_NETIF = @as(c_int, 0);
pub const ICMP_TTL = IP_DEFAULT_TTL;
pub const LWIP_BROADCAST_PING = @as(c_int, 0);
pub const LWIP_MULTICAST_PING = @as(c_int, 0);
pub const RAW_TTL = IP_DEFAULT_TTL;
pub const LWIP_DHCP_BOOTP_FILE = @as(c_int, 0);
pub const LWIP_DHCP_GET_NTP_SRV = @as(c_int, 0);
pub const LWIP_DHCP_MAX_NTP_SERVERS = @as(c_int, 1);
pub const LWIP_DHCP_MAX_DNS_SERVERS = DNS_MAX_SERVERS;
pub const LWIP_DHCP_DISCOVER_ADD_HOSTNAME = @as(c_int, 1);
pub const LWIP_AUTOIP = @as(c_int, 0);
pub const LWIP_DHCP_AUTOIP_COOP = @as(c_int, 0);
pub const LWIP_DHCP_AUTOIP_COOP_TRIES = @as(c_int, 9);
pub const LWIP_ACD = (LWIP_AUTOIP != 0) or (LWIP_DHCP_DOES_ACD_CHECK != 0);
pub const LWIP_MIB2_CALLBACKS = @as(c_int, 0);
pub const LWIP_MULTICAST_TX_OPTIONS = ((LWIP_IGMP != 0) or (LWIP_IPV6_MLD != 0)) and ((LWIP_UDP != 0) or (LWIP_RAW != 0));
pub const LWIP_IGMP = @as(c_int, 0);
pub const DNS_TABLE_SIZE = @as(c_int, 4);
pub const DNS_MAX_NAME_LENGTH = @as(c_int, 256);
pub const DNS_MAX_SERVERS = @as(c_int, 2);
pub const DNS_MAX_RETRIES = @as(c_int, 4);
pub const DNS_DOES_NAME_CHECK = @as(c_int, 1);
pub const LWIP_DNS_SECURE = (LWIP_DNS_SECURE_RAND_XID | LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) | LWIP_DNS_SECURE_RAND_SRC_PORT;
pub const LWIP_DNS_SECURE_RAND_XID = @as(c_int, 1);
pub const LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING = @as(c_int, 2);
pub const LWIP_DNS_SECURE_RAND_SRC_PORT = @as(c_int, 4);
pub const DNS_LOCAL_HOSTLIST = @as(c_int, 0);
pub const DNS_LOCAL_HOSTLIST_IS_DYNAMIC = @as(c_int, 0);
pub const LWIP_DNS_SUPPORT_MDNS_QUERIES = @as(c_int, 0);
pub const LWIP_UDPLITE = @as(c_int, 0);
pub const UDP_TTL = IP_DEFAULT_TTL;
pub const LWIP_NETBUF_RECVINFO = @as(c_int, 0);
pub const TCP_TTL = IP_DEFAULT_TTL;
pub const TCP_MAXRTX = @as(c_int, 12);
pub const TCP_SYNMAXRTX = @as(c_int, 6);
pub const TCP_QUEUE_OOSEQ = LWIP_TCP;
pub const LWIP_TCP_SACK_OUT = @as(c_int, 0);
pub const LWIP_TCP_MAX_SACK_NUM = @as(c_int, 4);
pub const TCP_CALCULATE_EFF_SEND_MSS = @as(c_int, 1);
pub const LWIP_TCP_RTO_TIME = @as(c_int, 3000);
pub const TCP_SNDLOWAT = LWIP_MIN(LWIP_MAX(@import("std").zig.c_translation.MacroArithmetic.div(TCP_SND_BUF, @as(c_int, 2)), (@as(c_int, 2) * TCP_MSS) + @as(c_int, 1)), TCP_SND_BUF - @as(c_int, 1));
pub const TCP_SNDQUEUELOWAT = LWIP_MAX(@import("std").zig.c_translation.MacroArithmetic.div(TCP_SND_QUEUELEN, @as(c_int, 2)), @as(c_int, 5));
pub const TCP_OOSEQ_MAX_BYTES = @as(c_int, 0);
pub const TCP_OOSEQ_MAX_PBUFS = @as(c_int, 0);
pub const TCP_LISTEN_BACKLOG = @as(c_int, 0);
pub const TCP_DEFAULT_LISTEN_BACKLOG = @as(c_int, 0xff);
pub const TCP_OVERSIZE = TCP_MSS;
pub const LWIP_TCP_TIMESTAMPS = @as(c_int, 0);
pub const TCP_WND_UPDATE_THRESHOLD = LWIP_MIN(@import("std").zig.c_translation.MacroArithmetic.div(TCP_WND, @as(c_int, 4)), TCP_MSS * @as(c_int, 4));
pub const LWIP_EVENT_API = @as(c_int, 0);
pub const LWIP_CALLBACK_API = @as(c_int, 1);
pub const LWIP_WND_SCALE = @as(c_int, 0);
pub const TCP_RCV_SCALE = @as(c_int, 0);
pub const LWIP_TCP_PCB_NUM_EXT_ARGS = @as(c_int, 0);
pub const LWIP_ALTCP = @as(c_int, 0);
pub const LWIP_ALTCP_TLS = @as(c_int, 0);
pub const PBUF_LINK_HLEN = @as(c_int, 14) + ETH_PAD_SIZE;
pub const PBUF_LINK_ENCAPSULATION_HLEN = @as(c_int, 0);
pub const PBUF_POOL_BUFSIZE = LWIP_MEM_ALIGN_SIZE((((TCP_MSS + PBUF_IP_HLEN) + PBUF_TRANSPORT_HLEN) + PBUF_LINK_ENCAPSULATION_HLEN) + PBUF_LINK_HLEN);
pub const LWIP_PBUF_REF_T = u8_t;
pub const LWIP_PBUF_CUSTOM_DATA = "";
pub const LWIP_PBUF_CUSTOM_DATA_INIT = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/opt.h:1644:9
pub const LWIP_SINGLE_NETIF = @as(c_int, 0);
pub const LWIP_NETIF_API = @as(c_int, 0);
pub const LWIP_NETIF_EXT_STATUS_CALLBACK = @as(c_int, 0);
pub const LWIP_NETIF_REMOVE_CALLBACK = @as(c_int, 0);
pub const LWIP_NETIF_HWADDRHINT = @as(c_int, 0);
pub const LWIP_NUM_NETIF_CLIENT_DATA = @as(c_int, 0);
pub const LWIP_HAVE_LOOPIF = (LWIP_NETIF_LOOPBACK != 0) and !(LWIP_SINGLE_NETIF != 0);
pub const LWIP_LOOPIF_MULTICAST = @as(c_int, 0);
pub const LWIP_NETIF_LOOPBACK = @as(c_int, 0);
pub const LWIP_LOOPBACK_MAX_PBUFS = @as(c_int, 0);
pub const LWIP_NETIF_LOOPBACK_MULTITHREADING = !(NO_SYS != 0);
pub const TCPIP_THREAD_NAME = "tcpip_thread";
pub const TCPIP_THREAD_STACKSIZE = @as(c_int, 0);
pub const TCPIP_THREAD_PRIO = @as(c_int, 1);
pub const TCPIP_MBOX_SIZE = @as(c_int, 0);
pub const LWIP_TCPIP_THREAD_ALIVE = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/opt.h:1872:9
pub const SLIPIF_THREAD_NAME = "slipif_loop";
pub const SLIPIF_THREAD_STACKSIZE = @as(c_int, 0);
pub const SLIPIF_THREAD_PRIO = @as(c_int, 1);
pub const DEFAULT_THREAD_NAME = "lwIP";
pub const DEFAULT_THREAD_STACKSIZE = @as(c_int, 0);
pub const DEFAULT_THREAD_PRIO = @as(c_int, 1);
pub const DEFAULT_RAW_RECVMBOX_SIZE = @as(c_int, 0);
pub const DEFAULT_UDP_RECVMBOX_SIZE = @as(c_int, 0);
pub const DEFAULT_TCP_RECVMBOX_SIZE = @as(c_int, 0);
pub const DEFAULT_ACCEPTMBOX_SIZE = @as(c_int, 0);
pub const LWIP_TCPIP_TIMEOUT = @as(c_int, 0);
pub const LWIP_NETCONN_SEM_PER_THREAD = @as(c_int, 0);
pub const LWIP_NETCONN_FULLDUPLEX = @as(c_int, 0);
pub const LWIP_COMPAT_SOCKETS = @as(c_int, 1);
pub const LWIP_POSIX_SOCKETS_IO_NAMES = @as(c_int, 1);
pub const LWIP_SOCKET_OFFSET = @as(c_int, 0);
pub const LWIP_SOCKET_EXTERNAL_HEADERS = @as(c_int, 0);
pub const LWIP_SO_SNDTIMEO = @as(c_int, 0);
pub const LWIP_SO_RCVTIMEO = @as(c_int, 0);
pub const LWIP_SO_SNDRCVTIMEO_NONSTANDARD = @as(c_int, 0);
pub const LWIP_SO_RCVBUF = @as(c_int, 0);
pub const LWIP_SO_LINGER = @as(c_int, 0);
pub const RECV_BUFSIZE_DEFAULT = INT_MAX;
pub const LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT = @as(c_int, 20000);
pub const SO_REUSE = @as(c_int, 0);
pub const SO_REUSE_RXTOALL = @as(c_int, 0);
pub const LWIP_FIONREAD_LINUXMODE = @as(c_int, 0);
pub const LWIP_SOCKET_SELECT = @as(c_int, 1);
pub const LWIP_SOCKET_POLL = @as(c_int, 1);
pub const ETHARP_STATS = LWIP_ARP;
pub const IP_STATS = @as(c_int, 1);
pub const IPFRAG_STATS = (IP_REASSEMBLY != 0) or (IP_FRAG != 0);
pub const ICMP_STATS = @as(c_int, 1);
pub const IGMP_STATS = LWIP_IGMP;
pub const UDP_STATS = LWIP_UDP;
pub const TCP_STATS = LWIP_TCP;
pub const IP6_STATS = LWIP_IPV6;
pub const ICMP6_STATS = (LWIP_IPV6 != 0) and (LWIP_ICMP6 != 0);
pub const IP6_FRAG_STATS = (LWIP_IPV6 != 0) and ((LWIP_IPV6_FRAG != 0) or (LWIP_IPV6_REASS != 0));
pub const MLD6_STATS = (LWIP_IPV6 != 0) and (LWIP_IPV6_MLD != 0);
pub const ND6_STATS = LWIP_IPV6;
pub const MIB2_STATS = @as(c_int, 0);
pub const LWIP_CHECKSUM_CTRL_PER_NETIF = @as(c_int, 0);
pub const CHECKSUM_GEN_IP = @as(c_int, 1);
pub const CHECKSUM_GEN_UDP = @as(c_int, 1);
pub const CHECKSUM_GEN_TCP = @as(c_int, 1);
pub const CHECKSUM_GEN_ICMP = @as(c_int, 1);
pub const CHECKSUM_GEN_ICMP6 = @as(c_int, 1);
pub const CHECKSUM_CHECK_IP = @as(c_int, 1);
pub const CHECKSUM_CHECK_UDP = @as(c_int, 1);
pub const CHECKSUM_CHECK_TCP = @as(c_int, 1);
pub const CHECKSUM_CHECK_ICMP = @as(c_int, 1);
pub const CHECKSUM_CHECK_ICMP6 = @as(c_int, 1);
pub const LWIP_CHECKSUM_ON_COPY = @as(c_int, 0);
pub const LWIP_IPV6 = @as(c_int, 0);
pub const IPV6_REASS_MAXAGE = @as(c_int, 60);
pub const LWIP_IPV6_SCOPES = (LWIP_IPV6 != 0) and !(LWIP_SINGLE_NETIF != 0);
pub const LWIP_IPV6_SCOPES_DEBUG = @as(c_int, 0);
pub const LWIP_IPV6_NUM_ADDRESSES = @as(c_int, 3);
pub const LWIP_IPV6_FORWARD = @as(c_int, 0);
pub const LWIP_IPV6_FRAG = @as(c_int, 1);
pub const LWIP_IPV6_REASS = LWIP_IPV6;
pub const LWIP_IPV6_SEND_ROUTER_SOLICIT = LWIP_IPV6;
pub const LWIP_IPV6_AUTOCONFIG = LWIP_IPV6;
pub const LWIP_IPV6_ADDRESS_LIFETIMES = LWIP_IPV6_AUTOCONFIG;
pub const LWIP_IPV6_DUP_DETECT_ATTEMPTS = @as(c_int, 1);
pub const LWIP_ICMP6 = LWIP_IPV6;
pub const LWIP_ICMP6_DATASIZE = @as(c_int, 0);
pub const LWIP_ICMP6_HL = @as(c_int, 255);
pub const LWIP_IPV6_MLD = LWIP_IPV6;
pub const MEMP_NUM_MLD6_GROUP = @as(c_int, 4);
pub const LWIP_ND6_QUEUEING = LWIP_IPV6;
pub const MEMP_NUM_ND6_QUEUE = @as(c_int, 20);
pub const LWIP_ND6_NUM_NEIGHBORS = @as(c_int, 10);
pub const LWIP_ND6_NUM_DESTINATIONS = @as(c_int, 10);
pub const LWIP_ND6_NUM_PREFIXES = @as(c_int, 5);
pub const LWIP_ND6_NUM_ROUTERS = @as(c_int, 3);
pub const LWIP_ND6_MAX_MULTICAST_SOLICIT = @as(c_int, 3);
pub const LWIP_ND6_MAX_UNICAST_SOLICIT = @as(c_int, 3);
pub const LWIP_ND6_MAX_ANYCAST_DELAY_TIME = @as(c_int, 1000);
pub const LWIP_ND6_MAX_NEIGHBOR_ADVERTISEMENT = @as(c_int, 3);
pub const LWIP_ND6_REACHABLE_TIME = @as(c_int, 30000);
pub const LWIP_ND6_RETRANS_TIMER = @as(c_int, 1000);
pub const LWIP_ND6_DELAY_FIRST_PROBE_TIME = @as(c_int, 5000);
pub const LWIP_ND6_ALLOW_RA_UPDATES = @as(c_int, 1);
pub const LWIP_ND6_TCP_REACHABILITY_HINTS = @as(c_int, 1);
pub const LWIP_ND6_RDNSS_MAX_DNS_SERVERS = @as(c_int, 0);
pub const LWIP_IPV6_DHCP6 = @as(c_int, 0);
pub const LWIP_IPV6_DHCP6_STATEFUL = @as(c_int, 0);
pub const LWIP_IPV6_DHCP6_STATELESS = LWIP_IPV6_DHCP6;
pub const LWIP_DHCP6_GET_NTP_SRV = @as(c_int, 0);
pub const LWIP_DHCP6_MAX_NTP_SERVERS = @as(c_int, 1);
pub const LWIP_DHCP6_MAX_DNS_SERVERS = DNS_MAX_SERVERS;
pub const LWIP_DBG_MIN_LEVEL = LWIP_DBG_LEVEL_ALL;
pub const LWIP_DBG_TYPES_ON = LWIP_DBG_ON;
pub const IGMP_DEBUG = LWIP_DBG_OFF;
pub const TIMERS_DEBUG = LWIP_DBG_OFF;
pub const AUTOIP_DEBUG = LWIP_DBG_OFF;
pub const ACD_DEBUG = LWIP_DBG_OFF;
pub const DNS_DEBUG = LWIP_DBG_OFF;
pub const IP6_DEBUG = LWIP_DBG_OFF;
pub const DHCP6_DEBUG = LWIP_DBG_OFF;
pub const LWIP_TESTMODE = @as(c_int, 0);
pub const LWIP_PERF = @as(c_int, 0);
pub const ENABLE_LOOPBACK = (LWIP_NETIF_LOOPBACK != 0) or (LWIP_HAVE_LOOPIF != 0);
pub const LWIP_HDR_ERR_H = "";
pub const LWIP_HDR_IP_ADDR_H = "";
pub const LWIP_HDR_DEF_H = "";
pub const PERF_START = "";
pub const PERF_STOP = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/def.h:58:9
pub inline fn LWIP_MAX(x: anytype, y: anytype) @TypeOf(if (x > y) x else y) {
    _ = &x;
    _ = &y;
    return if (x > y) x else y;
}
pub inline fn LWIP_MIN(x: anytype, y: anytype) @TypeOf(if (x < y) x else y) {
    _ = &x;
    _ = &y;
    return if (x < y) x else y;
}
pub const LWIP_ARRAYSIZE = @compileError("unable to translate C expr: unexpected token '('");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/def.h:69:9
pub inline fn LWIP_MAKEU32(a: anytype, b: anytype, c: anytype, d: anytype) @TypeOf((((@import("std").zig.c_translation.cast(u32_t, a & @as(c_int, 0xff)) << @as(c_int, 24)) | (@import("std").zig.c_translation.cast(u32_t, b & @as(c_int, 0xff)) << @as(c_int, 16))) | (@import("std").zig.c_translation.cast(u32_t, c & @as(c_int, 0xff)) << @as(c_int, 8))) | @import("std").zig.c_translation.cast(u32_t, d & @as(c_int, 0xff))) {
    _ = &a;
    _ = &b;
    _ = &c;
    _ = &d;
    return (((@import("std").zig.c_translation.cast(u32_t, a & @as(c_int, 0xff)) << @as(c_int, 24)) | (@import("std").zig.c_translation.cast(u32_t, b & @as(c_int, 0xff)) << @as(c_int, 16))) | (@import("std").zig.c_translation.cast(u32_t, c & @as(c_int, 0xff)) << @as(c_int, 8))) | @import("std").zig.c_translation.cast(u32_t, d & @as(c_int, 0xff));
}
pub inline fn lwip_ntohs(x: anytype) @TypeOf(lwip_htons(x)) {
    _ = &x;
    return lwip_htons(x);
}
pub inline fn lwip_ntohl(x: anytype) @TypeOf(lwip_htonl(x)) {
    _ = &x;
    return lwip_htonl(x);
}
pub inline fn PP_HTONS(x: anytype) u16_t {
    _ = &x;
    return @import("std").zig.c_translation.cast(u16_t, ((x & @import("std").zig.c_translation.cast(u16_t, @as(c_uint, 0x00ff))) << @as(c_int, 8)) | ((x & @import("std").zig.c_translation.cast(u16_t, @as(c_uint, 0xff00))) >> @as(c_int, 8)));
}
pub inline fn PP_NTOHS(x: anytype) @TypeOf(PP_HTONS(x)) {
    _ = &x;
    return PP_HTONS(x);
}
pub inline fn PP_HTONL(x: anytype) @TypeOf(((((x & @import("std").zig.c_translation.cast(u32_t, @as(c_ulong, 0x000000ff))) << @as(c_int, 24)) | ((x & @import("std").zig.c_translation.cast(u32_t, @as(c_ulong, 0x0000ff00))) << @as(c_int, 8))) | ((x & @import("std").zig.c_translation.cast(u32_t, @as(c_ulong, 0x00ff0000))) >> @as(c_int, 8))) | ((x & @import("std").zig.c_translation.cast(u32_t, @as(c_ulong, 0xff000000))) >> @as(c_int, 24))) {
    _ = &x;
    return ((((x & @import("std").zig.c_translation.cast(u32_t, @as(c_ulong, 0x000000ff))) << @as(c_int, 24)) | ((x & @import("std").zig.c_translation.cast(u32_t, @as(c_ulong, 0x0000ff00))) << @as(c_int, 8))) | ((x & @import("std").zig.c_translation.cast(u32_t, @as(c_ulong, 0x00ff0000))) >> @as(c_int, 8))) | ((x & @import("std").zig.c_translation.cast(u32_t, @as(c_ulong, 0xff000000))) >> @as(c_int, 24));
}
pub inline fn PP_NTOHL(x: anytype) @TypeOf(PP_HTONL(x)) {
    _ = &x;
    return PP_HTONL(x);
}
pub inline fn htons(x: anytype) @TypeOf(lwip_htons(x)) {
    _ = &x;
    return lwip_htons(x);
}
pub inline fn ntohs(x: anytype) @TypeOf(lwip_ntohs(x)) {
    _ = &x;
    return lwip_ntohs(x);
}
pub inline fn htonl(x: anytype) @TypeOf(lwip_htonl(x)) {
    _ = &x;
    return lwip_htonl(x);
}
pub inline fn ntohl(x: anytype) @TypeOf(lwip_ntohl(x)) {
    _ = &x;
    return lwip_ntohl(x);
}
pub const LWIP_HDR_IP4_ADDR_H = "";
pub const IPADDR_NONE = @import("std").zig.c_translation.cast(u32_t, @as(c_ulong, 0xffffffff));
pub const IPADDR_LOOPBACK = @import("std").zig.c_translation.cast(u32_t, @as(c_ulong, 0x7f000001));
pub const IPADDR_ANY = @import("std").zig.c_translation.cast(u32_t, @as(c_ulong, 0x00000000));
pub const IPADDR_BROADCAST = @import("std").zig.c_translation.cast(u32_t, @as(c_ulong, 0xffffffff));
pub inline fn IP_CLASSA(a: anytype) @TypeOf((@import("std").zig.c_translation.cast(u32_t, a) & @as(c_ulong, 0x80000000)) == @as(c_int, 0)) {
    _ = &a;
    return (@import("std").zig.c_translation.cast(u32_t, a) & @as(c_ulong, 0x80000000)) == @as(c_int, 0);
}
pub const IP_CLASSA_NET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff000000, .hex);
pub const IP_CLASSA_NSHIFT = @as(c_int, 24);
pub const IP_CLASSA_HOST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex) & ~IP_CLASSA_NET;
pub const IP_CLASSA_MAX = @as(c_int, 128);
pub inline fn IP_CLASSB(a: anytype) @TypeOf((@import("std").zig.c_translation.cast(u32_t, a) & @as(c_ulong, 0xc0000000)) == @as(c_ulong, 0x80000000)) {
    _ = &a;
    return (@import("std").zig.c_translation.cast(u32_t, a) & @as(c_ulong, 0xc0000000)) == @as(c_ulong, 0x80000000);
}
pub const IP_CLASSB_NET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff0000, .hex);
pub const IP_CLASSB_NSHIFT = @as(c_int, 16);
pub const IP_CLASSB_HOST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex) & ~IP_CLASSB_NET;
pub const IP_CLASSB_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65536, .decimal);
pub inline fn IP_CLASSC(a: anytype) @TypeOf((@import("std").zig.c_translation.cast(u32_t, a) & @as(c_ulong, 0xe0000000)) == @as(c_ulong, 0xc0000000)) {
    _ = &a;
    return (@import("std").zig.c_translation.cast(u32_t, a) & @as(c_ulong, 0xe0000000)) == @as(c_ulong, 0xc0000000);
}
pub const IP_CLASSC_NET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff00, .hex);
pub const IP_CLASSC_NSHIFT = @as(c_int, 8);
pub const IP_CLASSC_HOST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex) & ~IP_CLASSC_NET;
pub inline fn IP_CLASSD(a: anytype) @TypeOf((@import("std").zig.c_translation.cast(u32_t, a) & @as(c_ulong, 0xf0000000)) == @as(c_ulong, 0xe0000000)) {
    _ = &a;
    return (@import("std").zig.c_translation.cast(u32_t, a) & @as(c_ulong, 0xf0000000)) == @as(c_ulong, 0xe0000000);
}
pub const IP_CLASSD_NET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xf0000000, .hex);
pub const IP_CLASSD_NSHIFT = @as(c_int, 28);
pub const IP_CLASSD_HOST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0fffffff, .hex);
pub inline fn IP_MULTICAST(a: anytype) @TypeOf(IP_CLASSD(a)) {
    _ = &a;
    return IP_CLASSD(a);
}
pub inline fn IP_EXPERIMENTAL(a: anytype) @TypeOf((@import("std").zig.c_translation.cast(u32_t, a) & @as(c_ulong, 0xf0000000)) == @as(c_ulong, 0xf0000000)) {
    _ = &a;
    return (@import("std").zig.c_translation.cast(u32_t, a) & @as(c_ulong, 0xf0000000)) == @as(c_ulong, 0xf0000000);
}
pub inline fn IP_BADCLASS(a: anytype) @TypeOf((@import("std").zig.c_translation.cast(u32_t, a) & @as(c_ulong, 0xf0000000)) == @as(c_ulong, 0xf0000000)) {
    _ = &a;
    return (@import("std").zig.c_translation.cast(u32_t, a) & @as(c_ulong, 0xf0000000)) == @as(c_ulong, 0xf0000000);
}
pub const IP_LOOPBACKNET = @as(c_int, 127);
pub const IP4_ADDR = @compileError("unable to translate C expr: unexpected token '='");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip4_addr.h:104:9
pub const ip4_addr_copy = @compileError("unable to translate C expr: expected ')' instead got '='");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip4_addr.h:107:9
pub const ip4_addr_set = @compileError("unable to translate C expr: expected ')' instead got '='");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip4_addr.h:109:9
pub const ip4_addr_set_zero = @compileError("unable to translate C expr: expected ')' instead got '='");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip4_addr.h:113:9
pub const ip4_addr_set_any = @compileError("unable to translate C expr: expected ')' instead got '='");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip4_addr.h:115:9
pub const ip4_addr_set_loopback = @compileError("unable to translate C expr: expected ')' instead got '='");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip4_addr.h:117:9
pub inline fn ip4_addr_isloopback(ipaddr: anytype) @TypeOf((ipaddr.*.addr & PP_HTONL(IP_CLASSA_NET)) == PP_HTONL(@import("std").zig.c_translation.cast(u32_t, IP_LOOPBACKNET) << @as(c_int, 24))) {
    _ = &ipaddr;
    return (ipaddr.*.addr & PP_HTONL(IP_CLASSA_NET)) == PP_HTONL(@import("std").zig.c_translation.cast(u32_t, IP_LOOPBACKNET) << @as(c_int, 24));
}
pub const ip4_addr_set_hton = @compileError("unable to translate C expr: expected ')' instead got '='");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip4_addr.h:122:9
pub const ip4_addr_set_u32 = @compileError("unable to translate C expr: expected ')' instead got '='");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip4_addr.h:126:9
pub inline fn ip4_addr_get_u32(src_ipaddr: anytype) @TypeOf(src_ipaddr.*.addr) {
    _ = &src_ipaddr;
    return src_ipaddr.*.addr;
}
pub const ip4_addr_get_network = @compileError("unable to translate C expr: unexpected token 'do'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip4_addr.h:131:9
pub inline fn ip4_addr_netcmp(addr1: anytype, addr2: anytype, mask: anytype) @TypeOf(ip4_addr_net_eq(addr1, addr2, mask)) {
    _ = &addr1;
    _ = &addr2;
    _ = &mask;
    return ip4_addr_net_eq(addr1, addr2, mask);
}
pub inline fn ip4_addr_net_eq(addr1: anytype, addr2: anytype, mask: anytype) @TypeOf((addr1.*.addr & mask.*.addr) == (addr2.*.addr & mask.*.addr)) {
    _ = &addr1;
    _ = &addr2;
    _ = &mask;
    return (addr1.*.addr & mask.*.addr) == (addr2.*.addr & mask.*.addr);
}
pub inline fn ip4_addr_cmp(addr1: anytype, addr2: anytype) @TypeOf(ip4_addr_eq(addr1, addr2)) {
    _ = &addr1;
    _ = &addr2;
    return ip4_addr_eq(addr1, addr2);
}
pub inline fn ip4_addr_eq(addr1: anytype, addr2: anytype) @TypeOf(addr1.*.addr == addr2.*.addr) {
    _ = &addr1;
    _ = &addr2;
    return addr1.*.addr == addr2.*.addr;
}
pub inline fn ip4_addr_isany_val(addr1: anytype) @TypeOf(addr1.addr == IPADDR_ANY) {
    _ = &addr1;
    return addr1.addr == IPADDR_ANY;
}
pub inline fn ip4_addr_isany(addr1: anytype) @TypeOf((addr1 == NULL) or (ip4_addr_isany_val(addr1.*) != 0)) {
    _ = &addr1;
    return (addr1 == NULL) or (ip4_addr_isany_val(addr1.*) != 0);
}
pub inline fn ip4_addr_isbroadcast(addr1: anytype, netif_1: anytype) @TypeOf(ip4_addr_isbroadcast_u32(addr1.*.addr, netif_1)) {
    _ = &addr1;
    _ = &netif_1;
    return ip4_addr_isbroadcast_u32(addr1.*.addr, netif_1);
}
pub inline fn ip_addr_netmask_valid(netmask: anytype) @TypeOf(ip4_addr_netmask_valid(netmask.*.addr)) {
    _ = &netmask;
    return ip4_addr_netmask_valid(netmask.*.addr);
}
pub inline fn ip4_addr_ismulticast(addr1: anytype) @TypeOf((addr1.*.addr & PP_HTONL(@as(c_ulong, 0xf0000000))) == PP_HTONL(@as(c_ulong, 0xe0000000))) {
    _ = &addr1;
    return (addr1.*.addr & PP_HTONL(@as(c_ulong, 0xf0000000))) == PP_HTONL(@as(c_ulong, 0xe0000000));
}
pub inline fn ip4_addr_islinklocal(addr1: anytype) @TypeOf((addr1.*.addr & PP_HTONL(@as(c_ulong, 0xffff0000))) == PP_HTONL(@as(c_ulong, 0xa9fe0000))) {
    _ = &addr1;
    return (addr1.*.addr & PP_HTONL(@as(c_ulong, 0xffff0000))) == PP_HTONL(@as(c_ulong, 0xa9fe0000));
}
pub inline fn ip4_addr_debug_print_parts(debug: anytype, a: anytype, b: anytype, c: anytype, d: anytype) @TypeOf(LWIP_DEBUGF(debug, blk_1: {
    _ = "%" ++ U16_F ++ ".%" ++ U16_F ++ ".%" ++ U16_F ++ ".%" ++ U16_F;
    _ = &a;
    _ = &b;
    _ = &c;
    break :blk_1 d;
})) {
    _ = &debug;
    _ = &a;
    _ = &b;
    _ = &c;
    _ = &d;
    return LWIP_DEBUGF(debug, blk_1: {
        _ = "%" ++ U16_F ++ ".%" ++ U16_F ++ ".%" ++ U16_F ++ ".%" ++ U16_F;
        _ = &a;
        _ = &b;
        _ = &c;
        break :blk_1 d;
    });
}
pub inline fn ip4_addr_debug_print(debug: anytype, ipaddr: anytype) @TypeOf(ip4_addr_debug_print_parts(debug, @import("std").zig.c_translation.cast(u16_t, if (ipaddr != NULL) ip4_addr1_16(ipaddr) else @as(c_int, 0)), @import("std").zig.c_translation.cast(u16_t, if (ipaddr != NULL) ip4_addr2_16(ipaddr) else @as(c_int, 0)), @import("std").zig.c_translation.cast(u16_t, if (ipaddr != NULL) ip4_addr3_16(ipaddr) else @as(c_int, 0)), @import("std").zig.c_translation.cast(u16_t, if (ipaddr != NULL) ip4_addr4_16(ipaddr) else @as(c_int, 0)))) {
    _ = &debug;
    _ = &ipaddr;
    return ip4_addr_debug_print_parts(debug, @import("std").zig.c_translation.cast(u16_t, if (ipaddr != NULL) ip4_addr1_16(ipaddr) else @as(c_int, 0)), @import("std").zig.c_translation.cast(u16_t, if (ipaddr != NULL) ip4_addr2_16(ipaddr) else @as(c_int, 0)), @import("std").zig.c_translation.cast(u16_t, if (ipaddr != NULL) ip4_addr3_16(ipaddr) else @as(c_int, 0)), @import("std").zig.c_translation.cast(u16_t, if (ipaddr != NULL) ip4_addr4_16(ipaddr) else @as(c_int, 0)));
}
pub inline fn ip4_addr_debug_print_val(debug: anytype, ipaddr: anytype) @TypeOf(ip4_addr_debug_print_parts(debug, ip4_addr1_16_val(ipaddr), ip4_addr2_16_val(ipaddr), ip4_addr3_16_val(ipaddr), ip4_addr4_16_val(ipaddr))) {
    _ = &debug;
    _ = &ipaddr;
    return ip4_addr_debug_print_parts(debug, ip4_addr1_16_val(ipaddr), ip4_addr2_16_val(ipaddr), ip4_addr3_16_val(ipaddr), ip4_addr4_16_val(ipaddr));
}
pub const ip4_addr_get_byte = @compileError("unable to translate C expr: unexpected token 'const'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip4_addr.h:185:9
pub inline fn ip4_addr1(ipaddr: anytype) @TypeOf(ip4_addr_get_byte(ipaddr, @as(c_int, 0))) {
    _ = &ipaddr;
    return ip4_addr_get_byte(ipaddr, @as(c_int, 0));
}
pub inline fn ip4_addr2(ipaddr: anytype) @TypeOf(ip4_addr_get_byte(ipaddr, @as(c_int, 1))) {
    _ = &ipaddr;
    return ip4_addr_get_byte(ipaddr, @as(c_int, 1));
}
pub inline fn ip4_addr3(ipaddr: anytype) @TypeOf(ip4_addr_get_byte(ipaddr, @as(c_int, 2))) {
    _ = &ipaddr;
    return ip4_addr_get_byte(ipaddr, @as(c_int, 2));
}
pub inline fn ip4_addr4(ipaddr: anytype) @TypeOf(ip4_addr_get_byte(ipaddr, @as(c_int, 3))) {
    _ = &ipaddr;
    return ip4_addr_get_byte(ipaddr, @as(c_int, 3));
}
pub inline fn ip4_addr_get_byte_val(ipaddr: anytype, idx: anytype) u8_t {
    _ = &ipaddr;
    _ = &idx;
    return @import("std").zig.c_translation.cast(u8_t, (ipaddr.addr >> (idx * @as(c_int, 8))) & @as(c_int, 0xff));
}
pub inline fn ip4_addr1_val(ipaddr: anytype) @TypeOf(ip4_addr_get_byte_val(ipaddr, @as(c_int, 0))) {
    _ = &ipaddr;
    return ip4_addr_get_byte_val(ipaddr, @as(c_int, 0));
}
pub inline fn ip4_addr2_val(ipaddr: anytype) @TypeOf(ip4_addr_get_byte_val(ipaddr, @as(c_int, 1))) {
    _ = &ipaddr;
    return ip4_addr_get_byte_val(ipaddr, @as(c_int, 1));
}
pub inline fn ip4_addr3_val(ipaddr: anytype) @TypeOf(ip4_addr_get_byte_val(ipaddr, @as(c_int, 2))) {
    _ = &ipaddr;
    return ip4_addr_get_byte_val(ipaddr, @as(c_int, 2));
}
pub inline fn ip4_addr4_val(ipaddr: anytype) @TypeOf(ip4_addr_get_byte_val(ipaddr, @as(c_int, 3))) {
    _ = &ipaddr;
    return ip4_addr_get_byte_val(ipaddr, @as(c_int, 3));
}
pub inline fn ip4_addr1_16(ipaddr: anytype) u16_t {
    _ = &ipaddr;
    return @import("std").zig.c_translation.cast(u16_t, ip4_addr1(ipaddr));
}
pub inline fn ip4_addr2_16(ipaddr: anytype) u16_t {
    _ = &ipaddr;
    return @import("std").zig.c_translation.cast(u16_t, ip4_addr2(ipaddr));
}
pub inline fn ip4_addr3_16(ipaddr: anytype) u16_t {
    _ = &ipaddr;
    return @import("std").zig.c_translation.cast(u16_t, ip4_addr3(ipaddr));
}
pub inline fn ip4_addr4_16(ipaddr: anytype) u16_t {
    _ = &ipaddr;
    return @import("std").zig.c_translation.cast(u16_t, ip4_addr4(ipaddr));
}
pub inline fn ip4_addr1_16_val(ipaddr: anytype) u16_t {
    _ = &ipaddr;
    return @import("std").zig.c_translation.cast(u16_t, ip4_addr1_val(ipaddr));
}
pub inline fn ip4_addr2_16_val(ipaddr: anytype) u16_t {
    _ = &ipaddr;
    return @import("std").zig.c_translation.cast(u16_t, ip4_addr2_val(ipaddr));
}
pub inline fn ip4_addr3_16_val(ipaddr: anytype) u16_t {
    _ = &ipaddr;
    return @import("std").zig.c_translation.cast(u16_t, ip4_addr3_val(ipaddr));
}
pub inline fn ip4_addr4_16_val(ipaddr: anytype) u16_t {
    _ = &ipaddr;
    return @import("std").zig.c_translation.cast(u16_t, ip4_addr4_val(ipaddr));
}
pub const IP4ADDR_STRLEN_MAX = @as(c_int, 16);
pub inline fn ip_ntoa(ipaddr: anytype) @TypeOf(ipaddr_ntoa(ipaddr)) {
    _ = &ipaddr;
    return ipaddr_ntoa(ipaddr);
}
pub const LWIP_HDR_IP6_ADDR_H = "";
pub inline fn IP_ADDR_PCB_VERSION_MATCH(addr: anytype, pcb: anytype) @TypeOf(@as(c_int, 1)) {
    _ = &addr;
    _ = &pcb;
    return @as(c_int, 1);
}
pub inline fn IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb: anytype, ipaddr: anytype) @TypeOf(@as(c_int, 1)) {
    _ = &pcb;
    _ = &ipaddr;
    return @as(c_int, 1);
}
pub inline fn ip_addr_set_any_val(is_ipv6: anytype, ipaddr: anytype) @TypeOf(ip_addr_set_any(is_ipv6, &ipaddr)) {
    _ = &is_ipv6;
    _ = &ipaddr;
    return ip_addr_set_any(is_ipv6, &ipaddr);
}
pub inline fn ip_addr_set_loopback_val(is_ipv6: anytype, ipaddr: anytype) @TypeOf(ip_addr_set_loopback(is_ipv6, &ipaddr)) {
    _ = &is_ipv6;
    _ = &ipaddr;
    return ip_addr_set_loopback(is_ipv6, &ipaddr);
}
pub const IPADDR4_INIT = @compileError("unable to translate C expr: unexpected token '{'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip_addr.h:295:9
pub inline fn IPADDR4_INIT_BYTES(a: anytype, b: anytype, c: anytype, d: anytype) @TypeOf(IPADDR4_INIT(PP_HTONL(LWIP_MAKEU32(a, b, c, d)))) {
    _ = &a;
    _ = &b;
    _ = &c;
    _ = &d;
    return IPADDR4_INIT(PP_HTONL(LWIP_MAKEU32(a, b, c, d)));
}
pub inline fn IP_IS_V4_VAL(ipaddr: anytype) @TypeOf(@as(c_int, 1)) {
    _ = &ipaddr;
    return @as(c_int, 1);
}
pub inline fn IP_IS_V6_VAL(ipaddr: anytype) @TypeOf(@as(c_int, 0)) {
    _ = &ipaddr;
    return @as(c_int, 0);
}
pub inline fn IP_IS_V4(ipaddr: anytype) @TypeOf(@as(c_int, 1)) {
    _ = &ipaddr;
    return @as(c_int, 1);
}
pub inline fn IP_IS_V6(ipaddr: anytype) @TypeOf(@as(c_int, 0)) {
    _ = &ipaddr;
    return @as(c_int, 0);
}
pub inline fn IP_IS_ANY_TYPE_VAL(ipaddr: anytype) @TypeOf(@as(c_int, 0)) {
    _ = &ipaddr;
    return @as(c_int, 0);
}
pub const IP_SET_TYPE_VAL = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip_addr.h:302:9
pub const IP_SET_TYPE = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip_addr.h:303:9
pub inline fn IP_GET_TYPE(ipaddr: anytype) @TypeOf(IPADDR_TYPE_V4) {
    _ = &ipaddr;
    return IPADDR_TYPE_V4;
}
pub inline fn IP_ADDR_RAW_SIZE(ipaddr: anytype) @TypeOf(@import("std").zig.c_translation.sizeof(ip4_addr_t)) {
    _ = &ipaddr;
    return @import("std").zig.c_translation.sizeof(ip4_addr_t);
}
pub inline fn ip_2_ip4(ipaddr: anytype) @TypeOf(ipaddr) {
    _ = &ipaddr;
    return ipaddr;
}
pub inline fn IP_ADDR4(ipaddr: anytype, a: anytype, b: anytype, c: anytype, d: anytype) @TypeOf(IP4_ADDR(ipaddr, a, b, c, d)) {
    _ = &ipaddr;
    _ = &a;
    _ = &b;
    _ = &c;
    _ = &d;
    return IP4_ADDR(ipaddr, a, b, c, d);
}
pub inline fn ip_addr_copy(dest: anytype, src: anytype) @TypeOf(ip4_addr_copy(dest, src)) {
    _ = &dest;
    _ = &src;
    return ip4_addr_copy(dest, src);
}
pub inline fn ip_addr_copy_from_ip4(dest: anytype, src: anytype) @TypeOf(ip4_addr_copy(dest, src)) {
    _ = &dest;
    _ = &src;
    return ip4_addr_copy(dest, src);
}
pub inline fn ip_addr_set_ip4_u32(ipaddr: anytype, val: anytype) @TypeOf(ip4_addr_set_u32(ip_2_ip4(ipaddr), val)) {
    _ = &ipaddr;
    _ = &val;
    return ip4_addr_set_u32(ip_2_ip4(ipaddr), val);
}
pub inline fn ip_addr_set_ip4_u32_val(ipaddr: anytype, val: anytype) @TypeOf(ip_addr_set_ip4_u32(&ipaddr, val)) {
    _ = &ipaddr;
    _ = &val;
    return ip_addr_set_ip4_u32(&ipaddr, val);
}
pub inline fn ip_addr_get_ip4_u32(ipaddr: anytype) @TypeOf(ip4_addr_get_u32(ip_2_ip4(ipaddr))) {
    _ = &ipaddr;
    return ip4_addr_get_u32(ip_2_ip4(ipaddr));
}
pub inline fn ip_addr_set(dest: anytype, src: anytype) @TypeOf(ip4_addr_set(dest, src)) {
    _ = &dest;
    _ = &src;
    return ip4_addr_set(dest, src);
}
pub inline fn ip_addr_set_ipaddr(dest: anytype, src: anytype) @TypeOf(ip4_addr_set(dest, src)) {
    _ = &dest;
    _ = &src;
    return ip4_addr_set(dest, src);
}
pub inline fn ip_addr_set_zero(ipaddr: anytype) @TypeOf(ip4_addr_set_zero(ipaddr)) {
    _ = &ipaddr;
    return ip4_addr_set_zero(ipaddr);
}
pub inline fn ip_addr_set_zero_ip4(ipaddr: anytype) @TypeOf(ip4_addr_set_zero(ipaddr)) {
    _ = &ipaddr;
    return ip4_addr_set_zero(ipaddr);
}
pub inline fn ip_addr_set_any(is_ipv6: anytype, ipaddr: anytype) @TypeOf(ip4_addr_set_any(ipaddr)) {
    _ = &is_ipv6;
    _ = &ipaddr;
    return ip4_addr_set_any(ipaddr);
}
pub inline fn ip_addr_set_loopback(is_ipv6: anytype, ipaddr: anytype) @TypeOf(ip4_addr_set_loopback(ipaddr)) {
    _ = &is_ipv6;
    _ = &ipaddr;
    return ip4_addr_set_loopback(ipaddr);
}
pub inline fn ip_addr_set_hton(dest: anytype, src: anytype) @TypeOf(ip4_addr_set_hton(dest, src)) {
    _ = &dest;
    _ = &src;
    return ip4_addr_set_hton(dest, src);
}
pub inline fn ip_addr_get_network(target: anytype, host: anytype, mask: anytype) @TypeOf(ip4_addr_get_network(target, host, mask)) {
    _ = &target;
    _ = &host;
    _ = &mask;
    return ip4_addr_get_network(target, host, mask);
}
pub inline fn ip_addr_netcmp(addr1: anytype, addr2: anytype, mask: anytype) @TypeOf(ip4_addr_net_eq(addr1, addr2, mask)) {
    _ = &addr1;
    _ = &addr2;
    _ = &mask;
    return ip4_addr_net_eq(addr1, addr2, mask);
}
pub inline fn ip_addr_net_eq(addr1: anytype, addr2: anytype, mask: anytype) @TypeOf(ip4_addr_net_eq(addr1, addr2, mask)) {
    _ = &addr1;
    _ = &addr2;
    _ = &mask;
    return ip4_addr_net_eq(addr1, addr2, mask);
}
pub inline fn ip_addr_cmp(addr1: anytype, addr2: anytype) @TypeOf(ip4_addr_eq(addr1, addr2)) {
    _ = &addr1;
    _ = &addr2;
    return ip4_addr_eq(addr1, addr2);
}
pub inline fn ip_addr_eq(addr1: anytype, addr2: anytype) @TypeOf(ip4_addr_eq(addr1, addr2)) {
    _ = &addr1;
    _ = &addr2;
    return ip4_addr_eq(addr1, addr2);
}
pub inline fn ip_addr_isany(ipaddr: anytype) @TypeOf(ip4_addr_isany(ipaddr)) {
    _ = &ipaddr;
    return ip4_addr_isany(ipaddr);
}
pub inline fn ip_addr_isany_val(ipaddr: anytype) @TypeOf(ip4_addr_isany_val(ipaddr)) {
    _ = &ipaddr;
    return ip4_addr_isany_val(ipaddr);
}
pub inline fn ip_addr_isloopback(ipaddr: anytype) @TypeOf(ip4_addr_isloopback(ipaddr)) {
    _ = &ipaddr;
    return ip4_addr_isloopback(ipaddr);
}
pub inline fn ip_addr_islinklocal(ipaddr: anytype) @TypeOf(ip4_addr_islinklocal(ipaddr)) {
    _ = &ipaddr;
    return ip4_addr_islinklocal(ipaddr);
}
pub inline fn ip_addr_isbroadcast(addr: anytype, netif_1: anytype) @TypeOf(ip4_addr_isbroadcast(addr, netif_1)) {
    _ = &addr;
    _ = &netif_1;
    return ip4_addr_isbroadcast(addr, netif_1);
}
pub inline fn ip_addr_ismulticast(ipaddr: anytype) @TypeOf(ip4_addr_ismulticast(ipaddr)) {
    _ = &ipaddr;
    return ip4_addr_ismulticast(ipaddr);
}
pub inline fn ip_addr_debug_print(debug: anytype, ipaddr: anytype) @TypeOf(ip4_addr_debug_print(debug, ipaddr)) {
    _ = &debug;
    _ = &ipaddr;
    return ip4_addr_debug_print(debug, ipaddr);
}
pub inline fn ip_addr_debug_print_val(debug: anytype, ipaddr: anytype) @TypeOf(ip4_addr_debug_print_val(debug, ipaddr)) {
    _ = &debug;
    _ = &ipaddr;
    return ip4_addr_debug_print_val(debug, ipaddr);
}
pub inline fn ipaddr_ntoa(ipaddr: anytype) @TypeOf(ip4addr_ntoa(ipaddr)) {
    _ = &ipaddr;
    return ip4addr_ntoa(ipaddr);
}
pub inline fn ipaddr_ntoa_r(ipaddr: anytype, buf: anytype, buflen: anytype) @TypeOf(ip4addr_ntoa_r(ipaddr, buf, buflen)) {
    _ = &ipaddr;
    _ = &buf;
    _ = &buflen;
    return ip4addr_ntoa_r(ipaddr, buf, buflen);
}
pub inline fn ipaddr_aton(cp: anytype, addr: anytype) @TypeOf(ip4addr_aton(cp, addr)) {
    _ = &cp;
    _ = &addr;
    return ip4addr_aton(cp, addr);
}
pub const IPADDR_STRLEN_MAX = IP4ADDR_STRLEN_MAX;
pub inline fn IP46_ADDR_ANY(@"type": anytype) @TypeOf(IP4_ADDR_ANY) {
    _ = &@"type";
    return IP4_ADDR_ANY;
}
pub const IP_ADDR_ANY = IP4_ADDR_ANY;
pub const IP4_ADDR_ANY = &ip_addr_any;
pub const IP4_ADDR_ANY4 = ip_2_ip4(&ip_addr_any);
pub const IP_ADDR_BROADCAST = &ip_addr_broadcast;
pub const IP4_ADDR_BROADCAST = ip_2_ip4(&ip_addr_broadcast);
pub const IP_ANY_TYPE = IP_ADDR_ANY;
pub const LWIP_HDR_PBUF_H = "";
pub const LWIP_SUPPORT_CUSTOM_PBUF = ((IP_FRAG != 0) and !(LWIP_NETIF_TX_SINGLE_PBUF != 0)) or ((LWIP_IPV6 != 0) and (LWIP_IPV6_FRAG != 0));
pub inline fn PBUF_NEEDS_COPY(p: anytype) @TypeOf(p.*.type_internal & PBUF_TYPE_FLAG_DATA_VOLATILE) {
    _ = &p;
    return p.*.type_internal & PBUF_TYPE_FLAG_DATA_VOLATILE;
}
pub const PBUF_TRANSPORT_HLEN = @as(c_int, 20);
pub const PBUF_IP_HLEN = @as(c_int, 20);
pub const PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS = @as(c_int, 0x80);
pub const PBUF_TYPE_FLAG_DATA_VOLATILE = @as(c_int, 0x40);
pub const PBUF_TYPE_ALLOC_SRC_MASK = @as(c_int, 0x0F);
pub const PBUF_ALLOC_FLAG_RX = @as(c_int, 0x0100);
pub const PBUF_ALLOC_FLAG_DATA_CONTIGUOUS = @as(c_int, 0x0200);
pub const PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP = @as(c_int, 0x00);
pub const PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF = @as(c_int, 0x01);
pub const PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL = @as(c_int, 0x02);
pub const PBUF_TYPE_ALLOC_SRC_MASK_APP_MIN = @as(c_int, 0x03);
pub const PBUF_TYPE_ALLOC_SRC_MASK_APP_MAX = PBUF_TYPE_ALLOC_SRC_MASK;
pub const PBUF_FLAG_PUSH = @as(c_uint, 0x01);
pub const PBUF_FLAG_IS_CUSTOM = @as(c_uint, 0x02);
pub const PBUF_FLAG_MCASTLOOP = @as(c_uint, 0x04);
pub const PBUF_FLAG_LLBCAST = @as(c_uint, 0x08);
pub const PBUF_FLAG_LLMCAST = @as(c_uint, 0x10);
pub const PBUF_FLAG_TCP_FIN = @as(c_uint, 0x20);
pub const PBUF_POOL_FREE_OOSEQ = @as(c_int, 1);
pub const PBUF_CHECK_FREE_OOSEQ = @compileError("unable to translate C expr: unexpected token 'do'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/pbuf.h:263:9
pub const pbuf_init = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/pbuf.h:273:9
pub inline fn pbuf_get_allocsrc(p: anytype) @TypeOf(p.*.type_internal & PBUF_TYPE_ALLOC_SRC_MASK) {
    _ = &p;
    return p.*.type_internal & PBUF_TYPE_ALLOC_SRC_MASK;
}
pub inline fn pbuf_match_allocsrc(p: anytype, @"type": anytype) @TypeOf(pbuf_get_allocsrc(p) == (@"type" & PBUF_TYPE_ALLOC_SRC_MASK)) {
    _ = &p;
    _ = &@"type";
    return pbuf_get_allocsrc(p) == (@"type" & PBUF_TYPE_ALLOC_SRC_MASK);
}
pub inline fn pbuf_match_type(p: anytype, @"type": anytype) @TypeOf(pbuf_match_allocsrc(p, @"type")) {
    _ = &p;
    _ = &@"type";
    return pbuf_match_allocsrc(p, @"type");
}
pub const LWIP_HDR_STATS_H = "";
pub const LWIP_HDR_MEM_H = "";
pub const MEM_SIZE_F = U16_F;
pub const LWIP_HDR_MEMP_H = "";
pub const LWIP_MEMPOOL = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/memp.h:48:9
pub const LWIP_MALLOC_MEMPOOL = @compileError("unable to translate macro: undefined identifier `POOL_`");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/priv/memp_std.h:23:9
pub const LWIP_MALLOC_MEMPOOL_START = "";
pub const LWIP_MALLOC_MEMPOOL_END = "";
pub inline fn LWIP_PBUF_MEMPOOL(name: anytype, num: anytype, payload: anytype, desc: anytype) @TypeOf(LWIP_MEMPOOL(name, num, LWIP_MEM_ALIGN_SIZE(@import("std").zig.c_translation.sizeof(struct_pbuf)) + LWIP_MEM_ALIGN_SIZE(payload), desc)) {
    _ = &name;
    _ = &num;
    _ = &payload;
    _ = &desc;
    return LWIP_MEMPOOL(name, num, LWIP_MEM_ALIGN_SIZE(@import("std").zig.c_translation.sizeof(struct_pbuf)) + LWIP_MEM_ALIGN_SIZE(payload), desc);
}
pub const LWIP_HDR_MEMP_PRIV_H = "";
pub const LWIP_HDR_MEM_PRIV_H = "";
pub const MEMP_SIZE = @as(c_int, 0);
pub inline fn MEMP_ALIGN_SIZE(x: anytype) @TypeOf(LWIP_MEM_ALIGN_SIZE(x)) {
    _ = &x;
    return LWIP_MEM_ALIGN_SIZE(x);
}
pub const DECLARE_LWIP_MEMPOOL_DESC = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/priv/memp_priv.h:134:9
pub const LWIP_MEMPOOL_DECLARE_STATS_INSTANCE = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/priv/memp_priv.h:143:9
pub const LWIP_MEMPOOL_DECLARE_STATS_REFERENCE = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/priv/memp_priv.h:144:9
pub const LWIP_MEMPOOL_PROTOTYPE = @compileError("unable to translate macro: undefined identifier `memp_`");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/memp.h:67:9
pub const LWIP_MEMPOOL_DECLARE = @compileError("unable to translate macro: undefined identifier `memp_memory_`");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/memp.h:95:9
pub const LWIP_MEMPOOL_INIT = @compileError("unable to translate macro: undefined identifier `memp_`");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/memp.h:117:9
pub const LWIP_MEMPOOL_ALLOC = @compileError("unable to translate macro: undefined identifier `memp_`");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/memp.h:122:9
pub const LWIP_MEMPOOL_FREE = @compileError("unable to translate macro: undefined identifier `memp_`");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/memp.h:127:9
pub const LWIP_STATS_LARGE = @as(c_int, 0);
pub const STAT_COUNTER = u16_t;
pub const STAT_COUNTER_F = U16_F;
pub const STATS_INC = @compileError("TODO unary inc/dec expr");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:312:9
pub const STATS_DEC = @compileError("TODO unary inc/dec expr");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:313:9
pub const STATS_INC_USED = @compileError("unable to translate C expr: unexpected token 'do'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:314:9
pub inline fn STATS_GET(x: anytype) @TypeOf(lwip_stats.x) {
    _ = &x;
    return lwip_stats.x;
}
pub inline fn TCP_STATS_INC(x: anytype) @TypeOf(STATS_INC(x)) {
    _ = &x;
    return STATS_INC(x);
}
pub inline fn TCP_STATS_DISPLAY() @TypeOf(stats_display_proto(&lwip_stats.tcp, "TCP")) {
    return stats_display_proto(&lwip_stats.tcp, "TCP");
}
pub inline fn UDP_STATS_INC(x: anytype) @TypeOf(STATS_INC(x)) {
    _ = &x;
    return STATS_INC(x);
}
pub inline fn UDP_STATS_DISPLAY() @TypeOf(stats_display_proto(&lwip_stats.udp, "UDP")) {
    return stats_display_proto(&lwip_stats.udp, "UDP");
}
pub inline fn ICMP_STATS_INC(x: anytype) @TypeOf(STATS_INC(x)) {
    _ = &x;
    return STATS_INC(x);
}
pub inline fn ICMP_STATS_DISPLAY() @TypeOf(stats_display_proto(&lwip_stats.icmp, "ICMP")) {
    return stats_display_proto(&lwip_stats.icmp, "ICMP");
}
pub const IGMP_STATS_INC = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:355:9
pub const IGMP_STATS_DISPLAY = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:356:9
pub inline fn IP_STATS_INC(x: anytype) @TypeOf(STATS_INC(x)) {
    _ = &x;
    return STATS_INC(x);
}
pub inline fn IP_STATS_DISPLAY() @TypeOf(stats_display_proto(&lwip_stats.ip, "IP")) {
    return stats_display_proto(&lwip_stats.ip, "IP");
}
pub inline fn IPFRAG_STATS_INC(x: anytype) @TypeOf(STATS_INC(x)) {
    _ = &x;
    return STATS_INC(x);
}
pub inline fn IPFRAG_STATS_DISPLAY() @TypeOf(stats_display_proto(&lwip_stats.ip_frag, "IP_FRAG")) {
    return stats_display_proto(&lwip_stats.ip_frag, "IP_FRAG");
}
pub inline fn ETHARP_STATS_INC(x: anytype) @TypeOf(STATS_INC(x)) {
    _ = &x;
    return STATS_INC(x);
}
pub inline fn ETHARP_STATS_DISPLAY() @TypeOf(stats_display_proto(&lwip_stats.etharp, "ETHARP")) {
    return stats_display_proto(&lwip_stats.etharp, "ETHARP");
}
pub const LINK_STATS_INC = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:387:9
pub const LINK_STATS_DISPLAY = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:388:9
pub const MEM_STATS_AVAIL = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:398:9
pub const MEM_STATS_INC = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:399:9
pub const MEM_STATS_INC_USED = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:400:9
pub const MEM_STATS_DEC_USED = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:401:9
pub const MEM_STATS_DISPLAY = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:402:9
pub const MEMP_STATS_DEC = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:410:9
pub const MEMP_STATS_DISPLAY = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:411:9
pub inline fn MEMP_STATS_GET(x: anytype, i: anytype) @TypeOf(@as(c_int, 0)) {
    _ = &x;
    _ = &i;
    return @as(c_int, 0);
}
pub const SYS_STATS_INC = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:421:9
pub const SYS_STATS_DEC = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:422:9
pub const SYS_STATS_INC_USED = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:423:9
pub const SYS_STATS_DISPLAY = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:424:9
pub const IP6_STATS_INC = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:431:9
pub const IP6_STATS_DISPLAY = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:432:9
pub const ICMP6_STATS_INC = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:439:9
pub const ICMP6_STATS_DISPLAY = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:440:9
pub const IP6_FRAG_STATS_INC = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:447:9
pub const IP6_FRAG_STATS_DISPLAY = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:448:9
pub const MLD6_STATS_INC = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:455:9
pub const MLD6_STATS_DISPLAY = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:456:9
pub const ND6_STATS_INC = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:463:9
pub const ND6_STATS_DISPLAY = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:464:9
pub const MIB2_STATS_INC = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/stats.h:470:9
pub const NETIF_MAX_HWADDR_LEN = @as(c_uint, 6);
pub const NETIF_NAMESIZE = @as(c_int, 6);
pub const NETIF_FLAG_UP = @as(c_uint, 0x01);
pub const NETIF_FLAG_BROADCAST = @as(c_uint, 0x02);
pub const NETIF_FLAG_LINK_UP = @as(c_uint, 0x04);
pub const NETIF_FLAG_ETHARP = @as(c_uint, 0x08);
pub const NETIF_FLAG_ETHERNET = @as(c_uint, 0x10);
pub const NETIF_FLAG_IGMP = @as(c_uint, 0x20);
pub const NETIF_FLAG_MLD6 = @as(c_uint, 0x40);
pub const netif_set_client_data = @compileError("unable to translate C expr: unexpected token '='");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/netif.h:236:9
pub inline fn netif_get_client_data(netif_1: anytype, id: anytype) @TypeOf(netif_1.*.client_data[@as(usize, @intCast(id))]) {
    _ = &netif_1;
    _ = &id;
    return netif_1.*.client_data[@as(usize, @intCast(id))];
}
pub const NETIF_ADDR_IDX_MAX = @as(c_int, 0x7F);
pub const LWIP_NETIF_USE_HINTS = @as(c_int, 0);
pub inline fn NETIF_CHECKSUM_ENABLED(netif_1: anytype, chksumflag: anytype) @TypeOf(@as(c_int, 0)) {
    _ = &netif_1;
    _ = &chksumflag;
    return @as(c_int, 0);
}
pub const NETIF_SET_CHECKSUM_CTRL = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/netif.h:415:9
pub const IF__NETIF_CHECKSUM_ENABLED = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/netif.h:416:9
pub const NETIF_FOREACH = @compileError("unable to translate C expr: unexpected token 'for'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/netif.h:424:9
pub const netif_ip4_addr = @compileError("unable to translate C expr: unexpected token 'const'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/netif.h:457:9
pub const netif_ip4_netmask = @compileError("unable to translate C expr: unexpected token 'const'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/netif.h:459:9
pub const netif_ip4_gw = @compileError("unable to translate C expr: unexpected token 'const'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/netif.h:461:9
pub const netif_ip_addr4 = @compileError("unable to translate C expr: unexpected token 'const'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/netif.h:463:9
pub const netif_ip_netmask4 = @compileError("unable to translate C expr: unexpected token 'const'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/netif.h:465:9
pub const netif_ip_gw4 = @compileError("unable to translate C expr: unexpected token 'const'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/netif.h:467:9
pub const netif_set_flags = @compileError("unable to translate C expr: unexpected token 'do'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/netif.h:470:9
pub const netif_clear_flags = @compileError("unable to translate C expr: unexpected token 'do'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/netif.h:471:9
pub inline fn netif_is_flag_set(netif_1: anytype, flag: anytype) @TypeOf((netif_1.*.flags & flag) != @as(c_int, 0)) {
    _ = &netif_1;
    _ = &flag;
    return (netif_1.*.flags & flag) != @as(c_int, 0);
}
pub inline fn netif_is_up(netif_1: anytype) @TypeOf(if (netif_1.*.flags & NETIF_FLAG_UP) @import("std").zig.c_translation.cast(u8_t, @as(c_int, 1)) else @import("std").zig.c_translation.cast(u8_t, @as(c_int, 0))) {
    _ = &netif_1;
    return if (netif_1.*.flags & NETIF_FLAG_UP) @import("std").zig.c_translation.cast(u8_t, @as(c_int, 1)) else @import("std").zig.c_translation.cast(u8_t, @as(c_int, 0));
}
pub inline fn netif_is_link_up(netif_1: anytype) @TypeOf(if (netif_1.*.flags & NETIF_FLAG_LINK_UP) @import("std").zig.c_translation.cast(u8_t, @as(c_int, 1)) else @import("std").zig.c_translation.cast(u8_t, @as(c_int, 0))) {
    _ = &netif_1;
    return if (netif_1.*.flags & NETIF_FLAG_LINK_UP) @import("std").zig.c_translation.cast(u8_t, @as(c_int, 1)) else @import("std").zig.c_translation.cast(u8_t, @as(c_int, 0));
}
pub const netif_set_hostname = @compileError("unable to translate C expr: unexpected token 'do'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/netif.h:499:9
pub inline fn netif_get_hostname(netif_1: anytype) @TypeOf(if (netif_1 != NULL) netif_1.*.hostname else NULL) {
    _ = &netif_1;
    return if (netif_1 != NULL) netif_1.*.hostname else NULL;
}
pub const NETIF_SET_HINTS = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/netif.h:569:9
pub const NETIF_RESET_HINTS = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/netif.h:570:9
pub inline fn netif_get_index(netif_1: anytype) u8_t {
    _ = &netif_1;
    return @import("std").zig.c_translation.cast(u8_t, netif_1.*.num + @as(c_int, 1));
}
pub const NETIF_NO_INDEX = @as(c_int, 0);
pub const LWIP_NSC_NONE = @as(c_int, 0x0000);
pub const LWIP_NSC_NETIF_ADDED = @as(c_int, 0x0001);
pub const LWIP_NSC_NETIF_REMOVED = @as(c_int, 0x0002);
pub const LWIP_NSC_LINK_CHANGED = @as(c_int, 0x0004);
pub const LWIP_NSC_STATUS_CHANGED = @as(c_int, 0x0008);
pub const LWIP_NSC_IPV4_ADDRESS_CHANGED = @as(c_int, 0x0010);
pub const LWIP_NSC_IPV4_GATEWAY_CHANGED = @as(c_int, 0x0020);
pub const LWIP_NSC_IPV4_NETMASK_CHANGED = @as(c_int, 0x0040);
pub const LWIP_NSC_IPV4_SETTINGS_CHANGED = @as(c_int, 0x0080);
pub const LWIP_NSC_IPV6_SET = @as(c_int, 0x0100);
pub const LWIP_NSC_IPV6_ADDR_STATE_CHANGED = @as(c_int, 0x0200);
pub const LWIP_NSC_IPV4_ADDR_VALID = @as(c_int, 0x0400);
pub const NETIF_DECLARE_EXT_CALLBACK = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/netif.h:683:9
pub const netif_add_ext_callback = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/netif.h:684:9
pub const netif_remove_ext_callback = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/netif.h:685:9
pub const netif_invoke_ext_callback = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/netif.h:686:9
pub const LWIP_HDR_DHCP_H = "";
pub const LWIP_HDR_UDP_H = "";
pub const LWIP_HDR_IP_H = "";
pub const LWIP_HDR_IP4_H = "";
pub const LWIP_HDR_PROT_IP4_H = "";
pub const IP_HLEN = @as(c_int, 20);
pub const IP_HLEN_MAX = @as(c_int, 60);
pub const IP_RF = @as(c_uint, 0x8000);
pub const IP_DF = @as(c_uint, 0x4000);
pub const IP_MF = @as(c_uint, 0x2000);
pub const IP_OFFMASK = @as(c_uint, 0x1fff);
pub inline fn IPH_V(hdr: anytype) @TypeOf(hdr.*._v_hl >> @as(c_int, 4)) {
    _ = &hdr;
    return hdr.*._v_hl >> @as(c_int, 4);
}
pub inline fn IPH_HL(hdr: anytype) @TypeOf(hdr.*._v_hl & @as(c_int, 0x0f)) {
    _ = &hdr;
    return hdr.*._v_hl & @as(c_int, 0x0f);
}
pub inline fn IPH_HL_BYTES(hdr: anytype) u8_t {
    _ = &hdr;
    return @import("std").zig.c_translation.cast(u8_t, IPH_HL(hdr) * @as(c_int, 4));
}
pub inline fn IPH_TOS(hdr: anytype) @TypeOf(hdr.*._tos) {
    _ = &hdr;
    return hdr.*._tos;
}
pub inline fn IPH_LEN(hdr: anytype) @TypeOf(hdr.*._len) {
    _ = &hdr;
    return hdr.*._len;
}
pub inline fn IPH_ID(hdr: anytype) @TypeOf(hdr.*._id) {
    _ = &hdr;
    return hdr.*._id;
}
pub inline fn IPH_OFFSET(hdr: anytype) @TypeOf(hdr.*._offset) {
    _ = &hdr;
    return hdr.*._offset;
}
pub inline fn IPH_OFFSET_BYTES(hdr: anytype) u16_t {
    _ = &hdr;
    return @import("std").zig.c_translation.cast(u16_t, (lwip_ntohs(IPH_OFFSET(hdr)) & IP_OFFMASK) * @as(c_uint, 8));
}
pub inline fn IPH_TTL(hdr: anytype) @TypeOf(hdr.*._ttl) {
    _ = &hdr;
    return hdr.*._ttl;
}
pub inline fn IPH_PROTO(hdr: anytype) @TypeOf(hdr.*._proto) {
    _ = &hdr;
    return hdr.*._proto;
}
pub inline fn IPH_CHKSUM(hdr: anytype) @TypeOf(hdr.*._chksum) {
    _ = &hdr;
    return hdr.*._chksum;
}
pub const IPH_VHL_SET = @compileError("unable to translate C expr: unexpected token '='");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/prot/ip4.h:117:9
pub const IPH_TOS_SET = @compileError("unable to translate C expr: unexpected token '='");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/prot/ip4.h:118:9
pub const IPH_LEN_SET = @compileError("unable to translate C expr: unexpected token '='");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/prot/ip4.h:119:9
pub const IPH_ID_SET = @compileError("unable to translate C expr: unexpected token '='");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/prot/ip4.h:120:9
pub const IPH_OFFSET_SET = @compileError("unable to translate C expr: unexpected token '='");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/prot/ip4.h:121:9
pub const IPH_TTL_SET = @compileError("unable to translate C expr: unexpected token '='");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/prot/ip4.h:122:9
pub const IPH_PROTO_SET = @compileError("unable to translate C expr: unexpected token '='");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/prot/ip4.h:123:9
pub const IPH_CHKSUM_SET = @compileError("unable to translate C expr: unexpected token '='");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/prot/ip4.h:124:9
pub const LWIP_IPV4_SRC_ROUTING = @as(c_int, 0);
pub const IP_OPTIONS_SEND = (LWIP_IPV4 != 0) and (LWIP_IGMP != 0);
pub const ip_init = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip4.h:64:9
pub inline fn ip4_route_src(src: anytype, dest: anytype) @TypeOf(ip4_route(dest)) {
    _ = &src;
    _ = &dest;
    return ip4_route(dest);
}
pub inline fn ip4_netif_get_local_ip(netif_1: anytype) @TypeOf(if (netif_1 != NULL) netif_ip_addr4(netif_1) else NULL) {
    _ = &netif_1;
    return if (netif_1 != NULL) netif_ip_addr4(netif_1) else NULL;
}
pub const ip4_debug_print = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip4.h:100:9
pub const LWIP_HDR_IP6_H = "";
pub const LWIP_HDR_PROT_IP_H = "";
pub const IP_PROTO_ICMP = @as(c_int, 1);
pub const IP_PROTO_IGMP = @as(c_int, 2);
pub const IP_PROTO_UDP = @as(c_int, 17);
pub const IP_PROTO_UDPLITE = @as(c_int, 136);
pub const IP_PROTO_TCP = @as(c_int, 6);
pub inline fn IP_HDR_GET_VERSION(ptr: anytype) @TypeOf(@import("std").zig.c_translation.cast([*c]u8_t, ptr).* >> @as(c_int, 4)) {
    _ = &ptr;
    return @import("std").zig.c_translation.cast([*c]u8_t, ptr).* >> @as(c_int, 4);
}
pub const LWIP_IP_HDRINCL = NULL;
pub inline fn LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p: anytype) @TypeOf(LWIP_ASSERT("p->ref == 1", p.*.ref == @as(c_int, 1))) {
    _ = &p;
    return LWIP_ASSERT("p->ref == 1", p.*.ref == @as(c_int, 1));
}
pub const IP_PCB_NETIFHINT = "";
pub const IP_PCB = @compileError("unable to translate macro: undefined identifier `local_ip`");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip.h:76:9
pub const pcb_tci_init = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip.h:104:9
pub const SOF_REUSEADDR = @as(c_uint, 0x04);
pub const SOF_KEEPALIVE = @as(c_uint, 0x08);
pub const SOF_BROADCAST = @as(c_uint, 0x20);
pub const SOF_INHERITED = SOF_REUSEADDR | SOF_KEEPALIVE;
pub inline fn ip_current_netif() @TypeOf(ip_data.current_netif) {
    return ip_data.current_netif;
}
pub inline fn ip_current_input_netif() @TypeOf(ip_data.current_input_netif) {
    return ip_data.current_input_netif;
}
pub inline fn ip_current_header_tot_len() @TypeOf(ip_data.current_ip_header_tot_len) {
    return ip_data.current_ip_header_tot_len;
}
pub inline fn ip_current_src_addr() @TypeOf(&ip_data.current_iphdr_src) {
    return &ip_data.current_iphdr_src;
}
pub inline fn ip_current_dest_addr() @TypeOf(&ip_data.current_iphdr_dest) {
    return &ip_data.current_iphdr_dest;
}
pub inline fn ip4_current_header() @TypeOf(ip_data.current_ip4_header) {
    return ip_data.current_ip4_header;
}
pub inline fn ip_current_is_v6() @TypeOf(@as(c_int, 0)) {
    return @as(c_int, 0);
}
pub inline fn ip_current_header_proto() @TypeOf(IPH_PROTO(ip4_current_header())) {
    return IPH_PROTO(ip4_current_header());
}
pub const ip_next_header_ptr = @compileError("unable to translate C expr: unexpected token 'const'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip.h:197:9
pub inline fn ip4_current_src_addr() @TypeOf(&ip_data.current_iphdr_src) {
    return &ip_data.current_iphdr_src;
}
pub inline fn ip4_current_dest_addr() @TypeOf(&ip_data.current_iphdr_dest) {
    return &ip_data.current_iphdr_dest;
}
pub inline fn ip_get_option(pcb: anytype, opt: anytype) @TypeOf(pcb.*.so_options & opt) {
    _ = &pcb;
    _ = &opt;
    return pcb.*.so_options & opt;
}
pub const ip_set_option = @compileError("unable to translate C expr: expected ')' instead got '='");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip.h:230:9
pub const ip_reset_option = @compileError("unable to translate C expr: expected ')' instead got '='");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip.h:232:9
pub inline fn ip_output(p: anytype, src: anytype, dest: anytype, ttl: anytype, tos: anytype, proto: anytype) @TypeOf(ip4_output(p, src, dest, ttl, tos, proto)) {
    _ = &p;
    _ = &src;
    _ = &dest;
    _ = &ttl;
    _ = &tos;
    _ = &proto;
    return ip4_output(p, src, dest, ttl, tos, proto);
}
pub inline fn ip_output_if(p: anytype, src: anytype, dest: anytype, ttl: anytype, tos: anytype, proto: anytype, netif_1: anytype) @TypeOf(ip4_output_if(p, src, dest, ttl, tos, proto, netif_1)) {
    _ = &p;
    _ = &src;
    _ = &dest;
    _ = &ttl;
    _ = &tos;
    _ = &proto;
    _ = &netif_1;
    return ip4_output_if(p, src, dest, ttl, tos, proto, netif_1);
}
pub inline fn ip_output_if_src(p: anytype, src: anytype, dest: anytype, ttl: anytype, tos: anytype, proto: anytype, netif_1: anytype) @TypeOf(ip4_output_if_src(p, src, dest, ttl, tos, proto, netif_1)) {
    _ = &p;
    _ = &src;
    _ = &dest;
    _ = &ttl;
    _ = &tos;
    _ = &proto;
    _ = &netif_1;
    return ip4_output_if_src(p, src, dest, ttl, tos, proto, netif_1);
}
pub const ip_output_hinted = @compileError("unable to translate macro: undefined identifier `ip4_output_hinted`");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip.h:296:9
pub inline fn ip_output_if_hdrincl(p: anytype, src: anytype, dest: anytype, netif_1: anytype) @TypeOf(ip4_output_if(p, src, LWIP_IP_HDRINCL, @as(c_int, 0), @as(c_int, 0), @as(c_int, 0), netif_1)) {
    _ = &p;
    _ = &src;
    _ = &dest;
    _ = &netif_1;
    return ip4_output_if(p, src, LWIP_IP_HDRINCL, @as(c_int, 0), @as(c_int, 0), @as(c_int, 0), netif_1);
}
pub inline fn ip_route(src: anytype, dest: anytype) @TypeOf(ip4_route_src(src, dest)) {
    _ = &src;
    _ = &dest;
    return ip4_route_src(src, dest);
}
pub inline fn ip_netif_get_local_ip(netif_1: anytype, dest: anytype) @TypeOf(ip4_netif_get_local_ip(netif_1)) {
    _ = &netif_1;
    _ = &dest;
    return ip4_netif_get_local_ip(netif_1);
}
pub inline fn ip_debug_print(is_ipv6: anytype, p: anytype) @TypeOf(ip4_debug_print(p)) {
    _ = &is_ipv6;
    _ = &p;
    return ip4_debug_print(p);
}
pub const ip_input = ip4_input;
pub const ip_route_get_local_ip = @compileError("unable to translate C expr: unexpected token 'do'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/ip.h:330:9
pub const LWIP_HDR_PROT_UDP_H = "";
pub const UDP_HLEN = @as(c_int, 8);
pub const UDP_FLAGS_NOCHKSUM = @as(c_uint, 0x01);
pub const UDP_FLAGS_UDPLITE = @as(c_uint, 0x02);
pub const UDP_FLAGS_CONNECTED = @as(c_uint, 0x04);
pub const UDP_FLAGS_MULTICAST_LOOP = @as(c_uint, 0x08);
pub inline fn udp_flags(pcb: anytype) @TypeOf(pcb.*.flags) {
    _ = &pcb;
    return pcb.*.flags;
}
pub const udp_setflags = @compileError("unable to translate C expr: expected ')' instead got '='");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/udp.h:156:18
pub const udp_set_flags = @compileError("unable to translate C expr: unexpected token 'do'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/udp.h:158:18
pub const udp_clear_flags = @compileError("unable to translate C expr: unexpected token 'do'");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/udp.h:159:18
pub inline fn udp_is_flag_set(pcb: anytype, flag: anytype) @TypeOf((pcb.*.flags & flag) != @as(c_int, 0)) {
    _ = &pcb;
    _ = &flag;
    return (pcb.*.flags & flag) != @as(c_int, 0);
}
pub inline fn udp_new_ip6() @TypeOf(udp_new_ip_type(IPADDR_TYPE_V6)) {
    return udp_new_ip_type(IPADDR_TYPE_V6);
}
pub const udp_debug_print = @compileError("unable to translate C expr: unexpected token ''");
// /home/ianic/Code/pico/pico-sdk/lib/lwip/src/include/lwip/udp.h:184:9
pub const DHCP_COARSE_TIMER_SECS = @as(c_int, 60);
pub const DHCP_COARSE_TIMER_MSECS = DHCP_COARSE_TIMER_SECS * @as(c_ulong, 1000);
pub const DHCP_FINE_TIMER_MSECS = @as(c_int, 500);
pub const DHCP_BOOT_FILE_LEN = @as(c_uint, 128);
pub const DHCP_FLAG_SUBNET_MASK_GIVEN = @as(c_int, 0x01);
pub const DHCP_FLAG_EXTERNAL_MEM = @as(c_int, 0x02);
pub inline fn dhcp_remove_struct(netif_1: anytype) @TypeOf(netif_set_client_data(netif_1, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, NULL)) {
    _ = &netif_1;
    return netif_set_client_data(netif_1, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, NULL);
}
pub inline fn netif_dhcp_data(netif_1: anytype) [*c]struct_dhcp {
    _ = &netif_1;
    return @import("std").zig.c_translation.cast([*c]struct_dhcp, netif_get_client_data(netif_1, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP));
}
pub const CYW43_INCLUDED_CYW43_LL_H = "";
pub const CYW43_IOCTL_GET_SSID = @as(c_int, 0x32);
pub const CYW43_IOCTL_GET_CHANNEL = @as(c_int, 0x3a);
pub const CYW43_IOCTL_SET_DISASSOC = @as(c_int, 0x69);
pub const CYW43_IOCTL_GET_ANTDIV = @as(c_int, 0x7e);
pub const CYW43_IOCTL_SET_ANTDIV = @as(c_int, 0x81);
pub const CYW43_IOCTL_SET_MONITOR = @as(c_int, 0xd9);
pub const CYW43_IOCTL_GET_RSSI = @as(c_int, 0xfe);
pub const CYW43_IOCTL_GET_VAR = @as(c_int, 0x20c);
pub const CYW43_IOCTL_SET_VAR = @as(c_int, 0x20f);
pub const CYW43_EV_SET_SSID = @as(c_int, 0);
pub const CYW43_EV_JOIN = @as(c_int, 1);
pub const CYW43_EV_AUTH = @as(c_int, 3);
pub const CYW43_EV_DEAUTH = @as(c_int, 5);
pub const CYW43_EV_DEAUTH_IND = @as(c_int, 6);
pub const CYW43_EV_ASSOC = @as(c_int, 7);
pub const CYW43_EV_DISASSOC = @as(c_int, 11);
pub const CYW43_EV_DISASSOC_IND = @as(c_int, 12);
pub const CYW43_EV_LINK = @as(c_int, 16);
pub const CYW43_EV_PRUNE = @as(c_int, 23);
pub const CYW43_EV_PSK_SUP = @as(c_int, 46);
pub const CYW43_EV_ICV_ERROR = @as(c_int, 49);
pub const CYW43_EV_ESCAN_RESULT = @as(c_int, 69);
pub const CYW43_EV_CSA_COMPLETE_IND = @as(c_int, 80);
pub const CYW43_EV_ASSOC_REQ_IE = @as(c_int, 87);
pub const CYW43_EV_ASSOC_RESP_IE = @as(c_int, 88);
pub const CYW43_STATUS_SUCCESS = @as(c_int, 0);
pub const CYW43_STATUS_FAIL = @as(c_int, 1);
pub const CYW43_STATUS_TIMEOUT = @as(c_int, 2);
pub const CYW43_STATUS_NO_NETWORKS = @as(c_int, 3);
pub const CYW43_STATUS_ABORT = @as(c_int, 4);
pub const CYW43_STATUS_NO_ACK = @as(c_int, 5);
pub const CYW43_STATUS_UNSOLICITED = @as(c_int, 6);
pub const CYW43_STATUS_ATTEMPT = @as(c_int, 7);
pub const CYW43_STATUS_PARTIAL = @as(c_int, 8);
pub const CYW43_STATUS_NEWSCAN = @as(c_int, 9);
pub const CYW43_STATUS_NEWASSOC = @as(c_int, 10);
pub const CYW43_SUP_DISCONNECTED = @as(c_int, 0);
pub const CYW43_SUP_CONNECTING = @as(c_int, 1);
pub const CYW43_SUP_IDREQUIRED = @as(c_int, 2);
pub const CYW43_SUP_AUTHENTICATING = @as(c_int, 3);
pub const CYW43_SUP_AUTHENTICATED = @as(c_int, 4);
pub const CYW43_SUP_KEYXCHANGE = @as(c_int, 5);
pub const CYW43_SUP_KEYED = @as(c_int, 6);
pub const CYW43_SUP_TIMEOUT = @as(c_int, 7);
pub const CYW43_SUP_LAST_BASIC_STATE = @as(c_int, 8);
pub const CYW43_SUP_KEYXCHANGE_WAIT_M1 = CYW43_SUP_AUTHENTICATED;
pub const CYW43_SUP_KEYXCHANGE_PREP_M2 = CYW43_SUP_KEYXCHANGE;
pub const CYW43_SUP_KEYXCHANGE_WAIT_M3 = CYW43_SUP_LAST_BASIC_STATE;
pub const CYW43_SUP_KEYXCHANGE_PREP_M4 = @as(c_int, 9);
pub const CYW43_SUP_KEYXCHANGE_WAIT_G1 = @as(c_int, 10);
pub const CYW43_SUP_KEYXCHANGE_PREP_G2 = @as(c_int, 11);
pub const CYW43_REASON_INITIAL_ASSOC = @as(c_int, 0);
pub const CYW43_REASON_LOW_RSSI = @as(c_int, 1);
pub const CYW43_REASON_DEAUTH = @as(c_int, 2);
pub const CYW43_REASON_DISASSOC = @as(c_int, 3);
pub const CYW43_REASON_BCNS_LOST = @as(c_int, 4);
pub const CYW43_REASON_FAST_ROAM_FAILED = @as(c_int, 5);
pub const CYW43_REASON_DIRECTED_ROAM = @as(c_int, 6);
pub const CYW43_REASON_TSPEC_REJECTED = @as(c_int, 7);
pub const CYW43_REASON_BETTER_AP = @as(c_int, 8);
pub const CYW43_REASON_PRUNE_ENCR_MISMATCH = @as(c_int, 1);
pub const CYW43_REASON_PRUNE_BCAST_BSSID = @as(c_int, 2);
pub const CYW43_REASON_PRUNE_MAC_DENY = @as(c_int, 3);
pub const CYW43_REASON_PRUNE_MAC_NA = @as(c_int, 4);
pub const CYW43_REASON_PRUNE_REG_PASSV = @as(c_int, 5);
pub const CYW43_REASON_PRUNE_SPCT_MGMT = @as(c_int, 6);
pub const CYW43_REASON_PRUNE_RADAR = @as(c_int, 7);
pub const CYW43_REASON_RSN_MISMATCH = @as(c_int, 8);
pub const CYW43_REASON_PRUNE_NO_COMMON_RATES = @as(c_int, 9);
pub const CYW43_REASON_PRUNE_BASIC_RATES = @as(c_int, 10);
pub const CYW43_REASON_PRUNE_CCXFAST_PREVAP = @as(c_int, 11);
pub const CYW43_REASON_PRUNE_CIPHER_NA = @as(c_int, 12);
pub const CYW43_REASON_PRUNE_KNOWN_STA = @as(c_int, 13);
pub const CYW43_REASON_PRUNE_CCXFAST_DROAM = @as(c_int, 14);
pub const CYW43_REASON_PRUNE_WDS_PEER = @as(c_int, 15);
pub const CYW43_REASON_PRUNE_QBSS_LOAD = @as(c_int, 16);
pub const CYW43_REASON_PRUNE_HOME_AP = @as(c_int, 17);
pub const CYW43_REASON_PRUNE_AP_BLOCKED = @as(c_int, 18);
pub const CYW43_REASON_PRUNE_NO_DIAG_SUPPORT = @as(c_int, 19);
pub const CYW43_REASON_SUP_OTHER = @as(c_int, 0);
pub const CYW43_REASON_SUP_DECRYPT_KEY_DATA = @as(c_int, 1);
pub const CYW43_REASON_SUP_BAD_UCAST_WEP128 = @as(c_int, 2);
pub const CYW43_REASON_SUP_BAD_UCAST_WEP40 = @as(c_int, 3);
pub const CYW43_REASON_SUP_UNSUP_KEY_LEN = @as(c_int, 4);
pub const CYW43_REASON_SUP_PW_KEY_CIPHER = @as(c_int, 5);
pub const CYW43_REASON_SUP_MSG3_TOO_MANY_IE = @as(c_int, 6);
pub const CYW43_REASON_SUP_MSG3_IE_MISMATCH = @as(c_int, 7);
pub const CYW43_REASON_SUP_NO_INSTALL_FLAG = @as(c_int, 8);
pub const CYW43_REASON_SUP_MSG3_NO_GTK = @as(c_int, 9);
pub const CYW43_REASON_SUP_GRP_KEY_CIPHER = @as(c_int, 10);
pub const CYW43_REASON_SUP_GRP_MSG1_NO_GTK = @as(c_int, 11);
pub const CYW43_REASON_SUP_GTK_DECRYPT_FAIL = @as(c_int, 12);
pub const CYW43_REASON_SUP_SEND_FAIL = @as(c_int, 13);
pub const CYW43_REASON_SUP_DEAUTH = @as(c_int, 14);
pub const CYW43_REASON_SUP_WPA_PSK_TMO = @as(c_int, 15);
pub const CYW43_AUTH_OPEN = @as(c_int, 0);
pub const CYW43_AUTH_WPA_TKIP_PSK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200002, .hex);
pub const CYW43_AUTH_WPA2_AES_PSK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400004, .hex);
pub const CYW43_AUTH_WPA2_MIXED_PSK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400006, .hex);
pub const CYW43_AUTH_WPA3_SAE_AES_PSK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000004, .hex);
pub const CYW43_AUTH_WPA3_WPA2_AES_PSK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01400004, .hex);
pub const CYW43_NO_POWERSAVE_MODE = @as(c_int, 0);
pub const CYW43_PM1_POWERSAVE_MODE = @as(c_int, 1);
pub const CYW43_PM2_POWERSAVE_MODE = @as(c_int, 2);
pub const CYW43_BUS_MAX_BLOCK_SIZE = @as(c_int, 64);
pub const CYW43_BACKPLANE_READ_PAD_LEN_BYTES = @as(c_int, 16);
pub const CYW43_LL_STATE_SIZE_WORDS = ((@as(c_int, 526) + @as(c_int, 1)) + (@import("std").zig.c_translation.MacroArithmetic.div(CYW43_BACKPLANE_READ_PAD_LEN_BYTES, @as(c_int, 4)) + @as(c_int, 1))) + (CYW43_INCLUDE_LEGACY_F1_OVERFLOW_WORKAROUND_VARIABLES * @as(c_int, 4));
pub const CYW43_CHANNEL_NONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hex);
pub const _STRING_H_ = "";
pub const _STRINGS_H_ = "";
pub const _SIZE_T_DECLARED = "";
pub const _SSP_STRINGS_H_ = "";
pub const _SSP_STRING_H_ = "";
pub const __ssp_bos_check3 = @compileError("unable to translate macro: undefined identifier `__builtin___`");
// /usr/arm-none-eabi/include/ssp/string.h:51:9
pub const __ssp_bos_check2 = @compileError("unable to translate macro: undefined identifier `__builtin___`");
// /usr/arm-none-eabi/include/ssp/string.h:56:9
pub const __ssp_bos_icheck3_restrict = @compileError("unable to translate macro: undefined identifier `__`");
// /usr/arm-none-eabi/include/ssp/string.h:61:9
pub const __ssp_bos_icheck3 = @compileError("unable to translate macro: undefined identifier `__`");
// /usr/arm-none-eabi/include/ssp/string.h:68:9
pub const __ssp_bos_icheck2_restrict = @compileError("unable to translate macro: undefined identifier `__`");
// /usr/arm-none-eabi/include/ssp/string.h:75:9
pub const CYW43_VERSION_MAJOR = @as(c_int, 1);
pub const CYW43_VERSION_MINOR = @as(c_int, 1);
pub const CYW43_VERSION_MICRO = @as(c_int, 0);
pub const CYW43_VERSION = ((CYW43_VERSION_MAJOR << @as(c_int, 16)) | (CYW43_VERSION_MINOR << @as(c_int, 8))) | CYW43_VERSION_MICRO;
pub const CYW43_TRACE_ASYNC_EV = @as(c_int, 0x0001);
pub const CYW43_TRACE_ETH_TX = @as(c_int, 0x0002);
pub const CYW43_TRACE_ETH_RX = @as(c_int, 0x0004);
pub const CYW43_TRACE_ETH_FULL = @as(c_int, 0x0008);
pub const CYW43_TRACE_MAC = @as(c_int, 0x0010);
pub const CYW43_LINK_DOWN = @as(c_int, 0);
pub const CYW43_LINK_JOIN = @as(c_int, 1);
pub const CYW43_LINK_NOIP = @as(c_int, 2);
pub const CYW43_LINK_UP = @as(c_int, 3);
pub const CYW43_LINK_FAIL = -@as(c_int, 1);
pub const CYW43_LINK_NONET = -@as(c_int, 2);
pub const CYW43_LINK_BADAUTH = -@as(c_int, 3);
pub const CYW43_DEFAULT_PM = CYW43_PERFORMANCE_PM;
pub const CYW43_NONE_PM = cyw43_pm_value(CYW43_NO_POWERSAVE_MODE, @as(c_int, 10), @as(c_int, 0), @as(c_int, 0), @as(c_int, 0));
pub const CYW43_AGGRESSIVE_PM = cyw43_pm_value(CYW43_PM1_POWERSAVE_MODE, @as(c_int, 10), @as(c_int, 0), @as(c_int, 0), @as(c_int, 0));
pub const CYW43_PERFORMANCE_PM = cyw43_pm_value(CYW43_PM2_POWERSAVE_MODE, @as(c_int, 200), @as(c_int, 1), @as(c_int, 1), @as(c_int, 10));
pub const CYW43_INCLUDED_CYW43_COUNTRY_H = "";
pub inline fn CYW43_COUNTRY(A: anytype, B: anytype, REV: anytype) @TypeOf((@import("std").zig.c_translation.cast(u8, A) | (@import("std").zig.c_translation.cast(u8, B) << @as(c_int, 8))) | (REV << @as(c_int, 16))) {
    _ = &A;
    _ = &B;
    _ = &REV;
    return (@import("std").zig.c_translation.cast(u8, A) | (@import("std").zig.c_translation.cast(u8, B) << @as(c_int, 8))) | (REV << @as(c_int, 16));
}
pub const CYW43_COUNTRY_WORLDWIDE = CYW43_COUNTRY('X', 'X', @as(c_int, 0));
pub const CYW43_COUNTRY_AUSTRALIA = CYW43_COUNTRY('A', 'U', @as(c_int, 0));
pub const CYW43_COUNTRY_AUSTRIA = CYW43_COUNTRY('A', 'T', @as(c_int, 0));
pub const CYW43_COUNTRY_BELGIUM = CYW43_COUNTRY('B', 'E', @as(c_int, 0));
pub const CYW43_COUNTRY_BRAZIL = CYW43_COUNTRY('B', 'R', @as(c_int, 0));
pub const CYW43_COUNTRY_CANADA = CYW43_COUNTRY('C', 'A', @as(c_int, 0));
pub const CYW43_COUNTRY_CHILE = CYW43_COUNTRY('C', 'L', @as(c_int, 0));
pub const CYW43_COUNTRY_CHINA = CYW43_COUNTRY('C', 'N', @as(c_int, 0));
pub const CYW43_COUNTRY_COLOMBIA = CYW43_COUNTRY('C', 'O', @as(c_int, 0));
pub const CYW43_COUNTRY_CZECH_REPUBLIC = CYW43_COUNTRY('C', 'Z', @as(c_int, 0));
pub const CYW43_COUNTRY_DENMARK = CYW43_COUNTRY('D', 'K', @as(c_int, 0));
pub const CYW43_COUNTRY_ESTONIA = CYW43_COUNTRY('E', 'E', @as(c_int, 0));
pub const CYW43_COUNTRY_FINLAND = CYW43_COUNTRY('F', 'I', @as(c_int, 0));
pub const CYW43_COUNTRY_FRANCE = CYW43_COUNTRY('F', 'R', @as(c_int, 0));
pub const CYW43_COUNTRY_GERMANY = CYW43_COUNTRY('D', 'E', @as(c_int, 0));
pub const CYW43_COUNTRY_GREECE = CYW43_COUNTRY('G', 'R', @as(c_int, 0));
pub const CYW43_COUNTRY_HONG_KONG = CYW43_COUNTRY('H', 'K', @as(c_int, 0));
pub const CYW43_COUNTRY_HUNGARY = CYW43_COUNTRY('H', 'U', @as(c_int, 0));
pub const CYW43_COUNTRY_ICELAND = CYW43_COUNTRY('I', 'S', @as(c_int, 0));
pub const CYW43_COUNTRY_INDIA = CYW43_COUNTRY('I', 'N', @as(c_int, 0));
pub const CYW43_COUNTRY_ISRAEL = CYW43_COUNTRY('I', 'L', @as(c_int, 0));
pub const CYW43_COUNTRY_ITALY = CYW43_COUNTRY('I', 'T', @as(c_int, 0));
pub const CYW43_COUNTRY_JAPAN = CYW43_COUNTRY('J', 'P', @as(c_int, 0));
pub const CYW43_COUNTRY_KENYA = CYW43_COUNTRY('K', 'E', @as(c_int, 0));
pub const CYW43_COUNTRY_LATVIA = CYW43_COUNTRY('L', 'V', @as(c_int, 0));
pub const CYW43_COUNTRY_LIECHTENSTEIN = CYW43_COUNTRY('L', 'I', @as(c_int, 0));
pub const CYW43_COUNTRY_LITHUANIA = CYW43_COUNTRY('L', 'T', @as(c_int, 0));
pub const CYW43_COUNTRY_LUXEMBOURG = CYW43_COUNTRY('L', 'U', @as(c_int, 0));
pub const CYW43_COUNTRY_MALAYSIA = CYW43_COUNTRY('M', 'Y', @as(c_int, 0));
pub const CYW43_COUNTRY_MALTA = CYW43_COUNTRY('M', 'T', @as(c_int, 0));
pub const CYW43_COUNTRY_MEXICO = CYW43_COUNTRY('M', 'X', @as(c_int, 0));
pub const CYW43_COUNTRY_NETHERLANDS = CYW43_COUNTRY('N', 'L', @as(c_int, 0));
pub const CYW43_COUNTRY_NEW_ZEALAND = CYW43_COUNTRY('N', 'Z', @as(c_int, 0));
pub const CYW43_COUNTRY_NIGERIA = CYW43_COUNTRY('N', 'G', @as(c_int, 0));
pub const CYW43_COUNTRY_NORWAY = CYW43_COUNTRY('N', 'O', @as(c_int, 0));
pub const CYW43_COUNTRY_PERU = CYW43_COUNTRY('P', 'E', @as(c_int, 0));
pub const CYW43_COUNTRY_PHILIPPINES = CYW43_COUNTRY('P', 'H', @as(c_int, 0));
pub const CYW43_COUNTRY_POLAND = CYW43_COUNTRY('P', 'L', @as(c_int, 0));
pub const CYW43_COUNTRY_PORTUGAL = CYW43_COUNTRY('P', 'T', @as(c_int, 0));
pub const CYW43_COUNTRY_SINGAPORE = CYW43_COUNTRY('S', 'G', @as(c_int, 0));
pub const CYW43_COUNTRY_SLOVAKIA = CYW43_COUNTRY('S', 'K', @as(c_int, 0));
pub const CYW43_COUNTRY_SLOVENIA = CYW43_COUNTRY('S', 'I', @as(c_int, 0));
pub const CYW43_COUNTRY_SOUTH_AFRICA = CYW43_COUNTRY('Z', 'A', @as(c_int, 0));
pub const CYW43_COUNTRY_SOUTH_KOREA = CYW43_COUNTRY('K', 'R', @as(c_int, 0));
pub const CYW43_COUNTRY_SPAIN = CYW43_COUNTRY('E', 'S', @as(c_int, 0));
pub const CYW43_COUNTRY_SWEDEN = CYW43_COUNTRY('S', 'E', @as(c_int, 0));
pub const CYW43_COUNTRY_SWITZERLAND = CYW43_COUNTRY('C', 'H', @as(c_int, 0));
pub const CYW43_COUNTRY_TAIWAN = CYW43_COUNTRY('T', 'W', @as(c_int, 0));
pub const CYW43_COUNTRY_THAILAND = CYW43_COUNTRY('T', 'H', @as(c_int, 0));
pub const CYW43_COUNTRY_TURKEY = CYW43_COUNTRY('T', 'R', @as(c_int, 0));
pub const CYW43_COUNTRY_UK = CYW43_COUNTRY('G', 'B', @as(c_int, 0));
pub const CYW43_COUNTRY_USA = CYW43_COUNTRY('U', 'S', @as(c_int, 0));
pub const _PICO_ASYNC_CONTEXT_H = "";
pub const ASYNC_CONTEXT_FLAG_CALLBACK_FROM_NON_IRQ = @as(c_int, 0x1);
pub const ASYNC_CONTEXT_FLAG_CALLBACK_FROM_IRQ = @as(c_int, 0x2);
pub const ASYNC_CONTEXT_FLAG_POLLED = @as(c_int, 0x4);
pub const _PICO_CYW43_ARCH_ARCH_THREADSAFE_BACKGROUND_H = "";
pub const PARAM_ASSERTIONS_ENABLED_PICO_CYW43_ARCH = @as(c_int, 0);
pub const PICO_CYW43_ARCH_DEBUG_ENABLED = @as(c_int, 1);
pub const PICO_CYW43_ARCH_DEFAULT_COUNTRY_CODE = CYW43_COUNTRY_WORLDWIDE;
pub const _PICO_STDLIB_H = "";
pub const _PICO_STDIO_H = "";
pub const PICO_STDOUT_MUTEX = @as(c_int, 1);
pub const PICO_STDIO_ENABLE_CRLF_SUPPORT = @as(c_int, 1);
pub const PICO_STDIO_DEFAULT_CRLF = @as(c_int, 1);
pub const PICO_STDIO_STACK_BUFFER_SIZE = @as(c_int, 128);
pub const PICO_STDIO_DEADLOCK_TIMEOUT_MS = @as(c_int, 1000);
pub const PICO_STDIO_SHORT_CIRCUIT_CLIB_FUNCS = @as(c_int, 1);
pub const __need_va_list = "";
pub const __need_va_arg = "";
pub const __need___va_copy = "";
pub const __need_va_copy = "";
pub const __STDARG_H = "";
pub const _VA_LIST = "";
pub const va_start = @compileError("unable to translate macro: undefined identifier `__builtin_va_start`");
// /home/ianic/.build/zig/zig-x86_64-linux-0.15.1/lib/include/__stdarg_va_arg.h:17:9
pub const va_end = @compileError("unable to translate macro: undefined identifier `__builtin_va_end`");
// /home/ianic/.build/zig/zig-x86_64-linux-0.15.1/lib/include/__stdarg_va_arg.h:19:9
pub const va_arg = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// /home/ianic/.build/zig/zig-x86_64-linux-0.15.1/lib/include/__stdarg_va_arg.h:20:9
pub const __va_copy = @compileError("unable to translate macro: undefined identifier `__builtin_va_copy`");
// /home/ianic/.build/zig/zig-x86_64-linux-0.15.1/lib/include/__stdarg___va_copy.h:11:9
pub const va_copy = @compileError("unable to translate macro: undefined identifier `__builtin_va_copy`");
// /home/ianic/.build/zig/zig-x86_64-linux-0.15.1/lib/include/__stdarg_va_copy.h:11:9
pub const _HARDWARE_UART_H = "";
pub const _HARDWARE_STRUCTS_UART_H = "";
pub const _HARDWARE_REGS_UART_H = "";
pub const UART_UARTDR_OFFSET = _u(@as(c_int, 0x00000000));
pub const UART_UARTDR_BITS = _u(@as(c_int, 0x00000fff));
pub const UART_UARTDR_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTDR_OE_RESET = "-";
pub const UART_UARTDR_OE_BITS = _u(@as(c_int, 0x00000800));
pub const UART_UARTDR_OE_MSB = _u(@as(c_int, 11));
pub const UART_UARTDR_OE_LSB = _u(@as(c_int, 11));
pub const UART_UARTDR_OE_ACCESS = "RO";
pub const UART_UARTDR_BE_RESET = "-";
pub const UART_UARTDR_BE_BITS = _u(@as(c_int, 0x00000400));
pub const UART_UARTDR_BE_MSB = _u(@as(c_int, 10));
pub const UART_UARTDR_BE_LSB = _u(@as(c_int, 10));
pub const UART_UARTDR_BE_ACCESS = "RO";
pub const UART_UARTDR_PE_RESET = "-";
pub const UART_UARTDR_PE_BITS = _u(@as(c_int, 0x00000200));
pub const UART_UARTDR_PE_MSB = _u(@as(c_int, 9));
pub const UART_UARTDR_PE_LSB = _u(@as(c_int, 9));
pub const UART_UARTDR_PE_ACCESS = "RO";
pub const UART_UARTDR_FE_RESET = "-";
pub const UART_UARTDR_FE_BITS = _u(@as(c_int, 0x00000100));
pub const UART_UARTDR_FE_MSB = _u(@as(c_int, 8));
pub const UART_UARTDR_FE_LSB = _u(@as(c_int, 8));
pub const UART_UARTDR_FE_ACCESS = "RO";
pub const UART_UARTDR_DATA_RESET = "-";
pub const UART_UARTDR_DATA_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTDR_DATA_MSB = _u(@as(c_int, 7));
pub const UART_UARTDR_DATA_LSB = _u(@as(c_int, 0));
pub const UART_UARTDR_DATA_ACCESS = "RWF";
pub const UART_UARTRSR_OFFSET = _u(@as(c_int, 0x00000004));
pub const UART_UARTRSR_BITS = _u(@as(c_int, 0x0000000f));
pub const UART_UARTRSR_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTRSR_OE_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRSR_OE_BITS = _u(@as(c_int, 0x00000008));
pub const UART_UARTRSR_OE_MSB = _u(@as(c_int, 3));
pub const UART_UARTRSR_OE_LSB = _u(@as(c_int, 3));
pub const UART_UARTRSR_OE_ACCESS = "WC";
pub const UART_UARTRSR_BE_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRSR_BE_BITS = _u(@as(c_int, 0x00000004));
pub const UART_UARTRSR_BE_MSB = _u(@as(c_int, 2));
pub const UART_UARTRSR_BE_LSB = _u(@as(c_int, 2));
pub const UART_UARTRSR_BE_ACCESS = "WC";
pub const UART_UARTRSR_PE_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRSR_PE_BITS = _u(@as(c_int, 0x00000002));
pub const UART_UARTRSR_PE_MSB = _u(@as(c_int, 1));
pub const UART_UARTRSR_PE_LSB = _u(@as(c_int, 1));
pub const UART_UARTRSR_PE_ACCESS = "WC";
pub const UART_UARTRSR_FE_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRSR_FE_BITS = _u(@as(c_int, 0x00000001));
pub const UART_UARTRSR_FE_MSB = _u(@as(c_int, 0));
pub const UART_UARTRSR_FE_LSB = _u(@as(c_int, 0));
pub const UART_UARTRSR_FE_ACCESS = "WC";
pub const UART_UARTFR_OFFSET = _u(@as(c_int, 0x00000018));
pub const UART_UARTFR_BITS = _u(@as(c_int, 0x000001ff));
pub const UART_UARTFR_RESET = _u(@as(c_int, 0x00000090));
pub const UART_UARTFR_RI_RESET = "-";
pub const UART_UARTFR_RI_BITS = _u(@as(c_int, 0x00000100));
pub const UART_UARTFR_RI_MSB = _u(@as(c_int, 8));
pub const UART_UARTFR_RI_LSB = _u(@as(c_int, 8));
pub const UART_UARTFR_RI_ACCESS = "RO";
pub const UART_UARTFR_TXFE_RESET = _u(@as(c_int, 0x1));
pub const UART_UARTFR_TXFE_BITS = _u(@as(c_int, 0x00000080));
pub const UART_UARTFR_TXFE_MSB = _u(@as(c_int, 7));
pub const UART_UARTFR_TXFE_LSB = _u(@as(c_int, 7));
pub const UART_UARTFR_TXFE_ACCESS = "RO";
pub const UART_UARTFR_RXFF_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTFR_RXFF_BITS = _u(@as(c_int, 0x00000040));
pub const UART_UARTFR_RXFF_MSB = _u(@as(c_int, 6));
pub const UART_UARTFR_RXFF_LSB = _u(@as(c_int, 6));
pub const UART_UARTFR_RXFF_ACCESS = "RO";
pub const UART_UARTFR_TXFF_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTFR_TXFF_BITS = _u(@as(c_int, 0x00000020));
pub const UART_UARTFR_TXFF_MSB = _u(@as(c_int, 5));
pub const UART_UARTFR_TXFF_LSB = _u(@as(c_int, 5));
pub const UART_UARTFR_TXFF_ACCESS = "RO";
pub const UART_UARTFR_RXFE_RESET = _u(@as(c_int, 0x1));
pub const UART_UARTFR_RXFE_BITS = _u(@as(c_int, 0x00000010));
pub const UART_UARTFR_RXFE_MSB = _u(@as(c_int, 4));
pub const UART_UARTFR_RXFE_LSB = _u(@as(c_int, 4));
pub const UART_UARTFR_RXFE_ACCESS = "RO";
pub const UART_UARTFR_BUSY_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTFR_BUSY_BITS = _u(@as(c_int, 0x00000008));
pub const UART_UARTFR_BUSY_MSB = _u(@as(c_int, 3));
pub const UART_UARTFR_BUSY_LSB = _u(@as(c_int, 3));
pub const UART_UARTFR_BUSY_ACCESS = "RO";
pub const UART_UARTFR_DCD_RESET = "-";
pub const UART_UARTFR_DCD_BITS = _u(@as(c_int, 0x00000004));
pub const UART_UARTFR_DCD_MSB = _u(@as(c_int, 2));
pub const UART_UARTFR_DCD_LSB = _u(@as(c_int, 2));
pub const UART_UARTFR_DCD_ACCESS = "RO";
pub const UART_UARTFR_DSR_RESET = "-";
pub const UART_UARTFR_DSR_BITS = _u(@as(c_int, 0x00000002));
pub const UART_UARTFR_DSR_MSB = _u(@as(c_int, 1));
pub const UART_UARTFR_DSR_LSB = _u(@as(c_int, 1));
pub const UART_UARTFR_DSR_ACCESS = "RO";
pub const UART_UARTFR_CTS_RESET = "-";
pub const UART_UARTFR_CTS_BITS = _u(@as(c_int, 0x00000001));
pub const UART_UARTFR_CTS_MSB = _u(@as(c_int, 0));
pub const UART_UARTFR_CTS_LSB = _u(@as(c_int, 0));
pub const UART_UARTFR_CTS_ACCESS = "RO";
pub const UART_UARTILPR_OFFSET = _u(@as(c_int, 0x00000020));
pub const UART_UARTILPR_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTILPR_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTILPR_ILPDVSR_RESET = _u(@as(c_int, 0x00));
pub const UART_UARTILPR_ILPDVSR_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTILPR_ILPDVSR_MSB = _u(@as(c_int, 7));
pub const UART_UARTILPR_ILPDVSR_LSB = _u(@as(c_int, 0));
pub const UART_UARTILPR_ILPDVSR_ACCESS = "RW";
pub const UART_UARTIBRD_OFFSET = _u(@as(c_int, 0x00000024));
pub const UART_UARTIBRD_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const UART_UARTIBRD_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTIBRD_BAUD_DIVINT_RESET = _u(@as(c_int, 0x0000));
pub const UART_UARTIBRD_BAUD_DIVINT_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ffff, .hex));
pub const UART_UARTIBRD_BAUD_DIVINT_MSB = _u(@as(c_int, 15));
pub const UART_UARTIBRD_BAUD_DIVINT_LSB = _u(@as(c_int, 0));
pub const UART_UARTIBRD_BAUD_DIVINT_ACCESS = "RW";
pub const UART_UARTFBRD_OFFSET = _u(@as(c_int, 0x00000028));
pub const UART_UARTFBRD_BITS = _u(@as(c_int, 0x0000003f));
pub const UART_UARTFBRD_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTFBRD_BAUD_DIVFRAC_RESET = _u(@as(c_int, 0x00));
pub const UART_UARTFBRD_BAUD_DIVFRAC_BITS = _u(@as(c_int, 0x0000003f));
pub const UART_UARTFBRD_BAUD_DIVFRAC_MSB = _u(@as(c_int, 5));
pub const UART_UARTFBRD_BAUD_DIVFRAC_LSB = _u(@as(c_int, 0));
pub const UART_UARTFBRD_BAUD_DIVFRAC_ACCESS = "RW";
pub const UART_UARTLCR_H_OFFSET = _u(@as(c_int, 0x0000002c));
pub const UART_UARTLCR_H_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTLCR_H_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTLCR_H_SPS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTLCR_H_SPS_BITS = _u(@as(c_int, 0x00000080));
pub const UART_UARTLCR_H_SPS_MSB = _u(@as(c_int, 7));
pub const UART_UARTLCR_H_SPS_LSB = _u(@as(c_int, 7));
pub const UART_UARTLCR_H_SPS_ACCESS = "RW";
pub const UART_UARTLCR_H_WLEN_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTLCR_H_WLEN_BITS = _u(@as(c_int, 0x00000060));
pub const UART_UARTLCR_H_WLEN_MSB = _u(@as(c_int, 6));
pub const UART_UARTLCR_H_WLEN_LSB = _u(@as(c_int, 5));
pub const UART_UARTLCR_H_WLEN_ACCESS = "RW";
pub const UART_UARTLCR_H_FEN_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTLCR_H_FEN_BITS = _u(@as(c_int, 0x00000010));
pub const UART_UARTLCR_H_FEN_MSB = _u(@as(c_int, 4));
pub const UART_UARTLCR_H_FEN_LSB = _u(@as(c_int, 4));
pub const UART_UARTLCR_H_FEN_ACCESS = "RW";
pub const UART_UARTLCR_H_STP2_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTLCR_H_STP2_BITS = _u(@as(c_int, 0x00000008));
pub const UART_UARTLCR_H_STP2_MSB = _u(@as(c_int, 3));
pub const UART_UARTLCR_H_STP2_LSB = _u(@as(c_int, 3));
pub const UART_UARTLCR_H_STP2_ACCESS = "RW";
pub const UART_UARTLCR_H_EPS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTLCR_H_EPS_BITS = _u(@as(c_int, 0x00000004));
pub const UART_UARTLCR_H_EPS_MSB = _u(@as(c_int, 2));
pub const UART_UARTLCR_H_EPS_LSB = _u(@as(c_int, 2));
pub const UART_UARTLCR_H_EPS_ACCESS = "RW";
pub const UART_UARTLCR_H_PEN_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTLCR_H_PEN_BITS = _u(@as(c_int, 0x00000002));
pub const UART_UARTLCR_H_PEN_MSB = _u(@as(c_int, 1));
pub const UART_UARTLCR_H_PEN_LSB = _u(@as(c_int, 1));
pub const UART_UARTLCR_H_PEN_ACCESS = "RW";
pub const UART_UARTLCR_H_BRK_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTLCR_H_BRK_BITS = _u(@as(c_int, 0x00000001));
pub const UART_UARTLCR_H_BRK_MSB = _u(@as(c_int, 0));
pub const UART_UARTLCR_H_BRK_LSB = _u(@as(c_int, 0));
pub const UART_UARTLCR_H_BRK_ACCESS = "RW";
pub const UART_UARTCR_OFFSET = _u(@as(c_int, 0x00000030));
pub const UART_UARTCR_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0000ff87, .hex));
pub const UART_UARTCR_RESET = _u(@as(c_int, 0x00000300));
pub const UART_UARTCR_CTSEN_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTCR_CTSEN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const UART_UARTCR_CTSEN_MSB = _u(@as(c_int, 15));
pub const UART_UARTCR_CTSEN_LSB = _u(@as(c_int, 15));
pub const UART_UARTCR_CTSEN_ACCESS = "RW";
pub const UART_UARTCR_RTSEN_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTCR_RTSEN_BITS = _u(@as(c_int, 0x00004000));
pub const UART_UARTCR_RTSEN_MSB = _u(@as(c_int, 14));
pub const UART_UARTCR_RTSEN_LSB = _u(@as(c_int, 14));
pub const UART_UARTCR_RTSEN_ACCESS = "RW";
pub const UART_UARTCR_OUT2_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTCR_OUT2_BITS = _u(@as(c_int, 0x00002000));
pub const UART_UARTCR_OUT2_MSB = _u(@as(c_int, 13));
pub const UART_UARTCR_OUT2_LSB = _u(@as(c_int, 13));
pub const UART_UARTCR_OUT2_ACCESS = "RW";
pub const UART_UARTCR_OUT1_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTCR_OUT1_BITS = _u(@as(c_int, 0x00001000));
pub const UART_UARTCR_OUT1_MSB = _u(@as(c_int, 12));
pub const UART_UARTCR_OUT1_LSB = _u(@as(c_int, 12));
pub const UART_UARTCR_OUT1_ACCESS = "RW";
pub const UART_UARTCR_RTS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTCR_RTS_BITS = _u(@as(c_int, 0x00000800));
pub const UART_UARTCR_RTS_MSB = _u(@as(c_int, 11));
pub const UART_UARTCR_RTS_LSB = _u(@as(c_int, 11));
pub const UART_UARTCR_RTS_ACCESS = "RW";
pub const UART_UARTCR_DTR_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTCR_DTR_BITS = _u(@as(c_int, 0x00000400));
pub const UART_UARTCR_DTR_MSB = _u(@as(c_int, 10));
pub const UART_UARTCR_DTR_LSB = _u(@as(c_int, 10));
pub const UART_UARTCR_DTR_ACCESS = "RW";
pub const UART_UARTCR_RXE_RESET = _u(@as(c_int, 0x1));
pub const UART_UARTCR_RXE_BITS = _u(@as(c_int, 0x00000200));
pub const UART_UARTCR_RXE_MSB = _u(@as(c_int, 9));
pub const UART_UARTCR_RXE_LSB = _u(@as(c_int, 9));
pub const UART_UARTCR_RXE_ACCESS = "RW";
pub const UART_UARTCR_TXE_RESET = _u(@as(c_int, 0x1));
pub const UART_UARTCR_TXE_BITS = _u(@as(c_int, 0x00000100));
pub const UART_UARTCR_TXE_MSB = _u(@as(c_int, 8));
pub const UART_UARTCR_TXE_LSB = _u(@as(c_int, 8));
pub const UART_UARTCR_TXE_ACCESS = "RW";
pub const UART_UARTCR_LBE_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTCR_LBE_BITS = _u(@as(c_int, 0x00000080));
pub const UART_UARTCR_LBE_MSB = _u(@as(c_int, 7));
pub const UART_UARTCR_LBE_LSB = _u(@as(c_int, 7));
pub const UART_UARTCR_LBE_ACCESS = "RW";
pub const UART_UARTCR_SIRLP_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTCR_SIRLP_BITS = _u(@as(c_int, 0x00000004));
pub const UART_UARTCR_SIRLP_MSB = _u(@as(c_int, 2));
pub const UART_UARTCR_SIRLP_LSB = _u(@as(c_int, 2));
pub const UART_UARTCR_SIRLP_ACCESS = "RW";
pub const UART_UARTCR_SIREN_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTCR_SIREN_BITS = _u(@as(c_int, 0x00000002));
pub const UART_UARTCR_SIREN_MSB = _u(@as(c_int, 1));
pub const UART_UARTCR_SIREN_LSB = _u(@as(c_int, 1));
pub const UART_UARTCR_SIREN_ACCESS = "RW";
pub const UART_UARTCR_UARTEN_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTCR_UARTEN_BITS = _u(@as(c_int, 0x00000001));
pub const UART_UARTCR_UARTEN_MSB = _u(@as(c_int, 0));
pub const UART_UARTCR_UARTEN_LSB = _u(@as(c_int, 0));
pub const UART_UARTCR_UARTEN_ACCESS = "RW";
pub const UART_UARTIFLS_OFFSET = _u(@as(c_int, 0x00000034));
pub const UART_UARTIFLS_BITS = _u(@as(c_int, 0x0000003f));
pub const UART_UARTIFLS_RESET = _u(@as(c_int, 0x00000012));
pub const UART_UARTIFLS_RXIFLSEL_RESET = _u(@as(c_int, 0x2));
pub const UART_UARTIFLS_RXIFLSEL_BITS = _u(@as(c_int, 0x00000038));
pub const UART_UARTIFLS_RXIFLSEL_MSB = _u(@as(c_int, 5));
pub const UART_UARTIFLS_RXIFLSEL_LSB = _u(@as(c_int, 3));
pub const UART_UARTIFLS_RXIFLSEL_ACCESS = "RW";
pub const UART_UARTIFLS_TXIFLSEL_RESET = _u(@as(c_int, 0x2));
pub const UART_UARTIFLS_TXIFLSEL_BITS = _u(@as(c_int, 0x00000007));
pub const UART_UARTIFLS_TXIFLSEL_MSB = _u(@as(c_int, 2));
pub const UART_UARTIFLS_TXIFLSEL_LSB = _u(@as(c_int, 0));
pub const UART_UARTIFLS_TXIFLSEL_ACCESS = "RW";
pub const UART_UARTIMSC_OFFSET = _u(@as(c_int, 0x00000038));
pub const UART_UARTIMSC_BITS = _u(@as(c_int, 0x000007ff));
pub const UART_UARTIMSC_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTIMSC_OEIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_OEIM_BITS = _u(@as(c_int, 0x00000400));
pub const UART_UARTIMSC_OEIM_MSB = _u(@as(c_int, 10));
pub const UART_UARTIMSC_OEIM_LSB = _u(@as(c_int, 10));
pub const UART_UARTIMSC_OEIM_ACCESS = "RW";
pub const UART_UARTIMSC_BEIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_BEIM_BITS = _u(@as(c_int, 0x00000200));
pub const UART_UARTIMSC_BEIM_MSB = _u(@as(c_int, 9));
pub const UART_UARTIMSC_BEIM_LSB = _u(@as(c_int, 9));
pub const UART_UARTIMSC_BEIM_ACCESS = "RW";
pub const UART_UARTIMSC_PEIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_PEIM_BITS = _u(@as(c_int, 0x00000100));
pub const UART_UARTIMSC_PEIM_MSB = _u(@as(c_int, 8));
pub const UART_UARTIMSC_PEIM_LSB = _u(@as(c_int, 8));
pub const UART_UARTIMSC_PEIM_ACCESS = "RW";
pub const UART_UARTIMSC_FEIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_FEIM_BITS = _u(@as(c_int, 0x00000080));
pub const UART_UARTIMSC_FEIM_MSB = _u(@as(c_int, 7));
pub const UART_UARTIMSC_FEIM_LSB = _u(@as(c_int, 7));
pub const UART_UARTIMSC_FEIM_ACCESS = "RW";
pub const UART_UARTIMSC_RTIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_RTIM_BITS = _u(@as(c_int, 0x00000040));
pub const UART_UARTIMSC_RTIM_MSB = _u(@as(c_int, 6));
pub const UART_UARTIMSC_RTIM_LSB = _u(@as(c_int, 6));
pub const UART_UARTIMSC_RTIM_ACCESS = "RW";
pub const UART_UARTIMSC_TXIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_TXIM_BITS = _u(@as(c_int, 0x00000020));
pub const UART_UARTIMSC_TXIM_MSB = _u(@as(c_int, 5));
pub const UART_UARTIMSC_TXIM_LSB = _u(@as(c_int, 5));
pub const UART_UARTIMSC_TXIM_ACCESS = "RW";
pub const UART_UARTIMSC_RXIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_RXIM_BITS = _u(@as(c_int, 0x00000010));
pub const UART_UARTIMSC_RXIM_MSB = _u(@as(c_int, 4));
pub const UART_UARTIMSC_RXIM_LSB = _u(@as(c_int, 4));
pub const UART_UARTIMSC_RXIM_ACCESS = "RW";
pub const UART_UARTIMSC_DSRMIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_DSRMIM_BITS = _u(@as(c_int, 0x00000008));
pub const UART_UARTIMSC_DSRMIM_MSB = _u(@as(c_int, 3));
pub const UART_UARTIMSC_DSRMIM_LSB = _u(@as(c_int, 3));
pub const UART_UARTIMSC_DSRMIM_ACCESS = "RW";
pub const UART_UARTIMSC_DCDMIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_DCDMIM_BITS = _u(@as(c_int, 0x00000004));
pub const UART_UARTIMSC_DCDMIM_MSB = _u(@as(c_int, 2));
pub const UART_UARTIMSC_DCDMIM_LSB = _u(@as(c_int, 2));
pub const UART_UARTIMSC_DCDMIM_ACCESS = "RW";
pub const UART_UARTIMSC_CTSMIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_CTSMIM_BITS = _u(@as(c_int, 0x00000002));
pub const UART_UARTIMSC_CTSMIM_MSB = _u(@as(c_int, 1));
pub const UART_UARTIMSC_CTSMIM_LSB = _u(@as(c_int, 1));
pub const UART_UARTIMSC_CTSMIM_ACCESS = "RW";
pub const UART_UARTIMSC_RIMIM_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTIMSC_RIMIM_BITS = _u(@as(c_int, 0x00000001));
pub const UART_UARTIMSC_RIMIM_MSB = _u(@as(c_int, 0));
pub const UART_UARTIMSC_RIMIM_LSB = _u(@as(c_int, 0));
pub const UART_UARTIMSC_RIMIM_ACCESS = "RW";
pub const UART_UARTRIS_OFFSET = _u(@as(c_int, 0x0000003c));
pub const UART_UARTRIS_BITS = _u(@as(c_int, 0x000007ff));
pub const UART_UARTRIS_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTRIS_OERIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRIS_OERIS_BITS = _u(@as(c_int, 0x00000400));
pub const UART_UARTRIS_OERIS_MSB = _u(@as(c_int, 10));
pub const UART_UARTRIS_OERIS_LSB = _u(@as(c_int, 10));
pub const UART_UARTRIS_OERIS_ACCESS = "RO";
pub const UART_UARTRIS_BERIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRIS_BERIS_BITS = _u(@as(c_int, 0x00000200));
pub const UART_UARTRIS_BERIS_MSB = _u(@as(c_int, 9));
pub const UART_UARTRIS_BERIS_LSB = _u(@as(c_int, 9));
pub const UART_UARTRIS_BERIS_ACCESS = "RO";
pub const UART_UARTRIS_PERIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRIS_PERIS_BITS = _u(@as(c_int, 0x00000100));
pub const UART_UARTRIS_PERIS_MSB = _u(@as(c_int, 8));
pub const UART_UARTRIS_PERIS_LSB = _u(@as(c_int, 8));
pub const UART_UARTRIS_PERIS_ACCESS = "RO";
pub const UART_UARTRIS_FERIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRIS_FERIS_BITS = _u(@as(c_int, 0x00000080));
pub const UART_UARTRIS_FERIS_MSB = _u(@as(c_int, 7));
pub const UART_UARTRIS_FERIS_LSB = _u(@as(c_int, 7));
pub const UART_UARTRIS_FERIS_ACCESS = "RO";
pub const UART_UARTRIS_RTRIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRIS_RTRIS_BITS = _u(@as(c_int, 0x00000040));
pub const UART_UARTRIS_RTRIS_MSB = _u(@as(c_int, 6));
pub const UART_UARTRIS_RTRIS_LSB = _u(@as(c_int, 6));
pub const UART_UARTRIS_RTRIS_ACCESS = "RO";
pub const UART_UARTRIS_TXRIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRIS_TXRIS_BITS = _u(@as(c_int, 0x00000020));
pub const UART_UARTRIS_TXRIS_MSB = _u(@as(c_int, 5));
pub const UART_UARTRIS_TXRIS_LSB = _u(@as(c_int, 5));
pub const UART_UARTRIS_TXRIS_ACCESS = "RO";
pub const UART_UARTRIS_RXRIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTRIS_RXRIS_BITS = _u(@as(c_int, 0x00000010));
pub const UART_UARTRIS_RXRIS_MSB = _u(@as(c_int, 4));
pub const UART_UARTRIS_RXRIS_LSB = _u(@as(c_int, 4));
pub const UART_UARTRIS_RXRIS_ACCESS = "RO";
pub const UART_UARTRIS_DSRRMIS_RESET = "-";
pub const UART_UARTRIS_DSRRMIS_BITS = _u(@as(c_int, 0x00000008));
pub const UART_UARTRIS_DSRRMIS_MSB = _u(@as(c_int, 3));
pub const UART_UARTRIS_DSRRMIS_LSB = _u(@as(c_int, 3));
pub const UART_UARTRIS_DSRRMIS_ACCESS = "RO";
pub const UART_UARTRIS_DCDRMIS_RESET = "-";
pub const UART_UARTRIS_DCDRMIS_BITS = _u(@as(c_int, 0x00000004));
pub const UART_UARTRIS_DCDRMIS_MSB = _u(@as(c_int, 2));
pub const UART_UARTRIS_DCDRMIS_LSB = _u(@as(c_int, 2));
pub const UART_UARTRIS_DCDRMIS_ACCESS = "RO";
pub const UART_UARTRIS_CTSRMIS_RESET = "-";
pub const UART_UARTRIS_CTSRMIS_BITS = _u(@as(c_int, 0x00000002));
pub const UART_UARTRIS_CTSRMIS_MSB = _u(@as(c_int, 1));
pub const UART_UARTRIS_CTSRMIS_LSB = _u(@as(c_int, 1));
pub const UART_UARTRIS_CTSRMIS_ACCESS = "RO";
pub const UART_UARTRIS_RIRMIS_RESET = "-";
pub const UART_UARTRIS_RIRMIS_BITS = _u(@as(c_int, 0x00000001));
pub const UART_UARTRIS_RIRMIS_MSB = _u(@as(c_int, 0));
pub const UART_UARTRIS_RIRMIS_LSB = _u(@as(c_int, 0));
pub const UART_UARTRIS_RIRMIS_ACCESS = "RO";
pub const UART_UARTMIS_OFFSET = _u(@as(c_int, 0x00000040));
pub const UART_UARTMIS_BITS = _u(@as(c_int, 0x000007ff));
pub const UART_UARTMIS_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTMIS_OEMIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTMIS_OEMIS_BITS = _u(@as(c_int, 0x00000400));
pub const UART_UARTMIS_OEMIS_MSB = _u(@as(c_int, 10));
pub const UART_UARTMIS_OEMIS_LSB = _u(@as(c_int, 10));
pub const UART_UARTMIS_OEMIS_ACCESS = "RO";
pub const UART_UARTMIS_BEMIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTMIS_BEMIS_BITS = _u(@as(c_int, 0x00000200));
pub const UART_UARTMIS_BEMIS_MSB = _u(@as(c_int, 9));
pub const UART_UARTMIS_BEMIS_LSB = _u(@as(c_int, 9));
pub const UART_UARTMIS_BEMIS_ACCESS = "RO";
pub const UART_UARTMIS_PEMIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTMIS_PEMIS_BITS = _u(@as(c_int, 0x00000100));
pub const UART_UARTMIS_PEMIS_MSB = _u(@as(c_int, 8));
pub const UART_UARTMIS_PEMIS_LSB = _u(@as(c_int, 8));
pub const UART_UARTMIS_PEMIS_ACCESS = "RO";
pub const UART_UARTMIS_FEMIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTMIS_FEMIS_BITS = _u(@as(c_int, 0x00000080));
pub const UART_UARTMIS_FEMIS_MSB = _u(@as(c_int, 7));
pub const UART_UARTMIS_FEMIS_LSB = _u(@as(c_int, 7));
pub const UART_UARTMIS_FEMIS_ACCESS = "RO";
pub const UART_UARTMIS_RTMIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTMIS_RTMIS_BITS = _u(@as(c_int, 0x00000040));
pub const UART_UARTMIS_RTMIS_MSB = _u(@as(c_int, 6));
pub const UART_UARTMIS_RTMIS_LSB = _u(@as(c_int, 6));
pub const UART_UARTMIS_RTMIS_ACCESS = "RO";
pub const UART_UARTMIS_TXMIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTMIS_TXMIS_BITS = _u(@as(c_int, 0x00000020));
pub const UART_UARTMIS_TXMIS_MSB = _u(@as(c_int, 5));
pub const UART_UARTMIS_TXMIS_LSB = _u(@as(c_int, 5));
pub const UART_UARTMIS_TXMIS_ACCESS = "RO";
pub const UART_UARTMIS_RXMIS_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTMIS_RXMIS_BITS = _u(@as(c_int, 0x00000010));
pub const UART_UARTMIS_RXMIS_MSB = _u(@as(c_int, 4));
pub const UART_UARTMIS_RXMIS_LSB = _u(@as(c_int, 4));
pub const UART_UARTMIS_RXMIS_ACCESS = "RO";
pub const UART_UARTMIS_DSRMMIS_RESET = "-";
pub const UART_UARTMIS_DSRMMIS_BITS = _u(@as(c_int, 0x00000008));
pub const UART_UARTMIS_DSRMMIS_MSB = _u(@as(c_int, 3));
pub const UART_UARTMIS_DSRMMIS_LSB = _u(@as(c_int, 3));
pub const UART_UARTMIS_DSRMMIS_ACCESS = "RO";
pub const UART_UARTMIS_DCDMMIS_RESET = "-";
pub const UART_UARTMIS_DCDMMIS_BITS = _u(@as(c_int, 0x00000004));
pub const UART_UARTMIS_DCDMMIS_MSB = _u(@as(c_int, 2));
pub const UART_UARTMIS_DCDMMIS_LSB = _u(@as(c_int, 2));
pub const UART_UARTMIS_DCDMMIS_ACCESS = "RO";
pub const UART_UARTMIS_CTSMMIS_RESET = "-";
pub const UART_UARTMIS_CTSMMIS_BITS = _u(@as(c_int, 0x00000002));
pub const UART_UARTMIS_CTSMMIS_MSB = _u(@as(c_int, 1));
pub const UART_UARTMIS_CTSMMIS_LSB = _u(@as(c_int, 1));
pub const UART_UARTMIS_CTSMMIS_ACCESS = "RO";
pub const UART_UARTMIS_RIMMIS_RESET = "-";
pub const UART_UARTMIS_RIMMIS_BITS = _u(@as(c_int, 0x00000001));
pub const UART_UARTMIS_RIMMIS_MSB = _u(@as(c_int, 0));
pub const UART_UARTMIS_RIMMIS_LSB = _u(@as(c_int, 0));
pub const UART_UARTMIS_RIMMIS_ACCESS = "RO";
pub const UART_UARTICR_OFFSET = _u(@as(c_int, 0x00000044));
pub const UART_UARTICR_BITS = _u(@as(c_int, 0x000007ff));
pub const UART_UARTICR_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTICR_OEIC_RESET = "-";
pub const UART_UARTICR_OEIC_BITS = _u(@as(c_int, 0x00000400));
pub const UART_UARTICR_OEIC_MSB = _u(@as(c_int, 10));
pub const UART_UARTICR_OEIC_LSB = _u(@as(c_int, 10));
pub const UART_UARTICR_OEIC_ACCESS = "WC";
pub const UART_UARTICR_BEIC_RESET = "-";
pub const UART_UARTICR_BEIC_BITS = _u(@as(c_int, 0x00000200));
pub const UART_UARTICR_BEIC_MSB = _u(@as(c_int, 9));
pub const UART_UARTICR_BEIC_LSB = _u(@as(c_int, 9));
pub const UART_UARTICR_BEIC_ACCESS = "WC";
pub const UART_UARTICR_PEIC_RESET = "-";
pub const UART_UARTICR_PEIC_BITS = _u(@as(c_int, 0x00000100));
pub const UART_UARTICR_PEIC_MSB = _u(@as(c_int, 8));
pub const UART_UARTICR_PEIC_LSB = _u(@as(c_int, 8));
pub const UART_UARTICR_PEIC_ACCESS = "WC";
pub const UART_UARTICR_FEIC_RESET = "-";
pub const UART_UARTICR_FEIC_BITS = _u(@as(c_int, 0x00000080));
pub const UART_UARTICR_FEIC_MSB = _u(@as(c_int, 7));
pub const UART_UARTICR_FEIC_LSB = _u(@as(c_int, 7));
pub const UART_UARTICR_FEIC_ACCESS = "WC";
pub const UART_UARTICR_RTIC_RESET = "-";
pub const UART_UARTICR_RTIC_BITS = _u(@as(c_int, 0x00000040));
pub const UART_UARTICR_RTIC_MSB = _u(@as(c_int, 6));
pub const UART_UARTICR_RTIC_LSB = _u(@as(c_int, 6));
pub const UART_UARTICR_RTIC_ACCESS = "WC";
pub const UART_UARTICR_TXIC_RESET = "-";
pub const UART_UARTICR_TXIC_BITS = _u(@as(c_int, 0x00000020));
pub const UART_UARTICR_TXIC_MSB = _u(@as(c_int, 5));
pub const UART_UARTICR_TXIC_LSB = _u(@as(c_int, 5));
pub const UART_UARTICR_TXIC_ACCESS = "WC";
pub const UART_UARTICR_RXIC_RESET = "-";
pub const UART_UARTICR_RXIC_BITS = _u(@as(c_int, 0x00000010));
pub const UART_UARTICR_RXIC_MSB = _u(@as(c_int, 4));
pub const UART_UARTICR_RXIC_LSB = _u(@as(c_int, 4));
pub const UART_UARTICR_RXIC_ACCESS = "WC";
pub const UART_UARTICR_DSRMIC_RESET = "-";
pub const UART_UARTICR_DSRMIC_BITS = _u(@as(c_int, 0x00000008));
pub const UART_UARTICR_DSRMIC_MSB = _u(@as(c_int, 3));
pub const UART_UARTICR_DSRMIC_LSB = _u(@as(c_int, 3));
pub const UART_UARTICR_DSRMIC_ACCESS = "WC";
pub const UART_UARTICR_DCDMIC_RESET = "-";
pub const UART_UARTICR_DCDMIC_BITS = _u(@as(c_int, 0x00000004));
pub const UART_UARTICR_DCDMIC_MSB = _u(@as(c_int, 2));
pub const UART_UARTICR_DCDMIC_LSB = _u(@as(c_int, 2));
pub const UART_UARTICR_DCDMIC_ACCESS = "WC";
pub const UART_UARTICR_CTSMIC_RESET = "-";
pub const UART_UARTICR_CTSMIC_BITS = _u(@as(c_int, 0x00000002));
pub const UART_UARTICR_CTSMIC_MSB = _u(@as(c_int, 1));
pub const UART_UARTICR_CTSMIC_LSB = _u(@as(c_int, 1));
pub const UART_UARTICR_CTSMIC_ACCESS = "WC";
pub const UART_UARTICR_RIMIC_RESET = "-";
pub const UART_UARTICR_RIMIC_BITS = _u(@as(c_int, 0x00000001));
pub const UART_UARTICR_RIMIC_MSB = _u(@as(c_int, 0));
pub const UART_UARTICR_RIMIC_LSB = _u(@as(c_int, 0));
pub const UART_UARTICR_RIMIC_ACCESS = "WC";
pub const UART_UARTDMACR_OFFSET = _u(@as(c_int, 0x00000048));
pub const UART_UARTDMACR_BITS = _u(@as(c_int, 0x00000007));
pub const UART_UARTDMACR_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTDMACR_DMAONERR_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTDMACR_DMAONERR_BITS = _u(@as(c_int, 0x00000004));
pub const UART_UARTDMACR_DMAONERR_MSB = _u(@as(c_int, 2));
pub const UART_UARTDMACR_DMAONERR_LSB = _u(@as(c_int, 2));
pub const UART_UARTDMACR_DMAONERR_ACCESS = "RW";
pub const UART_UARTDMACR_TXDMAE_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTDMACR_TXDMAE_BITS = _u(@as(c_int, 0x00000002));
pub const UART_UARTDMACR_TXDMAE_MSB = _u(@as(c_int, 1));
pub const UART_UARTDMACR_TXDMAE_LSB = _u(@as(c_int, 1));
pub const UART_UARTDMACR_TXDMAE_ACCESS = "RW";
pub const UART_UARTDMACR_RXDMAE_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTDMACR_RXDMAE_BITS = _u(@as(c_int, 0x00000001));
pub const UART_UARTDMACR_RXDMAE_MSB = _u(@as(c_int, 0));
pub const UART_UARTDMACR_RXDMAE_LSB = _u(@as(c_int, 0));
pub const UART_UARTDMACR_RXDMAE_ACCESS = "RW";
pub const UART_UARTPERIPHID0_OFFSET = _u(@as(c_int, 0x00000fe0));
pub const UART_UARTPERIPHID0_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPERIPHID0_RESET = _u(@as(c_int, 0x00000011));
pub const UART_UARTPERIPHID0_PARTNUMBER0_RESET = _u(@as(c_int, 0x11));
pub const UART_UARTPERIPHID0_PARTNUMBER0_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPERIPHID0_PARTNUMBER0_MSB = _u(@as(c_int, 7));
pub const UART_UARTPERIPHID0_PARTNUMBER0_LSB = _u(@as(c_int, 0));
pub const UART_UARTPERIPHID0_PARTNUMBER0_ACCESS = "RO";
pub const UART_UARTPERIPHID1_OFFSET = _u(@as(c_int, 0x00000fe4));
pub const UART_UARTPERIPHID1_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPERIPHID1_RESET = _u(@as(c_int, 0x00000010));
pub const UART_UARTPERIPHID1_DESIGNER0_RESET = _u(@as(c_int, 0x1));
pub const UART_UARTPERIPHID1_DESIGNER0_BITS = _u(@as(c_int, 0x000000f0));
pub const UART_UARTPERIPHID1_DESIGNER0_MSB = _u(@as(c_int, 7));
pub const UART_UARTPERIPHID1_DESIGNER0_LSB = _u(@as(c_int, 4));
pub const UART_UARTPERIPHID1_DESIGNER0_ACCESS = "RO";
pub const UART_UARTPERIPHID1_PARTNUMBER1_RESET = _u(@as(c_int, 0x0));
pub const UART_UARTPERIPHID1_PARTNUMBER1_BITS = _u(@as(c_int, 0x0000000f));
pub const UART_UARTPERIPHID1_PARTNUMBER1_MSB = _u(@as(c_int, 3));
pub const UART_UARTPERIPHID1_PARTNUMBER1_LSB = _u(@as(c_int, 0));
pub const UART_UARTPERIPHID1_PARTNUMBER1_ACCESS = "RO";
pub const UART_UARTPERIPHID2_OFFSET = _u(@as(c_int, 0x00000fe8));
pub const UART_UARTPERIPHID2_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPERIPHID2_RESET = _u(@as(c_int, 0x00000034));
pub const UART_UARTPERIPHID2_REVISION_RESET = _u(@as(c_int, 0x3));
pub const UART_UARTPERIPHID2_REVISION_BITS = _u(@as(c_int, 0x000000f0));
pub const UART_UARTPERIPHID2_REVISION_MSB = _u(@as(c_int, 7));
pub const UART_UARTPERIPHID2_REVISION_LSB = _u(@as(c_int, 4));
pub const UART_UARTPERIPHID2_REVISION_ACCESS = "RO";
pub const UART_UARTPERIPHID2_DESIGNER1_RESET = _u(@as(c_int, 0x4));
pub const UART_UARTPERIPHID2_DESIGNER1_BITS = _u(@as(c_int, 0x0000000f));
pub const UART_UARTPERIPHID2_DESIGNER1_MSB = _u(@as(c_int, 3));
pub const UART_UARTPERIPHID2_DESIGNER1_LSB = _u(@as(c_int, 0));
pub const UART_UARTPERIPHID2_DESIGNER1_ACCESS = "RO";
pub const UART_UARTPERIPHID3_OFFSET = _u(@as(c_int, 0x00000fec));
pub const UART_UARTPERIPHID3_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPERIPHID3_RESET = _u(@as(c_int, 0x00000000));
pub const UART_UARTPERIPHID3_CONFIGURATION_RESET = _u(@as(c_int, 0x00));
pub const UART_UARTPERIPHID3_CONFIGURATION_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPERIPHID3_CONFIGURATION_MSB = _u(@as(c_int, 7));
pub const UART_UARTPERIPHID3_CONFIGURATION_LSB = _u(@as(c_int, 0));
pub const UART_UARTPERIPHID3_CONFIGURATION_ACCESS = "RO";
pub const UART_UARTPCELLID0_OFFSET = _u(@as(c_int, 0x00000ff0));
pub const UART_UARTPCELLID0_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPCELLID0_RESET = _u(@as(c_int, 0x0000000d));
pub const UART_UARTPCELLID0_UARTPCELLID0_RESET = _u(@as(c_int, 0x0d));
pub const UART_UARTPCELLID0_UARTPCELLID0_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPCELLID0_UARTPCELLID0_MSB = _u(@as(c_int, 7));
pub const UART_UARTPCELLID0_UARTPCELLID0_LSB = _u(@as(c_int, 0));
pub const UART_UARTPCELLID0_UARTPCELLID0_ACCESS = "RO";
pub const UART_UARTPCELLID1_OFFSET = _u(@as(c_int, 0x00000ff4));
pub const UART_UARTPCELLID1_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPCELLID1_RESET = _u(@as(c_int, 0x000000f0));
pub const UART_UARTPCELLID1_UARTPCELLID1_RESET = _u(@as(c_int, 0xf0));
pub const UART_UARTPCELLID1_UARTPCELLID1_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPCELLID1_UARTPCELLID1_MSB = _u(@as(c_int, 7));
pub const UART_UARTPCELLID1_UARTPCELLID1_LSB = _u(@as(c_int, 0));
pub const UART_UARTPCELLID1_UARTPCELLID1_ACCESS = "RO";
pub const UART_UARTPCELLID2_OFFSET = _u(@as(c_int, 0x00000ff8));
pub const UART_UARTPCELLID2_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPCELLID2_RESET = _u(@as(c_int, 0x00000005));
pub const UART_UARTPCELLID2_UARTPCELLID2_RESET = _u(@as(c_int, 0x05));
pub const UART_UARTPCELLID2_UARTPCELLID2_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPCELLID2_UARTPCELLID2_MSB = _u(@as(c_int, 7));
pub const UART_UARTPCELLID2_UARTPCELLID2_LSB = _u(@as(c_int, 0));
pub const UART_UARTPCELLID2_UARTPCELLID2_ACCESS = "RO";
pub const UART_UARTPCELLID3_OFFSET = _u(@as(c_int, 0x00000ffc));
pub const UART_UARTPCELLID3_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPCELLID3_RESET = _u(@as(c_int, 0x000000b1));
pub const UART_UARTPCELLID3_UARTPCELLID3_RESET = _u(@as(c_int, 0xb1));
pub const UART_UARTPCELLID3_UARTPCELLID3_BITS = _u(@as(c_int, 0x000000ff));
pub const UART_UARTPCELLID3_UARTPCELLID3_MSB = _u(@as(c_int, 7));
pub const UART_UARTPCELLID3_UARTPCELLID3_LSB = _u(@as(c_int, 0));
pub const UART_UARTPCELLID3_UARTPCELLID3_ACCESS = "RO";
pub const uart0_hw = @import("std").zig.c_translation.cast([*c]uart_hw_t, UART0_BASE);
pub const uart1_hw = @import("std").zig.c_translation.cast([*c]uart_hw_t, UART1_BASE);
pub const PARAM_ASSERTIONS_ENABLED_HARDWARE_UART = @as(c_int, 0);
pub const PICO_UART_ENABLE_CRLF_SUPPORT = @as(c_int, 1);
pub const PICO_UART_DEFAULT_CRLF = @as(c_int, 0);
pub const PICO_DEFAULT_UART_BAUD_RATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 115200, .decimal);
pub const uart0 = @import("std").zig.c_translation.cast([*c]uart_inst_t, uart0_hw);
pub const uart1 = @import("std").zig.c_translation.cast([*c]uart_inst_t, uart1_hw);
pub const PICO_DEFAULT_UART_INSTANCE = @compileError("unable to translate macro: undefined identifier `uart`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_uart/include/hardware/uart.h:98:9
pub const uart_default = PICO_DEFAULT_UART_INSTANCE();
pub inline fn UART_NUM(uart: anytype) @TypeOf(uart == uart1) {
    _ = &uart;
    return uart == uart1;
}
pub inline fn UART_INSTANCE(num: anytype) @TypeOf(if (num) uart1 else uart0) {
    _ = &num;
    return if (num) uart1 else uart0;
}
pub const _DREQ_H = "";
pub const UART_DREQ_NUM = @compileError("unable to translate C expr: unexpected token '{'");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_uart/include/hardware/uart.h:152:9
pub const UART_CLOCK_NUM = @compileError("unable to translate macro: undefined identifier `clk_peri`");
// /home/ianic/Code/pico/pico-sdk/src/rp2_common/hardware_uart/include/hardware/uart.h:166:9
pub inline fn UART_FUNCSEL_NUM(uart: anytype, gpio: anytype) @TypeOf(if (gpio & @as(c_int, 0x2)) GPIO_FUNC_UART_AUX else GPIO_FUNC_UART) {
    _ = &uart;
    _ = &gpio;
    return if (gpio & @as(c_int, 0x2)) GPIO_FUNC_UART_AUX else GPIO_FUNC_UART;
}
pub inline fn UART_IRQ_NUM(uart: anytype) @TypeOf(UART0_IRQ + UART_NUM(uart)) {
    _ = &uart;
    return UART0_IRQ + UART_NUM(uart);
}
pub const _HARDWARE_RESETS_H = "";
pub const _HARDWARE_STRUCTS_RESETS_H = "";
pub const _HARDWARE_REGS_RESETS_H = "";
pub const RESETS_RESET_OFFSET = _u(@as(c_int, 0x00000000));
pub const RESETS_RESET_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1fffffff, .hex));
pub const RESETS_RESET_RESET = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1fffffff, .hex));
pub const RESETS_RESET_USBCTRL_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_USBCTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const RESETS_RESET_USBCTRL_MSB = _u(@as(c_int, 28));
pub const RESETS_RESET_USBCTRL_LSB = _u(@as(c_int, 28));
pub const RESETS_RESET_USBCTRL_ACCESS = "RW";
pub const RESETS_RESET_UART1_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_UART1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const RESETS_RESET_UART1_MSB = _u(@as(c_int, 27));
pub const RESETS_RESET_UART1_LSB = _u(@as(c_int, 27));
pub const RESETS_RESET_UART1_ACCESS = "RW";
pub const RESETS_RESET_UART0_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_UART0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const RESETS_RESET_UART0_MSB = _u(@as(c_int, 26));
pub const RESETS_RESET_UART0_LSB = _u(@as(c_int, 26));
pub const RESETS_RESET_UART0_ACCESS = "RW";
pub const RESETS_RESET_TRNG_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_TRNG_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const RESETS_RESET_TRNG_MSB = _u(@as(c_int, 25));
pub const RESETS_RESET_TRNG_LSB = _u(@as(c_int, 25));
pub const RESETS_RESET_TRNG_ACCESS = "RW";
pub const RESETS_RESET_TIMER1_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_TIMER1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const RESETS_RESET_TIMER1_MSB = _u(@as(c_int, 24));
pub const RESETS_RESET_TIMER1_LSB = _u(@as(c_int, 24));
pub const RESETS_RESET_TIMER1_ACCESS = "RW";
pub const RESETS_RESET_TIMER0_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_TIMER0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const RESETS_RESET_TIMER0_MSB = _u(@as(c_int, 23));
pub const RESETS_RESET_TIMER0_LSB = _u(@as(c_int, 23));
pub const RESETS_RESET_TIMER0_ACCESS = "RW";
pub const RESETS_RESET_TBMAN_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_TBMAN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const RESETS_RESET_TBMAN_MSB = _u(@as(c_int, 22));
pub const RESETS_RESET_TBMAN_LSB = _u(@as(c_int, 22));
pub const RESETS_RESET_TBMAN_ACCESS = "RW";
pub const RESETS_RESET_SYSINFO_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_SYSINFO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const RESETS_RESET_SYSINFO_MSB = _u(@as(c_int, 21));
pub const RESETS_RESET_SYSINFO_LSB = _u(@as(c_int, 21));
pub const RESETS_RESET_SYSINFO_ACCESS = "RW";
pub const RESETS_RESET_SYSCFG_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_SYSCFG_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const RESETS_RESET_SYSCFG_MSB = _u(@as(c_int, 20));
pub const RESETS_RESET_SYSCFG_LSB = _u(@as(c_int, 20));
pub const RESETS_RESET_SYSCFG_ACCESS = "RW";
pub const RESETS_RESET_SPI1_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_SPI1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const RESETS_RESET_SPI1_MSB = _u(@as(c_int, 19));
pub const RESETS_RESET_SPI1_LSB = _u(@as(c_int, 19));
pub const RESETS_RESET_SPI1_ACCESS = "RW";
pub const RESETS_RESET_SPI0_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_SPI0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const RESETS_RESET_SPI0_MSB = _u(@as(c_int, 18));
pub const RESETS_RESET_SPI0_LSB = _u(@as(c_int, 18));
pub const RESETS_RESET_SPI0_ACCESS = "RW";
pub const RESETS_RESET_SHA256_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_SHA256_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const RESETS_RESET_SHA256_MSB = _u(@as(c_int, 17));
pub const RESETS_RESET_SHA256_LSB = _u(@as(c_int, 17));
pub const RESETS_RESET_SHA256_ACCESS = "RW";
pub const RESETS_RESET_PWM_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_PWM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const RESETS_RESET_PWM_MSB = _u(@as(c_int, 16));
pub const RESETS_RESET_PWM_LSB = _u(@as(c_int, 16));
pub const RESETS_RESET_PWM_ACCESS = "RW";
pub const RESETS_RESET_PLL_USB_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_PLL_USB_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const RESETS_RESET_PLL_USB_MSB = _u(@as(c_int, 15));
pub const RESETS_RESET_PLL_USB_LSB = _u(@as(c_int, 15));
pub const RESETS_RESET_PLL_USB_ACCESS = "RW";
pub const RESETS_RESET_PLL_SYS_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_PLL_SYS_BITS = _u(@as(c_int, 0x00004000));
pub const RESETS_RESET_PLL_SYS_MSB = _u(@as(c_int, 14));
pub const RESETS_RESET_PLL_SYS_LSB = _u(@as(c_int, 14));
pub const RESETS_RESET_PLL_SYS_ACCESS = "RW";
pub const RESETS_RESET_PIO2_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_PIO2_BITS = _u(@as(c_int, 0x00002000));
pub const RESETS_RESET_PIO2_MSB = _u(@as(c_int, 13));
pub const RESETS_RESET_PIO2_LSB = _u(@as(c_int, 13));
pub const RESETS_RESET_PIO2_ACCESS = "RW";
pub const RESETS_RESET_PIO1_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_PIO1_BITS = _u(@as(c_int, 0x00001000));
pub const RESETS_RESET_PIO1_MSB = _u(@as(c_int, 12));
pub const RESETS_RESET_PIO1_LSB = _u(@as(c_int, 12));
pub const RESETS_RESET_PIO1_ACCESS = "RW";
pub const RESETS_RESET_PIO0_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_PIO0_BITS = _u(@as(c_int, 0x00000800));
pub const RESETS_RESET_PIO0_MSB = _u(@as(c_int, 11));
pub const RESETS_RESET_PIO0_LSB = _u(@as(c_int, 11));
pub const RESETS_RESET_PIO0_ACCESS = "RW";
pub const RESETS_RESET_PADS_QSPI_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_PADS_QSPI_BITS = _u(@as(c_int, 0x00000400));
pub const RESETS_RESET_PADS_QSPI_MSB = _u(@as(c_int, 10));
pub const RESETS_RESET_PADS_QSPI_LSB = _u(@as(c_int, 10));
pub const RESETS_RESET_PADS_QSPI_ACCESS = "RW";
pub const RESETS_RESET_PADS_BANK0_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_PADS_BANK0_BITS = _u(@as(c_int, 0x00000200));
pub const RESETS_RESET_PADS_BANK0_MSB = _u(@as(c_int, 9));
pub const RESETS_RESET_PADS_BANK0_LSB = _u(@as(c_int, 9));
pub const RESETS_RESET_PADS_BANK0_ACCESS = "RW";
pub const RESETS_RESET_JTAG_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_JTAG_BITS = _u(@as(c_int, 0x00000100));
pub const RESETS_RESET_JTAG_MSB = _u(@as(c_int, 8));
pub const RESETS_RESET_JTAG_LSB = _u(@as(c_int, 8));
pub const RESETS_RESET_JTAG_ACCESS = "RW";
pub const RESETS_RESET_IO_QSPI_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_IO_QSPI_BITS = _u(@as(c_int, 0x00000080));
pub const RESETS_RESET_IO_QSPI_MSB = _u(@as(c_int, 7));
pub const RESETS_RESET_IO_QSPI_LSB = _u(@as(c_int, 7));
pub const RESETS_RESET_IO_QSPI_ACCESS = "RW";
pub const RESETS_RESET_IO_BANK0_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_IO_BANK0_BITS = _u(@as(c_int, 0x00000040));
pub const RESETS_RESET_IO_BANK0_MSB = _u(@as(c_int, 6));
pub const RESETS_RESET_IO_BANK0_LSB = _u(@as(c_int, 6));
pub const RESETS_RESET_IO_BANK0_ACCESS = "RW";
pub const RESETS_RESET_I2C1_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_I2C1_BITS = _u(@as(c_int, 0x00000020));
pub const RESETS_RESET_I2C1_MSB = _u(@as(c_int, 5));
pub const RESETS_RESET_I2C1_LSB = _u(@as(c_int, 5));
pub const RESETS_RESET_I2C1_ACCESS = "RW";
pub const RESETS_RESET_I2C0_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_I2C0_BITS = _u(@as(c_int, 0x00000010));
pub const RESETS_RESET_I2C0_MSB = _u(@as(c_int, 4));
pub const RESETS_RESET_I2C0_LSB = _u(@as(c_int, 4));
pub const RESETS_RESET_I2C0_ACCESS = "RW";
pub const RESETS_RESET_HSTX_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_HSTX_BITS = _u(@as(c_int, 0x00000008));
pub const RESETS_RESET_HSTX_MSB = _u(@as(c_int, 3));
pub const RESETS_RESET_HSTX_LSB = _u(@as(c_int, 3));
pub const RESETS_RESET_HSTX_ACCESS = "RW";
pub const RESETS_RESET_DMA_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_DMA_BITS = _u(@as(c_int, 0x00000004));
pub const RESETS_RESET_DMA_MSB = _u(@as(c_int, 2));
pub const RESETS_RESET_DMA_LSB = _u(@as(c_int, 2));
pub const RESETS_RESET_DMA_ACCESS = "RW";
pub const RESETS_RESET_BUSCTRL_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_BUSCTRL_BITS = _u(@as(c_int, 0x00000002));
pub const RESETS_RESET_BUSCTRL_MSB = _u(@as(c_int, 1));
pub const RESETS_RESET_BUSCTRL_LSB = _u(@as(c_int, 1));
pub const RESETS_RESET_BUSCTRL_ACCESS = "RW";
pub const RESETS_RESET_ADC_RESET = _u(@as(c_int, 0x1));
pub const RESETS_RESET_ADC_BITS = _u(@as(c_int, 0x00000001));
pub const RESETS_RESET_ADC_MSB = _u(@as(c_int, 0));
pub const RESETS_RESET_ADC_LSB = _u(@as(c_int, 0));
pub const RESETS_RESET_ADC_ACCESS = "RW";
pub const RESETS_WDSEL_OFFSET = _u(@as(c_int, 0x00000004));
pub const RESETS_WDSEL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1fffffff, .hex));
pub const RESETS_WDSEL_RESET = _u(@as(c_int, 0x00000000));
pub const RESETS_WDSEL_USBCTRL_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_USBCTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const RESETS_WDSEL_USBCTRL_MSB = _u(@as(c_int, 28));
pub const RESETS_WDSEL_USBCTRL_LSB = _u(@as(c_int, 28));
pub const RESETS_WDSEL_USBCTRL_ACCESS = "RW";
pub const RESETS_WDSEL_UART1_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_UART1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const RESETS_WDSEL_UART1_MSB = _u(@as(c_int, 27));
pub const RESETS_WDSEL_UART1_LSB = _u(@as(c_int, 27));
pub const RESETS_WDSEL_UART1_ACCESS = "RW";
pub const RESETS_WDSEL_UART0_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_UART0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const RESETS_WDSEL_UART0_MSB = _u(@as(c_int, 26));
pub const RESETS_WDSEL_UART0_LSB = _u(@as(c_int, 26));
pub const RESETS_WDSEL_UART0_ACCESS = "RW";
pub const RESETS_WDSEL_TRNG_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_TRNG_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const RESETS_WDSEL_TRNG_MSB = _u(@as(c_int, 25));
pub const RESETS_WDSEL_TRNG_LSB = _u(@as(c_int, 25));
pub const RESETS_WDSEL_TRNG_ACCESS = "RW";
pub const RESETS_WDSEL_TIMER1_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_TIMER1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const RESETS_WDSEL_TIMER1_MSB = _u(@as(c_int, 24));
pub const RESETS_WDSEL_TIMER1_LSB = _u(@as(c_int, 24));
pub const RESETS_WDSEL_TIMER1_ACCESS = "RW";
pub const RESETS_WDSEL_TIMER0_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_TIMER0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const RESETS_WDSEL_TIMER0_MSB = _u(@as(c_int, 23));
pub const RESETS_WDSEL_TIMER0_LSB = _u(@as(c_int, 23));
pub const RESETS_WDSEL_TIMER0_ACCESS = "RW";
pub const RESETS_WDSEL_TBMAN_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_TBMAN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const RESETS_WDSEL_TBMAN_MSB = _u(@as(c_int, 22));
pub const RESETS_WDSEL_TBMAN_LSB = _u(@as(c_int, 22));
pub const RESETS_WDSEL_TBMAN_ACCESS = "RW";
pub const RESETS_WDSEL_SYSINFO_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_SYSINFO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const RESETS_WDSEL_SYSINFO_MSB = _u(@as(c_int, 21));
pub const RESETS_WDSEL_SYSINFO_LSB = _u(@as(c_int, 21));
pub const RESETS_WDSEL_SYSINFO_ACCESS = "RW";
pub const RESETS_WDSEL_SYSCFG_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_SYSCFG_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const RESETS_WDSEL_SYSCFG_MSB = _u(@as(c_int, 20));
pub const RESETS_WDSEL_SYSCFG_LSB = _u(@as(c_int, 20));
pub const RESETS_WDSEL_SYSCFG_ACCESS = "RW";
pub const RESETS_WDSEL_SPI1_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_SPI1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const RESETS_WDSEL_SPI1_MSB = _u(@as(c_int, 19));
pub const RESETS_WDSEL_SPI1_LSB = _u(@as(c_int, 19));
pub const RESETS_WDSEL_SPI1_ACCESS = "RW";
pub const RESETS_WDSEL_SPI0_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_SPI0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const RESETS_WDSEL_SPI0_MSB = _u(@as(c_int, 18));
pub const RESETS_WDSEL_SPI0_LSB = _u(@as(c_int, 18));
pub const RESETS_WDSEL_SPI0_ACCESS = "RW";
pub const RESETS_WDSEL_SHA256_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_SHA256_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const RESETS_WDSEL_SHA256_MSB = _u(@as(c_int, 17));
pub const RESETS_WDSEL_SHA256_LSB = _u(@as(c_int, 17));
pub const RESETS_WDSEL_SHA256_ACCESS = "RW";
pub const RESETS_WDSEL_PWM_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_PWM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const RESETS_WDSEL_PWM_MSB = _u(@as(c_int, 16));
pub const RESETS_WDSEL_PWM_LSB = _u(@as(c_int, 16));
pub const RESETS_WDSEL_PWM_ACCESS = "RW";
pub const RESETS_WDSEL_PLL_USB_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_PLL_USB_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const RESETS_WDSEL_PLL_USB_MSB = _u(@as(c_int, 15));
pub const RESETS_WDSEL_PLL_USB_LSB = _u(@as(c_int, 15));
pub const RESETS_WDSEL_PLL_USB_ACCESS = "RW";
pub const RESETS_WDSEL_PLL_SYS_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_PLL_SYS_BITS = _u(@as(c_int, 0x00004000));
pub const RESETS_WDSEL_PLL_SYS_MSB = _u(@as(c_int, 14));
pub const RESETS_WDSEL_PLL_SYS_LSB = _u(@as(c_int, 14));
pub const RESETS_WDSEL_PLL_SYS_ACCESS = "RW";
pub const RESETS_WDSEL_PIO2_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_PIO2_BITS = _u(@as(c_int, 0x00002000));
pub const RESETS_WDSEL_PIO2_MSB = _u(@as(c_int, 13));
pub const RESETS_WDSEL_PIO2_LSB = _u(@as(c_int, 13));
pub const RESETS_WDSEL_PIO2_ACCESS = "RW";
pub const RESETS_WDSEL_PIO1_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_PIO1_BITS = _u(@as(c_int, 0x00001000));
pub const RESETS_WDSEL_PIO1_MSB = _u(@as(c_int, 12));
pub const RESETS_WDSEL_PIO1_LSB = _u(@as(c_int, 12));
pub const RESETS_WDSEL_PIO1_ACCESS = "RW";
pub const RESETS_WDSEL_PIO0_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_PIO0_BITS = _u(@as(c_int, 0x00000800));
pub const RESETS_WDSEL_PIO0_MSB = _u(@as(c_int, 11));
pub const RESETS_WDSEL_PIO0_LSB = _u(@as(c_int, 11));
pub const RESETS_WDSEL_PIO0_ACCESS = "RW";
pub const RESETS_WDSEL_PADS_QSPI_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_PADS_QSPI_BITS = _u(@as(c_int, 0x00000400));
pub const RESETS_WDSEL_PADS_QSPI_MSB = _u(@as(c_int, 10));
pub const RESETS_WDSEL_PADS_QSPI_LSB = _u(@as(c_int, 10));
pub const RESETS_WDSEL_PADS_QSPI_ACCESS = "RW";
pub const RESETS_WDSEL_PADS_BANK0_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_PADS_BANK0_BITS = _u(@as(c_int, 0x00000200));
pub const RESETS_WDSEL_PADS_BANK0_MSB = _u(@as(c_int, 9));
pub const RESETS_WDSEL_PADS_BANK0_LSB = _u(@as(c_int, 9));
pub const RESETS_WDSEL_PADS_BANK0_ACCESS = "RW";
pub const RESETS_WDSEL_JTAG_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_JTAG_BITS = _u(@as(c_int, 0x00000100));
pub const RESETS_WDSEL_JTAG_MSB = _u(@as(c_int, 8));
pub const RESETS_WDSEL_JTAG_LSB = _u(@as(c_int, 8));
pub const RESETS_WDSEL_JTAG_ACCESS = "RW";
pub const RESETS_WDSEL_IO_QSPI_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_IO_QSPI_BITS = _u(@as(c_int, 0x00000080));
pub const RESETS_WDSEL_IO_QSPI_MSB = _u(@as(c_int, 7));
pub const RESETS_WDSEL_IO_QSPI_LSB = _u(@as(c_int, 7));
pub const RESETS_WDSEL_IO_QSPI_ACCESS = "RW";
pub const RESETS_WDSEL_IO_BANK0_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_IO_BANK0_BITS = _u(@as(c_int, 0x00000040));
pub const RESETS_WDSEL_IO_BANK0_MSB = _u(@as(c_int, 6));
pub const RESETS_WDSEL_IO_BANK0_LSB = _u(@as(c_int, 6));
pub const RESETS_WDSEL_IO_BANK0_ACCESS = "RW";
pub const RESETS_WDSEL_I2C1_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_I2C1_BITS = _u(@as(c_int, 0x00000020));
pub const RESETS_WDSEL_I2C1_MSB = _u(@as(c_int, 5));
pub const RESETS_WDSEL_I2C1_LSB = _u(@as(c_int, 5));
pub const RESETS_WDSEL_I2C1_ACCESS = "RW";
pub const RESETS_WDSEL_I2C0_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_I2C0_BITS = _u(@as(c_int, 0x00000010));
pub const RESETS_WDSEL_I2C0_MSB = _u(@as(c_int, 4));
pub const RESETS_WDSEL_I2C0_LSB = _u(@as(c_int, 4));
pub const RESETS_WDSEL_I2C0_ACCESS = "RW";
pub const RESETS_WDSEL_HSTX_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_HSTX_BITS = _u(@as(c_int, 0x00000008));
pub const RESETS_WDSEL_HSTX_MSB = _u(@as(c_int, 3));
pub const RESETS_WDSEL_HSTX_LSB = _u(@as(c_int, 3));
pub const RESETS_WDSEL_HSTX_ACCESS = "RW";
pub const RESETS_WDSEL_DMA_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_DMA_BITS = _u(@as(c_int, 0x00000004));
pub const RESETS_WDSEL_DMA_MSB = _u(@as(c_int, 2));
pub const RESETS_WDSEL_DMA_LSB = _u(@as(c_int, 2));
pub const RESETS_WDSEL_DMA_ACCESS = "RW";
pub const RESETS_WDSEL_BUSCTRL_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_BUSCTRL_BITS = _u(@as(c_int, 0x00000002));
pub const RESETS_WDSEL_BUSCTRL_MSB = _u(@as(c_int, 1));
pub const RESETS_WDSEL_BUSCTRL_LSB = _u(@as(c_int, 1));
pub const RESETS_WDSEL_BUSCTRL_ACCESS = "RW";
pub const RESETS_WDSEL_ADC_RESET = _u(@as(c_int, 0x0));
pub const RESETS_WDSEL_ADC_BITS = _u(@as(c_int, 0x00000001));
pub const RESETS_WDSEL_ADC_MSB = _u(@as(c_int, 0));
pub const RESETS_WDSEL_ADC_LSB = _u(@as(c_int, 0));
pub const RESETS_WDSEL_ADC_ACCESS = "RW";
pub const RESETS_RESET_DONE_OFFSET = _u(@as(c_int, 0x00000008));
pub const RESETS_RESET_DONE_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1fffffff, .hex));
pub const RESETS_RESET_DONE_RESET = _u(@as(c_int, 0x00000000));
pub const RESETS_RESET_DONE_USBCTRL_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_USBCTRL_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex));
pub const RESETS_RESET_DONE_USBCTRL_MSB = _u(@as(c_int, 28));
pub const RESETS_RESET_DONE_USBCTRL_LSB = _u(@as(c_int, 28));
pub const RESETS_RESET_DONE_USBCTRL_ACCESS = "RO";
pub const RESETS_RESET_DONE_UART1_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_UART1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex));
pub const RESETS_RESET_DONE_UART1_MSB = _u(@as(c_int, 27));
pub const RESETS_RESET_DONE_UART1_LSB = _u(@as(c_int, 27));
pub const RESETS_RESET_DONE_UART1_ACCESS = "RO";
pub const RESETS_RESET_DONE_UART0_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_UART0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex));
pub const RESETS_RESET_DONE_UART0_MSB = _u(@as(c_int, 26));
pub const RESETS_RESET_DONE_UART0_LSB = _u(@as(c_int, 26));
pub const RESETS_RESET_DONE_UART0_ACCESS = "RO";
pub const RESETS_RESET_DONE_TRNG_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_TRNG_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex));
pub const RESETS_RESET_DONE_TRNG_MSB = _u(@as(c_int, 25));
pub const RESETS_RESET_DONE_TRNG_LSB = _u(@as(c_int, 25));
pub const RESETS_RESET_DONE_TRNG_ACCESS = "RO";
pub const RESETS_RESET_DONE_TIMER1_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_TIMER1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex));
pub const RESETS_RESET_DONE_TIMER1_MSB = _u(@as(c_int, 24));
pub const RESETS_RESET_DONE_TIMER1_LSB = _u(@as(c_int, 24));
pub const RESETS_RESET_DONE_TIMER1_ACCESS = "RO";
pub const RESETS_RESET_DONE_TIMER0_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_TIMER0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex));
pub const RESETS_RESET_DONE_TIMER0_MSB = _u(@as(c_int, 23));
pub const RESETS_RESET_DONE_TIMER0_LSB = _u(@as(c_int, 23));
pub const RESETS_RESET_DONE_TIMER0_ACCESS = "RO";
pub const RESETS_RESET_DONE_TBMAN_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_TBMAN_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex));
pub const RESETS_RESET_DONE_TBMAN_MSB = _u(@as(c_int, 22));
pub const RESETS_RESET_DONE_TBMAN_LSB = _u(@as(c_int, 22));
pub const RESETS_RESET_DONE_TBMAN_ACCESS = "RO";
pub const RESETS_RESET_DONE_SYSINFO_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_SYSINFO_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex));
pub const RESETS_RESET_DONE_SYSINFO_MSB = _u(@as(c_int, 21));
pub const RESETS_RESET_DONE_SYSINFO_LSB = _u(@as(c_int, 21));
pub const RESETS_RESET_DONE_SYSINFO_ACCESS = "RO";
pub const RESETS_RESET_DONE_SYSCFG_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_SYSCFG_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex));
pub const RESETS_RESET_DONE_SYSCFG_MSB = _u(@as(c_int, 20));
pub const RESETS_RESET_DONE_SYSCFG_LSB = _u(@as(c_int, 20));
pub const RESETS_RESET_DONE_SYSCFG_ACCESS = "RO";
pub const RESETS_RESET_DONE_SPI1_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_SPI1_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex));
pub const RESETS_RESET_DONE_SPI1_MSB = _u(@as(c_int, 19));
pub const RESETS_RESET_DONE_SPI1_LSB = _u(@as(c_int, 19));
pub const RESETS_RESET_DONE_SPI1_ACCESS = "RO";
pub const RESETS_RESET_DONE_SPI0_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_SPI0_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex));
pub const RESETS_RESET_DONE_SPI0_MSB = _u(@as(c_int, 18));
pub const RESETS_RESET_DONE_SPI0_LSB = _u(@as(c_int, 18));
pub const RESETS_RESET_DONE_SPI0_ACCESS = "RO";
pub const RESETS_RESET_DONE_SHA256_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_SHA256_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex));
pub const RESETS_RESET_DONE_SHA256_MSB = _u(@as(c_int, 17));
pub const RESETS_RESET_DONE_SHA256_LSB = _u(@as(c_int, 17));
pub const RESETS_RESET_DONE_SHA256_ACCESS = "RO";
pub const RESETS_RESET_DONE_PWM_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_PWM_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex));
pub const RESETS_RESET_DONE_PWM_MSB = _u(@as(c_int, 16));
pub const RESETS_RESET_DONE_PWM_LSB = _u(@as(c_int, 16));
pub const RESETS_RESET_DONE_PWM_ACCESS = "RO";
pub const RESETS_RESET_DONE_PLL_USB_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_PLL_USB_BITS = _u(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex));
pub const RESETS_RESET_DONE_PLL_USB_MSB = _u(@as(c_int, 15));
pub const RESETS_RESET_DONE_PLL_USB_LSB = _u(@as(c_int, 15));
pub const RESETS_RESET_DONE_PLL_USB_ACCESS = "RO";
pub const RESETS_RESET_DONE_PLL_SYS_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_PLL_SYS_BITS = _u(@as(c_int, 0x00004000));
pub const RESETS_RESET_DONE_PLL_SYS_MSB = _u(@as(c_int, 14));
pub const RESETS_RESET_DONE_PLL_SYS_LSB = _u(@as(c_int, 14));
pub const RESETS_RESET_DONE_PLL_SYS_ACCESS = "RO";
pub const RESETS_RESET_DONE_PIO2_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_PIO2_BITS = _u(@as(c_int, 0x00002000));
pub const RESETS_RESET_DONE_PIO2_MSB = _u(@as(c_int, 13));
pub const RESETS_RESET_DONE_PIO2_LSB = _u(@as(c_int, 13));
pub const RESETS_RESET_DONE_PIO2_ACCESS = "RO";
pub const RESETS_RESET_DONE_PIO1_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_PIO1_BITS = _u(@as(c_int, 0x00001000));
pub const RESETS_RESET_DONE_PIO1_MSB = _u(@as(c_int, 12));
pub const RESETS_RESET_DONE_PIO1_LSB = _u(@as(c_int, 12));
pub const RESETS_RESET_DONE_PIO1_ACCESS = "RO";
pub const RESETS_RESET_DONE_PIO0_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_PIO0_BITS = _u(@as(c_int, 0x00000800));
pub const RESETS_RESET_DONE_PIO0_MSB = _u(@as(c_int, 11));
pub const RESETS_RESET_DONE_PIO0_LSB = _u(@as(c_int, 11));
pub const RESETS_RESET_DONE_PIO0_ACCESS = "RO";
pub const RESETS_RESET_DONE_PADS_QSPI_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_PADS_QSPI_BITS = _u(@as(c_int, 0x00000400));
pub const RESETS_RESET_DONE_PADS_QSPI_MSB = _u(@as(c_int, 10));
pub const RESETS_RESET_DONE_PADS_QSPI_LSB = _u(@as(c_int, 10));
pub const RESETS_RESET_DONE_PADS_QSPI_ACCESS = "RO";
pub const RESETS_RESET_DONE_PADS_BANK0_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_PADS_BANK0_BITS = _u(@as(c_int, 0x00000200));
pub const RESETS_RESET_DONE_PADS_BANK0_MSB = _u(@as(c_int, 9));
pub const RESETS_RESET_DONE_PADS_BANK0_LSB = _u(@as(c_int, 9));
pub const RESETS_RESET_DONE_PADS_BANK0_ACCESS = "RO";
pub const RESETS_RESET_DONE_JTAG_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_JTAG_BITS = _u(@as(c_int, 0x00000100));
pub const RESETS_RESET_DONE_JTAG_MSB = _u(@as(c_int, 8));
pub const RESETS_RESET_DONE_JTAG_LSB = _u(@as(c_int, 8));
pub const RESETS_RESET_DONE_JTAG_ACCESS = "RO";
pub const RESETS_RESET_DONE_IO_QSPI_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_IO_QSPI_BITS = _u(@as(c_int, 0x00000080));
pub const RESETS_RESET_DONE_IO_QSPI_MSB = _u(@as(c_int, 7));
pub const RESETS_RESET_DONE_IO_QSPI_LSB = _u(@as(c_int, 7));
pub const RESETS_RESET_DONE_IO_QSPI_ACCESS = "RO";
pub const RESETS_RESET_DONE_IO_BANK0_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_IO_BANK0_BITS = _u(@as(c_int, 0x00000040));
pub const RESETS_RESET_DONE_IO_BANK0_MSB = _u(@as(c_int, 6));
pub const RESETS_RESET_DONE_IO_BANK0_LSB = _u(@as(c_int, 6));
pub const RESETS_RESET_DONE_IO_BANK0_ACCESS = "RO";
pub const RESETS_RESET_DONE_I2C1_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_I2C1_BITS = _u(@as(c_int, 0x00000020));
pub const RESETS_RESET_DONE_I2C1_MSB = _u(@as(c_int, 5));
pub const RESETS_RESET_DONE_I2C1_LSB = _u(@as(c_int, 5));
pub const RESETS_RESET_DONE_I2C1_ACCESS = "RO";
pub const RESETS_RESET_DONE_I2C0_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_I2C0_BITS = _u(@as(c_int, 0x00000010));
pub const RESETS_RESET_DONE_I2C0_MSB = _u(@as(c_int, 4));
pub const RESETS_RESET_DONE_I2C0_LSB = _u(@as(c_int, 4));
pub const RESETS_RESET_DONE_I2C0_ACCESS = "RO";
pub const RESETS_RESET_DONE_HSTX_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_HSTX_BITS = _u(@as(c_int, 0x00000008));
pub const RESETS_RESET_DONE_HSTX_MSB = _u(@as(c_int, 3));
pub const RESETS_RESET_DONE_HSTX_LSB = _u(@as(c_int, 3));
pub const RESETS_RESET_DONE_HSTX_ACCESS = "RO";
pub const RESETS_RESET_DONE_DMA_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_DMA_BITS = _u(@as(c_int, 0x00000004));
pub const RESETS_RESET_DONE_DMA_MSB = _u(@as(c_int, 2));
pub const RESETS_RESET_DONE_DMA_LSB = _u(@as(c_int, 2));
pub const RESETS_RESET_DONE_DMA_ACCESS = "RO";
pub const RESETS_RESET_DONE_BUSCTRL_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_BUSCTRL_BITS = _u(@as(c_int, 0x00000002));
pub const RESETS_RESET_DONE_BUSCTRL_MSB = _u(@as(c_int, 1));
pub const RESETS_RESET_DONE_BUSCTRL_LSB = _u(@as(c_int, 1));
pub const RESETS_RESET_DONE_BUSCTRL_ACCESS = "RO";
pub const RESETS_RESET_DONE_ADC_RESET = _u(@as(c_int, 0x0));
pub const RESETS_RESET_DONE_ADC_BITS = _u(@as(c_int, 0x00000001));
pub const RESETS_RESET_DONE_ADC_MSB = _u(@as(c_int, 0));
pub const RESETS_RESET_DONE_ADC_LSB = _u(@as(c_int, 0));
pub const RESETS_RESET_DONE_ADC_ACCESS = "RO";
pub const resets_hw = @import("std").zig.c_translation.cast([*c]resets_hw_t, RESETS_BASE);
pub const PARAM_ASSERTIONS_ENABLED_HARDWARE_RESETS = @as(c_int, 0);
pub const HARDWARE_RESETS_ENABLE_SDK1XX_COMPATIBILITY = @as(c_int, 1);
pub inline fn UART_RESET_NUM(uart: anytype) @TypeOf(if (uart_get_index(uart)) RESET_UART1 else RESET_UART0) {
    _ = &uart;
    return if (uart_get_index(uart)) RESET_UART1 else RESET_UART0;
}
pub const _PICO_STDIO_USB_H = "";
pub const PICO_STDIO_USB_DEFAULT_CRLF = PICO_STDIO_DEFAULT_CRLF;
pub const PICO_STDIO_USB_STDOUT_TIMEOUT_US = @import("std").zig.c_translation.promoteIntLiteral(c_int, 500000, .decimal);
pub const PICO_STDIO_USB_TASK_INTERVAL_US = @as(c_int, 1000);
pub const PICO_STDIO_USB_ENABLE_IRQ_BACKGROUND_TASK = @as(c_int, 1);
pub const PICO_STDIO_USB_ENABLE_TINYUSB_INIT = @as(c_int, 1);
pub const PICO_STDIO_USB_ENABLE_RESET_VIA_BAUD_RATE = @as(c_int, 1);
pub const PICO_STDIO_USB_RESET_MAGIC_BAUD_RATE = @as(c_int, 1200);
pub const PICO_STDIO_USB_CONNECT_WAIT_TIMEOUT_MS = @as(c_int, 0);
pub const PICO_STDIO_USB_POST_CONNECT_WAIT_DELAY_MS = @as(c_int, 50);
pub const PICO_STDIO_USB_DEINIT_DELAY_MS = @as(c_int, 110);
pub const PICO_STDIO_USB_RESET_BOOTSEL_ACTIVITY_LED_ACTIVE_LOW = @as(c_int, 0);
pub const PICO_STDIO_USB_RESET_BOOTSEL_FIXED_ACTIVITY_LED = @as(c_int, 0);
pub const PICO_STDIO_USB_RESET_BOOTSEL_INTERFACE_DISABLE_MASK = @as(c_uint, 0);
pub const PICO_STDIO_USB_ENABLE_RESET_VIA_VENDOR_INTERFACE = @as(c_int, 1);
pub const PICO_STDIO_USB_RESET_INTERFACE_SUPPORT_RESET_TO_BOOTSEL = @as(c_int, 1);
pub const PICO_STDIO_USB_RESET_INTERFACE_SUPPORT_RESET_TO_FLASH_BOOT = @as(c_int, 1);
pub const PICO_STDIO_USB_RESET_INTERFACE_SUPPORT_MS_OS_20_DESCRIPTOR = @as(c_int, 1);
pub const PICO_STDIO_USB_RESET_RESET_TO_FLASH_DELAY_MS = @as(c_int, 100);
pub const PICO_STDIO_USB_USE_DEFAULT_DESCRIPTORS = @as(c_int, 1);
pub const PICO_STDIO_USB_CONNECTION_WITHOUT_DTR = @as(c_int, 0);
pub const PICO_STDIO_USB_DEVICE_SELF_POWERED = @as(c_int, 0);
pub const PICO_STDIO_USB_SUPPORT_CHARS_AVAILABLE_CALLBACK = @as(c_int, 1);
pub const PICO_DEFAULT_LED_PIN_INVERTED = @as(c_int, 0);
pub const pico_error_codes = enum_pico_error_codes;
pub const gpio_function_rp2350 = enum_gpio_function_rp2350;
pub const irq_num_rp2350 = enum_irq_num_rp2350;
pub const gpio_dir = enum_gpio_dir;
pub const gpio_irq_level = enum_gpio_irq_level;
pub const gpio_override = enum_gpio_override;
pub const gpio_slew_rate = enum_gpio_slew_rate;
pub const gpio_drive_strength = enum_gpio_drive_strength;
pub const alarm_pool = struct_alarm_pool;
pub const repeating_timer = struct_repeating_timer;
pub const __lock = struct___lock;
pub const __sbuf = struct___sbuf;
pub const __sFILE = struct___sFILE;
pub const __locale_t = struct___locale_t;
pub const _Bigint = struct__Bigint;
pub const __tm = struct___tm;
pub const _rand48 = struct__rand48;
pub const _reent = struct__reent;
pub const _on_exit_args = struct__on_exit_args;
pub const _atexit = struct__atexit;
pub const _glue = struct__glue;
pub const timeval = struct_timeval;
pub const timespec = struct_timespec;
pub const itimerspec = struct_itimerspec;
pub const sched_param = struct_sched_param;
pub const timezone = struct_timezone;
pub const bintime = struct_bintime;
pub const itimerval = struct_itimerval;
pub const tm = struct_tm;
pub const rng_128 = struct_rng_128;
pub const ip4_addr = struct_ip4_addr;
pub const pbuf = struct_pbuf;
pub const netif = struct_netif;
pub const lwip_ip_addr_type = enum_lwip_ip_addr_type;
pub const pbuf_rom = struct_pbuf_rom;
pub const memp = struct_memp;
pub const memp_desc = struct_memp_desc;
pub const stats_proto = struct_stats_proto;
pub const stats_igmp = struct_stats_igmp;
pub const stats_mem = struct_stats_mem;
pub const stats_syselem = struct_stats_syselem;
pub const stats_sys = struct_stats_sys;
pub const stats_mib2 = struct_stats_mib2;
pub const stats_mib2_netif_ctrs = struct_stats_mib2_netif_ctrs;
pub const stats_ = struct_stats_;
pub const lwip_internal_netif_client_data_index = enum_lwip_internal_netif_client_data_index;
pub const netif_mac_filter_action = enum_netif_mac_filter_action;
pub const ip4_addr_packed = struct_ip4_addr_packed;
pub const ip_hdr = struct_ip_hdr;
pub const ip_pcb = struct_ip_pcb;
pub const ip_globals = struct_ip_globals;
pub const udp_hdr = struct_udp_hdr;
pub const udp_pcb = struct_udp_pcb;
pub const dhcp = struct_dhcp;
pub const _cyw43_ev_scan_result_t = struct__cyw43_ev_scan_result_t;
pub const _cyw43_async_event_t = struct__cyw43_async_event_t;
pub const _cyw43_wifi_scan_options_t = struct__cyw43_wifi_scan_options_t;
pub const _cyw43_ll_t = struct__cyw43_ll_t;
pub const _cyw43_t = struct__cyw43_t;
pub const async_work_on_timeout = struct_async_work_on_timeout;
pub const async_when_pending_worker = struct_async_when_pending_worker;
pub const async_context_type = struct_async_context_type;
pub const async_context = struct_async_context;
pub const stdio_driver = struct_stdio_driver;
pub const uart_inst = struct_uart_inst;
pub const dreq_num_rp2350 = enum_dreq_num_rp2350;
pub const reset_num_rp2350 = enum_reset_num_rp2350;
